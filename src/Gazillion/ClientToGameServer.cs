// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ClientToGameServer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForGameJoin, global::Gazillion.NetMessageReadyForGameJoin.Builder> internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSystemMetrics, global::Gazillion.NetMessagePlayerSystemMetrics.Builder> internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerSteamInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSteamInfo, global::Gazillion.NetMessagePlayerSteamInfo.Builder> internal__static_Gazillion_NetMessagePlayerSteamInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeRequest, global::Gazillion.NetMessageSyncTimeRequest.Builder> internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimeDialation, global::Gazillion.NetMessageSetTimeDialation.Builder> internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageIsRegionAvailable, global::Gazillion.NetMessageIsRegionAvailable.Builder> internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateAvatarState, global::Gazillion.NetMessageUpdateAvatarState.Builder> internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellLoaded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellLoaded, global::Gazillion.NetMessageCellLoaded.Builder> internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckResponse, global::Gazillion.NetMessageTeleportAckResponse.Builder> internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAdminCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommand, global::Gazillion.NetMessageAdminCommand.Builder> internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryActivatePower, global::Gazillion.NetMessageTryActivatePower.Builder> internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerRelease, global::Gazillion.NetMessagePowerRelease.Builder> internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCancelPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelPower, global::Gazillion.NetMessageTryCancelPower.Builder> internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelActivePower, global::Gazillion.NetMessageTryCancelActivePower.Builder> internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToServer, global::Gazillion.NetMessageContinuousPowerUpdateToServer.Builder> internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingAction, global::Gazillion.NetMessageCancelPendingAction.Builder> internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIDebugUI, global::Gazillion.NetMessageStartAIDebugUI.Builder> internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIDebugUI, global::Gazillion.NetMessageStopAIDebugUI.Builder> internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartAIPerformanceUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIPerformanceUI, global::Gazillion.NetMessageStartAIPerformanceUI.Builder> internal__static_Gazillion_NetMessageStartAIPerformanceUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopAIPerformanceUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIPerformanceUI, global::Gazillion.NetMessageStopAIPerformanceUI.Builder> internal__static_Gazillion_NetMessageStopAIPerformanceUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartMissionDebugUI, global::Gazillion.NetMessageStartMissionDebugUI.Builder> internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopMissionDebugUI, global::Gazillion.NetMessageStopMissionDebugUI.Builder> internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPropertiesDebugUI, global::Gazillion.NetMessageStartPropertiesDebugUI.Builder> internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPropertiesDebugUI, global::Gazillion.NetMessageStopPropertiesDebugUI.Builder> internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartConditionsDebugUI, global::Gazillion.NetMessageStartConditionsDebugUI.Builder> internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopConditionsDebugUI, global::Gazillion.NetMessageStopConditionsDebugUI.Builder> internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPowersDebugUI, global::Gazillion.NetMessageStartPowersDebugUI.Builder> internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPowersDebugUI, global::Gazillion.NetMessageStopPowersDebugUI.Builder> internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructMessageStoreMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMessageStoreMetric, global::Gazillion.NetStructMessageStoreMetric.Builder> internal__static_Gazillion_NetStructMessageStoreMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePing__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePing, global::Gazillion.NetMessagePing.Builder> internal__static_Gazillion_NetMessagePing__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFPS__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFPS, global::Gazillion.NetMessageFPS.Builder> internal__static_Gazillion_NetMessageFPS__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePickupInteraction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePickupInteraction, global::Gazillion.NetMessagePickupInteraction.Builder> internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryInventoryMove, global::Gazillion.NetMessageTryInventoryMove.Builder> internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral, global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Builder> internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryTrashItem, global::Gazillion.NetMessageInventoryTrashItem.Builder> internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageThrowInteraction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageThrowInteraction, global::Gazillion.NetMessageThrowInteraction.Builder> internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePerformPreInteractPower, global::Gazillion.NetMessagePerformPreInteractPower.Builder> internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseInteractableObject, global::Gazillion.NetMessageUseInteractableObject.Builder> internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryCraft__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCraft, global::Gazillion.NetMessageTryCraft.Builder> internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUseWaypoint__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseWaypoint, global::Gazillion.NetMessageUseWaypoint.Builder> internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar, global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Builder> internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchAvatar, global::Gazillion.NetMessageSwitchAvatar.Builder> internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectPublicEventTeam__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectPublicEventTeam, global::Gazillion.NetMessageSelectPublicEventTeam.Builder> internal__static_Gazillion_NetMessageSelectPublicEventTeam__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignHotkey__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkey, global::Gazillion.NetMessageAssignHotkey.Builder> internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkey, global::Gazillion.NetMessageUnassignHotkey.Builder> internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectAbilityKeyMapping, global::Gazillion.NetMessageSelectAbilityKeyMapping.Builder> internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySlotToAbilityBar, global::Gazillion.NetMessageAbilitySlotToAbilityBar.Builder> internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnslotFromAbilityBar, global::Gazillion.NetMessageAbilityUnslotFromAbilityBar.Builder> internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwapInAbilityBar, global::Gazillion.NetMessageAbilitySwapInAbilityBar.Builder> internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModCommitTemporary, global::Gazillion.NetMessageModCommitTemporary.Builder> internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModReset__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModReset, global::Gazillion.NetMessageModReset.Builder> internal__static_Gazillion_NetMessageModReset__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerPointAllocationCommit, global::Gazillion.NetMessagePowerPointAllocationCommit.Builder> internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestDeathRelease, global::Gazillion.NetMessageRequestDeathRelease.Builder> internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectDecline, global::Gazillion.NetMessageRequestResurrectDecline.Builder> internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectAvatar, global::Gazillion.NetMessageRequestResurrectAvatar.Builder> internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReturnToHub__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReturnToHub, global::Gazillion.NetMessageReturnToHub.Builder> internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStoryWarp, global::Gazillion.NetMessageRequestStoryWarp.Builder> internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestMissionRewards__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestMissionRewards, global::Gazillion.NetMessageRequestMissionRewards.Builder> internal__static_Gazillion_NetMessageRequestMissionRewards__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent, global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent.Builder> internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDamageMeter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageMeter, global::Gazillion.NetMessageDamageMeter.Builder> internal__static_Gazillion_NetMessageDamageMeter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInvitePlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInvitePlayer, global::Gazillion.NetMessageInvitePlayer.Builder> internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPartyJoinPortal, global::Gazillion.NetMessageRequestPartyJoinPortal.Builder> internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeclineGroupInvite, global::Gazillion.NetMessageDeclineGroupInvite.Builder> internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaveGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGroup, global::Gazillion.NetMessageLeaveGroup.Builder> internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeGroupLeader, global::Gazillion.NetMessageChangeGroupLeader.Builder> internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBootPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBootPlayer, global::Gazillion.NetMessageBootPlayer.Builder> internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDisbandGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisbandGroup, global::Gazillion.NetMessageDisbandGroup.Builder> internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGroupChangeType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGroupChangeType, global::Gazillion.NetMessageGroupChangeType.Builder> internal__static_Gazillion_NetMessageGroupChangeType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGroupChangeTypeConfirmResponse, global::Gazillion.NetMessageGroupChangeTypeConfirmResponse.Builder> internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelInvite, global::Gazillion.NetMessageDuelInvite.Builder> internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelAccept__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelAccept, global::Gazillion.NetMessageDuelAccept.Builder> internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDuelCancel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelCancel, global::Gazillion.NetMessageDuelCancel.Builder> internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameUpdateNotification, global::Gazillion.NetMessageMetaGameUpdateNotification.Builder> internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChat, global::Gazillion.NetMessageChat.Builder> internal__static_Gazillion_NetMessageChat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTell, global::Gazillion.NetMessageTell.Builder> internal__static_Gazillion_NetMessageTell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReportPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReportPlayer, global::Gazillion.NetMessageReportPlayer.Builder> internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatBanVote__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatBanVote, global::Gazillion.NetMessageChatBanVote.Builder> internal__static_Gazillion_NetMessageChatBanVote__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCatalog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCatalog, global::Gazillion.NetMessageGetCatalog.Builder> internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalance, global::Gazillion.NetMessageGetCurrencyBalance.Builder> internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalog, global::Gazillion.NetMessageBuyItemFromCatalog.Builder> internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyGiftForOtherPlayer, global::Gazillion.NetMessageBuyGiftForOtherPlayer.Builder> internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePurchaseUnlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePurchaseUnlock, global::Gazillion.NetMessagePurchaseUnlock.Builder> internal__static_Gazillion_NetMessagePurchaseUnlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetGiftHistory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetGiftHistory, global::Gazillion.NetMessageGetGiftHistory.Builder> internal__static_Gazillion_NetMessageGetGiftHistory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_EntityPreviewerEnum__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.EntityPreviewerEnum, global::Gazillion.EntityPreviewerEnum.Builder> internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTargets, global::Gazillion.NetMessageEntityPreviewerNewTargets.Builder> internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerClearTargets, global::Gazillion.NetMessageEntityPreviewerClearTargets.Builder> internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetTargetRef, global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Builder> internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerActivatePower, global::Gazillion.NetMessageEntityPreviewerActivatePower.Builder> internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerAddTarget, global::Gazillion.NetMessageEntityPreviewerAddTarget.Builder> internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetEntityState, global::Gazillion.NetMessageEntityPreviewerSetEntityState.Builder> internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerApplyConditions, global::Gazillion.NetMessageEntityPreviewerApplyConditions.Builder> internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar, global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnKioskStartButtonPressed, global::Gazillion.NetMessageOnKioskStartButtonPressed.Builder> internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieStarted, global::Gazillion.NetMessageNotifyFullscreenMovieStarted.Builder> internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieFinished, global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Builder> internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyLoadingScreenFinished, global::Gazillion.NetMessageNotifyLoadingScreenFinished.Builder> internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotSetLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetLevel, global::Gazillion.NetMessageBotSetLevel.Builder> internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotGodMode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotGodMode, global::Gazillion.NetMessageBotGodMode.Builder> internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPickAvatar, global::Gazillion.NetMessageBotPickAvatar.Builder> internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotRegionChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotRegionChange, global::Gazillion.NetMessageBotRegionChange.Builder> internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotWarpAreaNext, global::Gazillion.NetMessageBotWarpAreaNext.Builder> internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotLootGive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotLootGive, global::Gazillion.NetMessageBotLootGive.Builder> internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetPvPFaction, global::Gazillion.NetMessageBotSetPvPFaction.Builder> internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPvPQueue, global::Gazillion.NetMessageBotPvPQueue.Builder> internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetTrackerReport, global::Gazillion.NetMessageGetTrackerReport.Builder> internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeqDone, global::Gazillion.NetMessagePlayKismetSeqDone.Builder> internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyFailedForRepId, global::Gazillion.NetMessageVerifyFailedForRepId.Builder> internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnect, global::Gazillion.NetMessageGracefulDisconnect.Builder> internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStartNewGame, global::Gazillion.NetMessageRequestStartNewGame.Builder> internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDialogTarget, global::Gazillion.NetMessageSetDialogTarget.Builder> internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDialogResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDialogResult, global::Gazillion.NetMessageDialogResult.Builder> internal__static_Gazillion_NetMessageDialogResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestBuyItemFrom, global::Gazillion.NetMessageVendorRequestBuyItemFrom.Builder> internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestSellItemTo, global::Gazillion.NetMessageVendorRequestSellItemTo.Builder> internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestDonateItemTo, global::Gazillion.NetMessageVendorRequestDonateItemTo.Builder> internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestRefresh, global::Gazillion.NetMessageVendorRequestRefresh.Builder> internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryModifyCommunityMemberCircle, global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Builder> internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePullCommunityStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePullCommunityStatus, global::Gazillion.NetMessagePullCommunityStatus.Builder> internal__static_Gazillion_NetMessagePullCommunityStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToPlayerManager, global::Gazillion.NetMessageGuildMessageToPlayerManager.Builder> internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAkEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAkEvent, global::Gazillion.NetMessageAkEvent.Builder> internal__static_Gazillion_NetMessageAkEvent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetShowTips__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetShowTips, global::Gazillion.NetMessageSetShowTips.Builder> internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTipSeen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTipSeen, global::Gazillion.NetMessageSetTipSeen.Builder> internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageResetSeenTips__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageResetSeenTips, global::Gazillion.NetMessageResetSeenTips.Builder> internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageHUDTutorialDismissed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHUDTutorialDismissed, global::Gazillion.NetMessageHUDTutorialDismissed.Builder> internal__static_Gazillion_NetMessageHUDTutorialDismissed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral, global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Builder> internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetPlayerGameplayOptions, global::Gazillion.NetMessageSetPlayerGameplayOptions.Builder> internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportToPartyMember, global::Gazillion.NetMessageTeleportToPartyMember.Builder> internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionRequestQueueCommandClient, global::Gazillion.NetMessageRegionRequestQueueCommandClient.Builder> internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectAvatarSynergies__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectAvatarSynergies, global::Gazillion.NetMessageSelectAvatarSynergies.Builder> internal__static_Gazillion_NetMessageSelectAvatarSynergies__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLegendaryMissionReroll, global::Gazillion.NetMessageRequestLegendaryMissionReroll.Builder> internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAttemptShareLegendaryMission, global::Gazillion.NetMessageAttemptShareLegendaryMission.Builder> internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse, global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse.Builder> internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPlayerOwnsItemStatus, global::Gazillion.NetMessageRequestPlayerOwnsItemStatus.Builder> internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestInterestInInventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInInventory, global::Gazillion.NetMessageRequestInterestInInventory.Builder> internal__static_Gazillion_NetMessageRequestInterestInInventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInAvatarEquipment, global::Gazillion.NetMessageRequestInterestInAvatarEquipment.Builder> internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInTeamUpEquipment, global::Gazillion.NetMessageRequestInterestInTeamUpEquipment.Builder> internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryTeamUpSelect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryTeamUpSelect, global::Gazillion.NetMessageTryTeamUpSelect.Builder> internal__static_Gazillion_NetMessageTryTeamUpSelect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestTeamUpDismiss__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestTeamUpDismiss, global::Gazillion.NetMessageRequestTeamUpDismiss.Builder> internal__static_Gazillion_NetMessageRequestTeamUpDismiss__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryTeamUpStyleSelect, global::Gazillion.NetMessageTryTeamUpStyleSelect.Builder> internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectOmegaBonus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectOmegaBonus, global::Gazillion.NetMessageSelectOmegaBonus.Builder> internal__static_Gazillion_NetMessageSelectOmegaBonus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOmegaBonusAllocationCommit, global::Gazillion.NetMessageOmegaBonusAllocationCommit.Builder> internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRespecOmegaBonus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRespecOmegaBonus, global::Gazillion.NetMessageRespecOmegaBonus.Builder> internal__static_Gazillion_NetMessageRespecOmegaBonus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRespecPowerSpec__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRespecPowerSpec, global::Gazillion.NetMessageRespecPowerSpec.Builder> internal__static_Gazillion_NetMessageRespecPowerSpec__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNewItemGlintPlayed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewItemGlintPlayed, global::Gazillion.NetMessageNewItemGlintPlayed.Builder> internal__static_Gazillion_NetMessageNewItemGlintPlayed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNewItemHighlightCleared__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewItemHighlightCleared, global::Gazillion.NetMessageNewItemHighlightCleared.Builder> internal__static_Gazillion_NetMessageNewItemHighlightCleared__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnassignMappedPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignMappedPower, global::Gazillion.NetMessageUnassignMappedPower.Builder> internal__static_Gazillion_NetMessageUnassignMappedPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVanityTitleSelect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVanityTitleSelect, global::Gazillion.NetMessageVanityTitleSelect.Builder> internal__static_Gazillion_NetMessageVanityTitleSelect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestGlobalEventUpdate, global::Gazillion.NetMessageRequestGlobalEventUpdate.Builder> internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageHasPendingGift__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHasPendingGift, global::Gazillion.NetMessageHasPendingGift.Builder> internal__static_Gazillion_NetMessageHasPendingGift__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerTradeStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeStart, global::Gazillion.NetMessagePlayerTradeStart.Builder> internal__static_Gazillion_NetMessagePlayerTradeStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerTradeCancel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeCancel, global::Gazillion.NetMessagePlayerTradeCancel.Builder> internal__static_Gazillion_NetMessagePlayerTradeCancel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeSetConfirmFlag, global::Gazillion.NetMessagePlayerTradeSetConfirmFlag.Builder> internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestPetTechDonate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPetTechDonate, global::Gazillion.NetMessageRequestPetTechDonate.Builder> internal__static_Gazillion_NetMessageRequestPetTechDonate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetActivePowerSpec__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetActivePowerSpec, global::Gazillion.NetMessageSetActivePowerSpec.Builder> internal__static_Gazillion_NetMessageSetActivePowerSpec__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeCameraSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeCameraSettings, global::Gazillion.NetMessageChangeCameraSettings.Builder> internal__static_Gazillion_NetMessageChangeCameraSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestSocketAffix__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestSocketAffix, global::Gazillion.NetMessageRequestSocketAffix.Builder> internal__static_Gazillion_NetMessageRequestSocketAffix__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUISystemLockState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISystemLockState, global::Gazillion.NetMessageUISystemLockState.Builder> internal__static_Gazillion_NetMessageUISystemLockState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEnableSpecializationPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnableSpecializationPower, global::Gazillion.NetMessageEnableSpecializationPower.Builder> internal__static_Gazillion_NetMessageEnableSpecializationPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStashInventoryViewed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashInventoryViewed, global::Gazillion.NetMessageStashInventoryViewed.Builder> internal__static_Gazillion_NetMessageStashInventoryViewed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStashCurrentlyOpen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashCurrentlyOpen, global::Gazillion.NetMessageStashCurrentlyOpen.Builder> internal__static_Gazillion_NetMessageStashCurrentlyOpen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageWidgetButtonResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWidgetButtonResult, global::Gazillion.NetMessageWidgetButtonResult.Builder> internal__static_Gazillion_NetMessageWidgetButtonResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStashTabInsert__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashTabInsert, global::Gazillion.NetMessageStashTabInsert.Builder> internal__static_Gazillion_NetMessageStashTabInsert__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStashTabOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashTabOptions, global::Gazillion.NetMessageStashTabOptions.Builder> internal__static_Gazillion_NetMessageStashTabOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardRequest, global::Gazillion.NetMessageLeaderboardRequest.Builder> internal__static_Gazillion_NetMessageLeaderboardRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest, global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest.Builder> internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardInitializeRequest, global::Gazillion.NetMessageLeaderboardInitializeRequest.Builder> internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestLocalCoopStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLocalCoopStart, global::Gazillion.NetMessageRequestLocalCoopStart.Builder> internal__static_Gazillion_NetMessageRequestLocalCoopStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRequestLocalCoopEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLocalCoopEnd, global::Gazillion.NetMessageRequestLocalCoopEnd.Builder> internal__static_Gazillion_NetMessageRequestLocalCoopEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCouponAwardPresented__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCouponAwardPresented, global::Gazillion.NetMessageCouponAwardPresented.Builder> internal__static_Gazillion_NetMessageCouponAwardPresented__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBillingRoutedClientMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBillingRoutedClientMessage, global::Gazillion.NetMessageBillingRoutedClientMessage.Builder> internal__static_Gazillion_NetMessageBillingRoutedClientMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ClientToGameServer() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDbGllbnRUb0dhbWVTZXJ2ZXIucHJvdG8SCUdhemlsbGlvbhoVR2F6aWxs", 
            "aW9uQ29tbW9uLnByb3RvGhRDb21tb25NZXNzYWdlcy5wcm90bxoQQ2hhdENv", 
            "bW1vbi5wcm90bxoLR3VpbGQucHJvdG8aGEdsb2JhbEV2ZW50c0NvbW1vbi5w", 
            "cm90byL/AgoaTmV0TWVzc2FnZVJlYWR5Rm9yR2FtZUpvaW4SPwoZd2lwZXNE", 
            "YXRhSWZNaXNtYXRjaGVkSW5EYhgBIAIoBToBMFIZd2lwZXNEYXRhSWZNaXNt", 
            "YXRjaGVkSW5EYhJBChh3aXBlUGxheWVyUmVjb3Jkc09uTG9naW4YAiABKAg6", 
            "BWZhbHNlUhh3aXBlUGxheWVyUmVjb3Jkc09uTG9naW4SKAoPZG9tYWluTG9n", 
            "aW5OYW1lGAMgASgJUg9kb21haW5Mb2dpbk5hbWUSKgoQcGxheWVySW1wb3J0", 
            "RGF0YRgEIAEoDFIQcGxheWVySW1wb3J0RGF0YRIeCgpsb2NhbGVOYW1lGAUg", 
            "AigJUgpsb2NhbGVOYW1lEjQKFWNsaWVudE9wZXJhdGluZ1N5c3RlbRgGIAEo", 
            "BVIVY2xpZW50T3BlcmF0aW5nU3lzdGVtEjEKEHN0cmVhbWluZ1Nlc3Npb24Y", 
            "ByACKAg6BWZhbHNlUhBzdHJlYW1pbmdTZXNzaW9uIrsDCh1OZXRNZXNzYWdl", 
            "UGxheWVyU3lzdGVtTWV0cmljcxIqCg5jb21wYXRMZXZlbENwdRgBIAIoBToC", 
            "LTFSDmNvbXBhdExldmVsQ3B1EioKDmNvbXBhdExldmVsR3B1GAIgAigFOgIt", 
            "MVIOY29tcGF0TGV2ZWxHcHUSNgoUY29tcGF0TGV2ZWxDb21wb3NpdGUYAyAC", 
            "KAU6Ai0xUhRjb21wYXRMZXZlbENvbXBvc2l0ZRIWCgZvc05hbWUYBCABKAlS", 
            "Bm9zTmFtZRIYCgdjcHVOYW1lGAUgASgJUgdjcHVOYW1lEhgKB3JhbU5hbWUY", 
            "BiABKAlSB3JhbU5hbWUSLAoRZGlzcGxheURldmljZU5hbWUYByABKAlSEWRp", 
            "c3BsYXlEZXZpY2VOYW1lEjIKFGRpc3BsYXlEZXZpY2VEdWFsR1BVGAggASgI", 
            "UhRkaXNwbGF5RGV2aWNlRHVhbEdQVRI4ChdkaXNwbGF5RGV2aWNlRHJpdmVy", 
            "RGF0ZRgJIAEoCVIXZGlzcGxheURldmljZURyaXZlckRhdGUSIgoMdXNlckxh", 
            "bmd1YWdlGAogASgJUgx1c2VyTGFuZ3VhZ2UiawoZTmV0TWVzc2FnZVBsYXll", 
            "clN0ZWFtSW5mbxIgCgtzdGVhbVVzZXJJZBgBIAIoBFILc3RlYW1Vc2VySWQS", 
            "LAoRdXBkYXRlU3RlYW1TZXFOdW0YAiABKAVSEXVwZGF0ZVN0ZWFtU2VxTnVt", 
            "InsKGU5ldE1lc3NhZ2VTeW5jVGltZVJlcXVlc3QSLgoSZ2FtZVRpbWVDbGll", 
            "bnRTZW50GAEgAigDUhJnYW1lVGltZUNsaWVudFNlbnQSLgoSZGF0ZVRpbWVD", 
            "bGllbnRTZW50GAIgAigDUhJkYXRlVGltZUNsaWVudFNlbnQisgEKGk5ldE1l", 
            "c3NhZ2VTZXRUaW1lRGlhbGF0aW9uEjoKGGdhbWVUaW1lRGlhbGF0aW9uU3Rh", 
            "cnRlZBgBIAIoA1IYZ2FtZVRpbWVEaWFsYXRpb25TdGFydGVkEjoKGGRhdGVU", 
            "aW1lRGlhbGF0aW9uU3RhcnRlZBgCIAIoA1IYZGF0ZVRpbWVEaWFsYXRpb25T", 
            "dGFydGVkEhwKCWRpYWxhdGlvbhgDIAIoAlIJZGlhbGF0aW9uImkKG05ldE1l", 
            "c3NhZ2VJc1JlZ2lvbkF2YWlsYWJsZRIoCg9yZWdpb25Qcm90b3R5cGUYASAC", 
            "KARSD3JlZ2lvblByb3RvdHlwZRIgCgtpc0F2YWlsYWJsZRgCIAIoCFILaXNB", 
            "dmFpbGFibGUiPwobTmV0TWVzc2FnZVVwZGF0ZUF2YXRhclN0YXRlEiAKC2Fy", 
            "Y2hpdmVEYXRhGAEgAigMUgthcmNoaXZlRGF0YSJKChROZXRNZXNzYWdlQ2Vs", 
            "bExvYWRlZBIWCgZjZWxsSWQYASACKA1SBmNlbGxJZBIaCghyZWdpb25JZBgC", 
            "IAIoBFIIcmVnaW9uSWQiNwodTmV0TWVzc2FnZVRlbGVwb3J0QWNrUmVzcG9u", 
            "c2USFgoGYWNrc2VxGAEgAigNUgZhY2tzZXEiMgoWTmV0TWVzc2FnZUFkbWlu", 
            "Q29tbWFuZBIYCgdjb21tYW5kGAEgAigJUgdjb21tYW5kItgDChpOZXRNZXNz", 
            "YWdlVHJ5QWN0aXZhdGVQb3dlchIiCgxpZFVzZXJFbnRpdHkYASACKARSDGlk", 
            "VXNlckVudGl0eRIqChBwb3dlclByb3RvdHlwZUlkGAIgAigEUhBwb3dlclBy", 
            "b3RvdHlwZUlkEiYKDmlkVGFyZ2V0RW50aXR5GAMgASgEUg5pZFRhcmdldEVu", 
            "dGl0eRJCCg50YXJnZXRQb3NpdGlvbhgEIAEoCzIaLkdhemlsbGlvbi5OZXRT", 
            "dHJ1Y3RQb2ludDNSDnRhcmdldFBvc2l0aW9uEiQKDW1vdmVtZW50U3BlZWQY", 
            "BSABKAJSDW1vdmVtZW50U3BlZWQSJgoObW92ZW1lbnRUaW1lTVMYBiABKARS", 
            "Dm1vdmVtZW50VGltZU1TEigKD3Bvd2VyUmFuZG9tU2VlZBgHIAEoDVIPcG93", 
            "ZXJSYW5kb21TZWVkEiIKDGl0ZW1Tb3VyY2VJZBgIIAEoBFIMaXRlbVNvdXJj", 
            "ZUlkEiIKDGZ4UmFuZG9tU2VlZBgJIAIoDVIMZnhSYW5kb21TZWVkEj4KGnRy", 
            "aWdnZXJpbmdQb3dlclByb3RvdHlwZUlkGAogASgEUhp0cmlnZ2VyaW5nUG93", 
            "ZXJQcm90b3R5cGVJZCLUAQoWTmV0TWVzc2FnZVBvd2VyUmVsZWFzZRIiCgxp", 
            "ZFVzZXJFbnRpdHkYASACKARSDGlkVXNlckVudGl0eRIqChBwb3dlclByb3Rv", 
            "dHlwZUlkGAIgAigEUhBwb3dlclByb3RvdHlwZUlkEiYKDmlkVGFyZ2V0RW50", 
            "aXR5GAMgASgEUg5pZFRhcmdldEVudGl0eRJCCg50YXJnZXRQb3NpdGlvbhgE", 
            "IAEoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSDnRhcmdldFBvc2l0", 
            "aW9uIpABChhOZXRNZXNzYWdlVHJ5Q2FuY2VsUG93ZXISIgoMaWRVc2VyRW50", 
            "aXR5GAEgAigEUgxpZFVzZXJFbnRpdHkSKgoQcG93ZXJQcm90b3R5cGVJZBgC", 
            "IAIoBFIQcG93ZXJQcm90b3R5cGVJZBIkCg1lbmRQb3dlckZsYWdzGAMgAigN", 
            "Ug1lbmRQb3dlckZsYWdzIkQKHk5ldE1lc3NhZ2VUcnlDYW5jZWxBY3RpdmVQ", 
            "b3dlchIiCgxpZFVzZXJFbnRpdHkYASACKARSDGlkVXNlckVudGl0eSKDAgon", 
            "TmV0TWVzc2FnZUNvbnRpbnVvdXNQb3dlclVwZGF0ZVRvU2VydmVyEioKEHBv", 
            "d2VyUHJvdG90eXBlSWQYASACKARSEHBvd2VyUHJvdG90eXBlSWQSIAoLYXZh", 
            "dGFySW5kZXgYAiACKAVSC2F2YXRhckluZGV4EiYKDmlkVGFyZ2V0RW50aXR5", 
            "GAMgASgEUg5pZFRhcmdldEVudGl0eRJCCg50YXJnZXRQb3NpdGlvbhgEIAEo", 
            "CzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSDnRhcmdldFBvc2l0aW9u", 
            "Eh4KCnJhbmRvbVNlZWQYBSABKA1SCnJhbmRvbVNlZWQiQQodTmV0TWVzc2Fn", 
            "ZUNhbmNlbFBlbmRpbmdBY3Rpb24SIAoLYXZhdGFySW5kZXgYASACKAVSC2F2", 
            "YXRhckluZGV4IjwKGE5ldE1lc3NhZ2VTdGFydEFJRGVidWdVSRIgCgtpZFRh", 
            "cmdldE5QQxgBIAIoBFILaWRUYXJnZXROUEMiOwoXTmV0TWVzc2FnZVN0b3BB", 
            "SURlYnVnVUkSIAoLaWRUYXJnZXROUEMYASACKARSC2lkVGFyZ2V0TlBDIiAK", 
            "Hk5ldE1lc3NhZ2VTdGFydEFJUGVyZm9ybWFuY2VVSSIfCh1OZXRNZXNzYWdl", 
            "U3RvcEFJUGVyZm9ybWFuY2VVSSK1AQodTmV0TWVzc2FnZVN0YXJ0TWlzc2lv", 
            "bkRlYnVnVUkSJAoNaWRUYXJnZXRBZ2VudBgBIAIoBFINaWRUYXJnZXRBZ2Vu", 
            "dBI0ChVtaXNzaW9uUHJvdG90eXBlUmVmSWQYAiACKARSFW1pc3Npb25Qcm90", 
            "b3R5cGVSZWZJZBI4ChdtaXNzaW9uTGlzdE1hdGNoUGF0dGVybhgDIAIoCVIX", 
            "bWlzc2lvbkxpc3RNYXRjaFBhdHRlcm4iRAocTmV0TWVzc2FnZVN0b3BNaXNz", 
            "aW9uRGVidWdVSRIkCg1pZFRhcmdldEFnZW50GAEgAigEUg1pZFRhcmdldEFn", 
            "ZW50IkoKIE5ldE1lc3NhZ2VTdGFydFByb3BlcnRpZXNEZWJ1Z1VJEiYKDmlk", 
            "VGFyZ2V0RW50aXR5GAEgAigEUg5pZFRhcmdldEVudGl0eSJJCh9OZXRNZXNz", 
            "YWdlU3RvcFByb3BlcnRpZXNEZWJ1Z1VJEiYKDmlkVGFyZ2V0RW50aXR5GAEg", 
            "AigEUg5pZFRhcmdldEVudGl0eSJKCiBOZXRNZXNzYWdlU3RhcnRDb25kaXRp", 
            "b25zRGVidWdVSRImCg5pZFRhcmdldEVudGl0eRgBIAIoBFIOaWRUYXJnZXRF", 
            "bnRpdHkiSQofTmV0TWVzc2FnZVN0b3BDb25kaXRpb25zRGVidWdVSRImCg5p", 
            "ZFRhcmdldEVudGl0eRgBIAIoBFIOaWRUYXJnZXRFbnRpdHkiRgocTmV0TWVz", 
            "c2FnZVN0YXJ0UG93ZXJzRGVidWdVSRImCg5pZFRhcmdldEVudGl0eRgBIAIo", 
            "BFIOaWRUYXJnZXRFbnRpdHkiRQobTmV0TWVzc2FnZVN0b3BQb3dlcnNEZWJ1", 
            "Z1VJEiYKDmlkVGFyZ2V0RW50aXR5GAEgAigEUg5pZFRhcmdldEVudGl0eSK9", 
            "AQobTmV0U3RydWN0TWVzc2FnZVN0b3JlTWV0cmljEkoKD3N0b3JlQWN0aW9u", 
            "RW51bRgBIAIoDjIgLkdhemlsbGlvbi5BdmFpbGFibGVTdG9yZUFjdGlvbnNS", 
            "D3N0b3JlQWN0aW9uRW51bRIkCg11bml4VGltZXN0YW1wGAIgAigEUg11bml4", 
            "VGltZXN0YW1wEiwKEXRhcmdldFByb3RvdHlwZUlkGAMgASgEUhF0YXJnZXRQ", 
            "cm90b3R5cGVJZCKFBQoOTmV0TWVzc2FnZVBpbmcSJAoNZGlzcGxheU91dHB1", 
            "dBgBIAIoCFINZGlzcGxheU91dHB1dBImCg5zZW5kQ2xpZW50VGltZRgCIAIo", 
            "BFIOc2VuZENsaWVudFRpbWUSIgoMc2VuZEdhbWVUaW1lGAMgASgEUgxzZW5k", 
            "R2FtZVRpbWUSPgoacmVxdWVzdE5ldFJlY2VpdmVkR2FtZVRpbWUYBCABKARS", 
            "GnJlcXVlc3ROZXRSZWNlaXZlZEdhbWVUaW1lEiwKEWxhc3RDbGllbnRMYXRl", 
            "bmN5GAUgASgEUhFsYXN0Q2xpZW50TGF0ZW5jeRIYCgdsYXN0RnBzGAYgASgC", 
            "UgdsYXN0RnBzEigKD3JlZ2lvblByb3RvdHlwZRgHIAEoBFIPcmVnaW9uUHJv", 
            "dG90eXBlEhoKCGNwdWxldmVsGAggASgNUghjcHVsZXZlbBIaCghncHVsZXZl", 
            "bBgJIAEoDVIIZ3B1bGV2ZWwSJgoOY29tcG9zaXRlbGV2ZWwYCiABKA1SDmNv", 
            "bXBvc2l0ZWxldmVsEiAKC2NvdW50cnljb2RlGAsgASgJUgtjb3VudHJ5Y29k", 
            "ZRIWCgZtaW5GcHMYDCABKAJSBm1pbkZwcxI4CgltaW5GcHNQb3MYDSABKAsy", 
            "Gi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUgltaW5GcHNQb3MSSgoMc3Rv", 
            "cmVNZXRyaWNzGA4gAygLMiYuR2F6aWxsaW9uLk5ldFN0cnVjdE1lc3NhZ2VT", 
            "dG9yZU1ldHJpY1IMc3RvcmVNZXRyaWNzEi8KD3N0cmVhbWluZ2NsaWVudBgP", 
            "IAEoCDoFZmFsc2VSD3N0cmVhbWluZ2NsaWVudCKaAgoNTmV0TWVzc2FnZUZQ", 
            "UxIWCgZhdmdGcHMYASACKAJSBmF2Z0ZwcxIWCgZtaW5GcHMYAiACKAJSBm1p", 
            "bkZwcxIeCgpudW1IaXRjaGVzGAMgAigNUgpudW1IaXRjaGVzEigKD3JlZ2lv", 
            "blByb3RvdHlwZRgEIAIoBFIPcmVnaW9uUHJvdG90eXBlEhoKCGNwdWxldmVs", 
            "GAUgAigNUghjcHVsZXZlbBIaCghncHVsZXZlbBgGIAIoDVIIZ3B1bGV2ZWwS", 
            "JgoOY29tcG9zaXRlbGV2ZWwYByACKA1SDmNvbXBvc2l0ZWxldmVsEi8KD3N0", 
            "cmVhbWluZ2NsaWVudBgIIAEoCDoFZmFsc2VSD3N0cmVhbWluZ2NsaWVudCKX", 
            "AQobTmV0TWVzc2FnZVBpY2t1cEludGVyYWN0aW9uEhoKCGlkVGFyZ2V0GAEg", 
            "AigEUghpZFRhcmdldBIgCgthdmF0YXJJbmRleBgCIAIoBVILYXZhdGFySW5k", 
            "ZXgSOgoYdXNlSW50ZXJhY3RGYWxsYmFja1JhbmdlGAMgASgIUhh1c2VJbnRl", 
            "cmFjdEZhbGxiYWNrUmFuZ2Ui1AEKGk5ldE1lc3NhZ2VUcnlJbnZlbnRvcnlN", 
            "b3ZlEhYKBml0ZW1JZBgBIAIoBFIGaXRlbUlkEi4KEnRvSW52ZW50b3J5T3du", 
            "ZXJJZBgCIAIoBFISdG9JbnZlbnRvcnlPd25lcklkEjIKFHRvSW52ZW50b3J5", 
            "UHJvdG90eXBlGAMgAigEUhR0b0ludmVudG9yeVByb3RvdHlwZRIWCgZ0b1Ns", 
            "b3QYBCACKA1SBnRvU2xvdBIiCgxpc1N0YWNrU3BsaXQYBSABKAhSDGlzU3Rh", 
            "Y2tTcGxpdCIrCilOZXRNZXNzYWdlVHJ5TW92ZUNyYWZ0aW5nUmVzdWx0c1Rv", 
            "R2VuZXJhbCI2ChxOZXRNZXNzYWdlSW52ZW50b3J5VHJhc2hJdGVtEhYKBml0", 
            "ZW1JZBgBIAIoBFIGaXRlbUlkIloKGk5ldE1lc3NhZ2VUaHJvd0ludGVyYWN0", 
            "aW9uEhoKCGlkVGFyZ2V0GAEgAigEUghpZFRhcmdldBIgCgthdmF0YXJJbmRl", 
            "eBgCIAIoBVILYXZhdGFySW5kZXgifwohTmV0TWVzc2FnZVBlcmZvcm1QcmVJ", 
            "bnRlcmFjdFBvd2VyEhoKCGlkVGFyZ2V0GAEgAigEUghpZFRhcmdldBIgCgth", 
            "dmF0YXJJbmRleBgCIAIoBVILYXZhdGFySW5kZXgSHAoJaGFzRGlhbG9nGAMg", 
            "AigIUgloYXNEaWFsb2cikQEKH05ldE1lc3NhZ2VVc2VJbnRlcmFjdGFibGVP", 
            "YmplY3QSGgoIaWRUYXJnZXQYASACKARSCGlkVGFyZ2V0EiAKC2F2YXRhcklu", 
            "ZGV4GAIgAigFUgthdmF0YXJJbmRleBIwChNtaXNzaW9uUHJvdG90eXBlUmVm", 
            "GAMgASgEUhNtaXNzaW9uUHJvdG90eXBlUmVmIpABChJOZXRNZXNzYWdlVHJ5", 
            "Q3JhZnQSGgoIaWRSZWNpcGUYASACKARSCGlkUmVjaXBlEhoKCGlkVmVuZG9y", 
            "GAIgAigEUghpZFZlbmRvchIkCg1pZEluZ3JlZGllbnRzGAMgAygEUg1pZElu", 
            "Z3JlZGllbnRzEhwKCWlzUmVjcmFmdBgEIAIoCFIJaXNSZWNyYWZ0IrkBChVO", 
            "ZXRNZXNzYWdlVXNlV2F5cG9pbnQSIAoLYXZhdGFySW5kZXgYASACKAVSC2F2", 
            "YXRhckluZGV4Ei4KEmlkVHJhbnNpdGlvbkVudGl0eRgCIAIoBFISaWRUcmFu", 
            "c2l0aW9uRW50aXR5EigKD3dheXBvaW50RGF0YVJlZhgDIAIoBFIPd2F5cG9p", 
            "bnREYXRhUmVmEiQKDXJlZ2lvblByb3RvSWQYBCACKARSDXJlZ2lvblByb3Rv", 
            "SWQiVwonTmV0TWVzc2FnZURlYnVnQWNxdWlyZUFuZFN3aXRjaFRvQXZhdGFy", 
            "EiwKEWF2YXRhclByb3RvdHlwZUlkGAEgAigEUhFhdmF0YXJQcm90b3R5cGVJ", 
            "ZCJuChZOZXRNZXNzYWdlU3dpdGNoQXZhdGFyEiwKEWF2YXRhclByb3RvdHlw", 
            "ZUlkGAEgAigEUhFhdmF0YXJQcm90b3R5cGVJZBImCg5hdmF0YXJNb2RlRW51", 
            "bRgCIAIoDVIOYXZhdGFyTW9kZUVudW0iSwofTmV0TWVzc2FnZVNlbGVjdFB1", 
            "YmxpY0V2ZW50VGVhbRIoCg90ZWFtUHJvdG90eXBlSWQYASACKARSD3RlYW1Q", 
            "cm90b3R5cGVJZCLcAQoWTmV0TWVzc2FnZUFzc2lnbkhvdGtleRIaCghhdmF0", 
            "YXJJZBgBIAIoBFIIYXZhdGFySWQSJgoOcHJvdG90eXBlUmVmSWQYAiACKARS", 
            "DnByb3RvdHlwZVJlZklkEigKD2tleU1hcHBpbmdJbmRleBgDIAIoDVIPa2V5", 
            "TWFwcGluZ0luZGV4Eh4KCnNsb3ROdW1iZXIYBCACKA1SCnNsb3ROdW1iZXIS", 
            "NAoVZGVzdGluYXRpb25TbG90TnVtYmVyGAUgAigNUhVkZXN0aW5hdGlvblNs", 
            "b3ROdW1iZXIigAEKGE5ldE1lc3NhZ2VVbmFzc2lnbkhvdGtleRIaCghhdmF0", 
            "YXJJZBgBIAIoBFIIYXZhdGFySWQSKAoPa2V5TWFwcGluZ0luZGV4GAIgAigN", 
            "Ug9rZXlNYXBwaW5nSW5kZXgSHgoKc2xvdE51bWJlchgDIAIoDVIKc2xvdE51", 
            "bWJlciJpCiFOZXRNZXNzYWdlU2VsZWN0QWJpbGl0eUtleU1hcHBpbmcSGgoI", 
            "YXZhdGFySWQYASACKARSCGF2YXRhcklkEigKD2tleU1hcHBpbmdJbmRleBgC", 
            "IAIoDVIPa2V5TWFwcGluZ0luZGV4IrEBCiFOZXRNZXNzYWdlQWJpbGl0eVNs", 
            "b3RUb0FiaWxpdHlCYXISGgoIYXZhdGFySWQYASACKARSCGF2YXRhcklkEiYK", 
            "DnByb3RvdHlwZVJlZklkGAIgAigEUg5wcm90b3R5cGVSZWZJZBIoCg9rZXlN", 
            "YXBwaW5nSW5kZXgYAyACKA1SD2tleU1hcHBpbmdJbmRleBIeCgpzbG90TnVt", 
            "YmVyGAQgAigNUgpzbG90TnVtYmVyIo0BCiVOZXRNZXNzYWdlQWJpbGl0eVVu", 
            "c2xvdEZyb21BYmlsaXR5QmFyEhoKCGF2YXRhcklkGAEgAigEUghhdmF0YXJJ", 
            "ZBIoCg9rZXlNYXBwaW5nSW5kZXgYAiACKA1SD2tleU1hcHBpbmdJbmRleBIe", 
            "CgpzbG90TnVtYmVyGAMgAigNUgpzbG90TnVtYmVyIoMBCiFOZXRNZXNzYWdl", 
            "QWJpbGl0eVN3YXBJbkFiaWxpdHlCYXISGgoIYXZhdGFySWQYASACKARSCGF2", 
            "YXRhcklkEiAKC3Nsb3ROdW1iZXJBGAIgAigNUgtzbG90TnVtYmVyQRIgCgtz", 
            "bG90TnVtYmVyQhgDIAIoDVILc2xvdE51bWJlckIimwEKHE5ldE1lc3NhZ2VN", 
            "b2RDb21taXRUZW1wb3JhcnkSHAoJYXZhdGFyUmVmGAEgAigEUglhdmF0YXJS", 
            "ZWYSHgoKbW9kVHlwZVJlZhgCIAIoBFIKbW9kVHlwZVJlZhI9CgdjaGFuZ2Vz", 
            "GAMgAygLMiMuR2F6aWxsaW9uLk5ldFN0cnVjdE1vZENoYW5nZU9iamVjdFIH", 
            "Y2hhbmdlcyJQChJOZXRNZXNzYWdlTW9kUmVzZXQSGgoIYXZhdGFySWQYASAC", 
            "KARSCGF2YXRhcklkEh4KCm1vZFR5cGVSZWYYAiACKARSCm1vZFR5cGVSZWYi", 
            "tgEKJE5ldE1lc3NhZ2VQb3dlclBvaW50QWxsb2NhdGlvbkNvbW1pdBIaCghh", 
            "Z2VudFJlZhgBIAIoBFIIYWdlbnRSZWYSSgoLYWxsb2NhdGlvbnMYAiADKAsy", 
            "KC5HYXppbGxpb24uTmV0U3RydWN0UG93ZXJQb2ludEFsbG9jYXRpb25SC2Fs", 
            "bG9jYXRpb25zEiYKDnBvd2VyU3BlY0luZGV4GAMgAigNUg5wb3dlclNwZWNJ", 
            "bmRleCJ1Ch1OZXRNZXNzYWdlUmVxdWVzdERlYXRoUmVsZWFzZRIUCgVoaXRP", 
            "axgBIAIoCFIFaGl0T2sSPgoacmVzdXJyZWN0ZWRGcm9tT3RoZXJFbnRpdHkY", 
            "AiACKAhSGnJlc3VycmVjdGVkRnJvbU90aGVyRW50aXR5IiMKIU5ldE1lc3Nh", 
            "Z2VSZXF1ZXN0UmVzdXJyZWN0RGVjbGluZSI+CiBOZXRNZXNzYWdlUmVxdWVz", 
            "dFJlc3VycmVjdEF2YXRhchIaCgh0YXJnZXRJZBgBIAEoBFIIdGFyZ2V0SWQi", 
            "FwoVTmV0TWVzc2FnZVJldHVyblRvSHViInQKGk5ldE1lc3NhZ2VSZXF1ZXN0", 
            "U3RvcnlXYXJwEjIKFHN0b3J5V2FycFByb3RvdHlwZUlkGAEgAigEUhRzdG9y", 
            "eVdhcnBQcm90b3R5cGVJZBIiCgxzdG9yeVdhcnBOUEMYAiACKARSDHN0b3J5", 
            "V2FycE5QQyKVAQofTmV0TWVzc2FnZVJlcXVlc3RNaXNzaW9uUmV3YXJkcxIu", 
            "ChJtaXNzaW9uUHJvdG90eXBlSWQYASACKARSEm1pc3Npb25Qcm90b3R5cGVJ", 
            "ZBImCg5jb25kaXRpb25JbmRleBgCIAEoDVIOY29uZGl0aW9uSW5kZXgSGgoI", 
            "ZW50aXR5SWQYAyABKARSCGVudGl0eUlkIksKLU5ldE1lc3NhZ2VSZXF1ZXN0", 
            "UmVtb3ZlQW5kS2lsbENvbnRyb2xsZWRBZ2VudBIaCghhdmF0YXJJZBgBIAIo", 
            "BFIIYXZhdGFySWQirwEKFU5ldE1lc3NhZ2VEYW1hZ2VNZXRlchIkCg1lbmNv", 
            "dW50ZXJndWlkGAEgAigEUg1lbmNvdW50ZXJndWlkEh4KCmF2YXRhcmd1aWQY", 
            "AiACKARSCmF2YXRhcmd1aWQSEAoDZHBzGAMgAigCUgNkcHMSIAoLZGFtYWdl", 
            "c2NvcmUYBCACKAJSC2RhbWFnZXNjb3JlEhwKCW51bWRlYXRocxgFIAIoBVIJ", 
            "bnVtZGVhdGhzIqQBChZOZXRNZXNzYWdlSW52aXRlUGxheWVyEigKD2ludml0", 
            "ZWVFbnRpdHlJZBgBIAEoBFIPaW52aXRlZUVudGl0eUlkEiAKC2ludml0ZWVO", 
            "YW1lGAIgASgJUgtpbnZpdGVlTmFtZRI+ChppbnZpdGluZ1BsYXllclBTTlNl", 
            "c3Npb25JZBgDIAEoCVIaaW52aXRpbmdQbGF5ZXJQU05TZXNzaW9uSWQiIgog", 
            "TmV0TWVzc2FnZVJlcXVlc3RQYXJ0eUpvaW5Qb3J0YWwiHgocTmV0TWVzc2Fn", 
            "ZURlY2xpbmVHcm91cEludml0ZSIWChROZXRNZXNzYWdlTGVhdmVHcm91cCJF", 
            "ChtOZXRNZXNzYWdlQ2hhbmdlR3JvdXBMZWFkZXISJgoOdGFyZ2V0TWVtYmVy", 
            "SWQYASACKARSDnRhcmdldE1lbWJlcklkIj4KFE5ldE1lc3NhZ2VCb290UGxh", 
            "eWVyEiYKDnRhcmdldE1lbWJlcklkGAEgAigEUg50YXJnZXRNZW1iZXJJZCIY", 
            "ChZOZXRNZXNzYWdlRGlzYmFuZEdyb3VwIkUKGU5ldE1lc3NhZ2VHcm91cENo", 
            "YW5nZVR5cGUSKAoEdHlwZRgBIAIoDjIULkdhemlsbGlvbi5Hcm91cFR5cGVS", 
            "BHR5cGUiXgooTmV0TWVzc2FnZUdyb3VwQ2hhbmdlVHlwZUNvbmZpcm1SZXNw", 
            "b25zZRIaCghwbGF5ZXJJZBgBIAIoBFIIcGxheWVySWQSFgoGYWNjZXB0GAIg", 
            "AigIUgZhY2NlcHQivgEKFE5ldE1lc3NhZ2VEdWVsSW52aXRlEi4KEmNoYWxs", 
            "ZW5nZXJFbnRpdHlJZBgBIAIoBFISY2hhbGxlbmdlckVudGl0eUlkEiYKDmNo", 
            "YWxsZW5nZXJOYW1lGAIgASgJUg5jaGFsbGVuZ2VyTmFtZRIqChBvcHBvbmVu", 
            "dEVudGl0eUlkGAMgASgEUhBvcHBvbmVudEVudGl0eUlkEiIKDG9wcG9uZW50", 
            "TmFtZRgEIAIoCVIMb3Bwb25lbnROYW1lIm4KFE5ldE1lc3NhZ2VEdWVsQWNj", 
            "ZXB0Ei4KEmNoYWxsZW5nZWRFbnRpdHlJZBgBIAIoBFISY2hhbGxlbmdlZEVu", 
            "dGl0eUlkEiYKDmNoYWxsZW5nZWROYW1lGAIgASgJUg5jaGFsbGVuZ2VkTmFt", 
            "ZSJuChROZXRNZXNzYWdlRHVlbENhbmNlbBIuChJjYW5jZWxsaW5nRW50aXR5", 
            "SWQYASACKARSEmNhbmNlbGxpbmdFbnRpdHlJZBImCg5jYW5jZWxsaW5nTmFt", 
            "ZRgCIAEoCVIOY2FuY2VsbGluZ05hbWUiUgokTmV0TWVzc2FnZU1ldGFHYW1l", 
            "VXBkYXRlTm90aWZpY2F0aW9uEioKEG1ldGFHYW1lRW50aXR5SWQYASACKARS", 
            "EG1ldGFHYW1lRW50aXR5SWQifgoOTmV0TWVzc2FnZUNoYXQSNAoIcm9vbVR5", 
            "cGUYASACKA4yGC5HYXppbGxpb24uQ2hhdFJvb21UeXBlc1IIcm9vbVR5cGUS", 
            "NgoKdGhlTWVzc2FnZRgCIAIoCzIWLkdhemlsbGlvbi5DaGF0TWVzc2FnZVIK", 
            "dGhlTWVzc2FnZSJ0Cg5OZXRNZXNzYWdlVGVsbBIqChB0YXJnZXRQbGF5ZXJO", 
            "YW1lGAEgAigJUhB0YXJnZXRQbGF5ZXJOYW1lEjYKCnRoZU1lc3NhZ2UYAiAC", 
            "KAsyFi5HYXppbGxpb24uQ2hhdE1lc3NhZ2VSCnRoZU1lc3NhZ2UiXAoWTmV0", 
            "TWVzc2FnZVJlcG9ydFBsYXllchIqChB0YXJnZXRQbGF5ZXJOYW1lGAEgAigJ", 
            "UhB0YXJnZXRQbGF5ZXJOYW1lEhYKBnJlYXNvbhgCIAIoCVIGcmVhc29uIlsK", 
            "FU5ldE1lc3NhZ2VDaGF0QmFuVm90ZRIqChB0YXJnZXRQbGF5ZXJOYW1lGAEg", 
            "AigJUhB0YXJnZXRQbGF5ZXJOYW1lEhYKBnJlYXNvbhgCIAEoCVIGcmVhc29u", 
            "It4BChROZXRNZXNzYWdlR2V0Q2F0YWxvZxI5ChZpdGVtUHJvdG90eXBlUnVu", 
            "dGltZUlkGAEgASgEOgEwUhZpdGVtUHJvdG90eXBlUnVudGltZUlkEi4KEXRp", 
            "bWVzdGFtcF9zZWNvbmRzGAMgASgDOgEwUhB0aW1lc3RhbXBTZWNvbmRzEjgK", 
            "FnRpbWVzdGFtcF9taWNyb3NlY29uZHMYBSABKAM6ATBSFXRpbWVzdGFtcE1p", 
            "Y3Jvc2Vjb25kcxIhCghsb2NhbGVpZBgEIAEoCToFZW5fdXNSCGxvY2FsZWlk", 
            "Ih4KHE5ldE1lc3NhZ2VHZXRDdXJyZW5jeUJhbGFuY2UieQocTmV0TWVzc2Fn", 
            "ZUJ1eUl0ZW1Gcm9tQ2F0YWxvZxIUCgVza3VJZBgBIAIoA1IFc2t1SWQSJAoN", 
            "aXRlbVVuaXRQcmljZRgCIAIoA1INaXRlbVVuaXRQcmljZRIdCghudW1Vbml0", 
            "cxgDIAEoBToBMVIIbnVtVW5pdHMixAEKH05ldE1lc3NhZ2VCdXlHaWZ0Rm9y", 
            "T3RoZXJQbGF5ZXISFAoFc2t1SWQYASACKANSBXNrdUlkEiQKDWl0ZW1Vbml0", 
            "UHJpY2UYAiACKANSDWl0ZW1Vbml0UHJpY2USJAoNcmVjaXBpZW50TmFtZRgD", 
            "IAIoCVINcmVjaXBpZW50TmFtZRIdCghudW1Vbml0cxgEIAEoBToBMVIIbnVt", 
            "VW5pdHMSIAoLZ2lmdE1lc3NhZ2UYBSABKAlSC2dpZnRNZXNzYWdlIkYKGE5l", 
            "dE1lc3NhZ2VQdXJjaGFzZVVubG9jaxIqChBhZ2VudFByb3RvdHlwZUlkGAEg", 
            "AigDUhBhZ2VudFByb3RvdHlwZUlkIhoKGE5ldE1lc3NhZ2VHZXRHaWZ0SGlz", 
            "dG9yeSJBChNFbnRpdHlQcmV2aWV3ZXJFbnVtIioKCEFsbGlhbmNlEggKBEFs", 
            "bHkQABIJCgVFbmVteRABEgkKBVRvdGFsEAIikAEKI05ldE1lc3NhZ2VFbnRp", 
            "dHlQcmV2aWV3ZXJOZXdUYXJnZXRzEkMKCGFsbGlhbmNlGAEgAigOMicuR2F6", 
            "aWxsaW9uLkVudGl0eVByZXZpZXdlckVudW0uQWxsaWFuY2VSCGFsbGlhbmNl", 
            "EiQKDW51bU5ld1RhcmdldHMYAiABKA1SDW51bU5ld1RhcmdldHMiJwolTmV0", 
            "TWVzc2FnZUVudGl0eVByZXZpZXdlckNsZWFyVGFyZ2V0cyJJCiVOZXRNZXNz", 
            "YWdlRW50aXR5UHJldmlld2VyU2V0VGFyZ2V0UmVmEiAKC3RhcmdldFJlZklk", 
            "GAEgAigEUgt0YXJnZXRSZWZJZCKyAQomTmV0TWVzc2FnZUVudGl0eVByZXZp", 
            "ZXdlckFjdGl2YXRlUG93ZXISGgoIY2FzdGVySWQYASACKARSCGNhc3Rlcklk", 
            "Eh4KCnBvd2VyUmVmSWQYAiACKARSCnBvd2VyUmVmSWQSIgoMY3JlYXRlVGFy", 
            "Z2V0GAMgAigIUgxjcmVhdGVUYXJnZXQSKAoPcmFuZG9tVGFyZ2V0UG9zGAQg", 
            "AigIUg9yYW5kb21UYXJnZXRQb3MiQAoiTmV0TWVzc2FnZUVudGl0eVByZXZp", 
            "ZXdlckFkZFRhcmdldBIaCgh0YXJnZXRJZBgBIAIoBFIIdGFyZ2V0SWQiZQon", 
            "TmV0TWVzc2FnZUVudGl0eVByZXZpZXdlclNldEVudGl0eVN0YXRlEhoKCHRh", 
            "cmdldElkGAEgAigEUgh0YXJnZXRJZBIeCgpzdGF0ZVJlZklkGAIgAigEUgpz", 
            "dGF0ZVJlZklkImYKKE5ldE1lc3NhZ2VFbnRpdHlQcmV2aWV3ZXJBcHBseUNv", 
            "bmRpdGlvbnMSGgoIdGFyZ2V0SWQYASACKARSCHRhcmdldElkEh4KCnBvd2Vy", 
            "UmVmSWQYAiACKARSCnBvd2VyUmVmSWQikQEKM05ldE1lc3NhZ2VDcmVhdGVO", 
            "ZXdQbGF5ZXJXaXRoU2VsZWN0ZWRTdGFydGluZ0F2YXRhchI8ChlzdGFydGlu", 
            "Z0F2YXRhclByb3RvdHlwZUlkGAEgAigEUhlzdGFydGluZ0F2YXRhclByb3Rv", 
            "dHlwZUlkEhwKCXRvdGFsVGltZRgCIAIoDVIJdG90YWxUaW1lIiUKI05ldE1l", 
            "c3NhZ2VPbktpb3NrU3RhcnRCdXR0b25QcmVzc2VkIlQKJk5ldE1lc3NhZ2VO", 
            "b3RpZnlGdWxsc2NyZWVuTW92aWVTdGFydGVkEioKEG1vdmllUHJvdG90eXBl", 
            "SWQYASACKARSEG1vdmllUHJvdG90eXBlSWQioQEKJ05ldE1lc3NhZ2VOb3Rp", 
            "ZnlGdWxsc2NyZWVuTW92aWVGaW5pc2hlZBIqChBtb3ZpZVByb3RvdHlwZUlk", 
            "GAEgAigEUhBtb3ZpZVByb3RvdHlwZUlkEiQKDXVzZXJDYW5jZWxsZWQYAiAC", 
            "KAhSDXVzZXJDYW5jZWxsZWQSJAoNc3luY1JlcXVlc3RJZBgDIAIoDVINc3lu", 
            "Y1JlcXVlc3RJZCInCiVOZXRNZXNzYWdlTm90aWZ5TG9hZGluZ1NjcmVlbkZp", 
            "bmlzaGVkIi0KFU5ldE1lc3NhZ2VCb3RTZXRMZXZlbBIUCgVsZXZlbBgBIAIo", 
            "BVIFbGV2ZWwiFgoUTmV0TWVzc2FnZUJvdEdvZE1vZGUipQEKF05ldE1lc3Nh", 
            "Z2VCb3RQaWNrQXZhdGFyEigKD2F2YXRhckJvdERhdGFJZBgBIAIoBFIPYXZh", 
            "dGFyQm90RGF0YUlkEhQKBWxldmVsGAIgASgFUgVsZXZlbBIkCg1sb290UHJv", 
            "dG90eXBlGAMgASgEUg1sb290UHJvdG90eXBlEiQKDWxvb3RUYWJsZVJvbGwY", 
            "BCABKA1SDWxvb3RUYWJsZVJvbGwiPwoZTmV0TWVzc2FnZUJvdFJlZ2lvbkNo", 
            "YW5nZRIiCgxyZWdpb25EYXRhSWQYASACKARSDHJlZ2lvbkRhdGFJZCIbChlO", 
            "ZXRNZXNzYWdlQm90V2FycEFyZWFOZXh0ImMKFU5ldE1lc3NhZ2VCb3RMb290", 
            "R2l2ZRIkCg1sb290UHJvdG90eXBlGAEgAigEUg1sb290UHJvdG90eXBlEiQK", 
            "DWxvb3RUYWJsZVJvbGwYAiACKA1SDWxvb3RUYWJsZVJvbGwiTgoaTmV0TWVz", 
            "c2FnZUJvdFNldFB2UEZhY3Rpb24SMAoTZmFjdGlvblNldFByb3RvdHlwZRgB", 
            "IAIoBFITZmFjdGlvblNldFByb3RvdHlwZSI3ChVOZXRNZXNzYWdlQm90UHZQ", 
            "UXVldWUSHgoKcHZwUXVldWVJZBgBIAIoBFIKcHZwUXVldWVJZCJuChpOZXRN", 
            "ZXNzYWdlR2V0VHJhY2tlclJlcG9ydBIkCg1tZXNzYWdlU291cmNlGAEgAigN", 
            "Ug1tZXNzYWdlU291cmNlEioKEG1lc3NhZ2VEaXJlY3Rpb24YAiACKA1SEG1l", 
            "c3NhZ2VEaXJlY3Rpb24idwobTmV0TWVzc2FnZVBsYXlLaXNtZXRTZXFEb25l", 
            "EjIKFGtpc21ldFNlcVByb3RvdHlwZUlkGAEgAigEUhRraXNtZXRTZXFQcm90", 
            "b3R5cGVJZBIkCg1zeW5jUmVxdWVzdElkGAIgAigNUg1zeW5jUmVxdWVzdElk", 
            "IpQBCh5OZXRNZXNzYWdlVmVyaWZ5RmFpbGVkRm9yUmVwSWQSFgoGcmVwaWQx", 
            "GAEgAigEUgZyZXBpZDESEgoEZmlsZRgCIAIoCVIEZmlsZRISCgRsaW5lGAMg", 
            "AigNUgRsaW5lEhoKCGRlYnVnbXNnGAQgAigJUghkZWJ1Z21zZxIWCgZyZXBp", 
            "ZDIYBSABKARSBnJlcGlkMiIeChxOZXRNZXNzYWdlR3JhY2VmdWxEaXNjb25u", 
            "ZWN0Ih8KHU5ldE1lc3NhZ2VSZXF1ZXN0U3RhcnROZXdHYW1lIlsKGU5ldE1l", 
            "c3NhZ2VTZXREaWFsb2dUYXJnZXQSGgoIdGFyZ2V0SWQYASACKARSCHRhcmdl", 
            "dElkEiIKDGludGVyYWN0b3JJZBgCIAIoBFIMaW50ZXJhY3RvcklkIsEBChZO", 
            "ZXRNZXNzYWdlRGlhbG9nUmVzdWx0EhoKCHNlcnZlcklkGAEgAigEUghzZXJ2", 
            "ZXJJZBIeCgpwbGF5ZXJHdWlkGAIgAigEUgpwbGF5ZXJHdWlkEkEKC2J1dHRv", 
            "bkluZGV4GAMgAigOMh8uR2F6aWxsaW9uLkdhbWVEaWFsb2dSZXN1bHRFbnVt", 
            "UgtidXR0b25JbmRleBIoCg9jaGVja2JveENsaWNrZWQYBCACKAhSD2NoZWNr", 
            "Ym94Q2xpY2tlZCJ+CiJOZXRNZXNzYWdlVmVuZG9yUmVxdWVzdEJ1eUl0ZW1G", 
            "cm9tEhYKBml0ZW1JZBgBIAIoBFIGaXRlbUlkEhoKCHZlbmRvcklkGAIgAigE", 
            "Ugh2ZW5kb3JJZBIkCg1pbnZlbnRvcnlTbG90GAMgAigNUg1pbnZlbnRvcnlT", 
            "bG90IlcKIU5ldE1lc3NhZ2VWZW5kb3JSZXF1ZXN0U2VsbEl0ZW1UbxIWCgZp", 
            "dGVtSWQYASACKARSBml0ZW1JZBIaCgh2ZW5kb3JJZBgCIAIoBFIIdmVuZG9y", 
            "SWQiWQojTmV0TWVzc2FnZVZlbmRvclJlcXVlc3REb25hdGVJdGVtVG8SFgoG", 
            "aXRlbUlkGAEgAigEUgZpdGVtSWQSGgoIdmVuZG9ySWQYAiACKARSCHZlbmRv", 
            "cklkIjwKHk5ldE1lc3NhZ2VWZW5kb3JSZXF1ZXN0UmVmcmVzaBIaCgh2ZW5k", 
            "b3JJZBgBIAIoBFIIdmVuZG9ySWQipgEKKE5ldE1lc3NhZ2VUcnlNb2RpZnlD", 
            "b21tdW5pdHlNZW1iZXJDaXJjbGUSGgoIY2lyY2xlSWQYASACKARSCGNpcmNs", 
            "ZUlkEj4KCW9wZXJhdGlvbhgCIAIoDjIgLkdhemlsbGlvbi5Nb2RpZnlDaXJj", 
            "bGVPcGVyYXRpb25SCW9wZXJhdGlvbhIeCgpwbGF5ZXJOYW1lGAMgAigJUgpw", 
            "bGF5ZXJOYW1lIh8KHU5ldE1lc3NhZ2VQdWxsQ29tbXVuaXR5U3RhdHVzIm4K", 
            "JU5ldE1lc3NhZ2VHdWlsZE1lc3NhZ2VUb1BsYXllck1hbmFnZXISRQoIbWVz", 
            "c2FnZXMYASACKAsyKS5HYXppbGxpb24uR3VpbGRNZXNzYWdlU2V0VG9QbGF5", 
            "ZXJNYW5hZ2VyUghtZXNzYWdlcyKGAQoRTmV0TWVzc2FnZUFrRXZlbnQSHAoJ", 
            "YWtFdmVudElkGAEgAigNUglha0V2ZW50SWQSEgoEaXNWTxgCIAIoCFIEaXNW", 
            "TxIcCglldmVudFR5cGUYAyACKA1SCWV2ZW50VHlwZRIhCgpjb29sZG93bk1T", 
            "GAQgASgNOgEwUgpjb29sZG93bk1TIjMKFU5ldE1lc3NhZ2VTZXRTaG93VGlw", 
            "cxIaCghzaG93VGlwcxgBIAIoCFIIc2hvd1RpcHMiYgoUTmV0TWVzc2FnZVNl", 
            "dFRpcFNlZW4SIgoMdGlwRGF0YVJlZklkGAEgAigEUgx0aXBEYXRhUmVmSWQS", 
            "JgoOYXZhdGFyRW50aXR5SWQYAiACKARSDmF2YXRhckVudGl0eUlkIhkKF05l", 
            "dE1lc3NhZ2VSZXNldFNlZW5UaXBzIlAKHk5ldE1lc3NhZ2VIVURUdXRvcmlh", 
            "bERpc21pc3NlZBIuChJodWRUdXRvcmlhbFByb3RvSWQYASACKARSEmh1ZFR1", 
            "dG9yaWFsUHJvdG9JZCJpCitOZXRNZXNzYWdlVHJ5TW92ZUludmVudG9yeUNv", 
            "bnRlbnRzVG9HZW5lcmFsEjoKGHNvdXJjZUludmVudG9yeVByb3RvdHlwZRgB", 
            "IAIoBFIYc291cmNlSW52ZW50b3J5UHJvdG90eXBlImsKIk5ldE1lc3NhZ2VT", 
            "ZXRQbGF5ZXJHYW1lcGxheU9wdGlvbnMSRQoLb3B0aW9uc0RhdGEYASACKAsy", 
            "Iy5HYXppbGxpb24uTmV0U3RydWN0R2FtZXBsYXlPcHRpb25zUgtvcHRpb25z", 
            "RGF0YSJBCh9OZXRNZXNzYWdlVGVsZXBvcnRUb1BhcnR5TWVtYmVyEh4KCnBs", 
            "YXllck5hbWUYASACKAlSCnBsYXllck5hbWUi9wEKKU5ldE1lc3NhZ2VSZWdp", 
            "b25SZXF1ZXN0UXVldWVDb21tYW5kQ2xpZW50EiQKDXJlZ2lvblByb3RvSWQY", 
            "ASACKARSDXJlZ2lvblByb3RvSWQSMgoUcmVnaW9uUmVxdWVzdEdyb3VwSWQY", 
            "AiABKARSFHJlZ2lvblJlcXVlc3RHcm91cElkEkEKB2NvbW1hbmQYAyACKA4y", 
            "Jy5HYXppbGxpb24uUmVnaW9uUmVxdWVzdFF1ZXVlQ29tbWFuZFZhclIHY29t", 
            "bWFuZBItCg5hbGxvd0F1dG9QYXJ0eRgEIAEoCDoFZmFsc2VSDmFsbG93QXV0", 
            "b1BhcnR5ImkKH05ldE1lc3NhZ2VTZWxlY3RBdmF0YXJTeW5lcmdpZXMSGgoI", 
            "YXZhdGFySWQYASACKARSCGF2YXRhcklkEioKEGF2YXRhclByb3RvdHlwZXMY", 
            "AiADKARSEGF2YXRhclByb3RvdHlwZXMiKQonTmV0TWVzc2FnZVJlcXVlc3RM", 
            "ZWdlbmRhcnlNaXNzaW9uUmVyb2xsIkgKJk5ldE1lc3NhZ2VBdHRlbXB0U2hh", 
            "cmVMZWdlbmRhcnlNaXNzaW9uEh4KCnBsYXllck5hbWUYASACKAlSCnBsYXll", 
            "ck5hbWUiWgouTmV0TWVzc2FnZUF0dGVtcHRTaGFyZUxlZ2VuZGFyeU1pc3Np", 
            "b25SZXNwb25zZRIoCg9taXNzaW9uQWNjZXB0ZWQYASACKAhSD21pc3Npb25B", 
            "Y2NlcHRlZCJJCiVOZXRNZXNzYWdlUmVxdWVzdFBsYXllck93bnNJdGVtU3Rh", 
            "dHVzEiAKC2l0ZW1Qcm90b0lkGAEgAigEUgtpdGVtUHJvdG9JZCJSCiROZXRN", 
            "ZXNzYWdlUmVxdWVzdEludGVyZXN0SW5JbnZlbnRvcnkSKgoQaW52ZW50b3J5", 
            "UHJvdG9JZBgBIAIoBFIQaW52ZW50b3J5UHJvdG9JZCJ6CipOZXRNZXNzYWdl", 
            "UmVxdWVzdEludGVyZXN0SW5BdmF0YXJFcXVpcG1lbnQSJAoNYXZhdGFyUHJv", 
            "dG9JZBgBIAIoBFINYXZhdGFyUHJvdG9JZBImCg5hdmF0YXJNb2RlRW51bRgC", 
            "IAIoDVIOYXZhdGFyTW9kZUVudW0iUgoqTmV0TWVzc2FnZVJlcXVlc3RJbnRl", 
            "cmVzdEluVGVhbVVwRXF1aXBtZW50EiQKDXRlYW1VcFByb3RvSWQYASACKARS", 
            "DXRlYW1VcFByb3RvSWQiSQoZTmV0TWVzc2FnZVRyeVRlYW1VcFNlbGVjdBIs", 
            "ChF0ZWFtVXBQcm90b3R5cGVJZBgBIAIoBFIRdGVhbVVwUHJvdG90eXBlSWQi", 
            "IAoeTmV0TWVzc2FnZVJlcXVlc3RUZWFtVXBEaXNtaXNzIkAKHk5ldE1lc3Nh", 
            "Z2VUcnlUZWFtVXBTdHlsZVNlbGVjdBIeCgpzdHlsZUluZGV4GAEgAigNUgpz", 
            "dHlsZUluZGV4ImgKGk5ldE1lc3NhZ2VTZWxlY3RPbWVnYUJvbnVzEjIKFG9t", 
            "ZWdhQm9udXNQcm90b1JlZklEGAEgAigEUhRvbWVnYUJvbnVzUHJvdG9SZWZJ", 
            "RBIWCgZwb2ludHMYAiACKAVSBnBvaW50cyKLAQokTmV0TWVzc2FnZU9tZWdh", 
            "Qm9udXNBbGxvY2F0aW9uQ29tbWl0EhoKCGF2YXRhcklkGAEgAigEUghhdmF0", 
            "YXJJZBJHCgthbGxvY2F0aW9ucxgCIAMoCzIlLkdhemlsbGlvbi5OZXRNZXNz", 
            "YWdlU2VsZWN0T21lZ2FCb251c1ILYWxsb2NhdGlvbnMiOAoaTmV0TWVzc2Fn", 
            "ZVJlc3BlY09tZWdhQm9udXMSGgoIYXZhdGFySWQYASACKARSCGF2YXRhcklk", 
            "ImUKGU5ldE1lc3NhZ2VSZXNwZWNQb3dlclNwZWMSIAoLY2hhcmFjdGVySWQY", 
            "ASACKARSC2NoYXJhY3RlcklkEiYKDnBvd2VyU3BlY0luZGV4GAIgAigFUg5w", 
            "b3dlclNwZWNJbmRleCJUChxOZXRNZXNzYWdlTmV3SXRlbUdsaW50UGxheWVk", 
            "EhoKCHBsYXllcklkGAEgAigEUghwbGF5ZXJJZBIYCgdpdGVtSWRzGAIgAygE", 
            "UgdpdGVtSWRzIlcKIU5ldE1lc3NhZ2VOZXdJdGVtSGlnaGxpZ2h0Q2xlYXJl", 
            "ZBIaCghwbGF5ZXJJZBgBIAIoBFIIcGxheWVySWQSFgoGaXRlbUlkGAIgAigE", 
            "UgZpdGVtSWQiawodTmV0TWVzc2FnZVVuYXNzaWduTWFwcGVkUG93ZXISGgoI", 
            "YXZhdGFySWQYASACKARSCGF2YXRhcklkEi4KEm1hcHBlZFBvd2VyUHJvdG9J", 
            "ZBgCIAIoBFISbWFwcGVkUG93ZXJQcm90b0lkIlUKG05ldE1lc3NhZ2VWYW5p", 
            "dHlUaXRsZVNlbGVjdBI2ChZ2YW5pdHlUaXRsZVByb3RvdHlwZUlkGAEgAigE", 
            "UhZ2YW5pdHlUaXRsZVByb3RvdHlwZUlkIoABCiJOZXRNZXNzYWdlUmVxdWVz", 
            "dEdsb2JhbEV2ZW50VXBkYXRlEhgKB2V2ZW50SWQYASACKARSB2V2ZW50SWQS", 
            "QAoKdXBkYXRlVHlwZRgCIAIoDjIgLkdhemlsbGlvbi5HbG9iYWxFdmVudFVw", 
            "ZGF0ZVR5cGVSCnVwZGF0ZVR5cGUiQgoYTmV0TWVzc2FnZUhhc1BlbmRpbmdH", 
            "aWZ0EiYKDmhhc1BlbmRpbmdHaWZ0GAEgASgIUg5oYXNQZW5kaW5nR2lmdCJK", 
            "ChpOZXRNZXNzYWdlUGxheWVyVHJhZGVTdGFydBIsChFwYXJ0bmVyUGxheWVy", 
            "TmFtZRgBIAIoCVIRcGFydG5lclBsYXllck5hbWUiHQobTmV0TWVzc2FnZVBs", 
            "YXllclRyYWRlQ2FuY2VsIm8KI05ldE1lc3NhZ2VQbGF5ZXJUcmFkZVNldENv", 
            "bmZpcm1GbGFnEiAKC2NvbmZpcm1GbGFnGAEgAigIUgtjb25maXJtRmxhZxIm", 
            "Cg5zZXF1ZW5jZU51bWJlchgCIAIoDVIOc2VxdWVuY2VOdW1iZXIiVAoeTmV0", 
            "TWVzc2FnZVJlcXVlc3RQZXRUZWNoRG9uYXRlEhYKBml0ZW1JZBgBIAIoBFIG", 
            "aXRlbUlkEhoKCGF2YXRhcklkGAIgAigEUghhdmF0YXJJZCJaChxOZXRNZXNz", 
            "YWdlU2V0QWN0aXZlUG93ZXJTcGVjEhoKCGF2YXRhcklkGAEgAigEUghhdmF0", 
            "YXJJZBIeCgphY3RpdmVTcGVjGAIgAigNUgphY3RpdmVTcGVjIkgKHk5ldE1l", 
            "c3NhZ2VDaGFuZ2VDYW1lcmFTZXR0aW5ncxImCg5jYW1lcmFTZXR0aW5ncxgB", 
            "IAIoBFIOY2FtZXJhU2V0dGluZ3MiZgocTmV0TWVzc2FnZVJlcXVlc3RTb2Nr", 
            "ZXRBZmZpeBIeCgpkZXN0SXRlbUlkGAEgAigEUgpkZXN0SXRlbUlkEiYKDmdl", 
            "bUFmZml4SXRlbUlkGAIgAigEUg5nZW1BZmZpeEl0ZW1JZCJVChtOZXRNZXNz", 
            "YWdlVUlTeXN0ZW1Mb2NrU3RhdGUSIAoLcHJvdG90eXBlSWQYASACKARSC3By", 
            "b3RvdHlwZUlkEhQKBXN0YXRlGAIgAigNUgVzdGF0ZSKPAQojTmV0TWVzc2Fn", 
            "ZUVuYWJsZVNwZWNpYWxpemF0aW9uUG93ZXISGgoIYXZhdGFySWQYASACKARS", 
            "CGF2YXRhcklkEiAKC3Byb3RvdHlwZUlkGAIgAigEUgtwcm90b3R5cGVJZBIW", 
            "CgZlbmFibGUYAyACKAhSBmVuYWJsZRISCgRzcGVjGAQgAigNUgRzcGVjIkIK", 
            "Hk5ldE1lc3NhZ2VTdGFzaEludmVudG9yeVZpZXdlZBIgCgtwcm90b3R5cGVJ", 
            "ZBgBIAIoBFILcHJvdG90eXBlSWQiQAocTmV0TWVzc2FnZVN0YXNoQ3VycmVu", 
            "dGx5T3BlbhIgCgtwcm90b3R5cGVJZBgBIAIoBFILcHJvdG90eXBlSWQiqAEK", 
            "HE5ldE1lc3NhZ2VXaWRnZXRCdXR0b25SZXN1bHQSIAoLd2lkZ2V0UmVmSWQY", 
            "ASACKARSC3dpZGdldFJlZklkEi4KEndpZGdldENvbnRleHRSZWZJZBgCIAIo", 
            "BFISd2lkZ2V0Q29udGV4dFJlZklkEh4KCnBsYXllckd1aWQYAyACKARSCnBs", 
            "YXllckd1aWQSFgoGcmVzdWx0GAQgAigIUgZyZXN1bHQiUgoYTmV0TWVzc2Fn", 
            "ZVN0YXNoVGFiSW5zZXJ0EhQKBWludklkGAEgAigEUgVpbnZJZBIgCgtpbnNl", 
            "cnRJbmRleBgCIAIoBFILaW5zZXJ0SW5kZXgipQEKGU5ldE1lc3NhZ2VTdGFz", 
            "aFRhYk9wdGlvbnMSJgoOaW52ZW50b3J5UmVmSWQYASACKARSDmludmVudG9y", 
            "eVJlZklkEiAKC2Rpc3BsYXlOYW1lGAIgASgJUgtkaXNwbGF5TmFtZRIoCg9p", 
            "Y29uUGF0aEFzc2V0SWQYAyABKARSD2ljb25QYXRoQXNzZXRJZBIUCgVjb2xv", 
            "chgEIAEoDVIFY29sb3Ii0AIKHE5ldE1lc3NhZ2VMZWFkZXJib2FyZFJlcXVl", 
            "c3QSUgoQcGxheWVyU2NvcmVRdWVyeRgBIAEoCzImLkdhemlsbGlvbi5MZWFk", 
            "ZXJib2FyZFBsYXllclNjb3JlUXVlcnlSEHBsYXllclNjb3JlUXVlcnkSTwoP", 
            "Z3VpbGRTY29yZVF1ZXJ5GAIgASgLMiUuR2F6aWxsaW9uLkxlYWRlcmJvYXJk", 
            "R3VpbGRTY29yZVF1ZXJ5Ug9ndWlsZFNjb3JlUXVlcnkSTAoObWV0YVNjb3Jl", 
            "UXVlcnkYAyABKAsyJC5HYXppbGxpb24uTGVhZGVyYm9hcmRNZXRhU2NvcmVR", 
            "dWVyeVIObWV0YVNjb3JlUXVlcnkSPQoJZGF0YVF1ZXJ5GAQgASgLMh8uR2F6", 
            "aWxsaW9uLkxlYWRlcmJvYXJkRGF0YVF1ZXJ5UglkYXRhUXVlcnkiWgowTmV0", 
            "TWVzc2FnZUxlYWRlcmJvYXJkQXJjaGl2ZWRJbnN0YW5jZUxpc3RSZXF1ZXN0", 
            "EiYKDmxlYWRlcmJvYXJkSWRzGAEgAygEUg5sZWFkZXJib2FyZElkcyJQCiZO", 
            "ZXRNZXNzYWdlTGVhZGVyYm9hcmRJbml0aWFsaXplUmVxdWVzdBImCg5sZWFk", 
            "ZXJib2FyZElkcxgBIAMoBFIObGVhZGVyYm9hcmRJZHMiTwofTmV0TWVzc2Fn", 
            "ZVJlcXVlc3RMb2NhbENvb3BTdGFydBIsChFhdmF0YXJQcm90b3R5cGVJZBgB", 
            "IAIoBFIRYXZhdGFyUHJvdG90eXBlSWQiHwodTmV0TWVzc2FnZVJlcXVlc3RM", 
            "b2NhbENvb3BFbmQiIAoeTmV0TWVzc2FnZUNvdXBvbkF3YXJkUHJlc2VudGVk", 
            "IkAKJE5ldE1lc3NhZ2VCaWxsaW5nUm91dGVkQ2xpZW50TWVzc2FnZRIYCgdw", 
          "YXlsb2FkGAEgAigMUgdwYXlsb2Fk"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForGameJoin, global::Gazillion.NetMessageReadyForGameJoin.Builder>(internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor,
                new string[] { "WipesDataIfMismatchedInDb", "WipePlayerRecordsOnLogin", "DomainLoginName", "PlayerImportData", "LocaleName", "ClientOperatingSystem", "StreamingSession", });
        internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSystemMetrics, global::Gazillion.NetMessagePlayerSystemMetrics.Builder>(internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor,
                new string[] { "CompatLevelCpu", "CompatLevelGpu", "CompatLevelComposite", "OsName", "CpuName", "RamName", "DisplayDeviceName", "DisplayDeviceDualGPU", "DisplayDeviceDriverDate", "UserLanguage", });
        internal__static_Gazillion_NetMessagePlayerSteamInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_NetMessagePlayerSteamInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerSteamInfo, global::Gazillion.NetMessagePlayerSteamInfo.Builder>(internal__static_Gazillion_NetMessagePlayerSteamInfo__Descriptor,
                new string[] { "SteamUserId", "UpdateSteamSeqNum", });
        internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeRequest, global::Gazillion.NetMessageSyncTimeRequest.Builder>(internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor,
                new string[] { "GameTimeClientSent", "DateTimeClientSent", });
        internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimeDialation, global::Gazillion.NetMessageSetTimeDialation.Builder>(internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor,
                new string[] { "GameTimeDialationStarted", "DateTimeDialationStarted", "Dialation", });
        internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageIsRegionAvailable, global::Gazillion.NetMessageIsRegionAvailable.Builder>(internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor,
                new string[] { "RegionPrototype", "IsAvailable", });
        internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateAvatarState, global::Gazillion.NetMessageUpdateAvatarState.Builder>(internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageCellLoaded__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellLoaded, global::Gazillion.NetMessageCellLoaded.Builder>(internal__static_Gazillion_NetMessageCellLoaded__Descriptor,
                new string[] { "CellId", "RegionId", });
        internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckResponse, global::Gazillion.NetMessageTeleportAckResponse.Builder>(internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor,
                new string[] { "Ackseq", });
        internal__static_Gazillion_NetMessageAdminCommand__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommand, global::Gazillion.NetMessageAdminCommand.Builder>(internal__static_Gazillion_NetMessageAdminCommand__Descriptor,
                new string[] { "Command", });
        internal__static_Gazillion_NetMessageTryActivatePower__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryActivatePower, global::Gazillion.NetMessageTryActivatePower.Builder>(internal__static_Gazillion_NetMessageTryActivatePower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", "MovementSpeed", "MovementTimeMS", "PowerRandomSeed", "ItemSourceId", "FxRandomSeed", "TriggeringPowerPrototypeId", });
        internal__static_Gazillion_NetMessagePowerRelease__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerRelease, global::Gazillion.NetMessagePowerRelease.Builder>(internal__static_Gazillion_NetMessagePowerRelease__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessageTryCancelPower__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelPower, global::Gazillion.NetMessageTryCancelPower.Builder>(internal__static_Gazillion_NetMessageTryCancelPower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "EndPowerFlags", });
        internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCancelActivePower, global::Gazillion.NetMessageTryCancelActivePower.Builder>(internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor,
                new string[] { "IdUserEntity", });
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToServer, global::Gazillion.NetMessageContinuousPowerUpdateToServer.Builder>(internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor,
                new string[] { "PowerPrototypeId", "AvatarIndex", "IdTargetEntity", "TargetPosition", "RandomSeed", });
        internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingAction, global::Gazillion.NetMessageCancelPendingAction.Builder>(internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor,
                new string[] { "AvatarIndex", });
        internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIDebugUI, global::Gazillion.NetMessageStartAIDebugUI.Builder>(internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor,
                new string[] { "IdTargetNPC", });
        internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIDebugUI, global::Gazillion.NetMessageStopAIDebugUI.Builder>(internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor,
                new string[] { "IdTargetNPC", });
        internal__static_Gazillion_NetMessageStartAIPerformanceUI__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Gazillion_NetMessageStartAIPerformanceUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartAIPerformanceUI, global::Gazillion.NetMessageStartAIPerformanceUI.Builder>(internal__static_Gazillion_NetMessageStartAIPerformanceUI__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageStopAIPerformanceUI__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Gazillion_NetMessageStopAIPerformanceUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopAIPerformanceUI, global::Gazillion.NetMessageStopAIPerformanceUI.Builder>(internal__static_Gazillion_NetMessageStopAIPerformanceUI__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartMissionDebugUI, global::Gazillion.NetMessageStartMissionDebugUI.Builder>(internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor,
                new string[] { "IdTargetAgent", "MissionPrototypeRefId", "MissionListMatchPattern", });
        internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopMissionDebugUI, global::Gazillion.NetMessageStopMissionDebugUI.Builder>(internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor,
                new string[] { "IdTargetAgent", });
        internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPropertiesDebugUI, global::Gazillion.NetMessageStartPropertiesDebugUI.Builder>(internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPropertiesDebugUI, global::Gazillion.NetMessageStopPropertiesDebugUI.Builder>(internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartConditionsDebugUI, global::Gazillion.NetMessageStartConditionsDebugUI.Builder>(internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopConditionsDebugUI, global::Gazillion.NetMessageStopConditionsDebugUI.Builder>(internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPowersDebugUI, global::Gazillion.NetMessageStartPowersDebugUI.Builder>(internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPowersDebugUI, global::Gazillion.NetMessageStopPowersDebugUI.Builder>(internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor,
                new string[] { "IdTargetEntity", });
        internal__static_Gazillion_NetStructMessageStoreMetric__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Gazillion_NetStructMessageStoreMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMessageStoreMetric, global::Gazillion.NetStructMessageStoreMetric.Builder>(internal__static_Gazillion_NetStructMessageStoreMetric__Descriptor,
                new string[] { "StoreActionEnum", "UnixTimestamp", "TargetPrototypeId", });
        internal__static_Gazillion_NetMessagePing__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Gazillion_NetMessagePing__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePing, global::Gazillion.NetMessagePing.Builder>(internal__static_Gazillion_NetMessagePing__Descriptor,
                new string[] { "DisplayOutput", "SendClientTime", "SendGameTime", "RequestNetReceivedGameTime", "LastClientLatency", "LastFps", "RegionPrototype", "Cpulevel", "Gpulevel", "Compositelevel", "Countrycode", "MinFps", "MinFpsPos", "StoreMetrics", "Streamingclient", });
        internal__static_Gazillion_NetMessageFPS__Descriptor = Descriptor.MessageTypes[30];
        internal__static_Gazillion_NetMessageFPS__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFPS, global::Gazillion.NetMessageFPS.Builder>(internal__static_Gazillion_NetMessageFPS__Descriptor,
                new string[] { "AvgFps", "MinFps", "NumHitches", "RegionPrototype", "Cpulevel", "Gpulevel", "Compositelevel", "Streamingclient", });
        internal__static_Gazillion_NetMessagePickupInteraction__Descriptor = Descriptor.MessageTypes[31];
        internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePickupInteraction, global::Gazillion.NetMessagePickupInteraction.Builder>(internal__static_Gazillion_NetMessagePickupInteraction__Descriptor,
                new string[] { "IdTarget", "AvatarIndex", "UseInteractFallbackRange", });
        internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor = Descriptor.MessageTypes[32];
        internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryInventoryMove, global::Gazillion.NetMessageTryInventoryMove.Builder>(internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor,
                new string[] { "ItemId", "ToInventoryOwnerId", "ToInventoryPrototype", "ToSlot", "IsStackSplit", });
        internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor = Descriptor.MessageTypes[33];
        internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral, global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Builder>(internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor = Descriptor.MessageTypes[34];
        internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryTrashItem, global::Gazillion.NetMessageInventoryTrashItem.Builder>(internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor,
                new string[] { "ItemId", });
        internal__static_Gazillion_NetMessageThrowInteraction__Descriptor = Descriptor.MessageTypes[35];
        internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageThrowInteraction, global::Gazillion.NetMessageThrowInteraction.Builder>(internal__static_Gazillion_NetMessageThrowInteraction__Descriptor,
                new string[] { "IdTarget", "AvatarIndex", });
        internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor = Descriptor.MessageTypes[36];
        internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePerformPreInteractPower, global::Gazillion.NetMessagePerformPreInteractPower.Builder>(internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor,
                new string[] { "IdTarget", "AvatarIndex", "HasDialog", });
        internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor = Descriptor.MessageTypes[37];
        internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseInteractableObject, global::Gazillion.NetMessageUseInteractableObject.Builder>(internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor,
                new string[] { "IdTarget", "AvatarIndex", "MissionPrototypeRef", });
        internal__static_Gazillion_NetMessageTryCraft__Descriptor = Descriptor.MessageTypes[38];
        internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryCraft, global::Gazillion.NetMessageTryCraft.Builder>(internal__static_Gazillion_NetMessageTryCraft__Descriptor,
                new string[] { "IdRecipe", "IdVendor", "IdIngredients", "IsRecraft", });
        internal__static_Gazillion_NetMessageUseWaypoint__Descriptor = Descriptor.MessageTypes[39];
        internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUseWaypoint, global::Gazillion.NetMessageUseWaypoint.Builder>(internal__static_Gazillion_NetMessageUseWaypoint__Descriptor,
                new string[] { "AvatarIndex", "IdTransitionEntity", "WaypointDataRef", "RegionProtoId", });
        internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor = Descriptor.MessageTypes[40];
        internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar, global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Builder>(internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor,
                new string[] { "AvatarPrototypeId", });
        internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor = Descriptor.MessageTypes[41];
        internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchAvatar, global::Gazillion.NetMessageSwitchAvatar.Builder>(internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor,
                new string[] { "AvatarPrototypeId", "AvatarModeEnum", });
        internal__static_Gazillion_NetMessageSelectPublicEventTeam__Descriptor = Descriptor.MessageTypes[42];
        internal__static_Gazillion_NetMessageSelectPublicEventTeam__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectPublicEventTeam, global::Gazillion.NetMessageSelectPublicEventTeam.Builder>(internal__static_Gazillion_NetMessageSelectPublicEventTeam__Descriptor,
                new string[] { "TeamPrototypeId", });
        internal__static_Gazillion_NetMessageAssignHotkey__Descriptor = Descriptor.MessageTypes[43];
        internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkey, global::Gazillion.NetMessageAssignHotkey.Builder>(internal__static_Gazillion_NetMessageAssignHotkey__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "KeyMappingIndex", "SlotNumber", "DestinationSlotNumber", });
        internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor = Descriptor.MessageTypes[44];
        internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkey, global::Gazillion.NetMessageUnassignHotkey.Builder>(internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor,
                new string[] { "AvatarId", "KeyMappingIndex", "SlotNumber", });
        internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__Descriptor = Descriptor.MessageTypes[45];
        internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectAbilityKeyMapping, global::Gazillion.NetMessageSelectAbilityKeyMapping.Builder>(internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__Descriptor,
                new string[] { "AvatarId", "KeyMappingIndex", });
        internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__Descriptor = Descriptor.MessageTypes[46];
        internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySlotToAbilityBar, global::Gazillion.NetMessageAbilitySlotToAbilityBar.Builder>(internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "KeyMappingIndex", "SlotNumber", });
        internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__Descriptor = Descriptor.MessageTypes[47];
        internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnslotFromAbilityBar, global::Gazillion.NetMessageAbilityUnslotFromAbilityBar.Builder>(internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__Descriptor,
                new string[] { "AvatarId", "KeyMappingIndex", "SlotNumber", });
        internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__Descriptor = Descriptor.MessageTypes[48];
        internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwapInAbilityBar, global::Gazillion.NetMessageAbilitySwapInAbilityBar.Builder>(internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__Descriptor,
                new string[] { "AvatarId", "SlotNumberA", "SlotNumberB", });
        internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor = Descriptor.MessageTypes[49];
        internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModCommitTemporary, global::Gazillion.NetMessageModCommitTemporary.Builder>(internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor,
                new string[] { "AvatarRef", "ModTypeRef", "Changes", });
        internal__static_Gazillion_NetMessageModReset__Descriptor = Descriptor.MessageTypes[50];
        internal__static_Gazillion_NetMessageModReset__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModReset, global::Gazillion.NetMessageModReset.Builder>(internal__static_Gazillion_NetMessageModReset__Descriptor,
                new string[] { "AvatarId", "ModTypeRef", });
        internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor = Descriptor.MessageTypes[51];
        internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerPointAllocationCommit, global::Gazillion.NetMessagePowerPointAllocationCommit.Builder>(internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor,
                new string[] { "AgentRef", "Allocations", "PowerSpecIndex", });
        internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor = Descriptor.MessageTypes[52];
        internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestDeathRelease, global::Gazillion.NetMessageRequestDeathRelease.Builder>(internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor,
                new string[] { "HitOk", "ResurrectedFromOtherEntity", });
        internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor = Descriptor.MessageTypes[53];
        internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectDecline, global::Gazillion.NetMessageRequestResurrectDecline.Builder>(internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor = Descriptor.MessageTypes[54];
        internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestResurrectAvatar, global::Gazillion.NetMessageRequestResurrectAvatar.Builder>(internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageReturnToHub__Descriptor = Descriptor.MessageTypes[55];
        internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReturnToHub, global::Gazillion.NetMessageReturnToHub.Builder>(internal__static_Gazillion_NetMessageReturnToHub__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor = Descriptor.MessageTypes[56];
        internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStoryWarp, global::Gazillion.NetMessageRequestStoryWarp.Builder>(internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor,
                new string[] { "StoryWarpPrototypeId", "StoryWarpNPC", });
        internal__static_Gazillion_NetMessageRequestMissionRewards__Descriptor = Descriptor.MessageTypes[57];
        internal__static_Gazillion_NetMessageRequestMissionRewards__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestMissionRewards, global::Gazillion.NetMessageRequestMissionRewards.Builder>(internal__static_Gazillion_NetMessageRequestMissionRewards__Descriptor,
                new string[] { "MissionPrototypeId", "ConditionIndex", "EntityId", });
        internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__Descriptor = Descriptor.MessageTypes[58];
        internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent, global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent.Builder>(internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__Descriptor,
                new string[] { "AvatarId", });
        internal__static_Gazillion_NetMessageDamageMeter__Descriptor = Descriptor.MessageTypes[59];
        internal__static_Gazillion_NetMessageDamageMeter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageMeter, global::Gazillion.NetMessageDamageMeter.Builder>(internal__static_Gazillion_NetMessageDamageMeter__Descriptor,
                new string[] { "Encounterguid", "Avatarguid", "Dps", "Damagescore", "Numdeaths", });
        internal__static_Gazillion_NetMessageInvitePlayer__Descriptor = Descriptor.MessageTypes[60];
        internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInvitePlayer, global::Gazillion.NetMessageInvitePlayer.Builder>(internal__static_Gazillion_NetMessageInvitePlayer__Descriptor,
                new string[] { "InviteeEntityId", "InviteeName", "InvitingPlayerPSNSessionId", });
        internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor = Descriptor.MessageTypes[61];
        internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPartyJoinPortal, global::Gazillion.NetMessageRequestPartyJoinPortal.Builder>(internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor = Descriptor.MessageTypes[62];
        internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeclineGroupInvite, global::Gazillion.NetMessageDeclineGroupInvite.Builder>(internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLeaveGroup__Descriptor = Descriptor.MessageTypes[63];
        internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGroup, global::Gazillion.NetMessageLeaveGroup.Builder>(internal__static_Gazillion_NetMessageLeaveGroup__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor = Descriptor.MessageTypes[64];
        internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeGroupLeader, global::Gazillion.NetMessageChangeGroupLeader.Builder>(internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor,
                new string[] { "TargetMemberId", });
        internal__static_Gazillion_NetMessageBootPlayer__Descriptor = Descriptor.MessageTypes[65];
        internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBootPlayer, global::Gazillion.NetMessageBootPlayer.Builder>(internal__static_Gazillion_NetMessageBootPlayer__Descriptor,
                new string[] { "TargetMemberId", });
        internal__static_Gazillion_NetMessageDisbandGroup__Descriptor = Descriptor.MessageTypes[66];
        internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisbandGroup, global::Gazillion.NetMessageDisbandGroup.Builder>(internal__static_Gazillion_NetMessageDisbandGroup__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageGroupChangeType__Descriptor = Descriptor.MessageTypes[67];
        internal__static_Gazillion_NetMessageGroupChangeType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGroupChangeType, global::Gazillion.NetMessageGroupChangeType.Builder>(internal__static_Gazillion_NetMessageGroupChangeType__Descriptor,
                new string[] { "Type", });
        internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__Descriptor = Descriptor.MessageTypes[68];
        internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGroupChangeTypeConfirmResponse, global::Gazillion.NetMessageGroupChangeTypeConfirmResponse.Builder>(internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__Descriptor,
                new string[] { "PlayerId", "Accept", });
        internal__static_Gazillion_NetMessageDuelInvite__Descriptor = Descriptor.MessageTypes[69];
        internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelInvite, global::Gazillion.NetMessageDuelInvite.Builder>(internal__static_Gazillion_NetMessageDuelInvite__Descriptor,
                new string[] { "ChallengerEntityId", "ChallengerName", "OpponentEntityId", "OpponentName", });
        internal__static_Gazillion_NetMessageDuelAccept__Descriptor = Descriptor.MessageTypes[70];
        internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelAccept, global::Gazillion.NetMessageDuelAccept.Builder>(internal__static_Gazillion_NetMessageDuelAccept__Descriptor,
                new string[] { "ChallengedEntityId", "ChallengedName", });
        internal__static_Gazillion_NetMessageDuelCancel__Descriptor = Descriptor.MessageTypes[71];
        internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDuelCancel, global::Gazillion.NetMessageDuelCancel.Builder>(internal__static_Gazillion_NetMessageDuelCancel__Descriptor,
                new string[] { "CancellingEntityId", "CancellingName", });
        internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor = Descriptor.MessageTypes[72];
        internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameUpdateNotification, global::Gazillion.NetMessageMetaGameUpdateNotification.Builder>(internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor,
                new string[] { "MetaGameEntityId", });
        internal__static_Gazillion_NetMessageChat__Descriptor = Descriptor.MessageTypes[73];
        internal__static_Gazillion_NetMessageChat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChat, global::Gazillion.NetMessageChat.Builder>(internal__static_Gazillion_NetMessageChat__Descriptor,
                new string[] { "RoomType", "TheMessage", });
        internal__static_Gazillion_NetMessageTell__Descriptor = Descriptor.MessageTypes[74];
        internal__static_Gazillion_NetMessageTell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTell, global::Gazillion.NetMessageTell.Builder>(internal__static_Gazillion_NetMessageTell__Descriptor,
                new string[] { "TargetPlayerName", "TheMessage", });
        internal__static_Gazillion_NetMessageReportPlayer__Descriptor = Descriptor.MessageTypes[75];
        internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReportPlayer, global::Gazillion.NetMessageReportPlayer.Builder>(internal__static_Gazillion_NetMessageReportPlayer__Descriptor,
                new string[] { "TargetPlayerName", "Reason", });
        internal__static_Gazillion_NetMessageChatBanVote__Descriptor = Descriptor.MessageTypes[76];
        internal__static_Gazillion_NetMessageChatBanVote__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatBanVote, global::Gazillion.NetMessageChatBanVote.Builder>(internal__static_Gazillion_NetMessageChatBanVote__Descriptor,
                new string[] { "TargetPlayerName", "Reason", });
        internal__static_Gazillion_NetMessageGetCatalog__Descriptor = Descriptor.MessageTypes[77];
        internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCatalog, global::Gazillion.NetMessageGetCatalog.Builder>(internal__static_Gazillion_NetMessageGetCatalog__Descriptor,
                new string[] { "ItemPrototypeRuntimeId", "TimestampSeconds", "TimestampMicroseconds", "Localeid", });
        internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor = Descriptor.MessageTypes[78];
        internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalance, global::Gazillion.NetMessageGetCurrencyBalance.Builder>(internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor = Descriptor.MessageTypes[79];
        internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalog, global::Gazillion.NetMessageBuyItemFromCatalog.Builder>(internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor,
                new string[] { "SkuId", "ItemUnitPrice", "NumUnits", });
        internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__Descriptor = Descriptor.MessageTypes[80];
        internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyGiftForOtherPlayer, global::Gazillion.NetMessageBuyGiftForOtherPlayer.Builder>(internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__Descriptor,
                new string[] { "SkuId", "ItemUnitPrice", "RecipientName", "NumUnits", "GiftMessage", });
        internal__static_Gazillion_NetMessagePurchaseUnlock__Descriptor = Descriptor.MessageTypes[81];
        internal__static_Gazillion_NetMessagePurchaseUnlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePurchaseUnlock, global::Gazillion.NetMessagePurchaseUnlock.Builder>(internal__static_Gazillion_NetMessagePurchaseUnlock__Descriptor,
                new string[] { "AgentPrototypeId", });
        internal__static_Gazillion_NetMessageGetGiftHistory__Descriptor = Descriptor.MessageTypes[82];
        internal__static_Gazillion_NetMessageGetGiftHistory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetGiftHistory, global::Gazillion.NetMessageGetGiftHistory.Builder>(internal__static_Gazillion_NetMessageGetGiftHistory__Descriptor,
                new string[] { });
        internal__static_Gazillion_EntityPreviewerEnum__Descriptor = Descriptor.MessageTypes[83];
        internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.EntityPreviewerEnum, global::Gazillion.EntityPreviewerEnum.Builder>(internal__static_Gazillion_EntityPreviewerEnum__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor = Descriptor.MessageTypes[84];
        internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTargets, global::Gazillion.NetMessageEntityPreviewerNewTargets.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor,
                new string[] { "Alliance", "NumNewTargets", });
        internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor = Descriptor.MessageTypes[85];
        internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerClearTargets, global::Gazillion.NetMessageEntityPreviewerClearTargets.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor = Descriptor.MessageTypes[86];
        internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetTargetRef, global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor,
                new string[] { "TargetRefId", });
        internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor = Descriptor.MessageTypes[87];
        internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerActivatePower, global::Gazillion.NetMessageEntityPreviewerActivatePower.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor,
                new string[] { "CasterId", "PowerRefId", "CreateTarget", "RandomTargetPos", });
        internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor = Descriptor.MessageTypes[88];
        internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerAddTarget, global::Gazillion.NetMessageEntityPreviewerAddTarget.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor = Descriptor.MessageTypes[89];
        internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerSetEntityState, global::Gazillion.NetMessageEntityPreviewerSetEntityState.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor,
                new string[] { "TargetId", "StateRefId", });
        internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor = Descriptor.MessageTypes[90];
        internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerApplyConditions, global::Gazillion.NetMessageEntityPreviewerApplyConditions.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor,
                new string[] { "TargetId", "PowerRefId", });
        internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor = Descriptor.MessageTypes[91];
        internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar, global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder>(internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor,
                new string[] { "StartingAvatarPrototypeId", "TotalTime", });
        internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor = Descriptor.MessageTypes[92];
        internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnKioskStartButtonPressed, global::Gazillion.NetMessageOnKioskStartButtonPressed.Builder>(internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__Descriptor = Descriptor.MessageTypes[93];
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieStarted, global::Gazillion.NetMessageNotifyFullscreenMovieStarted.Builder>(internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__Descriptor,
                new string[] { "MoviePrototypeId", });
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor = Descriptor.MessageTypes[94];
        internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyFullscreenMovieFinished, global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Builder>(internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor,
                new string[] { "MoviePrototypeId", "UserCancelled", "SyncRequestId", });
        internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__Descriptor = Descriptor.MessageTypes[95];
        internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNotifyLoadingScreenFinished, global::Gazillion.NetMessageNotifyLoadingScreenFinished.Builder>(internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBotSetLevel__Descriptor = Descriptor.MessageTypes[96];
        internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetLevel, global::Gazillion.NetMessageBotSetLevel.Builder>(internal__static_Gazillion_NetMessageBotSetLevel__Descriptor,
                new string[] { "Level", });
        internal__static_Gazillion_NetMessageBotGodMode__Descriptor = Descriptor.MessageTypes[97];
        internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotGodMode, global::Gazillion.NetMessageBotGodMode.Builder>(internal__static_Gazillion_NetMessageBotGodMode__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor = Descriptor.MessageTypes[98];
        internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPickAvatar, global::Gazillion.NetMessageBotPickAvatar.Builder>(internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor,
                new string[] { "AvatarBotDataId", "Level", "LootPrototype", "LootTableRoll", });
        internal__static_Gazillion_NetMessageBotRegionChange__Descriptor = Descriptor.MessageTypes[99];
        internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotRegionChange, global::Gazillion.NetMessageBotRegionChange.Builder>(internal__static_Gazillion_NetMessageBotRegionChange__Descriptor,
                new string[] { "RegionDataId", });
        internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor = Descriptor.MessageTypes[100];
        internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotWarpAreaNext, global::Gazillion.NetMessageBotWarpAreaNext.Builder>(internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBotLootGive__Descriptor = Descriptor.MessageTypes[101];
        internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotLootGive, global::Gazillion.NetMessageBotLootGive.Builder>(internal__static_Gazillion_NetMessageBotLootGive__Descriptor,
                new string[] { "LootPrototype", "LootTableRoll", });
        internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor = Descriptor.MessageTypes[102];
        internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotSetPvPFaction, global::Gazillion.NetMessageBotSetPvPFaction.Builder>(internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor,
                new string[] { "FactionSetPrototype", });
        internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor = Descriptor.MessageTypes[103];
        internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBotPvPQueue, global::Gazillion.NetMessageBotPvPQueue.Builder>(internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor,
                new string[] { "PvpQueueId", });
        internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor = Descriptor.MessageTypes[104];
        internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetTrackerReport, global::Gazillion.NetMessageGetTrackerReport.Builder>(internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor,
                new string[] { "MessageSource", "MessageDirection", });
        internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor = Descriptor.MessageTypes[105];
        internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeqDone, global::Gazillion.NetMessagePlayKismetSeqDone.Builder>(internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor,
                new string[] { "KismetSeqPrototypeId", "SyncRequestId", });
        internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor = Descriptor.MessageTypes[106];
        internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyFailedForRepId, global::Gazillion.NetMessageVerifyFailedForRepId.Builder>(internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor,
                new string[] { "Repid1", "File", "Line", "Debugmsg", "Repid2", });
        internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor = Descriptor.MessageTypes[107];
        internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnect, global::Gazillion.NetMessageGracefulDisconnect.Builder>(internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor = Descriptor.MessageTypes[108];
        internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestStartNewGame, global::Gazillion.NetMessageRequestStartNewGame.Builder>(internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor = Descriptor.MessageTypes[109];
        internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDialogTarget, global::Gazillion.NetMessageSetDialogTarget.Builder>(internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor,
                new string[] { "TargetId", "InteractorId", });
        internal__static_Gazillion_NetMessageDialogResult__Descriptor = Descriptor.MessageTypes[110];
        internal__static_Gazillion_NetMessageDialogResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDialogResult, global::Gazillion.NetMessageDialogResult.Builder>(internal__static_Gazillion_NetMessageDialogResult__Descriptor,
                new string[] { "ServerId", "PlayerGuid", "ButtonIndex", "CheckboxClicked", });
        internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor = Descriptor.MessageTypes[111];
        internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestBuyItemFrom, global::Gazillion.NetMessageVendorRequestBuyItemFrom.Builder>(internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor,
                new string[] { "ItemId", "VendorId", "InventorySlot", });
        internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor = Descriptor.MessageTypes[112];
        internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestSellItemTo, global::Gazillion.NetMessageVendorRequestSellItemTo.Builder>(internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor,
                new string[] { "ItemId", "VendorId", });
        internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor = Descriptor.MessageTypes[113];
        internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestDonateItemTo, global::Gazillion.NetMessageVendorRequestDonateItemTo.Builder>(internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor,
                new string[] { "ItemId", "VendorId", });
        internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor = Descriptor.MessageTypes[114];
        internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRequestRefresh, global::Gazillion.NetMessageVendorRequestRefresh.Builder>(internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor,
                new string[] { "VendorId", });
        internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor = Descriptor.MessageTypes[115];
        internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryModifyCommunityMemberCircle, global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Builder>(internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor,
                new string[] { "CircleId", "Operation", "PlayerName", });
        internal__static_Gazillion_NetMessagePullCommunityStatus__Descriptor = Descriptor.MessageTypes[116];
        internal__static_Gazillion_NetMessagePullCommunityStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePullCommunityStatus, global::Gazillion.NetMessagePullCommunityStatus.Builder>(internal__static_Gazillion_NetMessagePullCommunityStatus__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor = Descriptor.MessageTypes[117];
        internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToPlayerManager, global::Gazillion.NetMessageGuildMessageToPlayerManager.Builder>(internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor,
                new string[] { "Messages", });
        internal__static_Gazillion_NetMessageAkEvent__Descriptor = Descriptor.MessageTypes[118];
        internal__static_Gazillion_NetMessageAkEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAkEvent, global::Gazillion.NetMessageAkEvent.Builder>(internal__static_Gazillion_NetMessageAkEvent__Descriptor,
                new string[] { "AkEventId", "IsVO", "EventType", "CooldownMS", });
        internal__static_Gazillion_NetMessageSetShowTips__Descriptor = Descriptor.MessageTypes[119];
        internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetShowTips, global::Gazillion.NetMessageSetShowTips.Builder>(internal__static_Gazillion_NetMessageSetShowTips__Descriptor,
                new string[] { "ShowTips", });
        internal__static_Gazillion_NetMessageSetTipSeen__Descriptor = Descriptor.MessageTypes[120];
        internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTipSeen, global::Gazillion.NetMessageSetTipSeen.Builder>(internal__static_Gazillion_NetMessageSetTipSeen__Descriptor,
                new string[] { "TipDataRefId", "AvatarEntityId", });
        internal__static_Gazillion_NetMessageResetSeenTips__Descriptor = Descriptor.MessageTypes[121];
        internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageResetSeenTips, global::Gazillion.NetMessageResetSeenTips.Builder>(internal__static_Gazillion_NetMessageResetSeenTips__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageHUDTutorialDismissed__Descriptor = Descriptor.MessageTypes[122];
        internal__static_Gazillion_NetMessageHUDTutorialDismissed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHUDTutorialDismissed, global::Gazillion.NetMessageHUDTutorialDismissed.Builder>(internal__static_Gazillion_NetMessageHUDTutorialDismissed__Descriptor,
                new string[] { "HudTutorialProtoId", });
        internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor = Descriptor.MessageTypes[123];
        internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral, global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Builder>(internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor,
                new string[] { "SourceInventoryPrototype", });
        internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor = Descriptor.MessageTypes[124];
        internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetPlayerGameplayOptions, global::Gazillion.NetMessageSetPlayerGameplayOptions.Builder>(internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor,
                new string[] { "OptionsData", });
        internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor = Descriptor.MessageTypes[125];
        internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportToPartyMember, global::Gazillion.NetMessageTeleportToPartyMember.Builder>(internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor,
                new string[] { "PlayerName", });
        internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__Descriptor = Descriptor.MessageTypes[126];
        internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionRequestQueueCommandClient, global::Gazillion.NetMessageRegionRequestQueueCommandClient.Builder>(internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__Descriptor,
                new string[] { "RegionProtoId", "RegionRequestGroupId", "Command", "AllowAutoParty", });
        internal__static_Gazillion_NetMessageSelectAvatarSynergies__Descriptor = Descriptor.MessageTypes[127];
        internal__static_Gazillion_NetMessageSelectAvatarSynergies__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectAvatarSynergies, global::Gazillion.NetMessageSelectAvatarSynergies.Builder>(internal__static_Gazillion_NetMessageSelectAvatarSynergies__Descriptor,
                new string[] { "AvatarId", "AvatarPrototypes", });
        internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__Descriptor = Descriptor.MessageTypes[128];
        internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLegendaryMissionReroll, global::Gazillion.NetMessageRequestLegendaryMissionReroll.Builder>(internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__Descriptor = Descriptor.MessageTypes[129];
        internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAttemptShareLegendaryMission, global::Gazillion.NetMessageAttemptShareLegendaryMission.Builder>(internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__Descriptor,
                new string[] { "PlayerName", });
        internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__Descriptor = Descriptor.MessageTypes[130];
        internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse, global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse.Builder>(internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__Descriptor,
                new string[] { "MissionAccepted", });
        internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__Descriptor = Descriptor.MessageTypes[131];
        internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPlayerOwnsItemStatus, global::Gazillion.NetMessageRequestPlayerOwnsItemStatus.Builder>(internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__Descriptor,
                new string[] { "ItemProtoId", });
        internal__static_Gazillion_NetMessageRequestInterestInInventory__Descriptor = Descriptor.MessageTypes[132];
        internal__static_Gazillion_NetMessageRequestInterestInInventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInInventory, global::Gazillion.NetMessageRequestInterestInInventory.Builder>(internal__static_Gazillion_NetMessageRequestInterestInInventory__Descriptor,
                new string[] { "InventoryProtoId", });
        internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__Descriptor = Descriptor.MessageTypes[133];
        internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInAvatarEquipment, global::Gazillion.NetMessageRequestInterestInAvatarEquipment.Builder>(internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__Descriptor,
                new string[] { "AvatarProtoId", "AvatarModeEnum", });
        internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__Descriptor = Descriptor.MessageTypes[134];
        internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestInterestInTeamUpEquipment, global::Gazillion.NetMessageRequestInterestInTeamUpEquipment.Builder>(internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__Descriptor,
                new string[] { "TeamUpProtoId", });
        internal__static_Gazillion_NetMessageTryTeamUpSelect__Descriptor = Descriptor.MessageTypes[135];
        internal__static_Gazillion_NetMessageTryTeamUpSelect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryTeamUpSelect, global::Gazillion.NetMessageTryTeamUpSelect.Builder>(internal__static_Gazillion_NetMessageTryTeamUpSelect__Descriptor,
                new string[] { "TeamUpPrototypeId", });
        internal__static_Gazillion_NetMessageRequestTeamUpDismiss__Descriptor = Descriptor.MessageTypes[136];
        internal__static_Gazillion_NetMessageRequestTeamUpDismiss__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestTeamUpDismiss, global::Gazillion.NetMessageRequestTeamUpDismiss.Builder>(internal__static_Gazillion_NetMessageRequestTeamUpDismiss__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__Descriptor = Descriptor.MessageTypes[137];
        internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTryTeamUpStyleSelect, global::Gazillion.NetMessageTryTeamUpStyleSelect.Builder>(internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__Descriptor,
                new string[] { "StyleIndex", });
        internal__static_Gazillion_NetMessageSelectOmegaBonus__Descriptor = Descriptor.MessageTypes[138];
        internal__static_Gazillion_NetMessageSelectOmegaBonus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectOmegaBonus, global::Gazillion.NetMessageSelectOmegaBonus.Builder>(internal__static_Gazillion_NetMessageSelectOmegaBonus__Descriptor,
                new string[] { "OmegaBonusProtoRefID", "Points", });
        internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__Descriptor = Descriptor.MessageTypes[139];
        internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOmegaBonusAllocationCommit, global::Gazillion.NetMessageOmegaBonusAllocationCommit.Builder>(internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__Descriptor,
                new string[] { "AvatarId", "Allocations", });
        internal__static_Gazillion_NetMessageRespecOmegaBonus__Descriptor = Descriptor.MessageTypes[140];
        internal__static_Gazillion_NetMessageRespecOmegaBonus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRespecOmegaBonus, global::Gazillion.NetMessageRespecOmegaBonus.Builder>(internal__static_Gazillion_NetMessageRespecOmegaBonus__Descriptor,
                new string[] { "AvatarId", });
        internal__static_Gazillion_NetMessageRespecPowerSpec__Descriptor = Descriptor.MessageTypes[141];
        internal__static_Gazillion_NetMessageRespecPowerSpec__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRespecPowerSpec, global::Gazillion.NetMessageRespecPowerSpec.Builder>(internal__static_Gazillion_NetMessageRespecPowerSpec__Descriptor,
                new string[] { "CharacterId", "PowerSpecIndex", });
        internal__static_Gazillion_NetMessageNewItemGlintPlayed__Descriptor = Descriptor.MessageTypes[142];
        internal__static_Gazillion_NetMessageNewItemGlintPlayed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewItemGlintPlayed, global::Gazillion.NetMessageNewItemGlintPlayed.Builder>(internal__static_Gazillion_NetMessageNewItemGlintPlayed__Descriptor,
                new string[] { "PlayerId", "ItemIds", });
        internal__static_Gazillion_NetMessageNewItemHighlightCleared__Descriptor = Descriptor.MessageTypes[143];
        internal__static_Gazillion_NetMessageNewItemHighlightCleared__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewItemHighlightCleared, global::Gazillion.NetMessageNewItemHighlightCleared.Builder>(internal__static_Gazillion_NetMessageNewItemHighlightCleared__Descriptor,
                new string[] { "PlayerId", "ItemId", });
        internal__static_Gazillion_NetMessageUnassignMappedPower__Descriptor = Descriptor.MessageTypes[144];
        internal__static_Gazillion_NetMessageUnassignMappedPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignMappedPower, global::Gazillion.NetMessageUnassignMappedPower.Builder>(internal__static_Gazillion_NetMessageUnassignMappedPower__Descriptor,
                new string[] { "AvatarId", "MappedPowerProtoId", });
        internal__static_Gazillion_NetMessageVanityTitleSelect__Descriptor = Descriptor.MessageTypes[145];
        internal__static_Gazillion_NetMessageVanityTitleSelect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVanityTitleSelect, global::Gazillion.NetMessageVanityTitleSelect.Builder>(internal__static_Gazillion_NetMessageVanityTitleSelect__Descriptor,
                new string[] { "VanityTitlePrototypeId", });
        internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__Descriptor = Descriptor.MessageTypes[146];
        internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestGlobalEventUpdate, global::Gazillion.NetMessageRequestGlobalEventUpdate.Builder>(internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__Descriptor,
                new string[] { "EventId", "UpdateType", });
        internal__static_Gazillion_NetMessageHasPendingGift__Descriptor = Descriptor.MessageTypes[147];
        internal__static_Gazillion_NetMessageHasPendingGift__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHasPendingGift, global::Gazillion.NetMessageHasPendingGift.Builder>(internal__static_Gazillion_NetMessageHasPendingGift__Descriptor,
                new string[] { "HasPendingGift", });
        internal__static_Gazillion_NetMessagePlayerTradeStart__Descriptor = Descriptor.MessageTypes[148];
        internal__static_Gazillion_NetMessagePlayerTradeStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeStart, global::Gazillion.NetMessagePlayerTradeStart.Builder>(internal__static_Gazillion_NetMessagePlayerTradeStart__Descriptor,
                new string[] { "PartnerPlayerName", });
        internal__static_Gazillion_NetMessagePlayerTradeCancel__Descriptor = Descriptor.MessageTypes[149];
        internal__static_Gazillion_NetMessagePlayerTradeCancel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeCancel, global::Gazillion.NetMessagePlayerTradeCancel.Builder>(internal__static_Gazillion_NetMessagePlayerTradeCancel__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__Descriptor = Descriptor.MessageTypes[150];
        internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeSetConfirmFlag, global::Gazillion.NetMessagePlayerTradeSetConfirmFlag.Builder>(internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__Descriptor,
                new string[] { "ConfirmFlag", "SequenceNumber", });
        internal__static_Gazillion_NetMessageRequestPetTechDonate__Descriptor = Descriptor.MessageTypes[151];
        internal__static_Gazillion_NetMessageRequestPetTechDonate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestPetTechDonate, global::Gazillion.NetMessageRequestPetTechDonate.Builder>(internal__static_Gazillion_NetMessageRequestPetTechDonate__Descriptor,
                new string[] { "ItemId", "AvatarId", });
        internal__static_Gazillion_NetMessageSetActivePowerSpec__Descriptor = Descriptor.MessageTypes[152];
        internal__static_Gazillion_NetMessageSetActivePowerSpec__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetActivePowerSpec, global::Gazillion.NetMessageSetActivePowerSpec.Builder>(internal__static_Gazillion_NetMessageSetActivePowerSpec__Descriptor,
                new string[] { "AvatarId", "ActiveSpec", });
        internal__static_Gazillion_NetMessageChangeCameraSettings__Descriptor = Descriptor.MessageTypes[153];
        internal__static_Gazillion_NetMessageChangeCameraSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeCameraSettings, global::Gazillion.NetMessageChangeCameraSettings.Builder>(internal__static_Gazillion_NetMessageChangeCameraSettings__Descriptor,
                new string[] { "CameraSettings", });
        internal__static_Gazillion_NetMessageRequestSocketAffix__Descriptor = Descriptor.MessageTypes[154];
        internal__static_Gazillion_NetMessageRequestSocketAffix__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestSocketAffix, global::Gazillion.NetMessageRequestSocketAffix.Builder>(internal__static_Gazillion_NetMessageRequestSocketAffix__Descriptor,
                new string[] { "DestItemId", "GemAffixItemId", });
        internal__static_Gazillion_NetMessageUISystemLockState__Descriptor = Descriptor.MessageTypes[155];
        internal__static_Gazillion_NetMessageUISystemLockState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISystemLockState, global::Gazillion.NetMessageUISystemLockState.Builder>(internal__static_Gazillion_NetMessageUISystemLockState__Descriptor,
                new string[] { "PrototypeId", "State", });
        internal__static_Gazillion_NetMessageEnableSpecializationPower__Descriptor = Descriptor.MessageTypes[156];
        internal__static_Gazillion_NetMessageEnableSpecializationPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnableSpecializationPower, global::Gazillion.NetMessageEnableSpecializationPower.Builder>(internal__static_Gazillion_NetMessageEnableSpecializationPower__Descriptor,
                new string[] { "AvatarId", "PrototypeId", "Enable", "Spec", });
        internal__static_Gazillion_NetMessageStashInventoryViewed__Descriptor = Descriptor.MessageTypes[157];
        internal__static_Gazillion_NetMessageStashInventoryViewed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashInventoryViewed, global::Gazillion.NetMessageStashInventoryViewed.Builder>(internal__static_Gazillion_NetMessageStashInventoryViewed__Descriptor,
                new string[] { "PrototypeId", });
        internal__static_Gazillion_NetMessageStashCurrentlyOpen__Descriptor = Descriptor.MessageTypes[158];
        internal__static_Gazillion_NetMessageStashCurrentlyOpen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashCurrentlyOpen, global::Gazillion.NetMessageStashCurrentlyOpen.Builder>(internal__static_Gazillion_NetMessageStashCurrentlyOpen__Descriptor,
                new string[] { "PrototypeId", });
        internal__static_Gazillion_NetMessageWidgetButtonResult__Descriptor = Descriptor.MessageTypes[159];
        internal__static_Gazillion_NetMessageWidgetButtonResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWidgetButtonResult, global::Gazillion.NetMessageWidgetButtonResult.Builder>(internal__static_Gazillion_NetMessageWidgetButtonResult__Descriptor,
                new string[] { "WidgetRefId", "WidgetContextRefId", "PlayerGuid", "Result", });
        internal__static_Gazillion_NetMessageStashTabInsert__Descriptor = Descriptor.MessageTypes[160];
        internal__static_Gazillion_NetMessageStashTabInsert__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashTabInsert, global::Gazillion.NetMessageStashTabInsert.Builder>(internal__static_Gazillion_NetMessageStashTabInsert__Descriptor,
                new string[] { "InvId", "InsertIndex", });
        internal__static_Gazillion_NetMessageStashTabOptions__Descriptor = Descriptor.MessageTypes[161];
        internal__static_Gazillion_NetMessageStashTabOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStashTabOptions, global::Gazillion.NetMessageStashTabOptions.Builder>(internal__static_Gazillion_NetMessageStashTabOptions__Descriptor,
                new string[] { "InventoryRefId", "DisplayName", "IconPathAssetId", "Color", });
        internal__static_Gazillion_NetMessageLeaderboardRequest__Descriptor = Descriptor.MessageTypes[162];
        internal__static_Gazillion_NetMessageLeaderboardRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardRequest, global::Gazillion.NetMessageLeaderboardRequest.Builder>(internal__static_Gazillion_NetMessageLeaderboardRequest__Descriptor,
                new string[] { "PlayerScoreQuery", "GuildScoreQuery", "MetaScoreQuery", "DataQuery", });
        internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__Descriptor = Descriptor.MessageTypes[163];
        internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest, global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest.Builder>(internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__Descriptor,
                new string[] { "LeaderboardIds", });
        internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__Descriptor = Descriptor.MessageTypes[164];
        internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardInitializeRequest, global::Gazillion.NetMessageLeaderboardInitializeRequest.Builder>(internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__Descriptor,
                new string[] { "LeaderboardIds", });
        internal__static_Gazillion_NetMessageRequestLocalCoopStart__Descriptor = Descriptor.MessageTypes[165];
        internal__static_Gazillion_NetMessageRequestLocalCoopStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLocalCoopStart, global::Gazillion.NetMessageRequestLocalCoopStart.Builder>(internal__static_Gazillion_NetMessageRequestLocalCoopStart__Descriptor,
                new string[] { "AvatarPrototypeId", });
        internal__static_Gazillion_NetMessageRequestLocalCoopEnd__Descriptor = Descriptor.MessageTypes[166];
        internal__static_Gazillion_NetMessageRequestLocalCoopEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRequestLocalCoopEnd, global::Gazillion.NetMessageRequestLocalCoopEnd.Builder>(internal__static_Gazillion_NetMessageRequestLocalCoopEnd__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageCouponAwardPresented__Descriptor = Descriptor.MessageTypes[167];
        internal__static_Gazillion_NetMessageCouponAwardPresented__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCouponAwardPresented, global::Gazillion.NetMessageCouponAwardPresented.Builder>(internal__static_Gazillion_NetMessageCouponAwardPresented__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageBillingRoutedClientMessage__Descriptor = Descriptor.MessageTypes[168];
        internal__static_Gazillion_NetMessageBillingRoutedClientMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBillingRoutedClientMessage, global::Gazillion.NetMessageBillingRoutedClientMessage.Builder>(internal__static_Gazillion_NetMessageBillingRoutedClientMessage__Descriptor,
                new string[] { "Payload", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Gazillion.GazillionCommon.RegisterAllExtensions(registry);
        global::Gazillion.CommonMessages.RegisterAllExtensions(registry);
        global::Gazillion.ChatCommon.RegisterAllExtensions(registry);
        global::Gazillion.Guild.RegisterAllExtensions(registry);
        global::Gazillion.GlobalEventsCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Gazillion.GazillionCommon.Descriptor, 
          global::Gazillion.CommonMessages.Descriptor, 
          global::Gazillion.ChatCommon.Descriptor, 
          global::Gazillion.Guild.Descriptor, 
          global::Gazillion.GlobalEventsCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyForGameJoin : pb::GeneratedMessage<NetMessageReadyForGameJoin, NetMessageReadyForGameJoin.Builder> {
    private NetMessageReadyForGameJoin() { }
    private static readonly NetMessageReadyForGameJoin defaultInstance = new NetMessageReadyForGameJoin().MakeReadOnly();
    private static readonly string[] _netMessageReadyForGameJoinFieldNames = new string[] { "clientOperatingSystem", "domainLoginName", "localeName", "playerImportData", "streamingSession", "wipePlayerRecordsOnLogin", "wipesDataIfMismatchedInDb" };
    private static readonly uint[] _netMessageReadyForGameJoinFieldTags = new uint[] { 48, 26, 42, 34, 56, 16, 8 };
    public static NetMessageReadyForGameJoin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyForGameJoin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyForGameJoin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReadyForGameJoin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyForGameJoin, NetMessageReadyForGameJoin.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReadyForGameJoin__FieldAccessorTable; }
    }
    
    public const int WipesDataIfMismatchedInDbFieldNumber = 1;
    private bool hasWipesDataIfMismatchedInDb;
    private int wipesDataIfMismatchedInDb_;
    public bool HasWipesDataIfMismatchedInDb {
      get { return hasWipesDataIfMismatchedInDb; }
    }
    public int WipesDataIfMismatchedInDb {
      get { return wipesDataIfMismatchedInDb_; }
    }
    
    public const int WipePlayerRecordsOnLoginFieldNumber = 2;
    private bool hasWipePlayerRecordsOnLogin;
    private bool wipePlayerRecordsOnLogin_;
    public bool HasWipePlayerRecordsOnLogin {
      get { return hasWipePlayerRecordsOnLogin; }
    }
    public bool WipePlayerRecordsOnLogin {
      get { return wipePlayerRecordsOnLogin_; }
    }
    
    public const int DomainLoginNameFieldNumber = 3;
    private bool hasDomainLoginName;
    private string domainLoginName_ = "";
    public bool HasDomainLoginName {
      get { return hasDomainLoginName; }
    }
    public string DomainLoginName {
      get { return domainLoginName_; }
    }
    
    public const int PlayerImportDataFieldNumber = 4;
    private bool hasPlayerImportData;
    private pb::ByteString playerImportData_ = pb::ByteString.Empty;
    public bool HasPlayerImportData {
      get { return hasPlayerImportData; }
    }
    public pb::ByteString PlayerImportData {
      get { return playerImportData_; }
    }
    
    public const int LocaleNameFieldNumber = 5;
    private bool hasLocaleName;
    private string localeName_ = "";
    public bool HasLocaleName {
      get { return hasLocaleName; }
    }
    public string LocaleName {
      get { return localeName_; }
    }
    
    public const int ClientOperatingSystemFieldNumber = 6;
    private bool hasClientOperatingSystem;
    private int clientOperatingSystem_;
    public bool HasClientOperatingSystem {
      get { return hasClientOperatingSystem; }
    }
    public int ClientOperatingSystem {
      get { return clientOperatingSystem_; }
    }
    
    public const int StreamingSessionFieldNumber = 7;
    private bool hasStreamingSession;
    private bool streamingSession_;
    public bool HasStreamingSession {
      get { return hasStreamingSession; }
    }
    public bool StreamingSession {
      get { return streamingSession_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWipesDataIfMismatchedInDb) return false;
        if (!hasLocaleName) return false;
        if (!hasStreamingSession) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyForGameJoinFieldNames;
      if (hasWipesDataIfMismatchedInDb) {
        output.WriteInt32(1, field_names[6], WipesDataIfMismatchedInDb);
      }
      if (hasWipePlayerRecordsOnLogin) {
        output.WriteBool(2, field_names[5], WipePlayerRecordsOnLogin);
      }
      if (hasDomainLoginName) {
        output.WriteString(3, field_names[1], DomainLoginName);
      }
      if (hasPlayerImportData) {
        output.WriteBytes(4, field_names[3], PlayerImportData);
      }
      if (hasLocaleName) {
        output.WriteString(5, field_names[2], LocaleName);
      }
      if (hasClientOperatingSystem) {
        output.WriteInt32(6, field_names[0], ClientOperatingSystem);
      }
      if (hasStreamingSession) {
        output.WriteBool(7, field_names[4], StreamingSession);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWipesDataIfMismatchedInDb) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, WipesDataIfMismatchedInDb);
      }
      if (hasWipePlayerRecordsOnLogin) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, WipePlayerRecordsOnLogin);
      }
      if (hasDomainLoginName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, DomainLoginName);
      }
      if (hasPlayerImportData) {
        size += pb::CodedOutputStream.ComputeBytesSize(4, PlayerImportData);
      }
      if (hasLocaleName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, LocaleName);
      }
      if (hasClientOperatingSystem) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ClientOperatingSystem);
      }
      if (hasStreamingSession) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, StreamingSession);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForGameJoin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyForGameJoin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyForGameJoin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyForGameJoin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyForGameJoin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyForGameJoin result;
      
      private NetMessageReadyForGameJoin PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyForGameJoin original = result;
          result = new NetMessageReadyForGameJoin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyForGameJoin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyForGameJoin.Descriptor; }
      }
      
      public override NetMessageReadyForGameJoin DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyForGameJoin.DefaultInstance; }
      }
      
      public override NetMessageReadyForGameJoin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyForGameJoin) {
          return MergeFrom((NetMessageReadyForGameJoin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyForGameJoin other) {
        if (other == global::Gazillion.NetMessageReadyForGameJoin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWipesDataIfMismatchedInDb) {
          WipesDataIfMismatchedInDb = other.WipesDataIfMismatchedInDb;
        }
        if (other.HasWipePlayerRecordsOnLogin) {
          WipePlayerRecordsOnLogin = other.WipePlayerRecordsOnLogin;
        }
        if (other.HasDomainLoginName) {
          DomainLoginName = other.DomainLoginName;
        }
        if (other.HasPlayerImportData) {
          PlayerImportData = other.PlayerImportData;
        }
        if (other.HasLocaleName) {
          LocaleName = other.LocaleName;
        }
        if (other.HasClientOperatingSystem) {
          ClientOperatingSystem = other.ClientOperatingSystem;
        }
        if (other.HasStreamingSession) {
          StreamingSession = other.StreamingSession;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyForGameJoinFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyForGameJoinFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWipesDataIfMismatchedInDb = input.ReadInt32(ref result.wipesDataIfMismatchedInDb_);
              break;
            }
            case 16: {
              result.hasWipePlayerRecordsOnLogin = input.ReadBool(ref result.wipePlayerRecordsOnLogin_);
              break;
            }
            case 26: {
              result.hasDomainLoginName = input.ReadString(ref result.domainLoginName_);
              break;
            }
            case 34: {
              result.hasPlayerImportData = input.ReadBytes(ref result.playerImportData_);
              break;
            }
            case 42: {
              result.hasLocaleName = input.ReadString(ref result.localeName_);
              break;
            }
            case 48: {
              result.hasClientOperatingSystem = input.ReadInt32(ref result.clientOperatingSystem_);
              break;
            }
            case 56: {
              result.hasStreamingSession = input.ReadBool(ref result.streamingSession_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWipesDataIfMismatchedInDb {
        get { return result.hasWipesDataIfMismatchedInDb; }
      }
      public int WipesDataIfMismatchedInDb {
        get { return result.WipesDataIfMismatchedInDb; }
        set { SetWipesDataIfMismatchedInDb(value); }
      }
      public Builder SetWipesDataIfMismatchedInDb(int value) {
        PrepareBuilder();
        result.hasWipesDataIfMismatchedInDb = true;
        result.wipesDataIfMismatchedInDb_ = value;
        return this;
      }
      public Builder ClearWipesDataIfMismatchedInDb() {
        PrepareBuilder();
        result.hasWipesDataIfMismatchedInDb = false;
        result.wipesDataIfMismatchedInDb_ = 0;
        return this;
      }
      
      public bool HasWipePlayerRecordsOnLogin {
        get { return result.hasWipePlayerRecordsOnLogin; }
      }
      public bool WipePlayerRecordsOnLogin {
        get { return result.WipePlayerRecordsOnLogin; }
        set { SetWipePlayerRecordsOnLogin(value); }
      }
      public Builder SetWipePlayerRecordsOnLogin(bool value) {
        PrepareBuilder();
        result.hasWipePlayerRecordsOnLogin = true;
        result.wipePlayerRecordsOnLogin_ = value;
        return this;
      }
      public Builder ClearWipePlayerRecordsOnLogin() {
        PrepareBuilder();
        result.hasWipePlayerRecordsOnLogin = false;
        result.wipePlayerRecordsOnLogin_ = false;
        return this;
      }
      
      public bool HasDomainLoginName {
        get { return result.hasDomainLoginName; }
      }
      public string DomainLoginName {
        get { return result.DomainLoginName; }
        set { SetDomainLoginName(value); }
      }
      public Builder SetDomainLoginName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDomainLoginName = true;
        result.domainLoginName_ = value;
        return this;
      }
      public Builder ClearDomainLoginName() {
        PrepareBuilder();
        result.hasDomainLoginName = false;
        result.domainLoginName_ = "";
        return this;
      }
      
      public bool HasPlayerImportData {
        get { return result.hasPlayerImportData; }
      }
      public pb::ByteString PlayerImportData {
        get { return result.PlayerImportData; }
        set { SetPlayerImportData(value); }
      }
      public Builder SetPlayerImportData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerImportData = true;
        result.playerImportData_ = value;
        return this;
      }
      public Builder ClearPlayerImportData() {
        PrepareBuilder();
        result.hasPlayerImportData = false;
        result.playerImportData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasLocaleName {
        get { return result.hasLocaleName; }
      }
      public string LocaleName {
        get { return result.LocaleName; }
        set { SetLocaleName(value); }
      }
      public Builder SetLocaleName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocaleName = true;
        result.localeName_ = value;
        return this;
      }
      public Builder ClearLocaleName() {
        PrepareBuilder();
        result.hasLocaleName = false;
        result.localeName_ = "";
        return this;
      }
      
      public bool HasClientOperatingSystem {
        get { return result.hasClientOperatingSystem; }
      }
      public int ClientOperatingSystem {
        get { return result.ClientOperatingSystem; }
        set { SetClientOperatingSystem(value); }
      }
      public Builder SetClientOperatingSystem(int value) {
        PrepareBuilder();
        result.hasClientOperatingSystem = true;
        result.clientOperatingSystem_ = value;
        return this;
      }
      public Builder ClearClientOperatingSystem() {
        PrepareBuilder();
        result.hasClientOperatingSystem = false;
        result.clientOperatingSystem_ = 0;
        return this;
      }
      
      public bool HasStreamingSession {
        get { return result.hasStreamingSession; }
      }
      public bool StreamingSession {
        get { return result.StreamingSession; }
        set { SetStreamingSession(value); }
      }
      public Builder SetStreamingSession(bool value) {
        PrepareBuilder();
        result.hasStreamingSession = true;
        result.streamingSession_ = value;
        return this;
      }
      public Builder ClearStreamingSession() {
        PrepareBuilder();
        result.hasStreamingSession = false;
        result.streamingSession_ = false;
        return this;
      }
    }
    static NetMessageReadyForGameJoin() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerSystemMetrics : pb::GeneratedMessage<NetMessagePlayerSystemMetrics, NetMessagePlayerSystemMetrics.Builder> {
    private NetMessagePlayerSystemMetrics() { }
    private static readonly NetMessagePlayerSystemMetrics defaultInstance = new NetMessagePlayerSystemMetrics().MakeReadOnly();
    private static readonly string[] _netMessagePlayerSystemMetricsFieldNames = new string[] { "compatLevelComposite", "compatLevelCpu", "compatLevelGpu", "cpuName", "displayDeviceDriverDate", "displayDeviceDualGPU", "displayDeviceName", "osName", "ramName", "userLanguage" };
    private static readonly uint[] _netMessagePlayerSystemMetricsFieldTags = new uint[] { 24, 8, 16, 42, 74, 64, 58, 34, 50, 82 };
    public static NetMessagePlayerSystemMetrics DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerSystemMetrics DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerSystemMetrics ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSystemMetrics__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerSystemMetrics, NetMessagePlayerSystemMetrics.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSystemMetrics__FieldAccessorTable; }
    }
    
    public const int CompatLevelCpuFieldNumber = 1;
    private bool hasCompatLevelCpu;
    private int compatLevelCpu_ = -1;
    public bool HasCompatLevelCpu {
      get { return hasCompatLevelCpu; }
    }
    public int CompatLevelCpu {
      get { return compatLevelCpu_; }
    }
    
    public const int CompatLevelGpuFieldNumber = 2;
    private bool hasCompatLevelGpu;
    private int compatLevelGpu_ = -1;
    public bool HasCompatLevelGpu {
      get { return hasCompatLevelGpu; }
    }
    public int CompatLevelGpu {
      get { return compatLevelGpu_; }
    }
    
    public const int CompatLevelCompositeFieldNumber = 3;
    private bool hasCompatLevelComposite;
    private int compatLevelComposite_ = -1;
    public bool HasCompatLevelComposite {
      get { return hasCompatLevelComposite; }
    }
    public int CompatLevelComposite {
      get { return compatLevelComposite_; }
    }
    
    public const int OsNameFieldNumber = 4;
    private bool hasOsName;
    private string osName_ = "";
    public bool HasOsName {
      get { return hasOsName; }
    }
    public string OsName {
      get { return osName_; }
    }
    
    public const int CpuNameFieldNumber = 5;
    private bool hasCpuName;
    private string cpuName_ = "";
    public bool HasCpuName {
      get { return hasCpuName; }
    }
    public string CpuName {
      get { return cpuName_; }
    }
    
    public const int RamNameFieldNumber = 6;
    private bool hasRamName;
    private string ramName_ = "";
    public bool HasRamName {
      get { return hasRamName; }
    }
    public string RamName {
      get { return ramName_; }
    }
    
    public const int DisplayDeviceNameFieldNumber = 7;
    private bool hasDisplayDeviceName;
    private string displayDeviceName_ = "";
    public bool HasDisplayDeviceName {
      get { return hasDisplayDeviceName; }
    }
    public string DisplayDeviceName {
      get { return displayDeviceName_; }
    }
    
    public const int DisplayDeviceDualGPUFieldNumber = 8;
    private bool hasDisplayDeviceDualGPU;
    private bool displayDeviceDualGPU_;
    public bool HasDisplayDeviceDualGPU {
      get { return hasDisplayDeviceDualGPU; }
    }
    public bool DisplayDeviceDualGPU {
      get { return displayDeviceDualGPU_; }
    }
    
    public const int DisplayDeviceDriverDateFieldNumber = 9;
    private bool hasDisplayDeviceDriverDate;
    private string displayDeviceDriverDate_ = "";
    public bool HasDisplayDeviceDriverDate {
      get { return hasDisplayDeviceDriverDate; }
    }
    public string DisplayDeviceDriverDate {
      get { return displayDeviceDriverDate_; }
    }
    
    public const int UserLanguageFieldNumber = 10;
    private bool hasUserLanguage;
    private string userLanguage_ = "";
    public bool HasUserLanguage {
      get { return hasUserLanguage; }
    }
    public string UserLanguage {
      get { return userLanguage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCompatLevelCpu) return false;
        if (!hasCompatLevelGpu) return false;
        if (!hasCompatLevelComposite) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerSystemMetricsFieldNames;
      if (hasCompatLevelCpu) {
        output.WriteInt32(1, field_names[1], CompatLevelCpu);
      }
      if (hasCompatLevelGpu) {
        output.WriteInt32(2, field_names[2], CompatLevelGpu);
      }
      if (hasCompatLevelComposite) {
        output.WriteInt32(3, field_names[0], CompatLevelComposite);
      }
      if (hasOsName) {
        output.WriteString(4, field_names[7], OsName);
      }
      if (hasCpuName) {
        output.WriteString(5, field_names[3], CpuName);
      }
      if (hasRamName) {
        output.WriteString(6, field_names[8], RamName);
      }
      if (hasDisplayDeviceName) {
        output.WriteString(7, field_names[6], DisplayDeviceName);
      }
      if (hasDisplayDeviceDualGPU) {
        output.WriteBool(8, field_names[5], DisplayDeviceDualGPU);
      }
      if (hasDisplayDeviceDriverDate) {
        output.WriteString(9, field_names[4], DisplayDeviceDriverDate);
      }
      if (hasUserLanguage) {
        output.WriteString(10, field_names[9], UserLanguage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCompatLevelCpu) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CompatLevelCpu);
      }
      if (hasCompatLevelGpu) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CompatLevelGpu);
      }
      if (hasCompatLevelComposite) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, CompatLevelComposite);
      }
      if (hasOsName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OsName);
      }
      if (hasCpuName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, CpuName);
      }
      if (hasRamName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, RamName);
      }
      if (hasDisplayDeviceName) {
        size += pb::CodedOutputStream.ComputeStringSize(7, DisplayDeviceName);
      }
      if (hasDisplayDeviceDualGPU) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, DisplayDeviceDualGPU);
      }
      if (hasDisplayDeviceDriverDate) {
        size += pb::CodedOutputStream.ComputeStringSize(9, DisplayDeviceDriverDate);
      }
      if (hasUserLanguage) {
        size += pb::CodedOutputStream.ComputeStringSize(10, UserLanguage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSystemMetrics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerSystemMetrics MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerSystemMetrics prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerSystemMetrics, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerSystemMetrics cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerSystemMetrics result;
      
      private NetMessagePlayerSystemMetrics PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerSystemMetrics original = result;
          result = new NetMessagePlayerSystemMetrics();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerSystemMetrics MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerSystemMetrics.Descriptor; }
      }
      
      public override NetMessagePlayerSystemMetrics DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerSystemMetrics.DefaultInstance; }
      }
      
      public override NetMessagePlayerSystemMetrics BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerSystemMetrics) {
          return MergeFrom((NetMessagePlayerSystemMetrics) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerSystemMetrics other) {
        if (other == global::Gazillion.NetMessagePlayerSystemMetrics.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCompatLevelCpu) {
          CompatLevelCpu = other.CompatLevelCpu;
        }
        if (other.HasCompatLevelGpu) {
          CompatLevelGpu = other.CompatLevelGpu;
        }
        if (other.HasCompatLevelComposite) {
          CompatLevelComposite = other.CompatLevelComposite;
        }
        if (other.HasOsName) {
          OsName = other.OsName;
        }
        if (other.HasCpuName) {
          CpuName = other.CpuName;
        }
        if (other.HasRamName) {
          RamName = other.RamName;
        }
        if (other.HasDisplayDeviceName) {
          DisplayDeviceName = other.DisplayDeviceName;
        }
        if (other.HasDisplayDeviceDualGPU) {
          DisplayDeviceDualGPU = other.DisplayDeviceDualGPU;
        }
        if (other.HasDisplayDeviceDriverDate) {
          DisplayDeviceDriverDate = other.DisplayDeviceDriverDate;
        }
        if (other.HasUserLanguage) {
          UserLanguage = other.UserLanguage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerSystemMetricsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerSystemMetricsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCompatLevelCpu = input.ReadInt32(ref result.compatLevelCpu_);
              break;
            }
            case 16: {
              result.hasCompatLevelGpu = input.ReadInt32(ref result.compatLevelGpu_);
              break;
            }
            case 24: {
              result.hasCompatLevelComposite = input.ReadInt32(ref result.compatLevelComposite_);
              break;
            }
            case 34: {
              result.hasOsName = input.ReadString(ref result.osName_);
              break;
            }
            case 42: {
              result.hasCpuName = input.ReadString(ref result.cpuName_);
              break;
            }
            case 50: {
              result.hasRamName = input.ReadString(ref result.ramName_);
              break;
            }
            case 58: {
              result.hasDisplayDeviceName = input.ReadString(ref result.displayDeviceName_);
              break;
            }
            case 64: {
              result.hasDisplayDeviceDualGPU = input.ReadBool(ref result.displayDeviceDualGPU_);
              break;
            }
            case 74: {
              result.hasDisplayDeviceDriverDate = input.ReadString(ref result.displayDeviceDriverDate_);
              break;
            }
            case 82: {
              result.hasUserLanguage = input.ReadString(ref result.userLanguage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCompatLevelCpu {
        get { return result.hasCompatLevelCpu; }
      }
      public int CompatLevelCpu {
        get { return result.CompatLevelCpu; }
        set { SetCompatLevelCpu(value); }
      }
      public Builder SetCompatLevelCpu(int value) {
        PrepareBuilder();
        result.hasCompatLevelCpu = true;
        result.compatLevelCpu_ = value;
        return this;
      }
      public Builder ClearCompatLevelCpu() {
        PrepareBuilder();
        result.hasCompatLevelCpu = false;
        result.compatLevelCpu_ = -1;
        return this;
      }
      
      public bool HasCompatLevelGpu {
        get { return result.hasCompatLevelGpu; }
      }
      public int CompatLevelGpu {
        get { return result.CompatLevelGpu; }
        set { SetCompatLevelGpu(value); }
      }
      public Builder SetCompatLevelGpu(int value) {
        PrepareBuilder();
        result.hasCompatLevelGpu = true;
        result.compatLevelGpu_ = value;
        return this;
      }
      public Builder ClearCompatLevelGpu() {
        PrepareBuilder();
        result.hasCompatLevelGpu = false;
        result.compatLevelGpu_ = -1;
        return this;
      }
      
      public bool HasCompatLevelComposite {
        get { return result.hasCompatLevelComposite; }
      }
      public int CompatLevelComposite {
        get { return result.CompatLevelComposite; }
        set { SetCompatLevelComposite(value); }
      }
      public Builder SetCompatLevelComposite(int value) {
        PrepareBuilder();
        result.hasCompatLevelComposite = true;
        result.compatLevelComposite_ = value;
        return this;
      }
      public Builder ClearCompatLevelComposite() {
        PrepareBuilder();
        result.hasCompatLevelComposite = false;
        result.compatLevelComposite_ = -1;
        return this;
      }
      
      public bool HasOsName {
        get { return result.hasOsName; }
      }
      public string OsName {
        get { return result.OsName; }
        set { SetOsName(value); }
      }
      public Builder SetOsName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOsName = true;
        result.osName_ = value;
        return this;
      }
      public Builder ClearOsName() {
        PrepareBuilder();
        result.hasOsName = false;
        result.osName_ = "";
        return this;
      }
      
      public bool HasCpuName {
        get { return result.hasCpuName; }
      }
      public string CpuName {
        get { return result.CpuName; }
        set { SetCpuName(value); }
      }
      public Builder SetCpuName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCpuName = true;
        result.cpuName_ = value;
        return this;
      }
      public Builder ClearCpuName() {
        PrepareBuilder();
        result.hasCpuName = false;
        result.cpuName_ = "";
        return this;
      }
      
      public bool HasRamName {
        get { return result.hasRamName; }
      }
      public string RamName {
        get { return result.RamName; }
        set { SetRamName(value); }
      }
      public Builder SetRamName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRamName = true;
        result.ramName_ = value;
        return this;
      }
      public Builder ClearRamName() {
        PrepareBuilder();
        result.hasRamName = false;
        result.ramName_ = "";
        return this;
      }
      
      public bool HasDisplayDeviceName {
        get { return result.hasDisplayDeviceName; }
      }
      public string DisplayDeviceName {
        get { return result.DisplayDeviceName; }
        set { SetDisplayDeviceName(value); }
      }
      public Builder SetDisplayDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayDeviceName = true;
        result.displayDeviceName_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceName() {
        PrepareBuilder();
        result.hasDisplayDeviceName = false;
        result.displayDeviceName_ = "";
        return this;
      }
      
      public bool HasDisplayDeviceDualGPU {
        get { return result.hasDisplayDeviceDualGPU; }
      }
      public bool DisplayDeviceDualGPU {
        get { return result.DisplayDeviceDualGPU; }
        set { SetDisplayDeviceDualGPU(value); }
      }
      public Builder SetDisplayDeviceDualGPU(bool value) {
        PrepareBuilder();
        result.hasDisplayDeviceDualGPU = true;
        result.displayDeviceDualGPU_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceDualGPU() {
        PrepareBuilder();
        result.hasDisplayDeviceDualGPU = false;
        result.displayDeviceDualGPU_ = false;
        return this;
      }
      
      public bool HasDisplayDeviceDriverDate {
        get { return result.hasDisplayDeviceDriverDate; }
      }
      public string DisplayDeviceDriverDate {
        get { return result.DisplayDeviceDriverDate; }
        set { SetDisplayDeviceDriverDate(value); }
      }
      public Builder SetDisplayDeviceDriverDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayDeviceDriverDate = true;
        result.displayDeviceDriverDate_ = value;
        return this;
      }
      public Builder ClearDisplayDeviceDriverDate() {
        PrepareBuilder();
        result.hasDisplayDeviceDriverDate = false;
        result.displayDeviceDriverDate_ = "";
        return this;
      }
      
      public bool HasUserLanguage {
        get { return result.hasUserLanguage; }
      }
      public string UserLanguage {
        get { return result.UserLanguage; }
        set { SetUserLanguage(value); }
      }
      public Builder SetUserLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserLanguage = true;
        result.userLanguage_ = value;
        return this;
      }
      public Builder ClearUserLanguage() {
        PrepareBuilder();
        result.hasUserLanguage = false;
        result.userLanguage_ = "";
        return this;
      }
    }
    static NetMessagePlayerSystemMetrics() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerSteamInfo : pb::GeneratedMessage<NetMessagePlayerSteamInfo, NetMessagePlayerSteamInfo.Builder> {
    private NetMessagePlayerSteamInfo() { }
    private static readonly NetMessagePlayerSteamInfo defaultInstance = new NetMessagePlayerSteamInfo().MakeReadOnly();
    private static readonly string[] _netMessagePlayerSteamInfoFieldNames = new string[] { "steamUserId", "updateSteamSeqNum" };
    private static readonly uint[] _netMessagePlayerSteamInfoFieldTags = new uint[] { 8, 16 };
    public static NetMessagePlayerSteamInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerSteamInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerSteamInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSteamInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerSteamInfo, NetMessagePlayerSteamInfo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerSteamInfo__FieldAccessorTable; }
    }
    
    public const int SteamUserIdFieldNumber = 1;
    private bool hasSteamUserId;
    private ulong steamUserId_;
    public bool HasSteamUserId {
      get { return hasSteamUserId; }
    }
    public ulong SteamUserId {
      get { return steamUserId_; }
    }
    
    public const int UpdateSteamSeqNumFieldNumber = 2;
    private bool hasUpdateSteamSeqNum;
    private int updateSteamSeqNum_;
    public bool HasUpdateSteamSeqNum {
      get { return hasUpdateSteamSeqNum; }
    }
    public int UpdateSteamSeqNum {
      get { return updateSteamSeqNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSteamUserId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerSteamInfoFieldNames;
      if (hasSteamUserId) {
        output.WriteUInt64(1, field_names[0], SteamUserId);
      }
      if (hasUpdateSteamSeqNum) {
        output.WriteInt32(2, field_names[1], UpdateSteamSeqNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSteamUserId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SteamUserId);
      }
      if (hasUpdateSteamSeqNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, UpdateSteamSeqNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerSteamInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerSteamInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerSteamInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerSteamInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerSteamInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerSteamInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerSteamInfo result;
      
      private NetMessagePlayerSteamInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerSteamInfo original = result;
          result = new NetMessagePlayerSteamInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerSteamInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerSteamInfo.Descriptor; }
      }
      
      public override NetMessagePlayerSteamInfo DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerSteamInfo.DefaultInstance; }
      }
      
      public override NetMessagePlayerSteamInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerSteamInfo) {
          return MergeFrom((NetMessagePlayerSteamInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerSteamInfo other) {
        if (other == global::Gazillion.NetMessagePlayerSteamInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSteamUserId) {
          SteamUserId = other.SteamUserId;
        }
        if (other.HasUpdateSteamSeqNum) {
          UpdateSteamSeqNum = other.UpdateSteamSeqNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerSteamInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerSteamInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSteamUserId = input.ReadUInt64(ref result.steamUserId_);
              break;
            }
            case 16: {
              result.hasUpdateSteamSeqNum = input.ReadInt32(ref result.updateSteamSeqNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSteamUserId {
        get { return result.hasSteamUserId; }
      }
      public ulong SteamUserId {
        get { return result.SteamUserId; }
        set { SetSteamUserId(value); }
      }
      public Builder SetSteamUserId(ulong value) {
        PrepareBuilder();
        result.hasSteamUserId = true;
        result.steamUserId_ = value;
        return this;
      }
      public Builder ClearSteamUserId() {
        PrepareBuilder();
        result.hasSteamUserId = false;
        result.steamUserId_ = 0UL;
        return this;
      }
      
      public bool HasUpdateSteamSeqNum {
        get { return result.hasUpdateSteamSeqNum; }
      }
      public int UpdateSteamSeqNum {
        get { return result.UpdateSteamSeqNum; }
        set { SetUpdateSteamSeqNum(value); }
      }
      public Builder SetUpdateSteamSeqNum(int value) {
        PrepareBuilder();
        result.hasUpdateSteamSeqNum = true;
        result.updateSteamSeqNum_ = value;
        return this;
      }
      public Builder ClearUpdateSteamSeqNum() {
        PrepareBuilder();
        result.hasUpdateSteamSeqNum = false;
        result.updateSteamSeqNum_ = 0;
        return this;
      }
    }
    static NetMessagePlayerSteamInfo() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSyncTimeRequest : pb::GeneratedMessage<NetMessageSyncTimeRequest, NetMessageSyncTimeRequest.Builder> {
    private NetMessageSyncTimeRequest() { }
    private static readonly NetMessageSyncTimeRequest defaultInstance = new NetMessageSyncTimeRequest().MakeReadOnly();
    private static readonly string[] _netMessageSyncTimeRequestFieldNames = new string[] { "dateTimeClientSent", "gameTimeClientSent" };
    private static readonly uint[] _netMessageSyncTimeRequestFieldTags = new uint[] { 16, 8 };
    public static NetMessageSyncTimeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSyncTimeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSyncTimeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSyncTimeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSyncTimeRequest, NetMessageSyncTimeRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSyncTimeRequest__FieldAccessorTable; }
    }
    
    public const int GameTimeClientSentFieldNumber = 1;
    private bool hasGameTimeClientSent;
    private long gameTimeClientSent_;
    public bool HasGameTimeClientSent {
      get { return hasGameTimeClientSent; }
    }
    public long GameTimeClientSent {
      get { return gameTimeClientSent_; }
    }
    
    public const int DateTimeClientSentFieldNumber = 2;
    private bool hasDateTimeClientSent;
    private long dateTimeClientSent_;
    public bool HasDateTimeClientSent {
      get { return hasDateTimeClientSent; }
    }
    public long DateTimeClientSent {
      get { return dateTimeClientSent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeClientSent) return false;
        if (!hasDateTimeClientSent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSyncTimeRequestFieldNames;
      if (hasGameTimeClientSent) {
        output.WriteInt64(1, field_names[1], GameTimeClientSent);
      }
      if (hasDateTimeClientSent) {
        output.WriteInt64(2, field_names[0], DateTimeClientSent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeClientSent);
      }
      if (hasDateTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, DateTimeClientSent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSyncTimeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSyncTimeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSyncTimeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSyncTimeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSyncTimeRequest result;
      
      private NetMessageSyncTimeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSyncTimeRequest original = result;
          result = new NetMessageSyncTimeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSyncTimeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSyncTimeRequest.Descriptor; }
      }
      
      public override NetMessageSyncTimeRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSyncTimeRequest.DefaultInstance; }
      }
      
      public override NetMessageSyncTimeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSyncTimeRequest) {
          return MergeFrom((NetMessageSyncTimeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSyncTimeRequest other) {
        if (other == global::Gazillion.NetMessageSyncTimeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeClientSent) {
          GameTimeClientSent = other.GameTimeClientSent;
        }
        if (other.HasDateTimeClientSent) {
          DateTimeClientSent = other.DateTimeClientSent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSyncTimeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSyncTimeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeClientSent = input.ReadInt64(ref result.gameTimeClientSent_);
              break;
            }
            case 16: {
              result.hasDateTimeClientSent = input.ReadInt64(ref result.dateTimeClientSent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeClientSent {
        get { return result.hasGameTimeClientSent; }
      }
      public long GameTimeClientSent {
        get { return result.GameTimeClientSent; }
        set { SetGameTimeClientSent(value); }
      }
      public Builder SetGameTimeClientSent(long value) {
        PrepareBuilder();
        result.hasGameTimeClientSent = true;
        result.gameTimeClientSent_ = value;
        return this;
      }
      public Builder ClearGameTimeClientSent() {
        PrepareBuilder();
        result.hasGameTimeClientSent = false;
        result.gameTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeClientSent {
        get { return result.hasDateTimeClientSent; }
      }
      public long DateTimeClientSent {
        get { return result.DateTimeClientSent; }
        set { SetDateTimeClientSent(value); }
      }
      public Builder SetDateTimeClientSent(long value) {
        PrepareBuilder();
        result.hasDateTimeClientSent = true;
        result.dateTimeClientSent_ = value;
        return this;
      }
      public Builder ClearDateTimeClientSent() {
        PrepareBuilder();
        result.hasDateTimeClientSent = false;
        result.dateTimeClientSent_ = 0L;
        return this;
      }
    }
    static NetMessageSyncTimeRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTimeDialation : pb::GeneratedMessage<NetMessageSetTimeDialation, NetMessageSetTimeDialation.Builder> {
    private NetMessageSetTimeDialation() { }
    private static readonly NetMessageSetTimeDialation defaultInstance = new NetMessageSetTimeDialation().MakeReadOnly();
    private static readonly string[] _netMessageSetTimeDialationFieldNames = new string[] { "dateTimeDialationStarted", "dialation", "gameTimeDialationStarted" };
    private static readonly uint[] _netMessageSetTimeDialationFieldTags = new uint[] { 16, 29, 8 };
    public static NetMessageSetTimeDialation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTimeDialation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTimeDialation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTimeDialation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTimeDialation, NetMessageSetTimeDialation.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTimeDialation__FieldAccessorTable; }
    }
    
    public const int GameTimeDialationStartedFieldNumber = 1;
    private bool hasGameTimeDialationStarted;
    private long gameTimeDialationStarted_;
    public bool HasGameTimeDialationStarted {
      get { return hasGameTimeDialationStarted; }
    }
    public long GameTimeDialationStarted {
      get { return gameTimeDialationStarted_; }
    }
    
    public const int DateTimeDialationStartedFieldNumber = 2;
    private bool hasDateTimeDialationStarted;
    private long dateTimeDialationStarted_;
    public bool HasDateTimeDialationStarted {
      get { return hasDateTimeDialationStarted; }
    }
    public long DateTimeDialationStarted {
      get { return dateTimeDialationStarted_; }
    }
    
    public const int DialationFieldNumber = 3;
    private bool hasDialation;
    private float dialation_;
    public bool HasDialation {
      get { return hasDialation; }
    }
    public float Dialation {
      get { return dialation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeDialationStarted) return false;
        if (!hasDateTimeDialationStarted) return false;
        if (!hasDialation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTimeDialationFieldNames;
      if (hasGameTimeDialationStarted) {
        output.WriteInt64(1, field_names[2], GameTimeDialationStarted);
      }
      if (hasDateTimeDialationStarted) {
        output.WriteInt64(2, field_names[0], DateTimeDialationStarted);
      }
      if (hasDialation) {
        output.WriteFloat(3, field_names[1], Dialation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeDialationStarted);
      }
      if (hasDateTimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, DateTimeDialationStarted);
      }
      if (hasDialation) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Dialation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimeDialation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTimeDialation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTimeDialation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTimeDialation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTimeDialation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTimeDialation result;
      
      private NetMessageSetTimeDialation PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTimeDialation original = result;
          result = new NetMessageSetTimeDialation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTimeDialation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTimeDialation.Descriptor; }
      }
      
      public override NetMessageSetTimeDialation DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTimeDialation.DefaultInstance; }
      }
      
      public override NetMessageSetTimeDialation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTimeDialation) {
          return MergeFrom((NetMessageSetTimeDialation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTimeDialation other) {
        if (other == global::Gazillion.NetMessageSetTimeDialation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeDialationStarted) {
          GameTimeDialationStarted = other.GameTimeDialationStarted;
        }
        if (other.HasDateTimeDialationStarted) {
          DateTimeDialationStarted = other.DateTimeDialationStarted;
        }
        if (other.HasDialation) {
          Dialation = other.Dialation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTimeDialationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTimeDialationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeDialationStarted = input.ReadInt64(ref result.gameTimeDialationStarted_);
              break;
            }
            case 16: {
              result.hasDateTimeDialationStarted = input.ReadInt64(ref result.dateTimeDialationStarted_);
              break;
            }
            case 29: {
              result.hasDialation = input.ReadFloat(ref result.dialation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeDialationStarted {
        get { return result.hasGameTimeDialationStarted; }
      }
      public long GameTimeDialationStarted {
        get { return result.GameTimeDialationStarted; }
        set { SetGameTimeDialationStarted(value); }
      }
      public Builder SetGameTimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasGameTimeDialationStarted = true;
        result.gameTimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearGameTimeDialationStarted() {
        PrepareBuilder();
        result.hasGameTimeDialationStarted = false;
        result.gameTimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDateTimeDialationStarted {
        get { return result.hasDateTimeDialationStarted; }
      }
      public long DateTimeDialationStarted {
        get { return result.DateTimeDialationStarted; }
        set { SetDateTimeDialationStarted(value); }
      }
      public Builder SetDateTimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasDateTimeDialationStarted = true;
        result.dateTimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearDateTimeDialationStarted() {
        PrepareBuilder();
        result.hasDateTimeDialationStarted = false;
        result.dateTimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDialation {
        get { return result.hasDialation; }
      }
      public float Dialation {
        get { return result.Dialation; }
        set { SetDialation(value); }
      }
      public Builder SetDialation(float value) {
        PrepareBuilder();
        result.hasDialation = true;
        result.dialation_ = value;
        return this;
      }
      public Builder ClearDialation() {
        PrepareBuilder();
        result.hasDialation = false;
        result.dialation_ = 0F;
        return this;
      }
    }
    static NetMessageSetTimeDialation() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageIsRegionAvailable : pb::GeneratedMessage<NetMessageIsRegionAvailable, NetMessageIsRegionAvailable.Builder> {
    private NetMessageIsRegionAvailable() { }
    private static readonly NetMessageIsRegionAvailable defaultInstance = new NetMessageIsRegionAvailable().MakeReadOnly();
    private static readonly string[] _netMessageIsRegionAvailableFieldNames = new string[] { "isAvailable", "regionPrototype" };
    private static readonly uint[] _netMessageIsRegionAvailableFieldTags = new uint[] { 16, 8 };
    public static NetMessageIsRegionAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageIsRegionAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageIsRegionAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageIsRegionAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageIsRegionAvailable, NetMessageIsRegionAvailable.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageIsRegionAvailable__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeFieldNumber = 1;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public const int IsAvailableFieldNumber = 2;
    private bool hasIsAvailable;
    private bool isAvailable_;
    public bool HasIsAvailable {
      get { return hasIsAvailable; }
    }
    public bool IsAvailable {
      get { return isAvailable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionPrototype) return false;
        if (!hasIsAvailable) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageIsRegionAvailableFieldNames;
      if (hasRegionPrototype) {
        output.WriteUInt64(1, field_names[1], RegionPrototype);
      }
      if (hasIsAvailable) {
        output.WriteBool(2, field_names[0], IsAvailable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototype);
      }
      if (hasIsAvailable) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsAvailable);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageIsRegionAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageIsRegionAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageIsRegionAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageIsRegionAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageIsRegionAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageIsRegionAvailable result;
      
      private NetMessageIsRegionAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageIsRegionAvailable original = result;
          result = new NetMessageIsRegionAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageIsRegionAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageIsRegionAvailable.Descriptor; }
      }
      
      public override NetMessageIsRegionAvailable DefaultInstanceForType {
        get { return global::Gazillion.NetMessageIsRegionAvailable.DefaultInstance; }
      }
      
      public override NetMessageIsRegionAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageIsRegionAvailable) {
          return MergeFrom((NetMessageIsRegionAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageIsRegionAvailable other) {
        if (other == global::Gazillion.NetMessageIsRegionAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        if (other.HasIsAvailable) {
          IsAvailable = other.IsAvailable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageIsRegionAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageIsRegionAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
            case 16: {
              result.hasIsAvailable = input.ReadBool(ref result.isAvailable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
      
      public bool HasIsAvailable {
        get { return result.hasIsAvailable; }
      }
      public bool IsAvailable {
        get { return result.IsAvailable; }
        set { SetIsAvailable(value); }
      }
      public Builder SetIsAvailable(bool value) {
        PrepareBuilder();
        result.hasIsAvailable = true;
        result.isAvailable_ = value;
        return this;
      }
      public Builder ClearIsAvailable() {
        PrepareBuilder();
        result.hasIsAvailable = false;
        result.isAvailable_ = false;
        return this;
      }
    }
    static NetMessageIsRegionAvailable() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateAvatarState : pb::GeneratedMessage<NetMessageUpdateAvatarState, NetMessageUpdateAvatarState.Builder> {
    private NetMessageUpdateAvatarState() { }
    private static readonly NetMessageUpdateAvatarState defaultInstance = new NetMessageUpdateAvatarState().MakeReadOnly();
    private static readonly string[] _netMessageUpdateAvatarStateFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageUpdateAvatarStateFieldTags = new uint[] { 10 };
    public static NetMessageUpdateAvatarState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateAvatarState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateAvatarState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUpdateAvatarState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateAvatarState, NetMessageUpdateAvatarState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUpdateAvatarState__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateAvatarStateFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateAvatarState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateAvatarState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateAvatarState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateAvatarState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateAvatarState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateAvatarState result;
      
      private NetMessageUpdateAvatarState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateAvatarState original = result;
          result = new NetMessageUpdateAvatarState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateAvatarState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateAvatarState.Descriptor; }
      }
      
      public override NetMessageUpdateAvatarState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateAvatarState.DefaultInstance; }
      }
      
      public override NetMessageUpdateAvatarState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateAvatarState) {
          return MergeFrom((NetMessageUpdateAvatarState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateAvatarState other) {
        if (other == global::Gazillion.NetMessageUpdateAvatarState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateAvatarStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateAvatarStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageUpdateAvatarState() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellLoaded : pb::GeneratedMessage<NetMessageCellLoaded, NetMessageCellLoaded.Builder> {
    private NetMessageCellLoaded() { }
    private static readonly NetMessageCellLoaded defaultInstance = new NetMessageCellLoaded().MakeReadOnly();
    private static readonly string[] _netMessageCellLoadedFieldNames = new string[] { "cellId", "regionId" };
    private static readonly uint[] _netMessageCellLoadedFieldTags = new uint[] { 8, 16 };
    public static NetMessageCellLoaded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellLoaded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellLoaded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCellLoaded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellLoaded, NetMessageCellLoaded.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCellLoaded__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int RegionIdFieldNumber = 2;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasRegionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellLoadedFieldNames;
      if (hasCellId) {
        output.WriteUInt32(1, field_names[0], CellId);
      }
      if (hasRegionId) {
        output.WriteUInt64(2, field_names[1], RegionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CellId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RegionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellLoaded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellLoaded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellLoaded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellLoaded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellLoaded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellLoaded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellLoaded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellLoaded result;
      
      private NetMessageCellLoaded PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellLoaded original = result;
          result = new NetMessageCellLoaded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellLoaded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellLoaded.Descriptor; }
      }
      
      public override NetMessageCellLoaded DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellLoaded.DefaultInstance; }
      }
      
      public override NetMessageCellLoaded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellLoaded) {
          return MergeFrom((NetMessageCellLoaded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellLoaded other) {
        if (other == global::Gazillion.NetMessageCellLoaded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellLoadedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellLoadedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 16: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
    }
    static NetMessageCellLoaded() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportAckResponse : pb::GeneratedMessage<NetMessageTeleportAckResponse, NetMessageTeleportAckResponse.Builder> {
    private NetMessageTeleportAckResponse() { }
    private static readonly NetMessageTeleportAckResponse defaultInstance = new NetMessageTeleportAckResponse().MakeReadOnly();
    private static readonly string[] _netMessageTeleportAckResponseFieldNames = new string[] { "ackseq" };
    private static readonly uint[] _netMessageTeleportAckResponseFieldTags = new uint[] { 8 };
    public static NetMessageTeleportAckResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportAckResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportAckResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportAckResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportAckResponse, NetMessageTeleportAckResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportAckResponse__FieldAccessorTable; }
    }
    
    public const int AckseqFieldNumber = 1;
    private bool hasAckseq;
    private uint ackseq_;
    public bool HasAckseq {
      get { return hasAckseq; }
    }
    public uint Ackseq {
      get { return ackseq_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAckseq) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportAckResponseFieldNames;
      if (hasAckseq) {
        output.WriteUInt32(1, field_names[0], Ackseq);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAckseq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Ackseq);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportAckResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportAckResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportAckResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportAckResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportAckResponse result;
      
      private NetMessageTeleportAckResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportAckResponse original = result;
          result = new NetMessageTeleportAckResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportAckResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportAckResponse.Descriptor; }
      }
      
      public override NetMessageTeleportAckResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportAckResponse.DefaultInstance; }
      }
      
      public override NetMessageTeleportAckResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportAckResponse) {
          return MergeFrom((NetMessageTeleportAckResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportAckResponse other) {
        if (other == global::Gazillion.NetMessageTeleportAckResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAckseq) {
          Ackseq = other.Ackseq;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportAckResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportAckResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAckseq = input.ReadUInt32(ref result.ackseq_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAckseq {
        get { return result.hasAckseq; }
      }
      public uint Ackseq {
        get { return result.Ackseq; }
        set { SetAckseq(value); }
      }
      public Builder SetAckseq(uint value) {
        PrepareBuilder();
        result.hasAckseq = true;
        result.ackseq_ = value;
        return this;
      }
      public Builder ClearAckseq() {
        PrepareBuilder();
        result.hasAckseq = false;
        result.ackseq_ = 0;
        return this;
      }
    }
    static NetMessageTeleportAckResponse() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAdminCommand : pb::GeneratedMessage<NetMessageAdminCommand, NetMessageAdminCommand.Builder> {
    private NetMessageAdminCommand() { }
    private static readonly NetMessageAdminCommand defaultInstance = new NetMessageAdminCommand().MakeReadOnly();
    private static readonly string[] _netMessageAdminCommandFieldNames = new string[] { "command" };
    private static readonly uint[] _netMessageAdminCommandFieldTags = new uint[] { 10 };
    public static NetMessageAdminCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAdminCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAdminCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAdminCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAdminCommand, NetMessageAdminCommand.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAdminCommand__FieldAccessorTable; }
    }
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private string command_ = "";
    public bool HasCommand {
      get { return hasCommand; }
    }
    public string Command {
      get { return command_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommand) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAdminCommandFieldNames;
      if (hasCommand) {
        output.WriteString(1, field_names[0], Command);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Command);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAdminCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAdminCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAdminCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAdminCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAdminCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAdminCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAdminCommand result;
      
      private NetMessageAdminCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAdminCommand original = result;
          result = new NetMessageAdminCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAdminCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAdminCommand.Descriptor; }
      }
      
      public override NetMessageAdminCommand DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAdminCommand.DefaultInstance; }
      }
      
      public override NetMessageAdminCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAdminCommand) {
          return MergeFrom((NetMessageAdminCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAdminCommand other) {
        if (other == global::Gazillion.NetMessageAdminCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAdminCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAdminCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCommand = input.ReadString(ref result.command_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
        get { return result.hasCommand; }
      }
      public string Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = "";
        return this;
      }
    }
    static NetMessageAdminCommand() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryActivatePower : pb::GeneratedMessage<NetMessageTryActivatePower, NetMessageTryActivatePower.Builder> {
    private NetMessageTryActivatePower() { }
    private static readonly NetMessageTryActivatePower defaultInstance = new NetMessageTryActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageTryActivatePowerFieldNames = new string[] { "fxRandomSeed", "idTargetEntity", "idUserEntity", "itemSourceId", "movementSpeed", "movementTimeMS", "powerPrototypeId", "powerRandomSeed", "targetPosition", "triggeringPowerPrototypeId" };
    private static readonly uint[] _netMessageTryActivatePowerFieldTags = new uint[] { 72, 24, 8, 64, 45, 48, 16, 56, 34, 80 };
    public static NetMessageTryActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryActivatePower, NetMessageTryActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryActivatePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int MovementSpeedFieldNumber = 5;
    private bool hasMovementSpeed;
    private float movementSpeed_;
    public bool HasMovementSpeed {
      get { return hasMovementSpeed; }
    }
    public float MovementSpeed {
      get { return movementSpeed_; }
    }
    
    public const int MovementTimeMSFieldNumber = 6;
    private bool hasMovementTimeMS;
    private ulong movementTimeMS_;
    public bool HasMovementTimeMS {
      get { return hasMovementTimeMS; }
    }
    public ulong MovementTimeMS {
      get { return movementTimeMS_; }
    }
    
    public const int PowerRandomSeedFieldNumber = 7;
    private bool hasPowerRandomSeed;
    private uint powerRandomSeed_;
    public bool HasPowerRandomSeed {
      get { return hasPowerRandomSeed; }
    }
    public uint PowerRandomSeed {
      get { return powerRandomSeed_; }
    }
    
    public const int ItemSourceIdFieldNumber = 8;
    private bool hasItemSourceId;
    private ulong itemSourceId_;
    public bool HasItemSourceId {
      get { return hasItemSourceId; }
    }
    public ulong ItemSourceId {
      get { return itemSourceId_; }
    }
    
    public const int FxRandomSeedFieldNumber = 9;
    private bool hasFxRandomSeed;
    private uint fxRandomSeed_;
    public bool HasFxRandomSeed {
      get { return hasFxRandomSeed; }
    }
    public uint FxRandomSeed {
      get { return fxRandomSeed_; }
    }
    
    public const int TriggeringPowerPrototypeIdFieldNumber = 10;
    private bool hasTriggeringPowerPrototypeId;
    private ulong triggeringPowerPrototypeId_;
    public bool HasTriggeringPowerPrototypeId {
      get { return hasTriggeringPowerPrototypeId; }
    }
    public ulong TriggeringPowerPrototypeId {
      get { return triggeringPowerPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasFxRandomSeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryActivatePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[2], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[6], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[1], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[8], TargetPosition);
      }
      if (hasMovementSpeed) {
        output.WriteFloat(5, field_names[4], MovementSpeed);
      }
      if (hasMovementTimeMS) {
        output.WriteUInt64(6, field_names[5], MovementTimeMS);
      }
      if (hasPowerRandomSeed) {
        output.WriteUInt32(7, field_names[7], PowerRandomSeed);
      }
      if (hasItemSourceId) {
        output.WriteUInt64(8, field_names[3], ItemSourceId);
      }
      if (hasFxRandomSeed) {
        output.WriteUInt32(9, field_names[0], FxRandomSeed);
      }
      if (hasTriggeringPowerPrototypeId) {
        output.WriteUInt64(10, field_names[9], TriggeringPowerPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      if (hasMovementSpeed) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, MovementSpeed);
      }
      if (hasMovementTimeMS) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, MovementTimeMS);
      }
      if (hasPowerRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, PowerRandomSeed);
      }
      if (hasItemSourceId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ItemSourceId);
      }
      if (hasFxRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, FxRandomSeed);
      }
      if (hasTriggeringPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, TriggeringPowerPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryActivatePower result;
      
      private NetMessageTryActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryActivatePower original = result;
          result = new NetMessageTryActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryActivatePower.Descriptor; }
      }
      
      public override NetMessageTryActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryActivatePower.DefaultInstance; }
      }
      
      public override NetMessageTryActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryActivatePower) {
          return MergeFrom((NetMessageTryActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryActivatePower other) {
        if (other == global::Gazillion.NetMessageTryActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        if (other.HasMovementSpeed) {
          MovementSpeed = other.MovementSpeed;
        }
        if (other.HasMovementTimeMS) {
          MovementTimeMS = other.MovementTimeMS;
        }
        if (other.HasPowerRandomSeed) {
          PowerRandomSeed = other.PowerRandomSeed;
        }
        if (other.HasItemSourceId) {
          ItemSourceId = other.ItemSourceId;
        }
        if (other.HasFxRandomSeed) {
          FxRandomSeed = other.FxRandomSeed;
        }
        if (other.HasTriggeringPowerPrototypeId) {
          TriggeringPowerPrototypeId = other.TriggeringPowerPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 45: {
              result.hasMovementSpeed = input.ReadFloat(ref result.movementSpeed_);
              break;
            }
            case 48: {
              result.hasMovementTimeMS = input.ReadUInt64(ref result.movementTimeMS_);
              break;
            }
            case 56: {
              result.hasPowerRandomSeed = input.ReadUInt32(ref result.powerRandomSeed_);
              break;
            }
            case 64: {
              result.hasItemSourceId = input.ReadUInt64(ref result.itemSourceId_);
              break;
            }
            case 72: {
              result.hasFxRandomSeed = input.ReadUInt32(ref result.fxRandomSeed_);
              break;
            }
            case 80: {
              result.hasTriggeringPowerPrototypeId = input.ReadUInt64(ref result.triggeringPowerPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
      
      public bool HasMovementSpeed {
        get { return result.hasMovementSpeed; }
      }
      public float MovementSpeed {
        get { return result.MovementSpeed; }
        set { SetMovementSpeed(value); }
      }
      public Builder SetMovementSpeed(float value) {
        PrepareBuilder();
        result.hasMovementSpeed = true;
        result.movementSpeed_ = value;
        return this;
      }
      public Builder ClearMovementSpeed() {
        PrepareBuilder();
        result.hasMovementSpeed = false;
        result.movementSpeed_ = 0F;
        return this;
      }
      
      public bool HasMovementTimeMS {
        get { return result.hasMovementTimeMS; }
      }
      public ulong MovementTimeMS {
        get { return result.MovementTimeMS; }
        set { SetMovementTimeMS(value); }
      }
      public Builder SetMovementTimeMS(ulong value) {
        PrepareBuilder();
        result.hasMovementTimeMS = true;
        result.movementTimeMS_ = value;
        return this;
      }
      public Builder ClearMovementTimeMS() {
        PrepareBuilder();
        result.hasMovementTimeMS = false;
        result.movementTimeMS_ = 0UL;
        return this;
      }
      
      public bool HasPowerRandomSeed {
        get { return result.hasPowerRandomSeed; }
      }
      public uint PowerRandomSeed {
        get { return result.PowerRandomSeed; }
        set { SetPowerRandomSeed(value); }
      }
      public Builder SetPowerRandomSeed(uint value) {
        PrepareBuilder();
        result.hasPowerRandomSeed = true;
        result.powerRandomSeed_ = value;
        return this;
      }
      public Builder ClearPowerRandomSeed() {
        PrepareBuilder();
        result.hasPowerRandomSeed = false;
        result.powerRandomSeed_ = 0;
        return this;
      }
      
      public bool HasItemSourceId {
        get { return result.hasItemSourceId; }
      }
      public ulong ItemSourceId {
        get { return result.ItemSourceId; }
        set { SetItemSourceId(value); }
      }
      public Builder SetItemSourceId(ulong value) {
        PrepareBuilder();
        result.hasItemSourceId = true;
        result.itemSourceId_ = value;
        return this;
      }
      public Builder ClearItemSourceId() {
        PrepareBuilder();
        result.hasItemSourceId = false;
        result.itemSourceId_ = 0UL;
        return this;
      }
      
      public bool HasFxRandomSeed {
        get { return result.hasFxRandomSeed; }
      }
      public uint FxRandomSeed {
        get { return result.FxRandomSeed; }
        set { SetFxRandomSeed(value); }
      }
      public Builder SetFxRandomSeed(uint value) {
        PrepareBuilder();
        result.hasFxRandomSeed = true;
        result.fxRandomSeed_ = value;
        return this;
      }
      public Builder ClearFxRandomSeed() {
        PrepareBuilder();
        result.hasFxRandomSeed = false;
        result.fxRandomSeed_ = 0;
        return this;
      }
      
      public bool HasTriggeringPowerPrototypeId {
        get { return result.hasTriggeringPowerPrototypeId; }
      }
      public ulong TriggeringPowerPrototypeId {
        get { return result.TriggeringPowerPrototypeId; }
        set { SetTriggeringPowerPrototypeId(value); }
      }
      public Builder SetTriggeringPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTriggeringPowerPrototypeId = true;
        result.triggeringPowerPrototypeId_ = value;
        return this;
      }
      public Builder ClearTriggeringPowerPrototypeId() {
        PrepareBuilder();
        result.hasTriggeringPowerPrototypeId = false;
        result.triggeringPowerPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageTryActivatePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerRelease : pb::GeneratedMessage<NetMessagePowerRelease, NetMessagePowerRelease.Builder> {
    private NetMessagePowerRelease() { }
    private static readonly NetMessagePowerRelease defaultInstance = new NetMessagePowerRelease().MakeReadOnly();
    private static readonly string[] _netMessagePowerReleaseFieldNames = new string[] { "idTargetEntity", "idUserEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessagePowerReleaseFieldTags = new uint[] { 24, 8, 16, 34 };
    public static NetMessagePowerRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerRelease, NetMessagePowerRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerRelease__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerReleaseFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[3], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerRelease result;
      
      private NetMessagePowerRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerRelease original = result;
          result = new NetMessagePowerRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerRelease.Descriptor; }
      }
      
      public override NetMessagePowerRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerRelease.DefaultInstance; }
      }
      
      public override NetMessagePowerRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerRelease) {
          return MergeFrom((NetMessagePowerRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerRelease other) {
        if (other == global::Gazillion.NetMessagePowerRelease.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessagePowerRelease() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCancelPower : pb::GeneratedMessage<NetMessageTryCancelPower, NetMessageTryCancelPower.Builder> {
    private NetMessageTryCancelPower() { }
    private static readonly NetMessageTryCancelPower defaultInstance = new NetMessageTryCancelPower().MakeReadOnly();
    private static readonly string[] _netMessageTryCancelPowerFieldNames = new string[] { "endPowerFlags", "idUserEntity", "powerPrototypeId" };
    private static readonly uint[] _netMessageTryCancelPowerFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageTryCancelPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCancelPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCancelPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCancelPower, NetMessageTryCancelPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelPower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int EndPowerFlagsFieldNumber = 3;
    private bool hasEndPowerFlags;
    private uint endPowerFlags_;
    public bool HasEndPowerFlags {
      get { return hasEndPowerFlags; }
    }
    public uint EndPowerFlags {
      get { return endPowerFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasEndPowerFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCancelPowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        output.WriteUInt32(3, field_names[0], EndPowerFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EndPowerFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCancelPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCancelPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCancelPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCancelPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCancelPower result;
      
      private NetMessageTryCancelPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCancelPower original = result;
          result = new NetMessageTryCancelPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCancelPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCancelPower.Descriptor; }
      }
      
      public override NetMessageTryCancelPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCancelPower.DefaultInstance; }
      }
      
      public override NetMessageTryCancelPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCancelPower) {
          return MergeFrom((NetMessageTryCancelPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCancelPower other) {
        if (other == global::Gazillion.NetMessageTryCancelPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasEndPowerFlags) {
          EndPowerFlags = other.EndPowerFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCancelPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCancelPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasEndPowerFlags = input.ReadUInt32(ref result.endPowerFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEndPowerFlags {
        get { return result.hasEndPowerFlags; }
      }
      public uint EndPowerFlags {
        get { return result.EndPowerFlags; }
        set { SetEndPowerFlags(value); }
      }
      public Builder SetEndPowerFlags(uint value) {
        PrepareBuilder();
        result.hasEndPowerFlags = true;
        result.endPowerFlags_ = value;
        return this;
      }
      public Builder ClearEndPowerFlags() {
        PrepareBuilder();
        result.hasEndPowerFlags = false;
        result.endPowerFlags_ = 0;
        return this;
      }
    }
    static NetMessageTryCancelPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCancelActivePower : pb::GeneratedMessage<NetMessageTryCancelActivePower, NetMessageTryCancelActivePower.Builder> {
    private NetMessageTryCancelActivePower() { }
    private static readonly NetMessageTryCancelActivePower defaultInstance = new NetMessageTryCancelActivePower().MakeReadOnly();
    private static readonly string[] _netMessageTryCancelActivePowerFieldNames = new string[] { "idUserEntity" };
    private static readonly uint[] _netMessageTryCancelActivePowerFieldTags = new uint[] { 8 };
    public static NetMessageTryCancelActivePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCancelActivePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCancelActivePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelActivePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCancelActivePower, NetMessageTryCancelActivePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCancelActivePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCancelActivePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[0], IdUserEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCancelActivePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCancelActivePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCancelActivePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCancelActivePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCancelActivePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCancelActivePower result;
      
      private NetMessageTryCancelActivePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCancelActivePower original = result;
          result = new NetMessageTryCancelActivePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCancelActivePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCancelActivePower.Descriptor; }
      }
      
      public override NetMessageTryCancelActivePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCancelActivePower.DefaultInstance; }
      }
      
      public override NetMessageTryCancelActivePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCancelActivePower) {
          return MergeFrom((NetMessageTryCancelActivePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCancelActivePower other) {
        if (other == global::Gazillion.NetMessageTryCancelActivePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCancelActivePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCancelActivePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageTryCancelActivePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageContinuousPowerUpdateToServer : pb::GeneratedMessage<NetMessageContinuousPowerUpdateToServer, NetMessageContinuousPowerUpdateToServer.Builder> {
    private NetMessageContinuousPowerUpdateToServer() { }
    private static readonly NetMessageContinuousPowerUpdateToServer defaultInstance = new NetMessageContinuousPowerUpdateToServer().MakeReadOnly();
    private static readonly string[] _netMessageContinuousPowerUpdateToServerFieldNames = new string[] { "avatarIndex", "idTargetEntity", "powerPrototypeId", "randomSeed", "targetPosition" };
    private static readonly uint[] _netMessageContinuousPowerUpdateToServerFieldTags = new uint[] { 16, 24, 8, 40, 34 };
    public static NetMessageContinuousPowerUpdateToServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageContinuousPowerUpdateToServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageContinuousPowerUpdateToServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageContinuousPowerUpdateToServer, NetMessageContinuousPowerUpdateToServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageContinuousPowerUpdateToServer__FieldAccessorTable; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 1;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RandomSeedFieldNumber = 5;
    private bool hasRandomSeed;
    private uint randomSeed_;
    public bool HasRandomSeed {
      get { return hasRandomSeed; }
    }
    public uint RandomSeed {
      get { return randomSeed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPowerPrototypeId) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageContinuousPowerUpdateToServerFieldNames;
      if (hasPowerPrototypeId) {
        output.WriteUInt64(1, field_names[2], PowerPrototypeId);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[1], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[4], TargetPosition);
      }
      if (hasRandomSeed) {
        output.WriteUInt32(5, field_names[3], RandomSeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PowerPrototypeId);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      if (hasRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RandomSeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageContinuousPowerUpdateToServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageContinuousPowerUpdateToServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageContinuousPowerUpdateToServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageContinuousPowerUpdateToServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageContinuousPowerUpdateToServer result;
      
      private NetMessageContinuousPowerUpdateToServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageContinuousPowerUpdateToServer original = result;
          result = new NetMessageContinuousPowerUpdateToServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageContinuousPowerUpdateToServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToServer.Descriptor; }
      }
      
      public override NetMessageContinuousPowerUpdateToServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToServer.DefaultInstance; }
      }
      
      public override NetMessageContinuousPowerUpdateToServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageContinuousPowerUpdateToServer) {
          return MergeFrom((NetMessageContinuousPowerUpdateToServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageContinuousPowerUpdateToServer other) {
        if (other == global::Gazillion.NetMessageContinuousPowerUpdateToServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        if (other.HasRandomSeed) {
          RandomSeed = other.RandomSeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageContinuousPowerUpdateToServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageContinuousPowerUpdateToServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasRandomSeed = input.ReadUInt32(ref result.randomSeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
      
      public bool HasRandomSeed {
        get { return result.hasRandomSeed; }
      }
      public uint RandomSeed {
        get { return result.RandomSeed; }
        set { SetRandomSeed(value); }
      }
      public Builder SetRandomSeed(uint value) {
        PrepareBuilder();
        result.hasRandomSeed = true;
        result.randomSeed_ = value;
        return this;
      }
      public Builder ClearRandomSeed() {
        PrepareBuilder();
        result.hasRandomSeed = false;
        result.randomSeed_ = 0;
        return this;
      }
    }
    static NetMessageContinuousPowerUpdateToServer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCancelPendingAction : pb::GeneratedMessage<NetMessageCancelPendingAction, NetMessageCancelPendingAction.Builder> {
    private NetMessageCancelPendingAction() { }
    private static readonly NetMessageCancelPendingAction defaultInstance = new NetMessageCancelPendingAction().MakeReadOnly();
    private static readonly string[] _netMessageCancelPendingActionFieldNames = new string[] { "avatarIndex" };
    private static readonly uint[] _netMessageCancelPendingActionFieldTags = new uint[] { 8 };
    public static NetMessageCancelPendingAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCancelPendingAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCancelPendingAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCancelPendingAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCancelPendingAction, NetMessageCancelPendingAction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCancelPendingAction__FieldAccessorTable; }
    }
    
    public const int AvatarIndexFieldNumber = 1;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCancelPendingActionFieldNames;
      if (hasAvatarIndex) {
        output.WriteInt32(1, field_names[0], AvatarIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AvatarIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCancelPendingAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCancelPendingAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCancelPendingAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCancelPendingAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCancelPendingAction result;
      
      private NetMessageCancelPendingAction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCancelPendingAction original = result;
          result = new NetMessageCancelPendingAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCancelPendingAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCancelPendingAction.Descriptor; }
      }
      
      public override NetMessageCancelPendingAction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCancelPendingAction.DefaultInstance; }
      }
      
      public override NetMessageCancelPendingAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCancelPendingAction) {
          return MergeFrom((NetMessageCancelPendingAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCancelPendingAction other) {
        if (other == global::Gazillion.NetMessageCancelPendingAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCancelPendingActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCancelPendingActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
    }
    static NetMessageCancelPendingAction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartAIDebugUI : pb::GeneratedMessage<NetMessageStartAIDebugUI, NetMessageStartAIDebugUI.Builder> {
    private NetMessageStartAIDebugUI() { }
    private static readonly NetMessageStartAIDebugUI defaultInstance = new NetMessageStartAIDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartAIDebugUIFieldNames = new string[] { "idTargetNPC" };
    private static readonly uint[] _netMessageStartAIDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartAIDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartAIDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartAIDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartAIDebugUI, NetMessageStartAIDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartAIDebugUIFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[0], IdTargetNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartAIDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartAIDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartAIDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartAIDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartAIDebugUI result;
      
      private NetMessageStartAIDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartAIDebugUI original = result;
          result = new NetMessageStartAIDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartAIDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartAIDebugUI.Descriptor; }
      }
      
      public override NetMessageStartAIDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartAIDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartAIDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartAIDebugUI) {
          return MergeFrom((NetMessageStartAIDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartAIDebugUI other) {
        if (other == global::Gazillion.NetMessageStartAIDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartAIDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartAIDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageStartAIDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopAIDebugUI : pb::GeneratedMessage<NetMessageStopAIDebugUI, NetMessageStopAIDebugUI.Builder> {
    private NetMessageStopAIDebugUI() { }
    private static readonly NetMessageStopAIDebugUI defaultInstance = new NetMessageStopAIDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopAIDebugUIFieldNames = new string[] { "idTargetNPC" };
    private static readonly uint[] _netMessageStopAIDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopAIDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopAIDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopAIDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopAIDebugUI, NetMessageStopAIDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopAIDebugUIFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[0], IdTargetNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopAIDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopAIDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopAIDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopAIDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopAIDebugUI result;
      
      private NetMessageStopAIDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopAIDebugUI original = result;
          result = new NetMessageStopAIDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopAIDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopAIDebugUI.Descriptor; }
      }
      
      public override NetMessageStopAIDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopAIDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopAIDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopAIDebugUI) {
          return MergeFrom((NetMessageStopAIDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopAIDebugUI other) {
        if (other == global::Gazillion.NetMessageStopAIDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopAIDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopAIDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageStopAIDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartAIPerformanceUI : pb::GeneratedMessage<NetMessageStartAIPerformanceUI, NetMessageStartAIPerformanceUI.Builder> {
    private NetMessageStartAIPerformanceUI() { }
    private static readonly NetMessageStartAIPerformanceUI defaultInstance = new NetMessageStartAIPerformanceUI().MakeReadOnly();
    private static readonly string[] _netMessageStartAIPerformanceUIFieldNames = new string[] {  };
    private static readonly uint[] _netMessageStartAIPerformanceUIFieldTags = new uint[] {  };
    public static NetMessageStartAIPerformanceUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartAIPerformanceUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartAIPerformanceUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIPerformanceUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartAIPerformanceUI, NetMessageStartAIPerformanceUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartAIPerformanceUI__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartAIPerformanceUIFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartAIPerformanceUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartAIPerformanceUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartAIPerformanceUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartAIPerformanceUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartAIPerformanceUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartAIPerformanceUI result;
      
      private NetMessageStartAIPerformanceUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartAIPerformanceUI original = result;
          result = new NetMessageStartAIPerformanceUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartAIPerformanceUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartAIPerformanceUI.Descriptor; }
      }
      
      public override NetMessageStartAIPerformanceUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartAIPerformanceUI.DefaultInstance; }
      }
      
      public override NetMessageStartAIPerformanceUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartAIPerformanceUI) {
          return MergeFrom((NetMessageStartAIPerformanceUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartAIPerformanceUI other) {
        if (other == global::Gazillion.NetMessageStartAIPerformanceUI.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartAIPerformanceUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartAIPerformanceUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageStartAIPerformanceUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopAIPerformanceUI : pb::GeneratedMessage<NetMessageStopAIPerformanceUI, NetMessageStopAIPerformanceUI.Builder> {
    private NetMessageStopAIPerformanceUI() { }
    private static readonly NetMessageStopAIPerformanceUI defaultInstance = new NetMessageStopAIPerformanceUI().MakeReadOnly();
    private static readonly string[] _netMessageStopAIPerformanceUIFieldNames = new string[] {  };
    private static readonly uint[] _netMessageStopAIPerformanceUIFieldTags = new uint[] {  };
    public static NetMessageStopAIPerformanceUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopAIPerformanceUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopAIPerformanceUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIPerformanceUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopAIPerformanceUI, NetMessageStopAIPerformanceUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopAIPerformanceUI__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopAIPerformanceUIFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopAIPerformanceUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopAIPerformanceUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopAIPerformanceUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopAIPerformanceUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopAIPerformanceUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopAIPerformanceUI result;
      
      private NetMessageStopAIPerformanceUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopAIPerformanceUI original = result;
          result = new NetMessageStopAIPerformanceUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopAIPerformanceUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopAIPerformanceUI.Descriptor; }
      }
      
      public override NetMessageStopAIPerformanceUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopAIPerformanceUI.DefaultInstance; }
      }
      
      public override NetMessageStopAIPerformanceUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopAIPerformanceUI) {
          return MergeFrom((NetMessageStopAIPerformanceUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopAIPerformanceUI other) {
        if (other == global::Gazillion.NetMessageStopAIPerformanceUI.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopAIPerformanceUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopAIPerformanceUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageStopAIPerformanceUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartMissionDebugUI : pb::GeneratedMessage<NetMessageStartMissionDebugUI, NetMessageStartMissionDebugUI.Builder> {
    private NetMessageStartMissionDebugUI() { }
    private static readonly NetMessageStartMissionDebugUI defaultInstance = new NetMessageStartMissionDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartMissionDebugUIFieldNames = new string[] { "idTargetAgent", "missionListMatchPattern", "missionPrototypeRefId" };
    private static readonly uint[] _netMessageStartMissionDebugUIFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageStartMissionDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartMissionDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartMissionDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartMissionDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartMissionDebugUI, NetMessageStartMissionDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartMissionDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetAgentFieldNumber = 1;
    private bool hasIdTargetAgent;
    private ulong idTargetAgent_;
    public bool HasIdTargetAgent {
      get { return hasIdTargetAgent; }
    }
    public ulong IdTargetAgent {
      get { return idTargetAgent_; }
    }
    
    public const int MissionPrototypeRefIdFieldNumber = 2;
    private bool hasMissionPrototypeRefId;
    private ulong missionPrototypeRefId_;
    public bool HasMissionPrototypeRefId {
      get { return hasMissionPrototypeRefId; }
    }
    public ulong MissionPrototypeRefId {
      get { return missionPrototypeRefId_; }
    }
    
    public const int MissionListMatchPatternFieldNumber = 3;
    private bool hasMissionListMatchPattern;
    private string missionListMatchPattern_ = "";
    public bool HasMissionListMatchPattern {
      get { return hasMissionListMatchPattern; }
    }
    public string MissionListMatchPattern {
      get { return missionListMatchPattern_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetAgent) return false;
        if (!hasMissionPrototypeRefId) return false;
        if (!hasMissionListMatchPattern) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartMissionDebugUIFieldNames;
      if (hasIdTargetAgent) {
        output.WriteUInt64(1, field_names[0], IdTargetAgent);
      }
      if (hasMissionPrototypeRefId) {
        output.WriteUInt64(2, field_names[2], MissionPrototypeRefId);
      }
      if (hasMissionListMatchPattern) {
        output.WriteString(3, field_names[1], MissionListMatchPattern);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetAgent);
      }
      if (hasMissionPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionPrototypeRefId);
      }
      if (hasMissionListMatchPattern) {
        size += pb::CodedOutputStream.ComputeStringSize(3, MissionListMatchPattern);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartMissionDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartMissionDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartMissionDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartMissionDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartMissionDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartMissionDebugUI result;
      
      private NetMessageStartMissionDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartMissionDebugUI original = result;
          result = new NetMessageStartMissionDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartMissionDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartMissionDebugUI.Descriptor; }
      }
      
      public override NetMessageStartMissionDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartMissionDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartMissionDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartMissionDebugUI) {
          return MergeFrom((NetMessageStartMissionDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartMissionDebugUI other) {
        if (other == global::Gazillion.NetMessageStartMissionDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetAgent) {
          IdTargetAgent = other.IdTargetAgent;
        }
        if (other.HasMissionPrototypeRefId) {
          MissionPrototypeRefId = other.MissionPrototypeRefId;
        }
        if (other.HasMissionListMatchPattern) {
          MissionListMatchPattern = other.MissionListMatchPattern;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartMissionDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartMissionDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetAgent = input.ReadUInt64(ref result.idTargetAgent_);
              break;
            }
            case 16: {
              result.hasMissionPrototypeRefId = input.ReadUInt64(ref result.missionPrototypeRefId_);
              break;
            }
            case 26: {
              result.hasMissionListMatchPattern = input.ReadString(ref result.missionListMatchPattern_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetAgent {
        get { return result.hasIdTargetAgent; }
      }
      public ulong IdTargetAgent {
        get { return result.IdTargetAgent; }
        set { SetIdTargetAgent(value); }
      }
      public Builder SetIdTargetAgent(ulong value) {
        PrepareBuilder();
        result.hasIdTargetAgent = true;
        result.idTargetAgent_ = value;
        return this;
      }
      public Builder ClearIdTargetAgent() {
        PrepareBuilder();
        result.hasIdTargetAgent = false;
        result.idTargetAgent_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeRefId {
        get { return result.hasMissionPrototypeRefId; }
      }
      public ulong MissionPrototypeRefId {
        get { return result.MissionPrototypeRefId; }
        set { SetMissionPrototypeRefId(value); }
      }
      public Builder SetMissionPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeRefId = true;
        result.missionPrototypeRefId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeRefId() {
        PrepareBuilder();
        result.hasMissionPrototypeRefId = false;
        result.missionPrototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasMissionListMatchPattern {
        get { return result.hasMissionListMatchPattern; }
      }
      public string MissionListMatchPattern {
        get { return result.MissionListMatchPattern; }
        set { SetMissionListMatchPattern(value); }
      }
      public Builder SetMissionListMatchPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMissionListMatchPattern = true;
        result.missionListMatchPattern_ = value;
        return this;
      }
      public Builder ClearMissionListMatchPattern() {
        PrepareBuilder();
        result.hasMissionListMatchPattern = false;
        result.missionListMatchPattern_ = "";
        return this;
      }
    }
    static NetMessageStartMissionDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopMissionDebugUI : pb::GeneratedMessage<NetMessageStopMissionDebugUI, NetMessageStopMissionDebugUI.Builder> {
    private NetMessageStopMissionDebugUI() { }
    private static readonly NetMessageStopMissionDebugUI defaultInstance = new NetMessageStopMissionDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopMissionDebugUIFieldNames = new string[] { "idTargetAgent" };
    private static readonly uint[] _netMessageStopMissionDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopMissionDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopMissionDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopMissionDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopMissionDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopMissionDebugUI, NetMessageStopMissionDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopMissionDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetAgentFieldNumber = 1;
    private bool hasIdTargetAgent;
    private ulong idTargetAgent_;
    public bool HasIdTargetAgent {
      get { return hasIdTargetAgent; }
    }
    public ulong IdTargetAgent {
      get { return idTargetAgent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetAgent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopMissionDebugUIFieldNames;
      if (hasIdTargetAgent) {
        output.WriteUInt64(1, field_names[0], IdTargetAgent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetAgent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopMissionDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopMissionDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopMissionDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopMissionDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopMissionDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopMissionDebugUI result;
      
      private NetMessageStopMissionDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopMissionDebugUI original = result;
          result = new NetMessageStopMissionDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopMissionDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopMissionDebugUI.Descriptor; }
      }
      
      public override NetMessageStopMissionDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopMissionDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopMissionDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopMissionDebugUI) {
          return MergeFrom((NetMessageStopMissionDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopMissionDebugUI other) {
        if (other == global::Gazillion.NetMessageStopMissionDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetAgent) {
          IdTargetAgent = other.IdTargetAgent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopMissionDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopMissionDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetAgent = input.ReadUInt64(ref result.idTargetAgent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetAgent {
        get { return result.hasIdTargetAgent; }
      }
      public ulong IdTargetAgent {
        get { return result.IdTargetAgent; }
        set { SetIdTargetAgent(value); }
      }
      public Builder SetIdTargetAgent(ulong value) {
        PrepareBuilder();
        result.hasIdTargetAgent = true;
        result.idTargetAgent_ = value;
        return this;
      }
      public Builder ClearIdTargetAgent() {
        PrepareBuilder();
        result.hasIdTargetAgent = false;
        result.idTargetAgent_ = 0UL;
        return this;
      }
    }
    static NetMessageStopMissionDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPropertiesDebugUI : pb::GeneratedMessage<NetMessageStartPropertiesDebugUI, NetMessageStartPropertiesDebugUI.Builder> {
    private NetMessageStartPropertiesDebugUI() { }
    private static readonly NetMessageStartPropertiesDebugUI defaultInstance = new NetMessageStartPropertiesDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartPropertiesDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartPropertiesDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartPropertiesDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPropertiesDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPropertiesDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPropertiesDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPropertiesDebugUI, NetMessageStartPropertiesDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPropertiesDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPropertiesDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPropertiesDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPropertiesDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPropertiesDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPropertiesDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPropertiesDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPropertiesDebugUI result;
      
      private NetMessageStartPropertiesDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPropertiesDebugUI original = result;
          result = new NetMessageStartPropertiesDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPropertiesDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPropertiesDebugUI.Descriptor; }
      }
      
      public override NetMessageStartPropertiesDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPropertiesDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartPropertiesDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPropertiesDebugUI) {
          return MergeFrom((NetMessageStartPropertiesDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPropertiesDebugUI other) {
        if (other == global::Gazillion.NetMessageStartPropertiesDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPropertiesDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPropertiesDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPropertiesDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopPropertiesDebugUI : pb::GeneratedMessage<NetMessageStopPropertiesDebugUI, NetMessageStopPropertiesDebugUI.Builder> {
    private NetMessageStopPropertiesDebugUI() { }
    private static readonly NetMessageStopPropertiesDebugUI defaultInstance = new NetMessageStopPropertiesDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopPropertiesDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopPropertiesDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopPropertiesDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopPropertiesDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopPropertiesDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPropertiesDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopPropertiesDebugUI, NetMessageStopPropertiesDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPropertiesDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopPropertiesDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPropertiesDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopPropertiesDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopPropertiesDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopPropertiesDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopPropertiesDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopPropertiesDebugUI result;
      
      private NetMessageStopPropertiesDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopPropertiesDebugUI original = result;
          result = new NetMessageStopPropertiesDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopPropertiesDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopPropertiesDebugUI.Descriptor; }
      }
      
      public override NetMessageStopPropertiesDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopPropertiesDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopPropertiesDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopPropertiesDebugUI) {
          return MergeFrom((NetMessageStopPropertiesDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopPropertiesDebugUI other) {
        if (other == global::Gazillion.NetMessageStopPropertiesDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopPropertiesDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopPropertiesDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopPropertiesDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartConditionsDebugUI : pb::GeneratedMessage<NetMessageStartConditionsDebugUI, NetMessageStartConditionsDebugUI.Builder> {
    private NetMessageStartConditionsDebugUI() { }
    private static readonly NetMessageStartConditionsDebugUI defaultInstance = new NetMessageStartConditionsDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartConditionsDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartConditionsDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartConditionsDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartConditionsDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartConditionsDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartConditionsDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartConditionsDebugUI, NetMessageStartConditionsDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartConditionsDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartConditionsDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartConditionsDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartConditionsDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartConditionsDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartConditionsDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartConditionsDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartConditionsDebugUI result;
      
      private NetMessageStartConditionsDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartConditionsDebugUI original = result;
          result = new NetMessageStartConditionsDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartConditionsDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartConditionsDebugUI.Descriptor; }
      }
      
      public override NetMessageStartConditionsDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartConditionsDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartConditionsDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartConditionsDebugUI) {
          return MergeFrom((NetMessageStartConditionsDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartConditionsDebugUI other) {
        if (other == global::Gazillion.NetMessageStartConditionsDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartConditionsDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartConditionsDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartConditionsDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopConditionsDebugUI : pb::GeneratedMessage<NetMessageStopConditionsDebugUI, NetMessageStopConditionsDebugUI.Builder> {
    private NetMessageStopConditionsDebugUI() { }
    private static readonly NetMessageStopConditionsDebugUI defaultInstance = new NetMessageStopConditionsDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopConditionsDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopConditionsDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopConditionsDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopConditionsDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopConditionsDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopConditionsDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopConditionsDebugUI, NetMessageStopConditionsDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopConditionsDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopConditionsDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopConditionsDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopConditionsDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopConditionsDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopConditionsDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopConditionsDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopConditionsDebugUI result;
      
      private NetMessageStopConditionsDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopConditionsDebugUI original = result;
          result = new NetMessageStopConditionsDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopConditionsDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopConditionsDebugUI.Descriptor; }
      }
      
      public override NetMessageStopConditionsDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopConditionsDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopConditionsDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopConditionsDebugUI) {
          return MergeFrom((NetMessageStopConditionsDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopConditionsDebugUI other) {
        if (other == global::Gazillion.NetMessageStopConditionsDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopConditionsDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopConditionsDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopConditionsDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPowersDebugUI : pb::GeneratedMessage<NetMessageStartPowersDebugUI, NetMessageStartPowersDebugUI.Builder> {
    private NetMessageStartPowersDebugUI() { }
    private static readonly NetMessageStartPowersDebugUI defaultInstance = new NetMessageStartPowersDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStartPowersDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStartPowersDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStartPowersDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPowersDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPowersDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPowersDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPowersDebugUI, NetMessageStartPowersDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStartPowersDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPowersDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPowersDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPowersDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPowersDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPowersDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPowersDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPowersDebugUI result;
      
      private NetMessageStartPowersDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPowersDebugUI original = result;
          result = new NetMessageStartPowersDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPowersDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPowersDebugUI.Descriptor; }
      }
      
      public override NetMessageStartPowersDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPowersDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStartPowersDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPowersDebugUI) {
          return MergeFrom((NetMessageStartPowersDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPowersDebugUI other) {
        if (other == global::Gazillion.NetMessageStartPowersDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPowersDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPowersDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPowersDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopPowersDebugUI : pb::GeneratedMessage<NetMessageStopPowersDebugUI, NetMessageStopPowersDebugUI.Builder> {
    private NetMessageStopPowersDebugUI() { }
    private static readonly NetMessageStopPowersDebugUI defaultInstance = new NetMessageStopPowersDebugUI().MakeReadOnly();
    private static readonly string[] _netMessageStopPowersDebugUIFieldNames = new string[] { "idTargetEntity" };
    private static readonly uint[] _netMessageStopPowersDebugUIFieldTags = new uint[] { 8 };
    public static NetMessageStopPowersDebugUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopPowersDebugUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopPowersDebugUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPowersDebugUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopPowersDebugUI, NetMessageStopPowersDebugUI.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStopPowersDebugUI__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopPowersDebugUIFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[0], IdTargetEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPowersDebugUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopPowersDebugUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopPowersDebugUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopPowersDebugUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopPowersDebugUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopPowersDebugUI result;
      
      private NetMessageStopPowersDebugUI PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopPowersDebugUI original = result;
          result = new NetMessageStopPowersDebugUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopPowersDebugUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopPowersDebugUI.Descriptor; }
      }
      
      public override NetMessageStopPowersDebugUI DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopPowersDebugUI.DefaultInstance; }
      }
      
      public override NetMessageStopPowersDebugUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopPowersDebugUI) {
          return MergeFrom((NetMessageStopPowersDebugUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopPowersDebugUI other) {
        if (other == global::Gazillion.NetMessageStopPowersDebugUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopPowersDebugUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopPowersDebugUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageStopPowersDebugUI() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructMessageStoreMetric : pb::GeneratedMessage<NetStructMessageStoreMetric, NetStructMessageStoreMetric.Builder> {
    private NetStructMessageStoreMetric() { }
    private static readonly NetStructMessageStoreMetric defaultInstance = new NetStructMessageStoreMetric().MakeReadOnly();
    private static readonly string[] _netStructMessageStoreMetricFieldNames = new string[] { "storeActionEnum", "targetPrototypeId", "unixTimestamp" };
    private static readonly uint[] _netStructMessageStoreMetricFieldTags = new uint[] { 8, 24, 16 };
    public static NetStructMessageStoreMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructMessageStoreMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructMessageStoreMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetStructMessageStoreMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructMessageStoreMetric, NetStructMessageStoreMetric.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetStructMessageStoreMetric__FieldAccessorTable; }
    }
    
    public const int StoreActionEnumFieldNumber = 1;
    private bool hasStoreActionEnum;
    private global::Gazillion.AvailableStoreActions storeActionEnum_ = global::Gazillion.AvailableStoreActions.StoreAction_ViewHomeTab;
    public bool HasStoreActionEnum {
      get { return hasStoreActionEnum; }
    }
    public global::Gazillion.AvailableStoreActions StoreActionEnum {
      get { return storeActionEnum_; }
    }
    
    public const int UnixTimestampFieldNumber = 2;
    private bool hasUnixTimestamp;
    private ulong unixTimestamp_;
    public bool HasUnixTimestamp {
      get { return hasUnixTimestamp; }
    }
    public ulong UnixTimestamp {
      get { return unixTimestamp_; }
    }
    
    public const int TargetPrototypeIdFieldNumber = 3;
    private bool hasTargetPrototypeId;
    private ulong targetPrototypeId_;
    public bool HasTargetPrototypeId {
      get { return hasTargetPrototypeId; }
    }
    public ulong TargetPrototypeId {
      get { return targetPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStoreActionEnum) return false;
        if (!hasUnixTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructMessageStoreMetricFieldNames;
      if (hasStoreActionEnum) {
        output.WriteEnum(1, field_names[0], (int) StoreActionEnum, StoreActionEnum);
      }
      if (hasUnixTimestamp) {
        output.WriteUInt64(2, field_names[2], UnixTimestamp);
      }
      if (hasTargetPrototypeId) {
        output.WriteUInt64(3, field_names[1], TargetPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStoreActionEnum) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) StoreActionEnum);
      }
      if (hasUnixTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, UnixTimestamp);
      }
      if (hasTargetPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, TargetPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructMessageStoreMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMessageStoreMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructMessageStoreMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructMessageStoreMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructMessageStoreMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructMessageStoreMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructMessageStoreMetric result;
      
      private NetStructMessageStoreMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructMessageStoreMetric original = result;
          result = new NetStructMessageStoreMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructMessageStoreMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructMessageStoreMetric.Descriptor; }
      }
      
      public override NetStructMessageStoreMetric DefaultInstanceForType {
        get { return global::Gazillion.NetStructMessageStoreMetric.DefaultInstance; }
      }
      
      public override NetStructMessageStoreMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructMessageStoreMetric) {
          return MergeFrom((NetStructMessageStoreMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructMessageStoreMetric other) {
        if (other == global::Gazillion.NetStructMessageStoreMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStoreActionEnum) {
          StoreActionEnum = other.StoreActionEnum;
        }
        if (other.HasUnixTimestamp) {
          UnixTimestamp = other.UnixTimestamp;
        }
        if (other.HasTargetPrototypeId) {
          TargetPrototypeId = other.TargetPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructMessageStoreMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructMessageStoreMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.storeActionEnum_, out unknown)) {
                result.hasStoreActionEnum = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasUnixTimestamp = input.ReadUInt64(ref result.unixTimestamp_);
              break;
            }
            case 24: {
              result.hasTargetPrototypeId = input.ReadUInt64(ref result.targetPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStoreActionEnum {
       get { return result.hasStoreActionEnum; }
      }
      public global::Gazillion.AvailableStoreActions StoreActionEnum {
        get { return result.StoreActionEnum; }
        set { SetStoreActionEnum(value); }
      }
      public Builder SetStoreActionEnum(global::Gazillion.AvailableStoreActions value) {
        PrepareBuilder();
        result.hasStoreActionEnum = true;
        result.storeActionEnum_ = value;
        return this;
      }
      public Builder ClearStoreActionEnum() {
        PrepareBuilder();
        result.hasStoreActionEnum = false;
        result.storeActionEnum_ = global::Gazillion.AvailableStoreActions.StoreAction_ViewHomeTab;
        return this;
      }
      
      public bool HasUnixTimestamp {
        get { return result.hasUnixTimestamp; }
      }
      public ulong UnixTimestamp {
        get { return result.UnixTimestamp; }
        set { SetUnixTimestamp(value); }
      }
      public Builder SetUnixTimestamp(ulong value) {
        PrepareBuilder();
        result.hasUnixTimestamp = true;
        result.unixTimestamp_ = value;
        return this;
      }
      public Builder ClearUnixTimestamp() {
        PrepareBuilder();
        result.hasUnixTimestamp = false;
        result.unixTimestamp_ = 0UL;
        return this;
      }
      
      public bool HasTargetPrototypeId {
        get { return result.hasTargetPrototypeId; }
      }
      public ulong TargetPrototypeId {
        get { return result.TargetPrototypeId; }
        set { SetTargetPrototypeId(value); }
      }
      public Builder SetTargetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTargetPrototypeId = true;
        result.targetPrototypeId_ = value;
        return this;
      }
      public Builder ClearTargetPrototypeId() {
        PrepareBuilder();
        result.hasTargetPrototypeId = false;
        result.targetPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetStructMessageStoreMetric() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePing : pb::GeneratedMessage<NetMessagePing, NetMessagePing.Builder> {
    private NetMessagePing() { }
    private static readonly NetMessagePing defaultInstance = new NetMessagePing().MakeReadOnly();
    private static readonly string[] _netMessagePingFieldNames = new string[] { "compositelevel", "countrycode", "cpulevel", "displayOutput", "gpulevel", "lastClientLatency", "lastFps", "minFps", "minFpsPos", "regionPrototype", "requestNetReceivedGameTime", "sendClientTime", "sendGameTime", "storeMetrics", "streamingclient" };
    private static readonly uint[] _netMessagePingFieldTags = new uint[] { 80, 90, 64, 8, 72, 40, 53, 101, 106, 56, 32, 16, 24, 114, 120 };
    public static NetMessagePing DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePing DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePing ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePing__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePing, NetMessagePing.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePing__FieldAccessorTable; }
    }
    
    public const int DisplayOutputFieldNumber = 1;
    private bool hasDisplayOutput;
    private bool displayOutput_;
    public bool HasDisplayOutput {
      get { return hasDisplayOutput; }
    }
    public bool DisplayOutput {
      get { return displayOutput_; }
    }
    
    public const int SendClientTimeFieldNumber = 2;
    private bool hasSendClientTime;
    private ulong sendClientTime_;
    public bool HasSendClientTime {
      get { return hasSendClientTime; }
    }
    public ulong SendClientTime {
      get { return sendClientTime_; }
    }
    
    public const int SendGameTimeFieldNumber = 3;
    private bool hasSendGameTime;
    private ulong sendGameTime_;
    public bool HasSendGameTime {
      get { return hasSendGameTime; }
    }
    public ulong SendGameTime {
      get { return sendGameTime_; }
    }
    
    public const int RequestNetReceivedGameTimeFieldNumber = 4;
    private bool hasRequestNetReceivedGameTime;
    private ulong requestNetReceivedGameTime_;
    public bool HasRequestNetReceivedGameTime {
      get { return hasRequestNetReceivedGameTime; }
    }
    public ulong RequestNetReceivedGameTime {
      get { return requestNetReceivedGameTime_; }
    }
    
    public const int LastClientLatencyFieldNumber = 5;
    private bool hasLastClientLatency;
    private ulong lastClientLatency_;
    public bool HasLastClientLatency {
      get { return hasLastClientLatency; }
    }
    public ulong LastClientLatency {
      get { return lastClientLatency_; }
    }
    
    public const int LastFpsFieldNumber = 6;
    private bool hasLastFps;
    private float lastFps_;
    public bool HasLastFps {
      get { return hasLastFps; }
    }
    public float LastFps {
      get { return lastFps_; }
    }
    
    public const int RegionPrototypeFieldNumber = 7;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public const int CpulevelFieldNumber = 8;
    private bool hasCpulevel;
    private uint cpulevel_;
    public bool HasCpulevel {
      get { return hasCpulevel; }
    }
    public uint Cpulevel {
      get { return cpulevel_; }
    }
    
    public const int GpulevelFieldNumber = 9;
    private bool hasGpulevel;
    private uint gpulevel_;
    public bool HasGpulevel {
      get { return hasGpulevel; }
    }
    public uint Gpulevel {
      get { return gpulevel_; }
    }
    
    public const int CompositelevelFieldNumber = 10;
    private bool hasCompositelevel;
    private uint compositelevel_;
    public bool HasCompositelevel {
      get { return hasCompositelevel; }
    }
    public uint Compositelevel {
      get { return compositelevel_; }
    }
    
    public const int CountrycodeFieldNumber = 11;
    private bool hasCountrycode;
    private string countrycode_ = "";
    public bool HasCountrycode {
      get { return hasCountrycode; }
    }
    public string Countrycode {
      get { return countrycode_; }
    }
    
    public const int MinFpsFieldNumber = 12;
    private bool hasMinFps;
    private float minFps_;
    public bool HasMinFps {
      get { return hasMinFps; }
    }
    public float MinFps {
      get { return minFps_; }
    }
    
    public const int MinFpsPosFieldNumber = 13;
    private bool hasMinFpsPos;
    private global::Gazillion.NetStructPoint3 minFpsPos_;
    public bool HasMinFpsPos {
      get { return hasMinFpsPos; }
    }
    public global::Gazillion.NetStructPoint3 MinFpsPos {
      get { return minFpsPos_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int StoreMetricsFieldNumber = 14;
    private pbc::PopsicleList<global::Gazillion.NetStructMessageStoreMetric> storeMetrics_ = new pbc::PopsicleList<global::Gazillion.NetStructMessageStoreMetric>();
    public scg::IList<global::Gazillion.NetStructMessageStoreMetric> StoreMetricsList {
      get { return storeMetrics_; }
    }
    public int StoreMetricsCount {
      get { return storeMetrics_.Count; }
    }
    public global::Gazillion.NetStructMessageStoreMetric GetStoreMetrics(int index) {
      return storeMetrics_[index];
    }
    
    public const int StreamingclientFieldNumber = 15;
    private bool hasStreamingclient;
    private bool streamingclient_;
    public bool HasStreamingclient {
      get { return hasStreamingclient; }
    }
    public bool Streamingclient {
      get { return streamingclient_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayOutput) return false;
        if (!hasSendClientTime) return false;
        foreach (global::Gazillion.NetStructMessageStoreMetric element in StoreMetricsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePingFieldNames;
      if (hasDisplayOutput) {
        output.WriteBool(1, field_names[3], DisplayOutput);
      }
      if (hasSendClientTime) {
        output.WriteUInt64(2, field_names[11], SendClientTime);
      }
      if (hasSendGameTime) {
        output.WriteUInt64(3, field_names[12], SendGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        output.WriteUInt64(4, field_names[10], RequestNetReceivedGameTime);
      }
      if (hasLastClientLatency) {
        output.WriteUInt64(5, field_names[5], LastClientLatency);
      }
      if (hasLastFps) {
        output.WriteFloat(6, field_names[6], LastFps);
      }
      if (hasRegionPrototype) {
        output.WriteUInt64(7, field_names[9], RegionPrototype);
      }
      if (hasCpulevel) {
        output.WriteUInt32(8, field_names[2], Cpulevel);
      }
      if (hasGpulevel) {
        output.WriteUInt32(9, field_names[4], Gpulevel);
      }
      if (hasCompositelevel) {
        output.WriteUInt32(10, field_names[0], Compositelevel);
      }
      if (hasCountrycode) {
        output.WriteString(11, field_names[1], Countrycode);
      }
      if (hasMinFps) {
        output.WriteFloat(12, field_names[7], MinFps);
      }
      if (hasMinFpsPos) {
        output.WriteMessage(13, field_names[8], MinFpsPos);
      }
      if (storeMetrics_.Count > 0) {
        output.WriteMessageArray(14, field_names[13], storeMetrics_);
      }
      if (hasStreamingclient) {
        output.WriteBool(15, field_names[14], Streamingclient);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayOutput) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DisplayOutput);
      }
      if (hasSendClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SendClientTime);
      }
      if (hasSendGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SendGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RequestNetReceivedGameTime);
      }
      if (hasLastClientLatency) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, LastClientLatency);
      }
      if (hasLastFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, LastFps);
      }
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, RegionPrototype);
      }
      if (hasCpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Cpulevel);
      }
      if (hasGpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Gpulevel);
      }
      if (hasCompositelevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Compositelevel);
      }
      if (hasCountrycode) {
        size += pb::CodedOutputStream.ComputeStringSize(11, Countrycode);
      }
      if (hasMinFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(12, MinFps);
      }
      if (hasMinFpsPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, MinFpsPos);
      }
      foreach (global::Gazillion.NetStructMessageStoreMetric element in StoreMetricsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, element);
      }
      if (hasStreamingclient) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, Streamingclient);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePing ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePing ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePing ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePing ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePing MakeReadOnly() {
      storeMetrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePing prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePing, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePing cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePing result;
      
      private NetMessagePing PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePing original = result;
          result = new NetMessagePing();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePing MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePing.Descriptor; }
      }
      
      public override NetMessagePing DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePing.DefaultInstance; }
      }
      
      public override NetMessagePing BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePing) {
          return MergeFrom((NetMessagePing) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePing other) {
        if (other == global::Gazillion.NetMessagePing.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayOutput) {
          DisplayOutput = other.DisplayOutput;
        }
        if (other.HasSendClientTime) {
          SendClientTime = other.SendClientTime;
        }
        if (other.HasSendGameTime) {
          SendGameTime = other.SendGameTime;
        }
        if (other.HasRequestNetReceivedGameTime) {
          RequestNetReceivedGameTime = other.RequestNetReceivedGameTime;
        }
        if (other.HasLastClientLatency) {
          LastClientLatency = other.LastClientLatency;
        }
        if (other.HasLastFps) {
          LastFps = other.LastFps;
        }
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        if (other.HasCpulevel) {
          Cpulevel = other.Cpulevel;
        }
        if (other.HasGpulevel) {
          Gpulevel = other.Gpulevel;
        }
        if (other.HasCompositelevel) {
          Compositelevel = other.Compositelevel;
        }
        if (other.HasCountrycode) {
          Countrycode = other.Countrycode;
        }
        if (other.HasMinFps) {
          MinFps = other.MinFps;
        }
        if (other.HasMinFpsPos) {
          MergeMinFpsPos(other.MinFpsPos);
        }
        if (other.storeMetrics_.Count != 0) {
          result.storeMetrics_.Add(other.storeMetrics_);
        }
        if (other.HasStreamingclient) {
          Streamingclient = other.Streamingclient;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayOutput = input.ReadBool(ref result.displayOutput_);
              break;
            }
            case 16: {
              result.hasSendClientTime = input.ReadUInt64(ref result.sendClientTime_);
              break;
            }
            case 24: {
              result.hasSendGameTime = input.ReadUInt64(ref result.sendGameTime_);
              break;
            }
            case 32: {
              result.hasRequestNetReceivedGameTime = input.ReadUInt64(ref result.requestNetReceivedGameTime_);
              break;
            }
            case 40: {
              result.hasLastClientLatency = input.ReadUInt64(ref result.lastClientLatency_);
              break;
            }
            case 53: {
              result.hasLastFps = input.ReadFloat(ref result.lastFps_);
              break;
            }
            case 56: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
            case 64: {
              result.hasCpulevel = input.ReadUInt32(ref result.cpulevel_);
              break;
            }
            case 72: {
              result.hasGpulevel = input.ReadUInt32(ref result.gpulevel_);
              break;
            }
            case 80: {
              result.hasCompositelevel = input.ReadUInt32(ref result.compositelevel_);
              break;
            }
            case 90: {
              result.hasCountrycode = input.ReadString(ref result.countrycode_);
              break;
            }
            case 101: {
              result.hasMinFps = input.ReadFloat(ref result.minFps_);
              break;
            }
            case 106: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasMinFpsPos) {
                subBuilder.MergeFrom(MinFpsPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MinFpsPos = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.storeMetrics_, global::Gazillion.NetStructMessageStoreMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 120: {
              result.hasStreamingclient = input.ReadBool(ref result.streamingclient_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayOutput {
        get { return result.hasDisplayOutput; }
      }
      public bool DisplayOutput {
        get { return result.DisplayOutput; }
        set { SetDisplayOutput(value); }
      }
      public Builder SetDisplayOutput(bool value) {
        PrepareBuilder();
        result.hasDisplayOutput = true;
        result.displayOutput_ = value;
        return this;
      }
      public Builder ClearDisplayOutput() {
        PrepareBuilder();
        result.hasDisplayOutput = false;
        result.displayOutput_ = false;
        return this;
      }
      
      public bool HasSendClientTime {
        get { return result.hasSendClientTime; }
      }
      public ulong SendClientTime {
        get { return result.SendClientTime; }
        set { SetSendClientTime(value); }
      }
      public Builder SetSendClientTime(ulong value) {
        PrepareBuilder();
        result.hasSendClientTime = true;
        result.sendClientTime_ = value;
        return this;
      }
      public Builder ClearSendClientTime() {
        PrepareBuilder();
        result.hasSendClientTime = false;
        result.sendClientTime_ = 0UL;
        return this;
      }
      
      public bool HasSendGameTime {
        get { return result.hasSendGameTime; }
      }
      public ulong SendGameTime {
        get { return result.SendGameTime; }
        set { SetSendGameTime(value); }
      }
      public Builder SetSendGameTime(ulong value) {
        PrepareBuilder();
        result.hasSendGameTime = true;
        result.sendGameTime_ = value;
        return this;
      }
      public Builder ClearSendGameTime() {
        PrepareBuilder();
        result.hasSendGameTime = false;
        result.sendGameTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestNetReceivedGameTime {
        get { return result.hasRequestNetReceivedGameTime; }
      }
      public ulong RequestNetReceivedGameTime {
        get { return result.RequestNetReceivedGameTime; }
        set { SetRequestNetReceivedGameTime(value); }
      }
      public Builder SetRequestNetReceivedGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = true;
        result.requestNetReceivedGameTime_ = value;
        return this;
      }
      public Builder ClearRequestNetReceivedGameTime() {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = false;
        result.requestNetReceivedGameTime_ = 0UL;
        return this;
      }
      
      public bool HasLastClientLatency {
        get { return result.hasLastClientLatency; }
      }
      public ulong LastClientLatency {
        get { return result.LastClientLatency; }
        set { SetLastClientLatency(value); }
      }
      public Builder SetLastClientLatency(ulong value) {
        PrepareBuilder();
        result.hasLastClientLatency = true;
        result.lastClientLatency_ = value;
        return this;
      }
      public Builder ClearLastClientLatency() {
        PrepareBuilder();
        result.hasLastClientLatency = false;
        result.lastClientLatency_ = 0UL;
        return this;
      }
      
      public bool HasLastFps {
        get { return result.hasLastFps; }
      }
      public float LastFps {
        get { return result.LastFps; }
        set { SetLastFps(value); }
      }
      public Builder SetLastFps(float value) {
        PrepareBuilder();
        result.hasLastFps = true;
        result.lastFps_ = value;
        return this;
      }
      public Builder ClearLastFps() {
        PrepareBuilder();
        result.hasLastFps = false;
        result.lastFps_ = 0F;
        return this;
      }
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
      
      public bool HasCpulevel {
        get { return result.hasCpulevel; }
      }
      public uint Cpulevel {
        get { return result.Cpulevel; }
        set { SetCpulevel(value); }
      }
      public Builder SetCpulevel(uint value) {
        PrepareBuilder();
        result.hasCpulevel = true;
        result.cpulevel_ = value;
        return this;
      }
      public Builder ClearCpulevel() {
        PrepareBuilder();
        result.hasCpulevel = false;
        result.cpulevel_ = 0;
        return this;
      }
      
      public bool HasGpulevel {
        get { return result.hasGpulevel; }
      }
      public uint Gpulevel {
        get { return result.Gpulevel; }
        set { SetGpulevel(value); }
      }
      public Builder SetGpulevel(uint value) {
        PrepareBuilder();
        result.hasGpulevel = true;
        result.gpulevel_ = value;
        return this;
      }
      public Builder ClearGpulevel() {
        PrepareBuilder();
        result.hasGpulevel = false;
        result.gpulevel_ = 0;
        return this;
      }
      
      public bool HasCompositelevel {
        get { return result.hasCompositelevel; }
      }
      public uint Compositelevel {
        get { return result.Compositelevel; }
        set { SetCompositelevel(value); }
      }
      public Builder SetCompositelevel(uint value) {
        PrepareBuilder();
        result.hasCompositelevel = true;
        result.compositelevel_ = value;
        return this;
      }
      public Builder ClearCompositelevel() {
        PrepareBuilder();
        result.hasCompositelevel = false;
        result.compositelevel_ = 0;
        return this;
      }
      
      public bool HasCountrycode {
        get { return result.hasCountrycode; }
      }
      public string Countrycode {
        get { return result.Countrycode; }
        set { SetCountrycode(value); }
      }
      public Builder SetCountrycode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountrycode = true;
        result.countrycode_ = value;
        return this;
      }
      public Builder ClearCountrycode() {
        PrepareBuilder();
        result.hasCountrycode = false;
        result.countrycode_ = "";
        return this;
      }
      
      public bool HasMinFps {
        get { return result.hasMinFps; }
      }
      public float MinFps {
        get { return result.MinFps; }
        set { SetMinFps(value); }
      }
      public Builder SetMinFps(float value) {
        PrepareBuilder();
        result.hasMinFps = true;
        result.minFps_ = value;
        return this;
      }
      public Builder ClearMinFps() {
        PrepareBuilder();
        result.hasMinFps = false;
        result.minFps_ = 0F;
        return this;
      }
      
      public bool HasMinFpsPos {
       get { return result.hasMinFpsPos; }
      }
      public global::Gazillion.NetStructPoint3 MinFpsPos {
        get { return result.MinFpsPos; }
        set { SetMinFpsPos(value); }
      }
      public Builder SetMinFpsPos(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMinFpsPos = true;
        result.minFpsPos_ = value;
        return this;
      }
      public Builder SetMinFpsPos(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMinFpsPos = true;
        result.minFpsPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMinFpsPos(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMinFpsPos &&
            result.minFpsPos_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.minFpsPos_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.minFpsPos_).MergeFrom(value).BuildPartial();
        } else {
          result.minFpsPos_ = value;
        }
        result.hasMinFpsPos = true;
        return this;
      }
      public Builder ClearMinFpsPos() {
        PrepareBuilder();
        result.hasMinFpsPos = false;
        result.minFpsPos_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructMessageStoreMetric> StoreMetricsList {
        get { return PrepareBuilder().storeMetrics_; }
      }
      public int StoreMetricsCount {
        get { return result.StoreMetricsCount; }
      }
      public global::Gazillion.NetStructMessageStoreMetric GetStoreMetrics(int index) {
        return result.GetStoreMetrics(index);
      }
      public Builder SetStoreMetrics(int index, global::Gazillion.NetStructMessageStoreMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.storeMetrics_[index] = value;
        return this;
      }
      public Builder SetStoreMetrics(int index, global::Gazillion.NetStructMessageStoreMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.storeMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStoreMetrics(global::Gazillion.NetStructMessageStoreMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.storeMetrics_.Add(value);
        return this;
      }
      public Builder AddStoreMetrics(global::Gazillion.NetStructMessageStoreMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.storeMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStoreMetrics(scg::IEnumerable<global::Gazillion.NetStructMessageStoreMetric> values) {
        PrepareBuilder();
        result.storeMetrics_.Add(values);
        return this;
      }
      public Builder ClearStoreMetrics() {
        PrepareBuilder();
        result.storeMetrics_.Clear();
        return this;
      }
      
      public bool HasStreamingclient {
        get { return result.hasStreamingclient; }
      }
      public bool Streamingclient {
        get { return result.Streamingclient; }
        set { SetStreamingclient(value); }
      }
      public Builder SetStreamingclient(bool value) {
        PrepareBuilder();
        result.hasStreamingclient = true;
        result.streamingclient_ = value;
        return this;
      }
      public Builder ClearStreamingclient() {
        PrepareBuilder();
        result.hasStreamingclient = false;
        result.streamingclient_ = false;
        return this;
      }
    }
    static NetMessagePing() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFPS : pb::GeneratedMessage<NetMessageFPS, NetMessageFPS.Builder> {
    private NetMessageFPS() { }
    private static readonly NetMessageFPS defaultInstance = new NetMessageFPS().MakeReadOnly();
    private static readonly string[] _netMessageFPSFieldNames = new string[] { "avgFps", "compositelevel", "cpulevel", "gpulevel", "minFps", "numHitches", "regionPrototype", "streamingclient" };
    private static readonly uint[] _netMessageFPSFieldTags = new uint[] { 13, 56, 40, 48, 21, 24, 32, 64 };
    public static NetMessageFPS DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFPS DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFPS ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageFPS__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFPS, NetMessageFPS.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageFPS__FieldAccessorTable; }
    }
    
    public const int AvgFpsFieldNumber = 1;
    private bool hasAvgFps;
    private float avgFps_;
    public bool HasAvgFps {
      get { return hasAvgFps; }
    }
    public float AvgFps {
      get { return avgFps_; }
    }
    
    public const int MinFpsFieldNumber = 2;
    private bool hasMinFps;
    private float minFps_;
    public bool HasMinFps {
      get { return hasMinFps; }
    }
    public float MinFps {
      get { return minFps_; }
    }
    
    public const int NumHitchesFieldNumber = 3;
    private bool hasNumHitches;
    private uint numHitches_;
    public bool HasNumHitches {
      get { return hasNumHitches; }
    }
    public uint NumHitches {
      get { return numHitches_; }
    }
    
    public const int RegionPrototypeFieldNumber = 4;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public const int CpulevelFieldNumber = 5;
    private bool hasCpulevel;
    private uint cpulevel_;
    public bool HasCpulevel {
      get { return hasCpulevel; }
    }
    public uint Cpulevel {
      get { return cpulevel_; }
    }
    
    public const int GpulevelFieldNumber = 6;
    private bool hasGpulevel;
    private uint gpulevel_;
    public bool HasGpulevel {
      get { return hasGpulevel; }
    }
    public uint Gpulevel {
      get { return gpulevel_; }
    }
    
    public const int CompositelevelFieldNumber = 7;
    private bool hasCompositelevel;
    private uint compositelevel_;
    public bool HasCompositelevel {
      get { return hasCompositelevel; }
    }
    public uint Compositelevel {
      get { return compositelevel_; }
    }
    
    public const int StreamingclientFieldNumber = 8;
    private bool hasStreamingclient;
    private bool streamingclient_;
    public bool HasStreamingclient {
      get { return hasStreamingclient; }
    }
    public bool Streamingclient {
      get { return streamingclient_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvgFps) return false;
        if (!hasMinFps) return false;
        if (!hasNumHitches) return false;
        if (!hasRegionPrototype) return false;
        if (!hasCpulevel) return false;
        if (!hasGpulevel) return false;
        if (!hasCompositelevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFPSFieldNames;
      if (hasAvgFps) {
        output.WriteFloat(1, field_names[0], AvgFps);
      }
      if (hasMinFps) {
        output.WriteFloat(2, field_names[4], MinFps);
      }
      if (hasNumHitches) {
        output.WriteUInt32(3, field_names[5], NumHitches);
      }
      if (hasRegionPrototype) {
        output.WriteUInt64(4, field_names[6], RegionPrototype);
      }
      if (hasCpulevel) {
        output.WriteUInt32(5, field_names[2], Cpulevel);
      }
      if (hasGpulevel) {
        output.WriteUInt32(6, field_names[3], Gpulevel);
      }
      if (hasCompositelevel) {
        output.WriteUInt32(7, field_names[1], Compositelevel);
      }
      if (hasStreamingclient) {
        output.WriteBool(8, field_names[7], Streamingclient);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvgFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, AvgFps);
      }
      if (hasMinFps) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, MinFps);
      }
      if (hasNumHitches) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, NumHitches);
      }
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RegionPrototype);
      }
      if (hasCpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Cpulevel);
      }
      if (hasGpulevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Gpulevel);
      }
      if (hasCompositelevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Compositelevel);
      }
      if (hasStreamingclient) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Streamingclient);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFPS ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFPS ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFPS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFPS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFPS MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFPS prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFPS, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFPS cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFPS result;
      
      private NetMessageFPS PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFPS original = result;
          result = new NetMessageFPS();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFPS MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFPS.Descriptor; }
      }
      
      public override NetMessageFPS DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFPS.DefaultInstance; }
      }
      
      public override NetMessageFPS BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFPS) {
          return MergeFrom((NetMessageFPS) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFPS other) {
        if (other == global::Gazillion.NetMessageFPS.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvgFps) {
          AvgFps = other.AvgFps;
        }
        if (other.HasMinFps) {
          MinFps = other.MinFps;
        }
        if (other.HasNumHitches) {
          NumHitches = other.NumHitches;
        }
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        if (other.HasCpulevel) {
          Cpulevel = other.Cpulevel;
        }
        if (other.HasGpulevel) {
          Gpulevel = other.Gpulevel;
        }
        if (other.HasCompositelevel) {
          Compositelevel = other.Compositelevel;
        }
        if (other.HasStreamingclient) {
          Streamingclient = other.Streamingclient;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFPSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFPSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasAvgFps = input.ReadFloat(ref result.avgFps_);
              break;
            }
            case 21: {
              result.hasMinFps = input.ReadFloat(ref result.minFps_);
              break;
            }
            case 24: {
              result.hasNumHitches = input.ReadUInt32(ref result.numHitches_);
              break;
            }
            case 32: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
            case 40: {
              result.hasCpulevel = input.ReadUInt32(ref result.cpulevel_);
              break;
            }
            case 48: {
              result.hasGpulevel = input.ReadUInt32(ref result.gpulevel_);
              break;
            }
            case 56: {
              result.hasCompositelevel = input.ReadUInt32(ref result.compositelevel_);
              break;
            }
            case 64: {
              result.hasStreamingclient = input.ReadBool(ref result.streamingclient_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvgFps {
        get { return result.hasAvgFps; }
      }
      public float AvgFps {
        get { return result.AvgFps; }
        set { SetAvgFps(value); }
      }
      public Builder SetAvgFps(float value) {
        PrepareBuilder();
        result.hasAvgFps = true;
        result.avgFps_ = value;
        return this;
      }
      public Builder ClearAvgFps() {
        PrepareBuilder();
        result.hasAvgFps = false;
        result.avgFps_ = 0F;
        return this;
      }
      
      public bool HasMinFps {
        get { return result.hasMinFps; }
      }
      public float MinFps {
        get { return result.MinFps; }
        set { SetMinFps(value); }
      }
      public Builder SetMinFps(float value) {
        PrepareBuilder();
        result.hasMinFps = true;
        result.minFps_ = value;
        return this;
      }
      public Builder ClearMinFps() {
        PrepareBuilder();
        result.hasMinFps = false;
        result.minFps_ = 0F;
        return this;
      }
      
      public bool HasNumHitches {
        get { return result.hasNumHitches; }
      }
      public uint NumHitches {
        get { return result.NumHitches; }
        set { SetNumHitches(value); }
      }
      public Builder SetNumHitches(uint value) {
        PrepareBuilder();
        result.hasNumHitches = true;
        result.numHitches_ = value;
        return this;
      }
      public Builder ClearNumHitches() {
        PrepareBuilder();
        result.hasNumHitches = false;
        result.numHitches_ = 0;
        return this;
      }
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
      
      public bool HasCpulevel {
        get { return result.hasCpulevel; }
      }
      public uint Cpulevel {
        get { return result.Cpulevel; }
        set { SetCpulevel(value); }
      }
      public Builder SetCpulevel(uint value) {
        PrepareBuilder();
        result.hasCpulevel = true;
        result.cpulevel_ = value;
        return this;
      }
      public Builder ClearCpulevel() {
        PrepareBuilder();
        result.hasCpulevel = false;
        result.cpulevel_ = 0;
        return this;
      }
      
      public bool HasGpulevel {
        get { return result.hasGpulevel; }
      }
      public uint Gpulevel {
        get { return result.Gpulevel; }
        set { SetGpulevel(value); }
      }
      public Builder SetGpulevel(uint value) {
        PrepareBuilder();
        result.hasGpulevel = true;
        result.gpulevel_ = value;
        return this;
      }
      public Builder ClearGpulevel() {
        PrepareBuilder();
        result.hasGpulevel = false;
        result.gpulevel_ = 0;
        return this;
      }
      
      public bool HasCompositelevel {
        get { return result.hasCompositelevel; }
      }
      public uint Compositelevel {
        get { return result.Compositelevel; }
        set { SetCompositelevel(value); }
      }
      public Builder SetCompositelevel(uint value) {
        PrepareBuilder();
        result.hasCompositelevel = true;
        result.compositelevel_ = value;
        return this;
      }
      public Builder ClearCompositelevel() {
        PrepareBuilder();
        result.hasCompositelevel = false;
        result.compositelevel_ = 0;
        return this;
      }
      
      public bool HasStreamingclient {
        get { return result.hasStreamingclient; }
      }
      public bool Streamingclient {
        get { return result.Streamingclient; }
        set { SetStreamingclient(value); }
      }
      public Builder SetStreamingclient(bool value) {
        PrepareBuilder();
        result.hasStreamingclient = true;
        result.streamingclient_ = value;
        return this;
      }
      public Builder ClearStreamingclient() {
        PrepareBuilder();
        result.hasStreamingclient = false;
        result.streamingclient_ = false;
        return this;
      }
    }
    static NetMessageFPS() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePickupInteraction : pb::GeneratedMessage<NetMessagePickupInteraction, NetMessagePickupInteraction.Builder> {
    private NetMessagePickupInteraction() { }
    private static readonly NetMessagePickupInteraction defaultInstance = new NetMessagePickupInteraction().MakeReadOnly();
    private static readonly string[] _netMessagePickupInteractionFieldNames = new string[] { "avatarIndex", "idTarget", "useInteractFallbackRange" };
    private static readonly uint[] _netMessagePickupInteractionFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessagePickupInteraction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePickupInteraction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePickupInteraction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePickupInteraction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePickupInteraction, NetMessagePickupInteraction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePickupInteraction__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int UseInteractFallbackRangeFieldNumber = 3;
    private bool hasUseInteractFallbackRange;
    private bool useInteractFallbackRange_;
    public bool HasUseInteractFallbackRange {
      get { return hasUseInteractFallbackRange; }
    }
    public bool UseInteractFallbackRange {
      get { return useInteractFallbackRange_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePickupInteractionFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[1], IdTarget);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      if (hasUseInteractFallbackRange) {
        output.WriteBool(3, field_names[2], UseInteractFallbackRange);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      if (hasUseInteractFallbackRange) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, UseInteractFallbackRange);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePickupInteraction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePickupInteraction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePickupInteraction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePickupInteraction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePickupInteraction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePickupInteraction result;
      
      private NetMessagePickupInteraction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePickupInteraction original = result;
          result = new NetMessagePickupInteraction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePickupInteraction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePickupInteraction.Descriptor; }
      }
      
      public override NetMessagePickupInteraction DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePickupInteraction.DefaultInstance; }
      }
      
      public override NetMessagePickupInteraction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePickupInteraction) {
          return MergeFrom((NetMessagePickupInteraction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePickupInteraction other) {
        if (other == global::Gazillion.NetMessagePickupInteraction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasUseInteractFallbackRange) {
          UseInteractFallbackRange = other.UseInteractFallbackRange;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePickupInteractionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePickupInteractionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 24: {
              result.hasUseInteractFallbackRange = input.ReadBool(ref result.useInteractFallbackRange_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasUseInteractFallbackRange {
        get { return result.hasUseInteractFallbackRange; }
      }
      public bool UseInteractFallbackRange {
        get { return result.UseInteractFallbackRange; }
        set { SetUseInteractFallbackRange(value); }
      }
      public Builder SetUseInteractFallbackRange(bool value) {
        PrepareBuilder();
        result.hasUseInteractFallbackRange = true;
        result.useInteractFallbackRange_ = value;
        return this;
      }
      public Builder ClearUseInteractFallbackRange() {
        PrepareBuilder();
        result.hasUseInteractFallbackRange = false;
        result.useInteractFallbackRange_ = false;
        return this;
      }
    }
    static NetMessagePickupInteraction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryInventoryMove : pb::GeneratedMessage<NetMessageTryInventoryMove, NetMessageTryInventoryMove.Builder> {
    private NetMessageTryInventoryMove() { }
    private static readonly NetMessageTryInventoryMove defaultInstance = new NetMessageTryInventoryMove().MakeReadOnly();
    private static readonly string[] _netMessageTryInventoryMoveFieldNames = new string[] { "isStackSplit", "itemId", "toInventoryOwnerId", "toInventoryPrototype", "toSlot" };
    private static readonly uint[] _netMessageTryInventoryMoveFieldTags = new uint[] { 40, 8, 16, 24, 32 };
    public static NetMessageTryInventoryMove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryInventoryMove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryInventoryMove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryInventoryMove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryInventoryMove, NetMessageTryInventoryMove.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryInventoryMove__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int ToInventoryOwnerIdFieldNumber = 2;
    private bool hasToInventoryOwnerId;
    private ulong toInventoryOwnerId_;
    public bool HasToInventoryOwnerId {
      get { return hasToInventoryOwnerId; }
    }
    public ulong ToInventoryOwnerId {
      get { return toInventoryOwnerId_; }
    }
    
    public const int ToInventoryPrototypeFieldNumber = 3;
    private bool hasToInventoryPrototype;
    private ulong toInventoryPrototype_;
    public bool HasToInventoryPrototype {
      get { return hasToInventoryPrototype; }
    }
    public ulong ToInventoryPrototype {
      get { return toInventoryPrototype_; }
    }
    
    public const int ToSlotFieldNumber = 4;
    private bool hasToSlot;
    private uint toSlot_;
    public bool HasToSlot {
      get { return hasToSlot; }
    }
    public uint ToSlot {
      get { return toSlot_; }
    }
    
    public const int IsStackSplitFieldNumber = 5;
    private bool hasIsStackSplit;
    private bool isStackSplit_;
    public bool HasIsStackSplit {
      get { return hasIsStackSplit; }
    }
    public bool IsStackSplit {
      get { return isStackSplit_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasToInventoryOwnerId) return false;
        if (!hasToInventoryPrototype) return false;
        if (!hasToSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryInventoryMoveFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[1], ItemId);
      }
      if (hasToInventoryOwnerId) {
        output.WriteUInt64(2, field_names[2], ToInventoryOwnerId);
      }
      if (hasToInventoryPrototype) {
        output.WriteUInt64(3, field_names[3], ToInventoryPrototype);
      }
      if (hasToSlot) {
        output.WriteUInt32(4, field_names[4], ToSlot);
      }
      if (hasIsStackSplit) {
        output.WriteBool(5, field_names[0], IsStackSplit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasToInventoryOwnerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ToInventoryOwnerId);
      }
      if (hasToInventoryPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ToInventoryPrototype);
      }
      if (hasToSlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ToSlot);
      }
      if (hasIsStackSplit) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsStackSplit);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryInventoryMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryInventoryMove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryInventoryMove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryInventoryMove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryInventoryMove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryInventoryMove result;
      
      private NetMessageTryInventoryMove PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryInventoryMove original = result;
          result = new NetMessageTryInventoryMove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryInventoryMove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryInventoryMove.Descriptor; }
      }
      
      public override NetMessageTryInventoryMove DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryInventoryMove.DefaultInstance; }
      }
      
      public override NetMessageTryInventoryMove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryInventoryMove) {
          return MergeFrom((NetMessageTryInventoryMove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryInventoryMove other) {
        if (other == global::Gazillion.NetMessageTryInventoryMove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasToInventoryOwnerId) {
          ToInventoryOwnerId = other.ToInventoryOwnerId;
        }
        if (other.HasToInventoryPrototype) {
          ToInventoryPrototype = other.ToInventoryPrototype;
        }
        if (other.HasToSlot) {
          ToSlot = other.ToSlot;
        }
        if (other.HasIsStackSplit) {
          IsStackSplit = other.IsStackSplit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryInventoryMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryInventoryMoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasToInventoryOwnerId = input.ReadUInt64(ref result.toInventoryOwnerId_);
              break;
            }
            case 24: {
              result.hasToInventoryPrototype = input.ReadUInt64(ref result.toInventoryPrototype_);
              break;
            }
            case 32: {
              result.hasToSlot = input.ReadUInt32(ref result.toSlot_);
              break;
            }
            case 40: {
              result.hasIsStackSplit = input.ReadBool(ref result.isStackSplit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasToInventoryOwnerId {
        get { return result.hasToInventoryOwnerId; }
      }
      public ulong ToInventoryOwnerId {
        get { return result.ToInventoryOwnerId; }
        set { SetToInventoryOwnerId(value); }
      }
      public Builder SetToInventoryOwnerId(ulong value) {
        PrepareBuilder();
        result.hasToInventoryOwnerId = true;
        result.toInventoryOwnerId_ = value;
        return this;
      }
      public Builder ClearToInventoryOwnerId() {
        PrepareBuilder();
        result.hasToInventoryOwnerId = false;
        result.toInventoryOwnerId_ = 0UL;
        return this;
      }
      
      public bool HasToInventoryPrototype {
        get { return result.hasToInventoryPrototype; }
      }
      public ulong ToInventoryPrototype {
        get { return result.ToInventoryPrototype; }
        set { SetToInventoryPrototype(value); }
      }
      public Builder SetToInventoryPrototype(ulong value) {
        PrepareBuilder();
        result.hasToInventoryPrototype = true;
        result.toInventoryPrototype_ = value;
        return this;
      }
      public Builder ClearToInventoryPrototype() {
        PrepareBuilder();
        result.hasToInventoryPrototype = false;
        result.toInventoryPrototype_ = 0UL;
        return this;
      }
      
      public bool HasToSlot {
        get { return result.hasToSlot; }
      }
      public uint ToSlot {
        get { return result.ToSlot; }
        set { SetToSlot(value); }
      }
      public Builder SetToSlot(uint value) {
        PrepareBuilder();
        result.hasToSlot = true;
        result.toSlot_ = value;
        return this;
      }
      public Builder ClearToSlot() {
        PrepareBuilder();
        result.hasToSlot = false;
        result.toSlot_ = 0;
        return this;
      }
      
      public bool HasIsStackSplit {
        get { return result.hasIsStackSplit; }
      }
      public bool IsStackSplit {
        get { return result.IsStackSplit; }
        set { SetIsStackSplit(value); }
      }
      public Builder SetIsStackSplit(bool value) {
        PrepareBuilder();
        result.hasIsStackSplit = true;
        result.isStackSplit_ = value;
        return this;
      }
      public Builder ClearIsStackSplit() {
        PrepareBuilder();
        result.hasIsStackSplit = false;
        result.isStackSplit_ = false;
        return this;
      }
    }
    static NetMessageTryInventoryMove() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryMoveCraftingResultsToGeneral : pb::GeneratedMessage<NetMessageTryMoveCraftingResultsToGeneral, NetMessageTryMoveCraftingResultsToGeneral.Builder> {
    private NetMessageTryMoveCraftingResultsToGeneral() { }
    private static readonly NetMessageTryMoveCraftingResultsToGeneral defaultInstance = new NetMessageTryMoveCraftingResultsToGeneral().MakeReadOnly();
    private static readonly string[] _netMessageTryMoveCraftingResultsToGeneralFieldNames = new string[] {  };
    private static readonly uint[] _netMessageTryMoveCraftingResultsToGeneralFieldTags = new uint[] {  };
    public static NetMessageTryMoveCraftingResultsToGeneral DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryMoveCraftingResultsToGeneral DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryMoveCraftingResultsToGeneral ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryMoveCraftingResultsToGeneral, NetMessageTryMoveCraftingResultsToGeneral.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveCraftingResultsToGeneral__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryMoveCraftingResultsToGeneralFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveCraftingResultsToGeneral ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryMoveCraftingResultsToGeneral MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryMoveCraftingResultsToGeneral prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryMoveCraftingResultsToGeneral, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryMoveCraftingResultsToGeneral cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryMoveCraftingResultsToGeneral result;
      
      private NetMessageTryMoveCraftingResultsToGeneral PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryMoveCraftingResultsToGeneral original = result;
          result = new NetMessageTryMoveCraftingResultsToGeneral();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryMoveCraftingResultsToGeneral MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.Descriptor; }
      }
      
      public override NetMessageTryMoveCraftingResultsToGeneral DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.DefaultInstance; }
      }
      
      public override NetMessageTryMoveCraftingResultsToGeneral BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryMoveCraftingResultsToGeneral) {
          return MergeFrom((NetMessageTryMoveCraftingResultsToGeneral) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryMoveCraftingResultsToGeneral other) {
        if (other == global::Gazillion.NetMessageTryMoveCraftingResultsToGeneral.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryMoveCraftingResultsToGeneralFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryMoveCraftingResultsToGeneralFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageTryMoveCraftingResultsToGeneral() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryTrashItem : pb::GeneratedMessage<NetMessageInventoryTrashItem, NetMessageInventoryTrashItem.Builder> {
    private NetMessageInventoryTrashItem() { }
    private static readonly NetMessageInventoryTrashItem defaultInstance = new NetMessageInventoryTrashItem().MakeReadOnly();
    private static readonly string[] _netMessageInventoryTrashItemFieldNames = new string[] { "itemId" };
    private static readonly uint[] _netMessageInventoryTrashItemFieldTags = new uint[] { 8 };
    public static NetMessageInventoryTrashItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryTrashItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryTrashItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInventoryTrashItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryTrashItem, NetMessageInventoryTrashItem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInventoryTrashItem__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryTrashItemFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryTrashItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryTrashItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryTrashItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryTrashItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryTrashItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryTrashItem result;
      
      private NetMessageInventoryTrashItem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryTrashItem original = result;
          result = new NetMessageInventoryTrashItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryTrashItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryTrashItem.Descriptor; }
      }
      
      public override NetMessageInventoryTrashItem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryTrashItem.DefaultInstance; }
      }
      
      public override NetMessageInventoryTrashItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryTrashItem) {
          return MergeFrom((NetMessageInventoryTrashItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryTrashItem other) {
        if (other == global::Gazillion.NetMessageInventoryTrashItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryTrashItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryTrashItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryTrashItem() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageThrowInteraction : pb::GeneratedMessage<NetMessageThrowInteraction, NetMessageThrowInteraction.Builder> {
    private NetMessageThrowInteraction() { }
    private static readonly NetMessageThrowInteraction defaultInstance = new NetMessageThrowInteraction().MakeReadOnly();
    private static readonly string[] _netMessageThrowInteractionFieldNames = new string[] { "avatarIndex", "idTarget" };
    private static readonly uint[] _netMessageThrowInteractionFieldTags = new uint[] { 16, 8 };
    public static NetMessageThrowInteraction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageThrowInteraction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageThrowInteraction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageThrowInteraction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageThrowInteraction, NetMessageThrowInteraction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageThrowInteraction__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageThrowInteractionFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[1], IdTarget);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageThrowInteraction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageThrowInteraction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageThrowInteraction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageThrowInteraction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageThrowInteraction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageThrowInteraction result;
      
      private NetMessageThrowInteraction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageThrowInteraction original = result;
          result = new NetMessageThrowInteraction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageThrowInteraction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageThrowInteraction.Descriptor; }
      }
      
      public override NetMessageThrowInteraction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageThrowInteraction.DefaultInstance; }
      }
      
      public override NetMessageThrowInteraction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageThrowInteraction) {
          return MergeFrom((NetMessageThrowInteraction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageThrowInteraction other) {
        if (other == global::Gazillion.NetMessageThrowInteraction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageThrowInteractionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageThrowInteractionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
    }
    static NetMessageThrowInteraction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePerformPreInteractPower : pb::GeneratedMessage<NetMessagePerformPreInteractPower, NetMessagePerformPreInteractPower.Builder> {
    private NetMessagePerformPreInteractPower() { }
    private static readonly NetMessagePerformPreInteractPower defaultInstance = new NetMessagePerformPreInteractPower().MakeReadOnly();
    private static readonly string[] _netMessagePerformPreInteractPowerFieldNames = new string[] { "avatarIndex", "hasDialog", "idTarget" };
    private static readonly uint[] _netMessagePerformPreInteractPowerFieldTags = new uint[] { 16, 24, 8 };
    public static NetMessagePerformPreInteractPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePerformPreInteractPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePerformPreInteractPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePerformPreInteractPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePerformPreInteractPower, NetMessagePerformPreInteractPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePerformPreInteractPower__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int HasDialogFieldNumber = 3;
    private bool hasHasDialog;
    private bool hasDialog_;
    public bool HasHasDialog {
      get { return hasHasDialog; }
    }
    public bool HasDialog {
      get { return hasDialog_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        if (!hasAvatarIndex) return false;
        if (!hasHasDialog) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePerformPreInteractPowerFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[2], IdTarget);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      if (hasHasDialog) {
        output.WriteBool(3, field_names[1], HasDialog);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      if (hasHasDialog) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, HasDialog);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePerformPreInteractPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePerformPreInteractPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePerformPreInteractPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePerformPreInteractPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePerformPreInteractPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePerformPreInteractPower result;
      
      private NetMessagePerformPreInteractPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePerformPreInteractPower original = result;
          result = new NetMessagePerformPreInteractPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePerformPreInteractPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePerformPreInteractPower.Descriptor; }
      }
      
      public override NetMessagePerformPreInteractPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePerformPreInteractPower.DefaultInstance; }
      }
      
      public override NetMessagePerformPreInteractPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePerformPreInteractPower) {
          return MergeFrom((NetMessagePerformPreInteractPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePerformPreInteractPower other) {
        if (other == global::Gazillion.NetMessagePerformPreInteractPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasHasDialog) {
          HasDialog = other.HasDialog;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePerformPreInteractPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePerformPreInteractPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 24: {
              result.hasHasDialog = input.ReadBool(ref result.hasDialog_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasHasDialog {
        get { return result.hasHasDialog; }
      }
      public bool HasDialog {
        get { return result.HasDialog; }
        set { SetHasDialog(value); }
      }
      public Builder SetHasDialog(bool value) {
        PrepareBuilder();
        result.hasHasDialog = true;
        result.hasDialog_ = value;
        return this;
      }
      public Builder ClearHasDialog() {
        PrepareBuilder();
        result.hasHasDialog = false;
        result.hasDialog_ = false;
        return this;
      }
    }
    static NetMessagePerformPreInteractPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUseInteractableObject : pb::GeneratedMessage<NetMessageUseInteractableObject, NetMessageUseInteractableObject.Builder> {
    private NetMessageUseInteractableObject() { }
    private static readonly NetMessageUseInteractableObject defaultInstance = new NetMessageUseInteractableObject().MakeReadOnly();
    private static readonly string[] _netMessageUseInteractableObjectFieldNames = new string[] { "avatarIndex", "idTarget", "missionPrototypeRef" };
    private static readonly uint[] _netMessageUseInteractableObjectFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageUseInteractableObject DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUseInteractableObject DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUseInteractableObject ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseInteractableObject__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUseInteractableObject, NetMessageUseInteractableObject.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseInteractableObject__FieldAccessorTable; }
    }
    
    public const int IdTargetFieldNumber = 1;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int MissionPrototypeRefFieldNumber = 3;
    private bool hasMissionPrototypeRef;
    private ulong missionPrototypeRef_;
    public bool HasMissionPrototypeRef {
      get { return hasMissionPrototypeRef; }
    }
    public ulong MissionPrototypeRef {
      get { return missionPrototypeRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTarget) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUseInteractableObjectFieldNames;
      if (hasIdTarget) {
        output.WriteUInt64(1, field_names[1], IdTarget);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      if (hasMissionPrototypeRef) {
        output.WriteUInt64(3, field_names[2], MissionPrototypeRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTarget);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      if (hasMissionPrototypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MissionPrototypeRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseInteractableObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUseInteractableObject MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUseInteractableObject prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUseInteractableObject, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUseInteractableObject cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUseInteractableObject result;
      
      private NetMessageUseInteractableObject PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUseInteractableObject original = result;
          result = new NetMessageUseInteractableObject();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUseInteractableObject MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUseInteractableObject.Descriptor; }
      }
      
      public override NetMessageUseInteractableObject DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUseInteractableObject.DefaultInstance; }
      }
      
      public override NetMessageUseInteractableObject BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUseInteractableObject) {
          return MergeFrom((NetMessageUseInteractableObject) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUseInteractableObject other) {
        if (other == global::Gazillion.NetMessageUseInteractableObject.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasMissionPrototypeRef) {
          MissionPrototypeRef = other.MissionPrototypeRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUseInteractableObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUseInteractableObjectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 24: {
              result.hasMissionPrototypeRef = input.ReadUInt64(ref result.missionPrototypeRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasMissionPrototypeRef {
        get { return result.hasMissionPrototypeRef; }
      }
      public ulong MissionPrototypeRef {
        get { return result.MissionPrototypeRef; }
        set { SetMissionPrototypeRef(value); }
      }
      public Builder SetMissionPrototypeRef(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeRef = true;
        result.missionPrototypeRef_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeRef() {
        PrepareBuilder();
        result.hasMissionPrototypeRef = false;
        result.missionPrototypeRef_ = 0UL;
        return this;
      }
    }
    static NetMessageUseInteractableObject() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryCraft : pb::GeneratedMessage<NetMessageTryCraft, NetMessageTryCraft.Builder> {
    private NetMessageTryCraft() { }
    private static readonly NetMessageTryCraft defaultInstance = new NetMessageTryCraft().MakeReadOnly();
    private static readonly string[] _netMessageTryCraftFieldNames = new string[] { "idIngredients", "idRecipe", "idVendor", "isRecraft" };
    private static readonly uint[] _netMessageTryCraftFieldTags = new uint[] { 24, 8, 16, 32 };
    public static NetMessageTryCraft DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryCraft DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryCraft ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCraft__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryCraft, NetMessageTryCraft.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryCraft__FieldAccessorTable; }
    }
    
    public const int IdRecipeFieldNumber = 1;
    private bool hasIdRecipe;
    private ulong idRecipe_;
    public bool HasIdRecipe {
      get { return hasIdRecipe; }
    }
    public ulong IdRecipe {
      get { return idRecipe_; }
    }
    
    public const int IdVendorFieldNumber = 2;
    private bool hasIdVendor;
    private ulong idVendor_;
    public bool HasIdVendor {
      get { return hasIdVendor; }
    }
    public ulong IdVendor {
      get { return idVendor_; }
    }
    
    public const int IdIngredientsFieldNumber = 3;
    private pbc::PopsicleList<ulong> idIngredients_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> IdIngredientsList {
      get { return pbc::Lists.AsReadOnly(idIngredients_); }
    }
    public int IdIngredientsCount {
      get { return idIngredients_.Count; }
    }
    public ulong GetIdIngredients(int index) {
      return idIngredients_[index];
    }
    
    public const int IsRecraftFieldNumber = 4;
    private bool hasIsRecraft;
    private bool isRecraft_;
    public bool HasIsRecraft {
      get { return hasIsRecraft; }
    }
    public bool IsRecraft {
      get { return isRecraft_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdRecipe) return false;
        if (!hasIdVendor) return false;
        if (!hasIsRecraft) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryCraftFieldNames;
      if (hasIdRecipe) {
        output.WriteUInt64(1, field_names[1], IdRecipe);
      }
      if (hasIdVendor) {
        output.WriteUInt64(2, field_names[2], IdVendor);
      }
      if (idIngredients_.Count > 0) {
        output.WriteUInt64Array(3, field_names[0], idIngredients_);
      }
      if (hasIsRecraft) {
        output.WriteBool(4, field_names[3], IsRecraft);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdRecipe) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdRecipe);
      }
      if (hasIdVendor) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdVendor);
      }
      {
        int dataSize = 0;
        foreach (ulong element in IdIngredientsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * idIngredients_.Count;
      }
      if (hasIsRecraft) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, IsRecraft);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryCraft ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryCraft ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryCraft ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryCraft ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryCraft MakeReadOnly() {
      idIngredients_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryCraft prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryCraft, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryCraft cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryCraft result;
      
      private NetMessageTryCraft PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryCraft original = result;
          result = new NetMessageTryCraft();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryCraft MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryCraft.Descriptor; }
      }
      
      public override NetMessageTryCraft DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryCraft.DefaultInstance; }
      }
      
      public override NetMessageTryCraft BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryCraft) {
          return MergeFrom((NetMessageTryCraft) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryCraft other) {
        if (other == global::Gazillion.NetMessageTryCraft.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdRecipe) {
          IdRecipe = other.IdRecipe;
        }
        if (other.HasIdVendor) {
          IdVendor = other.IdVendor;
        }
        if (other.idIngredients_.Count != 0) {
          result.idIngredients_.Add(other.idIngredients_);
        }
        if (other.HasIsRecraft) {
          IsRecraft = other.IsRecraft;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryCraftFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryCraftFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdRecipe = input.ReadUInt64(ref result.idRecipe_);
              break;
            }
            case 16: {
              result.hasIdVendor = input.ReadUInt64(ref result.idVendor_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.idIngredients_);
              break;
            }
            case 32: {
              result.hasIsRecraft = input.ReadBool(ref result.isRecraft_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdRecipe {
        get { return result.hasIdRecipe; }
      }
      public ulong IdRecipe {
        get { return result.IdRecipe; }
        set { SetIdRecipe(value); }
      }
      public Builder SetIdRecipe(ulong value) {
        PrepareBuilder();
        result.hasIdRecipe = true;
        result.idRecipe_ = value;
        return this;
      }
      public Builder ClearIdRecipe() {
        PrepareBuilder();
        result.hasIdRecipe = false;
        result.idRecipe_ = 0UL;
        return this;
      }
      
      public bool HasIdVendor {
        get { return result.hasIdVendor; }
      }
      public ulong IdVendor {
        get { return result.IdVendor; }
        set { SetIdVendor(value); }
      }
      public Builder SetIdVendor(ulong value) {
        PrepareBuilder();
        result.hasIdVendor = true;
        result.idVendor_ = value;
        return this;
      }
      public Builder ClearIdVendor() {
        PrepareBuilder();
        result.hasIdVendor = false;
        result.idVendor_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> IdIngredientsList {
        get { return PrepareBuilder().idIngredients_; }
      }
      public int IdIngredientsCount {
        get { return result.IdIngredientsCount; }
      }
      public ulong GetIdIngredients(int index) {
        return result.GetIdIngredients(index);
      }
      public Builder SetIdIngredients(int index, ulong value) {
        PrepareBuilder();
        result.idIngredients_[index] = value;
        return this;
      }
      public Builder AddIdIngredients(ulong value) {
        PrepareBuilder();
        result.idIngredients_.Add(value);
        return this;
      }
      public Builder AddRangeIdIngredients(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.idIngredients_.Add(values);
        return this;
      }
      public Builder ClearIdIngredients() {
        PrepareBuilder();
        result.idIngredients_.Clear();
        return this;
      }
      
      public bool HasIsRecraft {
        get { return result.hasIsRecraft; }
      }
      public bool IsRecraft {
        get { return result.IsRecraft; }
        set { SetIsRecraft(value); }
      }
      public Builder SetIsRecraft(bool value) {
        PrepareBuilder();
        result.hasIsRecraft = true;
        result.isRecraft_ = value;
        return this;
      }
      public Builder ClearIsRecraft() {
        PrepareBuilder();
        result.hasIsRecraft = false;
        result.isRecraft_ = false;
        return this;
      }
    }
    static NetMessageTryCraft() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUseWaypoint : pb::GeneratedMessage<NetMessageUseWaypoint, NetMessageUseWaypoint.Builder> {
    private NetMessageUseWaypoint() { }
    private static readonly NetMessageUseWaypoint defaultInstance = new NetMessageUseWaypoint().MakeReadOnly();
    private static readonly string[] _netMessageUseWaypointFieldNames = new string[] { "avatarIndex", "idTransitionEntity", "regionProtoId", "waypointDataRef" };
    private static readonly uint[] _netMessageUseWaypointFieldTags = new uint[] { 8, 16, 32, 24 };
    public static NetMessageUseWaypoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUseWaypoint DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUseWaypoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseWaypoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUseWaypoint, NetMessageUseWaypoint.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUseWaypoint__FieldAccessorTable; }
    }
    
    public const int AvatarIndexFieldNumber = 1;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int IdTransitionEntityFieldNumber = 2;
    private bool hasIdTransitionEntity;
    private ulong idTransitionEntity_;
    public bool HasIdTransitionEntity {
      get { return hasIdTransitionEntity; }
    }
    public ulong IdTransitionEntity {
      get { return idTransitionEntity_; }
    }
    
    public const int WaypointDataRefFieldNumber = 3;
    private bool hasWaypointDataRef;
    private ulong waypointDataRef_;
    public bool HasWaypointDataRef {
      get { return hasWaypointDataRef; }
    }
    public ulong WaypointDataRef {
      get { return waypointDataRef_; }
    }
    
    public const int RegionProtoIdFieldNumber = 4;
    private bool hasRegionProtoId;
    private ulong regionProtoId_;
    public bool HasRegionProtoId {
      get { return hasRegionProtoId; }
    }
    public ulong RegionProtoId {
      get { return regionProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarIndex) return false;
        if (!hasIdTransitionEntity) return false;
        if (!hasWaypointDataRef) return false;
        if (!hasRegionProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUseWaypointFieldNames;
      if (hasAvatarIndex) {
        output.WriteInt32(1, field_names[0], AvatarIndex);
      }
      if (hasIdTransitionEntity) {
        output.WriteUInt64(2, field_names[1], IdTransitionEntity);
      }
      if (hasWaypointDataRef) {
        output.WriteUInt64(3, field_names[3], WaypointDataRef);
      }
      if (hasRegionProtoId) {
        output.WriteUInt64(4, field_names[2], RegionProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AvatarIndex);
      }
      if (hasIdTransitionEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdTransitionEntity);
      }
      if (hasWaypointDataRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, WaypointDataRef);
      }
      if (hasRegionProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RegionProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUseWaypoint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUseWaypoint MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUseWaypoint prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUseWaypoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUseWaypoint cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUseWaypoint result;
      
      private NetMessageUseWaypoint PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUseWaypoint original = result;
          result = new NetMessageUseWaypoint();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUseWaypoint MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUseWaypoint.Descriptor; }
      }
      
      public override NetMessageUseWaypoint DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUseWaypoint.DefaultInstance; }
      }
      
      public override NetMessageUseWaypoint BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUseWaypoint) {
          return MergeFrom((NetMessageUseWaypoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUseWaypoint other) {
        if (other == global::Gazillion.NetMessageUseWaypoint.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasIdTransitionEntity) {
          IdTransitionEntity = other.IdTransitionEntity;
        }
        if (other.HasWaypointDataRef) {
          WaypointDataRef = other.WaypointDataRef;
        }
        if (other.HasRegionProtoId) {
          RegionProtoId = other.RegionProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUseWaypointFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUseWaypointFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 16: {
              result.hasIdTransitionEntity = input.ReadUInt64(ref result.idTransitionEntity_);
              break;
            }
            case 24: {
              result.hasWaypointDataRef = input.ReadUInt64(ref result.waypointDataRef_);
              break;
            }
            case 32: {
              result.hasRegionProtoId = input.ReadUInt64(ref result.regionProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasIdTransitionEntity {
        get { return result.hasIdTransitionEntity; }
      }
      public ulong IdTransitionEntity {
        get { return result.IdTransitionEntity; }
        set { SetIdTransitionEntity(value); }
      }
      public Builder SetIdTransitionEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTransitionEntity = true;
        result.idTransitionEntity_ = value;
        return this;
      }
      public Builder ClearIdTransitionEntity() {
        PrepareBuilder();
        result.hasIdTransitionEntity = false;
        result.idTransitionEntity_ = 0UL;
        return this;
      }
      
      public bool HasWaypointDataRef {
        get { return result.hasWaypointDataRef; }
      }
      public ulong WaypointDataRef {
        get { return result.WaypointDataRef; }
        set { SetWaypointDataRef(value); }
      }
      public Builder SetWaypointDataRef(ulong value) {
        PrepareBuilder();
        result.hasWaypointDataRef = true;
        result.waypointDataRef_ = value;
        return this;
      }
      public Builder ClearWaypointDataRef() {
        PrepareBuilder();
        result.hasWaypointDataRef = false;
        result.waypointDataRef_ = 0UL;
        return this;
      }
      
      public bool HasRegionProtoId {
        get { return result.hasRegionProtoId; }
      }
      public ulong RegionProtoId {
        get { return result.RegionProtoId; }
        set { SetRegionProtoId(value); }
      }
      public Builder SetRegionProtoId(ulong value) {
        PrepareBuilder();
        result.hasRegionProtoId = true;
        result.regionProtoId_ = value;
        return this;
      }
      public Builder ClearRegionProtoId() {
        PrepareBuilder();
        result.hasRegionProtoId = false;
        result.regionProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageUseWaypoint() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugAcquireAndSwitchToAvatar : pb::GeneratedMessage<NetMessageDebugAcquireAndSwitchToAvatar, NetMessageDebugAcquireAndSwitchToAvatar.Builder> {
    private NetMessageDebugAcquireAndSwitchToAvatar() { }
    private static readonly NetMessageDebugAcquireAndSwitchToAvatar defaultInstance = new NetMessageDebugAcquireAndSwitchToAvatar().MakeReadOnly();
    private static readonly string[] _netMessageDebugAcquireAndSwitchToAvatarFieldNames = new string[] { "avatarPrototypeId" };
    private static readonly uint[] _netMessageDebugAcquireAndSwitchToAvatarFieldTags = new uint[] { 8 };
    public static NetMessageDebugAcquireAndSwitchToAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugAcquireAndSwitchToAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugAcquireAndSwitchToAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugAcquireAndSwitchToAvatar, NetMessageDebugAcquireAndSwitchToAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDebugAcquireAndSwitchToAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarPrototypeIdFieldNumber = 1;
    private bool hasAvatarPrototypeId;
    private ulong avatarPrototypeId_;
    public bool HasAvatarPrototypeId {
      get { return hasAvatarPrototypeId; }
    }
    public ulong AvatarPrototypeId {
      get { return avatarPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugAcquireAndSwitchToAvatarFieldNames;
      if (hasAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[0], AvatarPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugAcquireAndSwitchToAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugAcquireAndSwitchToAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugAcquireAndSwitchToAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugAcquireAndSwitchToAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugAcquireAndSwitchToAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugAcquireAndSwitchToAvatar result;
      
      private NetMessageDebugAcquireAndSwitchToAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugAcquireAndSwitchToAvatar original = result;
          result = new NetMessageDebugAcquireAndSwitchToAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugAcquireAndSwitchToAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.Descriptor; }
      }
      
      public override NetMessageDebugAcquireAndSwitchToAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.DefaultInstance; }
      }
      
      public override NetMessageDebugAcquireAndSwitchToAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugAcquireAndSwitchToAvatar) {
          return MergeFrom((NetMessageDebugAcquireAndSwitchToAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugAcquireAndSwitchToAvatar other) {
        if (other == global::Gazillion.NetMessageDebugAcquireAndSwitchToAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarPrototypeId) {
          AvatarPrototypeId = other.AvatarPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugAcquireAndSwitchToAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugAcquireAndSwitchToAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarPrototypeId = input.ReadUInt64(ref result.avatarPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarPrototypeId {
        get { return result.hasAvatarPrototypeId; }
      }
      public ulong AvatarPrototypeId {
        get { return result.AvatarPrototypeId; }
        set { SetAvatarPrototypeId(value); }
      }
      public Builder SetAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAvatarPrototypeId = true;
        result.avatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearAvatarPrototypeId() {
        PrepareBuilder();
        result.hasAvatarPrototypeId = false;
        result.avatarPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageDebugAcquireAndSwitchToAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSwitchAvatar : pb::GeneratedMessage<NetMessageSwitchAvatar, NetMessageSwitchAvatar.Builder> {
    private NetMessageSwitchAvatar() { }
    private static readonly NetMessageSwitchAvatar defaultInstance = new NetMessageSwitchAvatar().MakeReadOnly();
    private static readonly string[] _netMessageSwitchAvatarFieldNames = new string[] { "avatarModeEnum", "avatarPrototypeId" };
    private static readonly uint[] _netMessageSwitchAvatarFieldTags = new uint[] { 16, 8 };
    public static NetMessageSwitchAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSwitchAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSwitchAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwitchAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSwitchAvatar, NetMessageSwitchAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSwitchAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarPrototypeIdFieldNumber = 1;
    private bool hasAvatarPrototypeId;
    private ulong avatarPrototypeId_;
    public bool HasAvatarPrototypeId {
      get { return hasAvatarPrototypeId; }
    }
    public ulong AvatarPrototypeId {
      get { return avatarPrototypeId_; }
    }
    
    public const int AvatarModeEnumFieldNumber = 2;
    private bool hasAvatarModeEnum;
    private uint avatarModeEnum_;
    public bool HasAvatarModeEnum {
      get { return hasAvatarModeEnum; }
    }
    public uint AvatarModeEnum {
      get { return avatarModeEnum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarPrototypeId) return false;
        if (!hasAvatarModeEnum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSwitchAvatarFieldNames;
      if (hasAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[1], AvatarPrototypeId);
      }
      if (hasAvatarModeEnum) {
        output.WriteUInt32(2, field_names[0], AvatarModeEnum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarPrototypeId);
      }
      if (hasAvatarModeEnum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, AvatarModeEnum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSwitchAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSwitchAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSwitchAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSwitchAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSwitchAvatar result;
      
      private NetMessageSwitchAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSwitchAvatar original = result;
          result = new NetMessageSwitchAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSwitchAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSwitchAvatar.Descriptor; }
      }
      
      public override NetMessageSwitchAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSwitchAvatar.DefaultInstance; }
      }
      
      public override NetMessageSwitchAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSwitchAvatar) {
          return MergeFrom((NetMessageSwitchAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSwitchAvatar other) {
        if (other == global::Gazillion.NetMessageSwitchAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarPrototypeId) {
          AvatarPrototypeId = other.AvatarPrototypeId;
        }
        if (other.HasAvatarModeEnum) {
          AvatarModeEnum = other.AvatarModeEnum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSwitchAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSwitchAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarPrototypeId = input.ReadUInt64(ref result.avatarPrototypeId_);
              break;
            }
            case 16: {
              result.hasAvatarModeEnum = input.ReadUInt32(ref result.avatarModeEnum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarPrototypeId {
        get { return result.hasAvatarPrototypeId; }
      }
      public ulong AvatarPrototypeId {
        get { return result.AvatarPrototypeId; }
        set { SetAvatarPrototypeId(value); }
      }
      public Builder SetAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAvatarPrototypeId = true;
        result.avatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearAvatarPrototypeId() {
        PrepareBuilder();
        result.hasAvatarPrototypeId = false;
        result.avatarPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarModeEnum {
        get { return result.hasAvatarModeEnum; }
      }
      public uint AvatarModeEnum {
        get { return result.AvatarModeEnum; }
        set { SetAvatarModeEnum(value); }
      }
      public Builder SetAvatarModeEnum(uint value) {
        PrepareBuilder();
        result.hasAvatarModeEnum = true;
        result.avatarModeEnum_ = value;
        return this;
      }
      public Builder ClearAvatarModeEnum() {
        PrepareBuilder();
        result.hasAvatarModeEnum = false;
        result.avatarModeEnum_ = 0;
        return this;
      }
    }
    static NetMessageSwitchAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectPublicEventTeam : pb::GeneratedMessage<NetMessageSelectPublicEventTeam, NetMessageSelectPublicEventTeam.Builder> {
    private NetMessageSelectPublicEventTeam() { }
    private static readonly NetMessageSelectPublicEventTeam defaultInstance = new NetMessageSelectPublicEventTeam().MakeReadOnly();
    private static readonly string[] _netMessageSelectPublicEventTeamFieldNames = new string[] { "teamPrototypeId" };
    private static readonly uint[] _netMessageSelectPublicEventTeamFieldTags = new uint[] { 8 };
    public static NetMessageSelectPublicEventTeam DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectPublicEventTeam DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectPublicEventTeam ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectPublicEventTeam__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectPublicEventTeam, NetMessageSelectPublicEventTeam.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectPublicEventTeam__FieldAccessorTable; }
    }
    
    public const int TeamPrototypeIdFieldNumber = 1;
    private bool hasTeamPrototypeId;
    private ulong teamPrototypeId_;
    public bool HasTeamPrototypeId {
      get { return hasTeamPrototypeId; }
    }
    public ulong TeamPrototypeId {
      get { return teamPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectPublicEventTeamFieldNames;
      if (hasTeamPrototypeId) {
        output.WriteUInt64(1, field_names[0], TeamPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectPublicEventTeam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectPublicEventTeam MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectPublicEventTeam prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectPublicEventTeam, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectPublicEventTeam cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectPublicEventTeam result;
      
      private NetMessageSelectPublicEventTeam PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectPublicEventTeam original = result;
          result = new NetMessageSelectPublicEventTeam();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectPublicEventTeam MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectPublicEventTeam.Descriptor; }
      }
      
      public override NetMessageSelectPublicEventTeam DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectPublicEventTeam.DefaultInstance; }
      }
      
      public override NetMessageSelectPublicEventTeam BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectPublicEventTeam) {
          return MergeFrom((NetMessageSelectPublicEventTeam) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectPublicEventTeam other) {
        if (other == global::Gazillion.NetMessageSelectPublicEventTeam.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamPrototypeId) {
          TeamPrototypeId = other.TeamPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectPublicEventTeamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectPublicEventTeamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamPrototypeId = input.ReadUInt64(ref result.teamPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamPrototypeId {
        get { return result.hasTeamPrototypeId; }
      }
      public ulong TeamPrototypeId {
        get { return result.TeamPrototypeId; }
        set { SetTeamPrototypeId(value); }
      }
      public Builder SetTeamPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTeamPrototypeId = true;
        result.teamPrototypeId_ = value;
        return this;
      }
      public Builder ClearTeamPrototypeId() {
        PrepareBuilder();
        result.hasTeamPrototypeId = false;
        result.teamPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageSelectPublicEventTeam() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignHotkey : pb::GeneratedMessage<NetMessageAssignHotkey, NetMessageAssignHotkey.Builder> {
    private NetMessageAssignHotkey() { }
    private static readonly NetMessageAssignHotkey defaultInstance = new NetMessageAssignHotkey().MakeReadOnly();
    private static readonly string[] _netMessageAssignHotkeyFieldNames = new string[] { "avatarId", "destinationSlotNumber", "keyMappingIndex", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAssignHotkeyFieldTags = new uint[] { 8, 40, 24, 16, 32 };
    public static NetMessageAssignHotkey DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignHotkey DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignHotkey ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignHotkey__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignHotkey, NetMessageAssignHotkey.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAssignHotkey__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 3;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 4;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public const int DestinationSlotNumberFieldNumber = 5;
    private bool hasDestinationSlotNumber;
    private uint destinationSlotNumber_;
    public bool HasDestinationSlotNumber {
      get { return hasDestinationSlotNumber; }
    }
    public uint DestinationSlotNumber {
      get { return destinationSlotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        if (!hasDestinationSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignHotkeyFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[3], PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(3, field_names[2], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(4, field_names[4], SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        output.WriteUInt32(5, field_names[1], DestinationSlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, DestinationSlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignHotkey MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignHotkey prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignHotkey, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignHotkey cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignHotkey result;
      
      private NetMessageAssignHotkey PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignHotkey original = result;
          result = new NetMessageAssignHotkey();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignHotkey MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignHotkey.Descriptor; }
      }
      
      public override NetMessageAssignHotkey DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignHotkey.DefaultInstance; }
      }
      
      public override NetMessageAssignHotkey BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignHotkey) {
          return MergeFrom((NetMessageAssignHotkey) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignHotkey other) {
        if (other == global::Gazillion.NetMessageAssignHotkey.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        if (other.HasDestinationSlotNumber) {
          DestinationSlotNumber = other.DestinationSlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignHotkeyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignHotkeyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 32: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
            case 40: {
              result.hasDestinationSlotNumber = input.ReadUInt32(ref result.destinationSlotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
      
      public bool HasDestinationSlotNumber {
        get { return result.hasDestinationSlotNumber; }
      }
      public uint DestinationSlotNumber {
        get { return result.DestinationSlotNumber; }
        set { SetDestinationSlotNumber(value); }
      }
      public Builder SetDestinationSlotNumber(uint value) {
        PrepareBuilder();
        result.hasDestinationSlotNumber = true;
        result.destinationSlotNumber_ = value;
        return this;
      }
      public Builder ClearDestinationSlotNumber() {
        PrepareBuilder();
        result.hasDestinationSlotNumber = false;
        result.destinationSlotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAssignHotkey() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnassignHotkey : pb::GeneratedMessage<NetMessageUnassignHotkey, NetMessageUnassignHotkey.Builder> {
    private NetMessageUnassignHotkey() { }
    private static readonly NetMessageUnassignHotkey defaultInstance = new NetMessageUnassignHotkey().MakeReadOnly();
    private static readonly string[] _netMessageUnassignHotkeyFieldNames = new string[] { "avatarId", "keyMappingIndex", "slotNumber" };
    private static readonly uint[] _netMessageUnassignHotkeyFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageUnassignHotkey DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnassignHotkey DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnassignHotkey ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignHotkey__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnassignHotkey, NetMessageUnassignHotkey.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignHotkey__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 2;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnassignHotkeyFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(2, field_names[1], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[2], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnassignHotkey MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnassignHotkey prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnassignHotkey, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnassignHotkey cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnassignHotkey result;
      
      private NetMessageUnassignHotkey PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnassignHotkey original = result;
          result = new NetMessageUnassignHotkey();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnassignHotkey MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnassignHotkey.Descriptor; }
      }
      
      public override NetMessageUnassignHotkey DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnassignHotkey.DefaultInstance; }
      }
      
      public override NetMessageUnassignHotkey BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnassignHotkey) {
          return MergeFrom((NetMessageUnassignHotkey) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnassignHotkey other) {
        if (other == global::Gazillion.NetMessageUnassignHotkey.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnassignHotkeyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnassignHotkeyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageUnassignHotkey() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectAbilityKeyMapping : pb::GeneratedMessage<NetMessageSelectAbilityKeyMapping, NetMessageSelectAbilityKeyMapping.Builder> {
    private NetMessageSelectAbilityKeyMapping() { }
    private static readonly NetMessageSelectAbilityKeyMapping defaultInstance = new NetMessageSelectAbilityKeyMapping().MakeReadOnly();
    private static readonly string[] _netMessageSelectAbilityKeyMappingFieldNames = new string[] { "avatarId", "keyMappingIndex" };
    private static readonly uint[] _netMessageSelectAbilityKeyMappingFieldTags = new uint[] { 8, 16 };
    public static NetMessageSelectAbilityKeyMapping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectAbilityKeyMapping DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectAbilityKeyMapping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectAbilityKeyMapping, NetMessageSelectAbilityKeyMapping.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectAbilityKeyMapping__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 2;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasKeyMappingIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectAbilityKeyMappingFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(2, field_names[1], KeyMappingIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyMappingIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectAbilityKeyMapping ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectAbilityKeyMapping MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectAbilityKeyMapping prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectAbilityKeyMapping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectAbilityKeyMapping cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectAbilityKeyMapping result;
      
      private NetMessageSelectAbilityKeyMapping PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectAbilityKeyMapping original = result;
          result = new NetMessageSelectAbilityKeyMapping();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectAbilityKeyMapping MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectAbilityKeyMapping.Descriptor; }
      }
      
      public override NetMessageSelectAbilityKeyMapping DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectAbilityKeyMapping.DefaultInstance; }
      }
      
      public override NetMessageSelectAbilityKeyMapping BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectAbilityKeyMapping) {
          return MergeFrom((NetMessageSelectAbilityKeyMapping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectAbilityKeyMapping other) {
        if (other == global::Gazillion.NetMessageSelectAbilityKeyMapping.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectAbilityKeyMappingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectAbilityKeyMappingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
    }
    static NetMessageSelectAbilityKeyMapping() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilitySlotToAbilityBar : pb::GeneratedMessage<NetMessageAbilitySlotToAbilityBar, NetMessageAbilitySlotToAbilityBar.Builder> {
    private NetMessageAbilitySlotToAbilityBar() { }
    private static readonly NetMessageAbilitySlotToAbilityBar defaultInstance = new NetMessageAbilitySlotToAbilityBar().MakeReadOnly();
    private static readonly string[] _netMessageAbilitySlotToAbilityBarFieldNames = new string[] { "avatarId", "keyMappingIndex", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAbilitySlotToAbilityBarFieldTags = new uint[] { 8, 24, 16, 32 };
    public static NetMessageAbilitySlotToAbilityBar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilitySlotToAbilityBar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilitySlotToAbilityBar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilitySlotToAbilityBar, NetMessageAbilitySlotToAbilityBar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilitySlotToAbilityBar__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 3;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 4;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilitySlotToAbilityBarFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[2], PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(3, field_names[1], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(4, field_names[3], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilitySlotToAbilityBar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilitySlotToAbilityBar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilitySlotToAbilityBar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilitySlotToAbilityBar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilitySlotToAbilityBar result;
      
      private NetMessageAbilitySlotToAbilityBar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilitySlotToAbilityBar original = result;
          result = new NetMessageAbilitySlotToAbilityBar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilitySlotToAbilityBar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilitySlotToAbilityBar.Descriptor; }
      }
      
      public override NetMessageAbilitySlotToAbilityBar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilitySlotToAbilityBar.DefaultInstance; }
      }
      
      public override NetMessageAbilitySlotToAbilityBar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilitySlotToAbilityBar) {
          return MergeFrom((NetMessageAbilitySlotToAbilityBar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilitySlotToAbilityBar other) {
        if (other == global::Gazillion.NetMessageAbilitySlotToAbilityBar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilitySlotToAbilityBarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilitySlotToAbilityBarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 32: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAbilitySlotToAbilityBar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilityUnslotFromAbilityBar : pb::GeneratedMessage<NetMessageAbilityUnslotFromAbilityBar, NetMessageAbilityUnslotFromAbilityBar.Builder> {
    private NetMessageAbilityUnslotFromAbilityBar() { }
    private static readonly NetMessageAbilityUnslotFromAbilityBar defaultInstance = new NetMessageAbilityUnslotFromAbilityBar().MakeReadOnly();
    private static readonly string[] _netMessageAbilityUnslotFromAbilityBarFieldNames = new string[] { "avatarId", "keyMappingIndex", "slotNumber" };
    private static readonly uint[] _netMessageAbilityUnslotFromAbilityBarFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAbilityUnslotFromAbilityBar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilityUnslotFromAbilityBar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilityUnslotFromAbilityBar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilityUnslotFromAbilityBar, NetMessageAbilityUnslotFromAbilityBar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBar__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 2;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilityUnslotFromAbilityBarFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(2, field_names[1], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[2], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilityUnslotFromAbilityBar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilityUnslotFromAbilityBar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilityUnslotFromAbilityBar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilityUnslotFromAbilityBar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilityUnslotFromAbilityBar result;
      
      private NetMessageAbilityUnslotFromAbilityBar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilityUnslotFromAbilityBar original = result;
          result = new NetMessageAbilityUnslotFromAbilityBar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilityUnslotFromAbilityBar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilityUnslotFromAbilityBar.Descriptor; }
      }
      
      public override NetMessageAbilityUnslotFromAbilityBar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilityUnslotFromAbilityBar.DefaultInstance; }
      }
      
      public override NetMessageAbilityUnslotFromAbilityBar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilityUnslotFromAbilityBar) {
          return MergeFrom((NetMessageAbilityUnslotFromAbilityBar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilityUnslotFromAbilityBar other) {
        if (other == global::Gazillion.NetMessageAbilityUnslotFromAbilityBar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilityUnslotFromAbilityBarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilityUnslotFromAbilityBarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAbilityUnslotFromAbilityBar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilitySwapInAbilityBar : pb::GeneratedMessage<NetMessageAbilitySwapInAbilityBar, NetMessageAbilitySwapInAbilityBar.Builder> {
    private NetMessageAbilitySwapInAbilityBar() { }
    private static readonly NetMessageAbilitySwapInAbilityBar defaultInstance = new NetMessageAbilitySwapInAbilityBar().MakeReadOnly();
    private static readonly string[] _netMessageAbilitySwapInAbilityBarFieldNames = new string[] { "avatarId", "slotNumberA", "slotNumberB" };
    private static readonly uint[] _netMessageAbilitySwapInAbilityBarFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAbilitySwapInAbilityBar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilitySwapInAbilityBar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilitySwapInAbilityBar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilitySwapInAbilityBar, NetMessageAbilitySwapInAbilityBar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAbilitySwapInAbilityBar__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotNumberAFieldNumber = 2;
    private bool hasSlotNumberA;
    private uint slotNumberA_;
    public bool HasSlotNumberA {
      get { return hasSlotNumberA; }
    }
    public uint SlotNumberA {
      get { return slotNumberA_; }
    }
    
    public const int SlotNumberBFieldNumber = 3;
    private bool hasSlotNumberB;
    private uint slotNumberB_;
    public bool HasSlotNumberB {
      get { return hasSlotNumberB; }
    }
    public uint SlotNumberB {
      get { return slotNumberB_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotNumberA) return false;
        if (!hasSlotNumberB) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilitySwapInAbilityBarFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotNumberA) {
        output.WriteUInt32(2, field_names[1], SlotNumberA);
      }
      if (hasSlotNumberB) {
        output.WriteUInt32(3, field_names[2], SlotNumberB);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotNumberA) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotNumberA);
      }
      if (hasSlotNumberB) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumberB);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilitySwapInAbilityBar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilitySwapInAbilityBar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilitySwapInAbilityBar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilitySwapInAbilityBar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilitySwapInAbilityBar result;
      
      private NetMessageAbilitySwapInAbilityBar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilitySwapInAbilityBar original = result;
          result = new NetMessageAbilitySwapInAbilityBar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilitySwapInAbilityBar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilitySwapInAbilityBar.Descriptor; }
      }
      
      public override NetMessageAbilitySwapInAbilityBar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilitySwapInAbilityBar.DefaultInstance; }
      }
      
      public override NetMessageAbilitySwapInAbilityBar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilitySwapInAbilityBar) {
          return MergeFrom((NetMessageAbilitySwapInAbilityBar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilitySwapInAbilityBar other) {
        if (other == global::Gazillion.NetMessageAbilitySwapInAbilityBar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotNumberA) {
          SlotNumberA = other.SlotNumberA;
        }
        if (other.HasSlotNumberB) {
          SlotNumberB = other.SlotNumberB;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilitySwapInAbilityBarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilitySwapInAbilityBarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotNumberA = input.ReadUInt32(ref result.slotNumberA_);
              break;
            }
            case 24: {
              result.hasSlotNumberB = input.ReadUInt32(ref result.slotNumberB_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumberA {
        get { return result.hasSlotNumberA; }
      }
      public uint SlotNumberA {
        get { return result.SlotNumberA; }
        set { SetSlotNumberA(value); }
      }
      public Builder SetSlotNumberA(uint value) {
        PrepareBuilder();
        result.hasSlotNumberA = true;
        result.slotNumberA_ = value;
        return this;
      }
      public Builder ClearSlotNumberA() {
        PrepareBuilder();
        result.hasSlotNumberA = false;
        result.slotNumberA_ = 0;
        return this;
      }
      
      public bool HasSlotNumberB {
        get { return result.hasSlotNumberB; }
      }
      public uint SlotNumberB {
        get { return result.SlotNumberB; }
        set { SetSlotNumberB(value); }
      }
      public Builder SetSlotNumberB(uint value) {
        PrepareBuilder();
        result.hasSlotNumberB = true;
        result.slotNumberB_ = value;
        return this;
      }
      public Builder ClearSlotNumberB() {
        PrepareBuilder();
        result.hasSlotNumberB = false;
        result.slotNumberB_ = 0;
        return this;
      }
    }
    static NetMessageAbilitySwapInAbilityBar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModCommitTemporary : pb::GeneratedMessage<NetMessageModCommitTemporary, NetMessageModCommitTemporary.Builder> {
    private NetMessageModCommitTemporary() { }
    private static readonly NetMessageModCommitTemporary defaultInstance = new NetMessageModCommitTemporary().MakeReadOnly();
    private static readonly string[] _netMessageModCommitTemporaryFieldNames = new string[] { "avatarRef", "changes", "modTypeRef" };
    private static readonly uint[] _netMessageModCommitTemporaryFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageModCommitTemporary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModCommitTemporary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModCommitTemporary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModCommitTemporary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModCommitTemporary, NetMessageModCommitTemporary.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModCommitTemporary__FieldAccessorTable; }
    }
    
    public const int AvatarRefFieldNumber = 1;
    private bool hasAvatarRef;
    private ulong avatarRef_;
    public bool HasAvatarRef {
      get { return hasAvatarRef; }
    }
    public ulong AvatarRef {
      get { return avatarRef_; }
    }
    
    public const int ModTypeRefFieldNumber = 2;
    private bool hasModTypeRef;
    private ulong modTypeRef_;
    public bool HasModTypeRef {
      get { return hasModTypeRef; }
    }
    public ulong ModTypeRef {
      get { return modTypeRef_; }
    }
    
    public const int ChangesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.NetStructModChangeObject> changes_ = new pbc::PopsicleList<global::Gazillion.NetStructModChangeObject>();
    public scg::IList<global::Gazillion.NetStructModChangeObject> ChangesList {
      get { return changes_; }
    }
    public int ChangesCount {
      get { return changes_.Count; }
    }
    public global::Gazillion.NetStructModChangeObject GetChanges(int index) {
      return changes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarRef) return false;
        if (!hasModTypeRef) return false;
        foreach (global::Gazillion.NetStructModChangeObject element in ChangesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModCommitTemporaryFieldNames;
      if (hasAvatarRef) {
        output.WriteUInt64(1, field_names[0], AvatarRef);
      }
      if (hasModTypeRef) {
        output.WriteUInt64(2, field_names[2], ModTypeRef);
      }
      if (changes_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], changes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarRef);
      }
      if (hasModTypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModTypeRef);
      }
      foreach (global::Gazillion.NetStructModChangeObject element in ChangesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModCommitTemporary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModCommitTemporary MakeReadOnly() {
      changes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModCommitTemporary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModCommitTemporary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModCommitTemporary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModCommitTemporary result;
      
      private NetMessageModCommitTemporary PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModCommitTemporary original = result;
          result = new NetMessageModCommitTemporary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModCommitTemporary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModCommitTemporary.Descriptor; }
      }
      
      public override NetMessageModCommitTemporary DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModCommitTemporary.DefaultInstance; }
      }
      
      public override NetMessageModCommitTemporary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModCommitTemporary) {
          return MergeFrom((NetMessageModCommitTemporary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModCommitTemporary other) {
        if (other == global::Gazillion.NetMessageModCommitTemporary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarRef) {
          AvatarRef = other.AvatarRef;
        }
        if (other.HasModTypeRef) {
          ModTypeRef = other.ModTypeRef;
        }
        if (other.changes_.Count != 0) {
          result.changes_.Add(other.changes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModCommitTemporaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModCommitTemporaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarRef = input.ReadUInt64(ref result.avatarRef_);
              break;
            }
            case 16: {
              result.hasModTypeRef = input.ReadUInt64(ref result.modTypeRef_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.changes_, global::Gazillion.NetStructModChangeObject.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarRef {
        get { return result.hasAvatarRef; }
      }
      public ulong AvatarRef {
        get { return result.AvatarRef; }
        set { SetAvatarRef(value); }
      }
      public Builder SetAvatarRef(ulong value) {
        PrepareBuilder();
        result.hasAvatarRef = true;
        result.avatarRef_ = value;
        return this;
      }
      public Builder ClearAvatarRef() {
        PrepareBuilder();
        result.hasAvatarRef = false;
        result.avatarRef_ = 0UL;
        return this;
      }
      
      public bool HasModTypeRef {
        get { return result.hasModTypeRef; }
      }
      public ulong ModTypeRef {
        get { return result.ModTypeRef; }
        set { SetModTypeRef(value); }
      }
      public Builder SetModTypeRef(ulong value) {
        PrepareBuilder();
        result.hasModTypeRef = true;
        result.modTypeRef_ = value;
        return this;
      }
      public Builder ClearModTypeRef() {
        PrepareBuilder();
        result.hasModTypeRef = false;
        result.modTypeRef_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructModChangeObject> ChangesList {
        get { return PrepareBuilder().changes_; }
      }
      public int ChangesCount {
        get { return result.ChangesCount; }
      }
      public global::Gazillion.NetStructModChangeObject GetChanges(int index) {
        return result.GetChanges(index);
      }
      public Builder SetChanges(int index, global::Gazillion.NetStructModChangeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changes_[index] = value;
        return this;
      }
      public Builder SetChanges(int index, global::Gazillion.NetStructModChangeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChanges(global::Gazillion.NetStructModChangeObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changes_.Add(value);
        return this;
      }
      public Builder AddChanges(global::Gazillion.NetStructModChangeObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChanges(scg::IEnumerable<global::Gazillion.NetStructModChangeObject> values) {
        PrepareBuilder();
        result.changes_.Add(values);
        return this;
      }
      public Builder ClearChanges() {
        PrepareBuilder();
        result.changes_.Clear();
        return this;
      }
    }
    static NetMessageModCommitTemporary() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModReset : pb::GeneratedMessage<NetMessageModReset, NetMessageModReset.Builder> {
    private NetMessageModReset() { }
    private static readonly NetMessageModReset defaultInstance = new NetMessageModReset().MakeReadOnly();
    private static readonly string[] _netMessageModResetFieldNames = new string[] { "avatarId", "modTypeRef" };
    private static readonly uint[] _netMessageModResetFieldTags = new uint[] { 8, 16 };
    public static NetMessageModReset DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModReset DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModReset ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModReset__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModReset, NetMessageModReset.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageModReset__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int ModTypeRefFieldNumber = 2;
    private bool hasModTypeRef;
    private ulong modTypeRef_;
    public bool HasModTypeRef {
      get { return hasModTypeRef; }
    }
    public ulong ModTypeRef {
      get { return modTypeRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasModTypeRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModResetFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasModTypeRef) {
        output.WriteUInt64(2, field_names[1], ModTypeRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasModTypeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModTypeRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModReset ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModReset ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModReset ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModReset ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModReset MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModReset prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModReset, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModReset cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModReset result;
      
      private NetMessageModReset PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModReset original = result;
          result = new NetMessageModReset();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModReset MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModReset.Descriptor; }
      }
      
      public override NetMessageModReset DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModReset.DefaultInstance; }
      }
      
      public override NetMessageModReset BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModReset) {
          return MergeFrom((NetMessageModReset) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModReset other) {
        if (other == global::Gazillion.NetMessageModReset.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasModTypeRef) {
          ModTypeRef = other.ModTypeRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModResetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModResetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasModTypeRef = input.ReadUInt64(ref result.modTypeRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasModTypeRef {
        get { return result.hasModTypeRef; }
      }
      public ulong ModTypeRef {
        get { return result.ModTypeRef; }
        set { SetModTypeRef(value); }
      }
      public Builder SetModTypeRef(ulong value) {
        PrepareBuilder();
        result.hasModTypeRef = true;
        result.modTypeRef_ = value;
        return this;
      }
      public Builder ClearModTypeRef() {
        PrepareBuilder();
        result.hasModTypeRef = false;
        result.modTypeRef_ = 0UL;
        return this;
      }
    }
    static NetMessageModReset() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerPointAllocationCommit : pb::GeneratedMessage<NetMessagePowerPointAllocationCommit, NetMessagePowerPointAllocationCommit.Builder> {
    private NetMessagePowerPointAllocationCommit() { }
    private static readonly NetMessagePowerPointAllocationCommit defaultInstance = new NetMessagePowerPointAllocationCommit().MakeReadOnly();
    private static readonly string[] _netMessagePowerPointAllocationCommitFieldNames = new string[] { "agentRef", "allocations", "powerSpecIndex" };
    private static readonly uint[] _netMessagePowerPointAllocationCommitFieldTags = new uint[] { 8, 18, 24 };
    public static NetMessagePowerPointAllocationCommit DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerPointAllocationCommit DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerPointAllocationCommit ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerPointAllocationCommit__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerPointAllocationCommit, NetMessagePowerPointAllocationCommit.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePowerPointAllocationCommit__FieldAccessorTable; }
    }
    
    public const int AgentRefFieldNumber = 1;
    private bool hasAgentRef;
    private ulong agentRef_;
    public bool HasAgentRef {
      get { return hasAgentRef; }
    }
    public ulong AgentRef {
      get { return agentRef_; }
    }
    
    public const int AllocationsFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.NetStructPowerPointAllocation> allocations_ = new pbc::PopsicleList<global::Gazillion.NetStructPowerPointAllocation>();
    public scg::IList<global::Gazillion.NetStructPowerPointAllocation> AllocationsList {
      get { return allocations_; }
    }
    public int AllocationsCount {
      get { return allocations_.Count; }
    }
    public global::Gazillion.NetStructPowerPointAllocation GetAllocations(int index) {
      return allocations_[index];
    }
    
    public const int PowerSpecIndexFieldNumber = 3;
    private bool hasPowerSpecIndex;
    private uint powerSpecIndex_;
    public bool HasPowerSpecIndex {
      get { return hasPowerSpecIndex; }
    }
    public uint PowerSpecIndex {
      get { return powerSpecIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAgentRef) return false;
        if (!hasPowerSpecIndex) return false;
        foreach (global::Gazillion.NetStructPowerPointAllocation element in AllocationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerPointAllocationCommitFieldNames;
      if (hasAgentRef) {
        output.WriteUInt64(1, field_names[0], AgentRef);
      }
      if (allocations_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], allocations_);
      }
      if (hasPowerSpecIndex) {
        output.WriteUInt32(3, field_names[2], PowerSpecIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AgentRef);
      }
      foreach (global::Gazillion.NetStructPowerPointAllocation element in AllocationsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasPowerSpecIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PowerSpecIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerPointAllocationCommit ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerPointAllocationCommit MakeReadOnly() {
      allocations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerPointAllocationCommit prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerPointAllocationCommit, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerPointAllocationCommit cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerPointAllocationCommit result;
      
      private NetMessagePowerPointAllocationCommit PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerPointAllocationCommit original = result;
          result = new NetMessagePowerPointAllocationCommit();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerPointAllocationCommit MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerPointAllocationCommit.Descriptor; }
      }
      
      public override NetMessagePowerPointAllocationCommit DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerPointAllocationCommit.DefaultInstance; }
      }
      
      public override NetMessagePowerPointAllocationCommit BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerPointAllocationCommit) {
          return MergeFrom((NetMessagePowerPointAllocationCommit) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerPointAllocationCommit other) {
        if (other == global::Gazillion.NetMessagePowerPointAllocationCommit.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentRef) {
          AgentRef = other.AgentRef;
        }
        if (other.allocations_.Count != 0) {
          result.allocations_.Add(other.allocations_);
        }
        if (other.HasPowerSpecIndex) {
          PowerSpecIndex = other.PowerSpecIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerPointAllocationCommitFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerPointAllocationCommitFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAgentRef = input.ReadUInt64(ref result.agentRef_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.allocations_, global::Gazillion.NetStructPowerPointAllocation.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasPowerSpecIndex = input.ReadUInt32(ref result.powerSpecIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentRef {
        get { return result.hasAgentRef; }
      }
      public ulong AgentRef {
        get { return result.AgentRef; }
        set { SetAgentRef(value); }
      }
      public Builder SetAgentRef(ulong value) {
        PrepareBuilder();
        result.hasAgentRef = true;
        result.agentRef_ = value;
        return this;
      }
      public Builder ClearAgentRef() {
        PrepareBuilder();
        result.hasAgentRef = false;
        result.agentRef_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructPowerPointAllocation> AllocationsList {
        get { return PrepareBuilder().allocations_; }
      }
      public int AllocationsCount {
        get { return result.AllocationsCount; }
      }
      public global::Gazillion.NetStructPowerPointAllocation GetAllocations(int index) {
        return result.GetAllocations(index);
      }
      public Builder SetAllocations(int index, global::Gazillion.NetStructPowerPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_[index] = value;
        return this;
      }
      public Builder SetAllocations(int index, global::Gazillion.NetStructPowerPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetStructPowerPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_.Add(value);
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetStructPowerPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllocations(scg::IEnumerable<global::Gazillion.NetStructPowerPointAllocation> values) {
        PrepareBuilder();
        result.allocations_.Add(values);
        return this;
      }
      public Builder ClearAllocations() {
        PrepareBuilder();
        result.allocations_.Clear();
        return this;
      }
      
      public bool HasPowerSpecIndex {
        get { return result.hasPowerSpecIndex; }
      }
      public uint PowerSpecIndex {
        get { return result.PowerSpecIndex; }
        set { SetPowerSpecIndex(value); }
      }
      public Builder SetPowerSpecIndex(uint value) {
        PrepareBuilder();
        result.hasPowerSpecIndex = true;
        result.powerSpecIndex_ = value;
        return this;
      }
      public Builder ClearPowerSpecIndex() {
        PrepareBuilder();
        result.hasPowerSpecIndex = false;
        result.powerSpecIndex_ = 0;
        return this;
      }
    }
    static NetMessagePowerPointAllocationCommit() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestDeathRelease : pb::GeneratedMessage<NetMessageRequestDeathRelease, NetMessageRequestDeathRelease.Builder> {
    private NetMessageRequestDeathRelease() { }
    private static readonly NetMessageRequestDeathRelease defaultInstance = new NetMessageRequestDeathRelease().MakeReadOnly();
    private static readonly string[] _netMessageRequestDeathReleaseFieldNames = new string[] { "hitOk", "resurrectedFromOtherEntity" };
    private static readonly uint[] _netMessageRequestDeathReleaseFieldTags = new uint[] { 8, 16 };
    public static NetMessageRequestDeathRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestDeathRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestDeathRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestDeathRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestDeathRelease, NetMessageRequestDeathRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestDeathRelease__FieldAccessorTable; }
    }
    
    public const int HitOkFieldNumber = 1;
    private bool hasHitOk;
    private bool hitOk_;
    public bool HasHitOk {
      get { return hasHitOk; }
    }
    public bool HitOk {
      get { return hitOk_; }
    }
    
    public const int ResurrectedFromOtherEntityFieldNumber = 2;
    private bool hasResurrectedFromOtherEntity;
    private bool resurrectedFromOtherEntity_;
    public bool HasResurrectedFromOtherEntity {
      get { return hasResurrectedFromOtherEntity; }
    }
    public bool ResurrectedFromOtherEntity {
      get { return resurrectedFromOtherEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHitOk) return false;
        if (!hasResurrectedFromOtherEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestDeathReleaseFieldNames;
      if (hasHitOk) {
        output.WriteBool(1, field_names[0], HitOk);
      }
      if (hasResurrectedFromOtherEntity) {
        output.WriteBool(2, field_names[1], ResurrectedFromOtherEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHitOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, HitOk);
      }
      if (hasResurrectedFromOtherEntity) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, ResurrectedFromOtherEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestDeathRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestDeathRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestDeathRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestDeathRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestDeathRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestDeathRelease result;
      
      private NetMessageRequestDeathRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestDeathRelease original = result;
          result = new NetMessageRequestDeathRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestDeathRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestDeathRelease.Descriptor; }
      }
      
      public override NetMessageRequestDeathRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestDeathRelease.DefaultInstance; }
      }
      
      public override NetMessageRequestDeathRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestDeathRelease) {
          return MergeFrom((NetMessageRequestDeathRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestDeathRelease other) {
        if (other == global::Gazillion.NetMessageRequestDeathRelease.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHitOk) {
          HitOk = other.HitOk;
        }
        if (other.HasResurrectedFromOtherEntity) {
          ResurrectedFromOtherEntity = other.ResurrectedFromOtherEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestDeathReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestDeathReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHitOk = input.ReadBool(ref result.hitOk_);
              break;
            }
            case 16: {
              result.hasResurrectedFromOtherEntity = input.ReadBool(ref result.resurrectedFromOtherEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHitOk {
        get { return result.hasHitOk; }
      }
      public bool HitOk {
        get { return result.HitOk; }
        set { SetHitOk(value); }
      }
      public Builder SetHitOk(bool value) {
        PrepareBuilder();
        result.hasHitOk = true;
        result.hitOk_ = value;
        return this;
      }
      public Builder ClearHitOk() {
        PrepareBuilder();
        result.hasHitOk = false;
        result.hitOk_ = false;
        return this;
      }
      
      public bool HasResurrectedFromOtherEntity {
        get { return result.hasResurrectedFromOtherEntity; }
      }
      public bool ResurrectedFromOtherEntity {
        get { return result.ResurrectedFromOtherEntity; }
        set { SetResurrectedFromOtherEntity(value); }
      }
      public Builder SetResurrectedFromOtherEntity(bool value) {
        PrepareBuilder();
        result.hasResurrectedFromOtherEntity = true;
        result.resurrectedFromOtherEntity_ = value;
        return this;
      }
      public Builder ClearResurrectedFromOtherEntity() {
        PrepareBuilder();
        result.hasResurrectedFromOtherEntity = false;
        result.resurrectedFromOtherEntity_ = false;
        return this;
      }
    }
    static NetMessageRequestDeathRelease() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestResurrectDecline : pb::GeneratedMessage<NetMessageRequestResurrectDecline, NetMessageRequestResurrectDecline.Builder> {
    private NetMessageRequestResurrectDecline() { }
    private static readonly NetMessageRequestResurrectDecline defaultInstance = new NetMessageRequestResurrectDecline().MakeReadOnly();
    private static readonly string[] _netMessageRequestResurrectDeclineFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestResurrectDeclineFieldTags = new uint[] {  };
    public static NetMessageRequestResurrectDecline DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestResurrectDecline DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestResurrectDecline ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectDecline__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestResurrectDecline, NetMessageRequestResurrectDecline.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectDecline__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestResurrectDeclineFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectDecline ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestResurrectDecline MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestResurrectDecline prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestResurrectDecline, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestResurrectDecline cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestResurrectDecline result;
      
      private NetMessageRequestResurrectDecline PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestResurrectDecline original = result;
          result = new NetMessageRequestResurrectDecline();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestResurrectDecline MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestResurrectDecline.Descriptor; }
      }
      
      public override NetMessageRequestResurrectDecline DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestResurrectDecline.DefaultInstance; }
      }
      
      public override NetMessageRequestResurrectDecline BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestResurrectDecline) {
          return MergeFrom((NetMessageRequestResurrectDecline) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestResurrectDecline other) {
        if (other == global::Gazillion.NetMessageRequestResurrectDecline.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestResurrectDeclineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestResurrectDeclineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestResurrectDecline() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestResurrectAvatar : pb::GeneratedMessage<NetMessageRequestResurrectAvatar, NetMessageRequestResurrectAvatar.Builder> {
    private NetMessageRequestResurrectAvatar() { }
    private static readonly NetMessageRequestResurrectAvatar defaultInstance = new NetMessageRequestResurrectAvatar().MakeReadOnly();
    private static readonly string[] _netMessageRequestResurrectAvatarFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageRequestResurrectAvatarFieldTags = new uint[] { 8 };
    public static NetMessageRequestResurrectAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestResurrectAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestResurrectAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestResurrectAvatar, NetMessageRequestResurrectAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestResurrectAvatar__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestResurrectAvatarFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestResurrectAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestResurrectAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestResurrectAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestResurrectAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestResurrectAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestResurrectAvatar result;
      
      private NetMessageRequestResurrectAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestResurrectAvatar original = result;
          result = new NetMessageRequestResurrectAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestResurrectAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestResurrectAvatar.Descriptor; }
      }
      
      public override NetMessageRequestResurrectAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestResurrectAvatar.DefaultInstance; }
      }
      
      public override NetMessageRequestResurrectAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestResurrectAvatar) {
          return MergeFrom((NetMessageRequestResurrectAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestResurrectAvatar other) {
        if (other == global::Gazillion.NetMessageRequestResurrectAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestResurrectAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestResurrectAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestResurrectAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReturnToHub : pb::GeneratedMessage<NetMessageReturnToHub, NetMessageReturnToHub.Builder> {
    private NetMessageReturnToHub() { }
    private static readonly NetMessageReturnToHub defaultInstance = new NetMessageReturnToHub().MakeReadOnly();
    private static readonly string[] _netMessageReturnToHubFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReturnToHubFieldTags = new uint[] {  };
    public static NetMessageReturnToHub DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReturnToHub DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReturnToHub ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReturnToHub__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReturnToHub, NetMessageReturnToHub.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReturnToHub__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReturnToHubFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReturnToHub ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReturnToHub ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReturnToHub ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReturnToHub MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReturnToHub prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReturnToHub, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReturnToHub cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReturnToHub result;
      
      private NetMessageReturnToHub PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReturnToHub original = result;
          result = new NetMessageReturnToHub();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReturnToHub MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReturnToHub.Descriptor; }
      }
      
      public override NetMessageReturnToHub DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReturnToHub.DefaultInstance; }
      }
      
      public override NetMessageReturnToHub BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReturnToHub) {
          return MergeFrom((NetMessageReturnToHub) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReturnToHub other) {
        if (other == global::Gazillion.NetMessageReturnToHub.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReturnToHubFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReturnToHubFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReturnToHub() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestStoryWarp : pb::GeneratedMessage<NetMessageRequestStoryWarp, NetMessageRequestStoryWarp.Builder> {
    private NetMessageRequestStoryWarp() { }
    private static readonly NetMessageRequestStoryWarp defaultInstance = new NetMessageRequestStoryWarp().MakeReadOnly();
    private static readonly string[] _netMessageRequestStoryWarpFieldNames = new string[] { "storyWarpNPC", "storyWarpPrototypeId" };
    private static readonly uint[] _netMessageRequestStoryWarpFieldTags = new uint[] { 16, 8 };
    public static NetMessageRequestStoryWarp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestStoryWarp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestStoryWarp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStoryWarp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestStoryWarp, NetMessageRequestStoryWarp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStoryWarp__FieldAccessorTable; }
    }
    
    public const int StoryWarpPrototypeIdFieldNumber = 1;
    private bool hasStoryWarpPrototypeId;
    private ulong storyWarpPrototypeId_;
    public bool HasStoryWarpPrototypeId {
      get { return hasStoryWarpPrototypeId; }
    }
    public ulong StoryWarpPrototypeId {
      get { return storyWarpPrototypeId_; }
    }
    
    public const int StoryWarpNPCFieldNumber = 2;
    private bool hasStoryWarpNPC;
    private ulong storyWarpNPC_;
    public bool HasStoryWarpNPC {
      get { return hasStoryWarpNPC; }
    }
    public ulong StoryWarpNPC {
      get { return storyWarpNPC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStoryWarpPrototypeId) return false;
        if (!hasStoryWarpNPC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestStoryWarpFieldNames;
      if (hasStoryWarpPrototypeId) {
        output.WriteUInt64(1, field_names[1], StoryWarpPrototypeId);
      }
      if (hasStoryWarpNPC) {
        output.WriteUInt64(2, field_names[0], StoryWarpNPC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStoryWarpPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, StoryWarpPrototypeId);
      }
      if (hasStoryWarpNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, StoryWarpNPC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStoryWarp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestStoryWarp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestStoryWarp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestStoryWarp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestStoryWarp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestStoryWarp result;
      
      private NetMessageRequestStoryWarp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestStoryWarp original = result;
          result = new NetMessageRequestStoryWarp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestStoryWarp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestStoryWarp.Descriptor; }
      }
      
      public override NetMessageRequestStoryWarp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestStoryWarp.DefaultInstance; }
      }
      
      public override NetMessageRequestStoryWarp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestStoryWarp) {
          return MergeFrom((NetMessageRequestStoryWarp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestStoryWarp other) {
        if (other == global::Gazillion.NetMessageRequestStoryWarp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStoryWarpPrototypeId) {
          StoryWarpPrototypeId = other.StoryWarpPrototypeId;
        }
        if (other.HasStoryWarpNPC) {
          StoryWarpNPC = other.StoryWarpNPC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestStoryWarpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestStoryWarpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStoryWarpPrototypeId = input.ReadUInt64(ref result.storyWarpPrototypeId_);
              break;
            }
            case 16: {
              result.hasStoryWarpNPC = input.ReadUInt64(ref result.storyWarpNPC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStoryWarpPrototypeId {
        get { return result.hasStoryWarpPrototypeId; }
      }
      public ulong StoryWarpPrototypeId {
        get { return result.StoryWarpPrototypeId; }
        set { SetStoryWarpPrototypeId(value); }
      }
      public Builder SetStoryWarpPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasStoryWarpPrototypeId = true;
        result.storyWarpPrototypeId_ = value;
        return this;
      }
      public Builder ClearStoryWarpPrototypeId() {
        PrepareBuilder();
        result.hasStoryWarpPrototypeId = false;
        result.storyWarpPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasStoryWarpNPC {
        get { return result.hasStoryWarpNPC; }
      }
      public ulong StoryWarpNPC {
        get { return result.StoryWarpNPC; }
        set { SetStoryWarpNPC(value); }
      }
      public Builder SetStoryWarpNPC(ulong value) {
        PrepareBuilder();
        result.hasStoryWarpNPC = true;
        result.storyWarpNPC_ = value;
        return this;
      }
      public Builder ClearStoryWarpNPC() {
        PrepareBuilder();
        result.hasStoryWarpNPC = false;
        result.storyWarpNPC_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestStoryWarp() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestMissionRewards : pb::GeneratedMessage<NetMessageRequestMissionRewards, NetMessageRequestMissionRewards.Builder> {
    private NetMessageRequestMissionRewards() { }
    private static readonly NetMessageRequestMissionRewards defaultInstance = new NetMessageRequestMissionRewards().MakeReadOnly();
    private static readonly string[] _netMessageRequestMissionRewardsFieldNames = new string[] { "conditionIndex", "entityId", "missionPrototypeId" };
    private static readonly uint[] _netMessageRequestMissionRewardsFieldTags = new uint[] { 16, 24, 8 };
    public static NetMessageRequestMissionRewards DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestMissionRewards DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestMissionRewards ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestMissionRewards__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestMissionRewards, NetMessageRequestMissionRewards.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestMissionRewards__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int ConditionIndexFieldNumber = 2;
    private bool hasConditionIndex;
    private uint conditionIndex_;
    public bool HasConditionIndex {
      get { return hasConditionIndex; }
    }
    public uint ConditionIndex {
      get { return conditionIndex_; }
    }
    
    public const int EntityIdFieldNumber = 3;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestMissionRewardsFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[2], MissionPrototypeId);
      }
      if (hasConditionIndex) {
        output.WriteUInt32(2, field_names[0], ConditionIndex);
      }
      if (hasEntityId) {
        output.WriteUInt64(3, field_names[1], EntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasConditionIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ConditionIndex);
      }
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, EntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestMissionRewards ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestMissionRewards ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestMissionRewards MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestMissionRewards prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestMissionRewards, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestMissionRewards cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestMissionRewards result;
      
      private NetMessageRequestMissionRewards PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestMissionRewards original = result;
          result = new NetMessageRequestMissionRewards();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestMissionRewards MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestMissionRewards.Descriptor; }
      }
      
      public override NetMessageRequestMissionRewards DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestMissionRewards.DefaultInstance; }
      }
      
      public override NetMessageRequestMissionRewards BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestMissionRewards) {
          return MergeFrom((NetMessageRequestMissionRewards) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestMissionRewards other) {
        if (other == global::Gazillion.NetMessageRequestMissionRewards.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasConditionIndex) {
          ConditionIndex = other.ConditionIndex;
        }
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestMissionRewardsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestMissionRewardsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasConditionIndex = input.ReadUInt32(ref result.conditionIndex_);
              break;
            }
            case 24: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasConditionIndex {
        get { return result.hasConditionIndex; }
      }
      public uint ConditionIndex {
        get { return result.ConditionIndex; }
        set { SetConditionIndex(value); }
      }
      public Builder SetConditionIndex(uint value) {
        PrepareBuilder();
        result.hasConditionIndex = true;
        result.conditionIndex_ = value;
        return this;
      }
      public Builder ClearConditionIndex() {
        PrepareBuilder();
        result.hasConditionIndex = false;
        result.conditionIndex_ = 0;
        return this;
      }
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestMissionRewards() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestRemoveAndKillControlledAgent : pb::GeneratedMessage<NetMessageRequestRemoveAndKillControlledAgent, NetMessageRequestRemoveAndKillControlledAgent.Builder> {
    private NetMessageRequestRemoveAndKillControlledAgent() { }
    private static readonly NetMessageRequestRemoveAndKillControlledAgent defaultInstance = new NetMessageRequestRemoveAndKillControlledAgent().MakeReadOnly();
    private static readonly string[] _netMessageRequestRemoveAndKillControlledAgentFieldNames = new string[] { "avatarId" };
    private static readonly uint[] _netMessageRequestRemoveAndKillControlledAgentFieldTags = new uint[] { 8 };
    public static NetMessageRequestRemoveAndKillControlledAgent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestRemoveAndKillControlledAgent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestRemoveAndKillControlledAgent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestRemoveAndKillControlledAgent, NetMessageRequestRemoveAndKillControlledAgent.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestRemoveAndKillControlledAgent__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestRemoveAndKillControlledAgentFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestRemoveAndKillControlledAgent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestRemoveAndKillControlledAgent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestRemoveAndKillControlledAgent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestRemoveAndKillControlledAgent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestRemoveAndKillControlledAgent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestRemoveAndKillControlledAgent result;
      
      private NetMessageRequestRemoveAndKillControlledAgent PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestRemoveAndKillControlledAgent original = result;
          result = new NetMessageRequestRemoveAndKillControlledAgent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestRemoveAndKillControlledAgent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent.Descriptor; }
      }
      
      public override NetMessageRequestRemoveAndKillControlledAgent DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent.DefaultInstance; }
      }
      
      public override NetMessageRequestRemoveAndKillControlledAgent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestRemoveAndKillControlledAgent) {
          return MergeFrom((NetMessageRequestRemoveAndKillControlledAgent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestRemoveAndKillControlledAgent other) {
        if (other == global::Gazillion.NetMessageRequestRemoveAndKillControlledAgent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestRemoveAndKillControlledAgentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestRemoveAndKillControlledAgentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestRemoveAndKillControlledAgent() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDamageMeter : pb::GeneratedMessage<NetMessageDamageMeter, NetMessageDamageMeter.Builder> {
    private NetMessageDamageMeter() { }
    private static readonly NetMessageDamageMeter defaultInstance = new NetMessageDamageMeter().MakeReadOnly();
    private static readonly string[] _netMessageDamageMeterFieldNames = new string[] { "avatarguid", "damagescore", "dps", "encounterguid", "numdeaths" };
    private static readonly uint[] _netMessageDamageMeterFieldTags = new uint[] { 16, 37, 29, 8, 40 };
    public static NetMessageDamageMeter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDamageMeter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDamageMeter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDamageMeter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDamageMeter, NetMessageDamageMeter.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDamageMeter__FieldAccessorTable; }
    }
    
    public const int EncounterguidFieldNumber = 1;
    private bool hasEncounterguid;
    private ulong encounterguid_;
    public bool HasEncounterguid {
      get { return hasEncounterguid; }
    }
    public ulong Encounterguid {
      get { return encounterguid_; }
    }
    
    public const int AvatarguidFieldNumber = 2;
    private bool hasAvatarguid;
    private ulong avatarguid_;
    public bool HasAvatarguid {
      get { return hasAvatarguid; }
    }
    public ulong Avatarguid {
      get { return avatarguid_; }
    }
    
    public const int DpsFieldNumber = 3;
    private bool hasDps;
    private float dps_;
    public bool HasDps {
      get { return hasDps; }
    }
    public float Dps {
      get { return dps_; }
    }
    
    public const int DamagescoreFieldNumber = 4;
    private bool hasDamagescore;
    private float damagescore_;
    public bool HasDamagescore {
      get { return hasDamagescore; }
    }
    public float Damagescore {
      get { return damagescore_; }
    }
    
    public const int NumdeathsFieldNumber = 5;
    private bool hasNumdeaths;
    private int numdeaths_;
    public bool HasNumdeaths {
      get { return hasNumdeaths; }
    }
    public int Numdeaths {
      get { return numdeaths_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEncounterguid) return false;
        if (!hasAvatarguid) return false;
        if (!hasDps) return false;
        if (!hasDamagescore) return false;
        if (!hasNumdeaths) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDamageMeterFieldNames;
      if (hasEncounterguid) {
        output.WriteUInt64(1, field_names[3], Encounterguid);
      }
      if (hasAvatarguid) {
        output.WriteUInt64(2, field_names[0], Avatarguid);
      }
      if (hasDps) {
        output.WriteFloat(3, field_names[2], Dps);
      }
      if (hasDamagescore) {
        output.WriteFloat(4, field_names[1], Damagescore);
      }
      if (hasNumdeaths) {
        output.WriteInt32(5, field_names[4], Numdeaths);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEncounterguid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Encounterguid);
      }
      if (hasAvatarguid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Avatarguid);
      }
      if (hasDps) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Dps);
      }
      if (hasDamagescore) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Damagescore);
      }
      if (hasNumdeaths) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Numdeaths);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDamageMeter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDamageMeter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageMeter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDamageMeter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDamageMeter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDamageMeter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDamageMeter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDamageMeter result;
      
      private NetMessageDamageMeter PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDamageMeter original = result;
          result = new NetMessageDamageMeter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDamageMeter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDamageMeter.Descriptor; }
      }
      
      public override NetMessageDamageMeter DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDamageMeter.DefaultInstance; }
      }
      
      public override NetMessageDamageMeter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDamageMeter) {
          return MergeFrom((NetMessageDamageMeter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDamageMeter other) {
        if (other == global::Gazillion.NetMessageDamageMeter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEncounterguid) {
          Encounterguid = other.Encounterguid;
        }
        if (other.HasAvatarguid) {
          Avatarguid = other.Avatarguid;
        }
        if (other.HasDps) {
          Dps = other.Dps;
        }
        if (other.HasDamagescore) {
          Damagescore = other.Damagescore;
        }
        if (other.HasNumdeaths) {
          Numdeaths = other.Numdeaths;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDamageMeterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDamageMeterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEncounterguid = input.ReadUInt64(ref result.encounterguid_);
              break;
            }
            case 16: {
              result.hasAvatarguid = input.ReadUInt64(ref result.avatarguid_);
              break;
            }
            case 29: {
              result.hasDps = input.ReadFloat(ref result.dps_);
              break;
            }
            case 37: {
              result.hasDamagescore = input.ReadFloat(ref result.damagescore_);
              break;
            }
            case 40: {
              result.hasNumdeaths = input.ReadInt32(ref result.numdeaths_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEncounterguid {
        get { return result.hasEncounterguid; }
      }
      public ulong Encounterguid {
        get { return result.Encounterguid; }
        set { SetEncounterguid(value); }
      }
      public Builder SetEncounterguid(ulong value) {
        PrepareBuilder();
        result.hasEncounterguid = true;
        result.encounterguid_ = value;
        return this;
      }
      public Builder ClearEncounterguid() {
        PrepareBuilder();
        result.hasEncounterguid = false;
        result.encounterguid_ = 0UL;
        return this;
      }
      
      public bool HasAvatarguid {
        get { return result.hasAvatarguid; }
      }
      public ulong Avatarguid {
        get { return result.Avatarguid; }
        set { SetAvatarguid(value); }
      }
      public Builder SetAvatarguid(ulong value) {
        PrepareBuilder();
        result.hasAvatarguid = true;
        result.avatarguid_ = value;
        return this;
      }
      public Builder ClearAvatarguid() {
        PrepareBuilder();
        result.hasAvatarguid = false;
        result.avatarguid_ = 0UL;
        return this;
      }
      
      public bool HasDps {
        get { return result.hasDps; }
      }
      public float Dps {
        get { return result.Dps; }
        set { SetDps(value); }
      }
      public Builder SetDps(float value) {
        PrepareBuilder();
        result.hasDps = true;
        result.dps_ = value;
        return this;
      }
      public Builder ClearDps() {
        PrepareBuilder();
        result.hasDps = false;
        result.dps_ = 0F;
        return this;
      }
      
      public bool HasDamagescore {
        get { return result.hasDamagescore; }
      }
      public float Damagescore {
        get { return result.Damagescore; }
        set { SetDamagescore(value); }
      }
      public Builder SetDamagescore(float value) {
        PrepareBuilder();
        result.hasDamagescore = true;
        result.damagescore_ = value;
        return this;
      }
      public Builder ClearDamagescore() {
        PrepareBuilder();
        result.hasDamagescore = false;
        result.damagescore_ = 0F;
        return this;
      }
      
      public bool HasNumdeaths {
        get { return result.hasNumdeaths; }
      }
      public int Numdeaths {
        get { return result.Numdeaths; }
        set { SetNumdeaths(value); }
      }
      public Builder SetNumdeaths(int value) {
        PrepareBuilder();
        result.hasNumdeaths = true;
        result.numdeaths_ = value;
        return this;
      }
      public Builder ClearNumdeaths() {
        PrepareBuilder();
        result.hasNumdeaths = false;
        result.numdeaths_ = 0;
        return this;
      }
    }
    static NetMessageDamageMeter() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInvitePlayer : pb::GeneratedMessage<NetMessageInvitePlayer, NetMessageInvitePlayer.Builder> {
    private NetMessageInvitePlayer() { }
    private static readonly NetMessageInvitePlayer defaultInstance = new NetMessageInvitePlayer().MakeReadOnly();
    private static readonly string[] _netMessageInvitePlayerFieldNames = new string[] { "inviteeEntityId", "inviteeName", "invitingPlayerPSNSessionId" };
    private static readonly uint[] _netMessageInvitePlayerFieldTags = new uint[] { 8, 18, 26 };
    public static NetMessageInvitePlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInvitePlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInvitePlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInvitePlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInvitePlayer, NetMessageInvitePlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageInvitePlayer__FieldAccessorTable; }
    }
    
    public const int InviteeEntityIdFieldNumber = 1;
    private bool hasInviteeEntityId;
    private ulong inviteeEntityId_;
    public bool HasInviteeEntityId {
      get { return hasInviteeEntityId; }
    }
    public ulong InviteeEntityId {
      get { return inviteeEntityId_; }
    }
    
    public const int InviteeNameFieldNumber = 2;
    private bool hasInviteeName;
    private string inviteeName_ = "";
    public bool HasInviteeName {
      get { return hasInviteeName; }
    }
    public string InviteeName {
      get { return inviteeName_; }
    }
    
    public const int InvitingPlayerPSNSessionIdFieldNumber = 3;
    private bool hasInvitingPlayerPSNSessionId;
    private string invitingPlayerPSNSessionId_ = "";
    public bool HasInvitingPlayerPSNSessionId {
      get { return hasInvitingPlayerPSNSessionId; }
    }
    public string InvitingPlayerPSNSessionId {
      get { return invitingPlayerPSNSessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInvitePlayerFieldNames;
      if (hasInviteeEntityId) {
        output.WriteUInt64(1, field_names[0], InviteeEntityId);
      }
      if (hasInviteeName) {
        output.WriteString(2, field_names[1], InviteeName);
      }
      if (hasInvitingPlayerPSNSessionId) {
        output.WriteString(3, field_names[2], InvitingPlayerPSNSessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInviteeEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InviteeEntityId);
      }
      if (hasInviteeName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, InviteeName);
      }
      if (hasInvitingPlayerPSNSessionId) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InvitingPlayerPSNSessionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInvitePlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInvitePlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInvitePlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInvitePlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInvitePlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInvitePlayer result;
      
      private NetMessageInvitePlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInvitePlayer original = result;
          result = new NetMessageInvitePlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInvitePlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInvitePlayer.Descriptor; }
      }
      
      public override NetMessageInvitePlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInvitePlayer.DefaultInstance; }
      }
      
      public override NetMessageInvitePlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInvitePlayer) {
          return MergeFrom((NetMessageInvitePlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInvitePlayer other) {
        if (other == global::Gazillion.NetMessageInvitePlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInviteeEntityId) {
          InviteeEntityId = other.InviteeEntityId;
        }
        if (other.HasInviteeName) {
          InviteeName = other.InviteeName;
        }
        if (other.HasInvitingPlayerPSNSessionId) {
          InvitingPlayerPSNSessionId = other.InvitingPlayerPSNSessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInvitePlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInvitePlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInviteeEntityId = input.ReadUInt64(ref result.inviteeEntityId_);
              break;
            }
            case 18: {
              result.hasInviteeName = input.ReadString(ref result.inviteeName_);
              break;
            }
            case 26: {
              result.hasInvitingPlayerPSNSessionId = input.ReadString(ref result.invitingPlayerPSNSessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInviteeEntityId {
        get { return result.hasInviteeEntityId; }
      }
      public ulong InviteeEntityId {
        get { return result.InviteeEntityId; }
        set { SetInviteeEntityId(value); }
      }
      public Builder SetInviteeEntityId(ulong value) {
        PrepareBuilder();
        result.hasInviteeEntityId = true;
        result.inviteeEntityId_ = value;
        return this;
      }
      public Builder ClearInviteeEntityId() {
        PrepareBuilder();
        result.hasInviteeEntityId = false;
        result.inviteeEntityId_ = 0UL;
        return this;
      }
      
      public bool HasInviteeName {
        get { return result.hasInviteeName; }
      }
      public string InviteeName {
        get { return result.InviteeName; }
        set { SetInviteeName(value); }
      }
      public Builder SetInviteeName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInviteeName = true;
        result.inviteeName_ = value;
        return this;
      }
      public Builder ClearInviteeName() {
        PrepareBuilder();
        result.hasInviteeName = false;
        result.inviteeName_ = "";
        return this;
      }
      
      public bool HasInvitingPlayerPSNSessionId {
        get { return result.hasInvitingPlayerPSNSessionId; }
      }
      public string InvitingPlayerPSNSessionId {
        get { return result.InvitingPlayerPSNSessionId; }
        set { SetInvitingPlayerPSNSessionId(value); }
      }
      public Builder SetInvitingPlayerPSNSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvitingPlayerPSNSessionId = true;
        result.invitingPlayerPSNSessionId_ = value;
        return this;
      }
      public Builder ClearInvitingPlayerPSNSessionId() {
        PrepareBuilder();
        result.hasInvitingPlayerPSNSessionId = false;
        result.invitingPlayerPSNSessionId_ = "";
        return this;
      }
    }
    static NetMessageInvitePlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestPartyJoinPortal : pb::GeneratedMessage<NetMessageRequestPartyJoinPortal, NetMessageRequestPartyJoinPortal.Builder> {
    private NetMessageRequestPartyJoinPortal() { }
    private static readonly NetMessageRequestPartyJoinPortal defaultInstance = new NetMessageRequestPartyJoinPortal().MakeReadOnly();
    private static readonly string[] _netMessageRequestPartyJoinPortalFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestPartyJoinPortalFieldTags = new uint[] {  };
    public static NetMessageRequestPartyJoinPortal DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestPartyJoinPortal DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestPartyJoinPortal ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPartyJoinPortal__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestPartyJoinPortal, NetMessageRequestPartyJoinPortal.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPartyJoinPortal__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestPartyJoinPortalFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPartyJoinPortal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestPartyJoinPortal MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestPartyJoinPortal prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestPartyJoinPortal, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestPartyJoinPortal cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestPartyJoinPortal result;
      
      private NetMessageRequestPartyJoinPortal PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestPartyJoinPortal original = result;
          result = new NetMessageRequestPartyJoinPortal();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestPartyJoinPortal MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestPartyJoinPortal.Descriptor; }
      }
      
      public override NetMessageRequestPartyJoinPortal DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestPartyJoinPortal.DefaultInstance; }
      }
      
      public override NetMessageRequestPartyJoinPortal BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestPartyJoinPortal) {
          return MergeFrom((NetMessageRequestPartyJoinPortal) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestPartyJoinPortal other) {
        if (other == global::Gazillion.NetMessageRequestPartyJoinPortal.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestPartyJoinPortalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestPartyJoinPortalFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestPartyJoinPortal() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDeclineGroupInvite : pb::GeneratedMessage<NetMessageDeclineGroupInvite, NetMessageDeclineGroupInvite.Builder> {
    private NetMessageDeclineGroupInvite() { }
    private static readonly NetMessageDeclineGroupInvite defaultInstance = new NetMessageDeclineGroupInvite().MakeReadOnly();
    private static readonly string[] _netMessageDeclineGroupInviteFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDeclineGroupInviteFieldTags = new uint[] {  };
    public static NetMessageDeclineGroupInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDeclineGroupInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDeclineGroupInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDeclineGroupInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDeclineGroupInvite, NetMessageDeclineGroupInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDeclineGroupInvite__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDeclineGroupInviteFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeclineGroupInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDeclineGroupInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDeclineGroupInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDeclineGroupInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDeclineGroupInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDeclineGroupInvite result;
      
      private NetMessageDeclineGroupInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDeclineGroupInvite original = result;
          result = new NetMessageDeclineGroupInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDeclineGroupInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDeclineGroupInvite.Descriptor; }
      }
      
      public override NetMessageDeclineGroupInvite DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDeclineGroupInvite.DefaultInstance; }
      }
      
      public override NetMessageDeclineGroupInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDeclineGroupInvite) {
          return MergeFrom((NetMessageDeclineGroupInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDeclineGroupInvite other) {
        if (other == global::Gazillion.NetMessageDeclineGroupInvite.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDeclineGroupInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDeclineGroupInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDeclineGroupInvite() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaveGroup : pb::GeneratedMessage<NetMessageLeaveGroup, NetMessageLeaveGroup.Builder> {
    private NetMessageLeaveGroup() { }
    private static readonly NetMessageLeaveGroup defaultInstance = new NetMessageLeaveGroup().MakeReadOnly();
    private static readonly string[] _netMessageLeaveGroupFieldNames = new string[] {  };
    private static readonly uint[] _netMessageLeaveGroupFieldTags = new uint[] {  };
    public static NetMessageLeaveGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaveGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaveGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaveGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaveGroup, NetMessageLeaveGroup.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaveGroup__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaveGroupFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaveGroup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaveGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaveGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaveGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaveGroup result;
      
      private NetMessageLeaveGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaveGroup original = result;
          result = new NetMessageLeaveGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaveGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaveGroup.Descriptor; }
      }
      
      public override NetMessageLeaveGroup DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaveGroup.DefaultInstance; }
      }
      
      public override NetMessageLeaveGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaveGroup) {
          return MergeFrom((NetMessageLeaveGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaveGroup other) {
        if (other == global::Gazillion.NetMessageLeaveGroup.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaveGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaveGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageLeaveGroup() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeGroupLeader : pb::GeneratedMessage<NetMessageChangeGroupLeader, NetMessageChangeGroupLeader.Builder> {
    private NetMessageChangeGroupLeader() { }
    private static readonly NetMessageChangeGroupLeader defaultInstance = new NetMessageChangeGroupLeader().MakeReadOnly();
    private static readonly string[] _netMessageChangeGroupLeaderFieldNames = new string[] { "targetMemberId" };
    private static readonly uint[] _netMessageChangeGroupLeaderFieldTags = new uint[] { 8 };
    public static NetMessageChangeGroupLeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeGroupLeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeGroupLeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeGroupLeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeGroupLeader, NetMessageChangeGroupLeader.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeGroupLeader__FieldAccessorTable; }
    }
    
    public const int TargetMemberIdFieldNumber = 1;
    private bool hasTargetMemberId;
    private ulong targetMemberId_;
    public bool HasTargetMemberId {
      get { return hasTargetMemberId; }
    }
    public ulong TargetMemberId {
      get { return targetMemberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeGroupLeaderFieldNames;
      if (hasTargetMemberId) {
        output.WriteUInt64(1, field_names[0], TargetMemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetMemberId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetMemberId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeGroupLeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeGroupLeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeGroupLeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeGroupLeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeGroupLeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeGroupLeader result;
      
      private NetMessageChangeGroupLeader PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeGroupLeader original = result;
          result = new NetMessageChangeGroupLeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeGroupLeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeGroupLeader.Descriptor; }
      }
      
      public override NetMessageChangeGroupLeader DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeGroupLeader.DefaultInstance; }
      }
      
      public override NetMessageChangeGroupLeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeGroupLeader) {
          return MergeFrom((NetMessageChangeGroupLeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeGroupLeader other) {
        if (other == global::Gazillion.NetMessageChangeGroupLeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetMemberId) {
          TargetMemberId = other.TargetMemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeGroupLeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeGroupLeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetMemberId = input.ReadUInt64(ref result.targetMemberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetMemberId {
        get { return result.hasTargetMemberId; }
      }
      public ulong TargetMemberId {
        get { return result.TargetMemberId; }
        set { SetTargetMemberId(value); }
      }
      public Builder SetTargetMemberId(ulong value) {
        PrepareBuilder();
        result.hasTargetMemberId = true;
        result.targetMemberId_ = value;
        return this;
      }
      public Builder ClearTargetMemberId() {
        PrepareBuilder();
        result.hasTargetMemberId = false;
        result.targetMemberId_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeGroupLeader() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBootPlayer : pb::GeneratedMessage<NetMessageBootPlayer, NetMessageBootPlayer.Builder> {
    private NetMessageBootPlayer() { }
    private static readonly NetMessageBootPlayer defaultInstance = new NetMessageBootPlayer().MakeReadOnly();
    private static readonly string[] _netMessageBootPlayerFieldNames = new string[] { "targetMemberId" };
    private static readonly uint[] _netMessageBootPlayerFieldTags = new uint[] { 8 };
    public static NetMessageBootPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBootPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBootPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBootPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBootPlayer, NetMessageBootPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBootPlayer__FieldAccessorTable; }
    }
    
    public const int TargetMemberIdFieldNumber = 1;
    private bool hasTargetMemberId;
    private ulong targetMemberId_;
    public bool HasTargetMemberId {
      get { return hasTargetMemberId; }
    }
    public ulong TargetMemberId {
      get { return targetMemberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBootPlayerFieldNames;
      if (hasTargetMemberId) {
        output.WriteUInt64(1, field_names[0], TargetMemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetMemberId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetMemberId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBootPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBootPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBootPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBootPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBootPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBootPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBootPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBootPlayer result;
      
      private NetMessageBootPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBootPlayer original = result;
          result = new NetMessageBootPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBootPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBootPlayer.Descriptor; }
      }
      
      public override NetMessageBootPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBootPlayer.DefaultInstance; }
      }
      
      public override NetMessageBootPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBootPlayer) {
          return MergeFrom((NetMessageBootPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBootPlayer other) {
        if (other == global::Gazillion.NetMessageBootPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetMemberId) {
          TargetMemberId = other.TargetMemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBootPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBootPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetMemberId = input.ReadUInt64(ref result.targetMemberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetMemberId {
        get { return result.hasTargetMemberId; }
      }
      public ulong TargetMemberId {
        get { return result.TargetMemberId; }
        set { SetTargetMemberId(value); }
      }
      public Builder SetTargetMemberId(ulong value) {
        PrepareBuilder();
        result.hasTargetMemberId = true;
        result.targetMemberId_ = value;
        return this;
      }
      public Builder ClearTargetMemberId() {
        PrepareBuilder();
        result.hasTargetMemberId = false;
        result.targetMemberId_ = 0UL;
        return this;
      }
    }
    static NetMessageBootPlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDisbandGroup : pb::GeneratedMessage<NetMessageDisbandGroup, NetMessageDisbandGroup.Builder> {
    private NetMessageDisbandGroup() { }
    private static readonly NetMessageDisbandGroup defaultInstance = new NetMessageDisbandGroup().MakeReadOnly();
    private static readonly string[] _netMessageDisbandGroupFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDisbandGroupFieldTags = new uint[] {  };
    public static NetMessageDisbandGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDisbandGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDisbandGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDisbandGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDisbandGroup, NetMessageDisbandGroup.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDisbandGroup__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDisbandGroupFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisbandGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDisbandGroup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDisbandGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDisbandGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDisbandGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDisbandGroup result;
      
      private NetMessageDisbandGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDisbandGroup original = result;
          result = new NetMessageDisbandGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDisbandGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDisbandGroup.Descriptor; }
      }
      
      public override NetMessageDisbandGroup DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDisbandGroup.DefaultInstance; }
      }
      
      public override NetMessageDisbandGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDisbandGroup) {
          return MergeFrom((NetMessageDisbandGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDisbandGroup other) {
        if (other == global::Gazillion.NetMessageDisbandGroup.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDisbandGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDisbandGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDisbandGroup() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGroupChangeType : pb::GeneratedMessage<NetMessageGroupChangeType, NetMessageGroupChangeType.Builder> {
    private NetMessageGroupChangeType() { }
    private static readonly NetMessageGroupChangeType defaultInstance = new NetMessageGroupChangeType().MakeReadOnly();
    private static readonly string[] _netMessageGroupChangeTypeFieldNames = new string[] { "type" };
    private static readonly uint[] _netMessageGroupChangeTypeFieldTags = new uint[] { 8 };
    public static NetMessageGroupChangeType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGroupChangeType DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGroupChangeType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGroupChangeType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGroupChangeType, NetMessageGroupChangeType.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGroupChangeType__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Gazillion.GroupType type_ = global::Gazillion.GroupType.GroupType_Invalid;
    public bool HasType {
      get { return hasType; }
    }
    public global::Gazillion.GroupType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGroupChangeTypeFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGroupChangeType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGroupChangeType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGroupChangeType MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGroupChangeType prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGroupChangeType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGroupChangeType cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGroupChangeType result;
      
      private NetMessageGroupChangeType PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGroupChangeType original = result;
          result = new NetMessageGroupChangeType();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGroupChangeType MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGroupChangeType.Descriptor; }
      }
      
      public override NetMessageGroupChangeType DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGroupChangeType.DefaultInstance; }
      }
      
      public override NetMessageGroupChangeType BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGroupChangeType) {
          return MergeFrom((NetMessageGroupChangeType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGroupChangeType other) {
        if (other == global::Gazillion.NetMessageGroupChangeType.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGroupChangeTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGroupChangeTypeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Gazillion.GroupType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Gazillion.GroupType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Gazillion.GroupType.GroupType_Invalid;
        return this;
      }
    }
    static NetMessageGroupChangeType() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGroupChangeTypeConfirmResponse : pb::GeneratedMessage<NetMessageGroupChangeTypeConfirmResponse, NetMessageGroupChangeTypeConfirmResponse.Builder> {
    private NetMessageGroupChangeTypeConfirmResponse() { }
    private static readonly NetMessageGroupChangeTypeConfirmResponse defaultInstance = new NetMessageGroupChangeTypeConfirmResponse().MakeReadOnly();
    private static readonly string[] _netMessageGroupChangeTypeConfirmResponseFieldNames = new string[] { "accept", "playerId" };
    private static readonly uint[] _netMessageGroupChangeTypeConfirmResponseFieldTags = new uint[] { 16, 8 };
    public static NetMessageGroupChangeTypeConfirmResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGroupChangeTypeConfirmResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGroupChangeTypeConfirmResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGroupChangeTypeConfirmResponse, NetMessageGroupChangeTypeConfirmResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGroupChangeTypeConfirmResponse__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int AcceptFieldNumber = 2;
    private bool hasAccept;
    private bool accept_;
    public bool HasAccept {
      get { return hasAccept; }
    }
    public bool Accept {
      get { return accept_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasAccept) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGroupChangeTypeConfirmResponseFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasAccept) {
        output.WriteBool(2, field_names[0], Accept);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasAccept) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Accept);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGroupChangeTypeConfirmResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGroupChangeTypeConfirmResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGroupChangeTypeConfirmResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGroupChangeTypeConfirmResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGroupChangeTypeConfirmResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGroupChangeTypeConfirmResponse result;
      
      private NetMessageGroupChangeTypeConfirmResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGroupChangeTypeConfirmResponse original = result;
          result = new NetMessageGroupChangeTypeConfirmResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGroupChangeTypeConfirmResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGroupChangeTypeConfirmResponse.Descriptor; }
      }
      
      public override NetMessageGroupChangeTypeConfirmResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGroupChangeTypeConfirmResponse.DefaultInstance; }
      }
      
      public override NetMessageGroupChangeTypeConfirmResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGroupChangeTypeConfirmResponse) {
          return MergeFrom((NetMessageGroupChangeTypeConfirmResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGroupChangeTypeConfirmResponse other) {
        if (other == global::Gazillion.NetMessageGroupChangeTypeConfirmResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasAccept) {
          Accept = other.Accept;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGroupChangeTypeConfirmResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGroupChangeTypeConfirmResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasAccept = input.ReadBool(ref result.accept_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasAccept {
        get { return result.hasAccept; }
      }
      public bool Accept {
        get { return result.Accept; }
        set { SetAccept(value); }
      }
      public Builder SetAccept(bool value) {
        PrepareBuilder();
        result.hasAccept = true;
        result.accept_ = value;
        return this;
      }
      public Builder ClearAccept() {
        PrepareBuilder();
        result.hasAccept = false;
        result.accept_ = false;
        return this;
      }
    }
    static NetMessageGroupChangeTypeConfirmResponse() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelInvite : pb::GeneratedMessage<NetMessageDuelInvite, NetMessageDuelInvite.Builder> {
    private NetMessageDuelInvite() { }
    private static readonly NetMessageDuelInvite defaultInstance = new NetMessageDuelInvite().MakeReadOnly();
    private static readonly string[] _netMessageDuelInviteFieldNames = new string[] { "challengerEntityId", "challengerName", "opponentEntityId", "opponentName" };
    private static readonly uint[] _netMessageDuelInviteFieldTags = new uint[] { 8, 18, 24, 34 };
    public static NetMessageDuelInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelInvite, NetMessageDuelInvite.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelInvite__FieldAccessorTable; }
    }
    
    public const int ChallengerEntityIdFieldNumber = 1;
    private bool hasChallengerEntityId;
    private ulong challengerEntityId_;
    public bool HasChallengerEntityId {
      get { return hasChallengerEntityId; }
    }
    public ulong ChallengerEntityId {
      get { return challengerEntityId_; }
    }
    
    public const int ChallengerNameFieldNumber = 2;
    private bool hasChallengerName;
    private string challengerName_ = "";
    public bool HasChallengerName {
      get { return hasChallengerName; }
    }
    public string ChallengerName {
      get { return challengerName_; }
    }
    
    public const int OpponentEntityIdFieldNumber = 3;
    private bool hasOpponentEntityId;
    private ulong opponentEntityId_;
    public bool HasOpponentEntityId {
      get { return hasOpponentEntityId; }
    }
    public ulong OpponentEntityId {
      get { return opponentEntityId_; }
    }
    
    public const int OpponentNameFieldNumber = 4;
    private bool hasOpponentName;
    private string opponentName_ = "";
    public bool HasOpponentName {
      get { return hasOpponentName; }
    }
    public string OpponentName {
      get { return opponentName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallengerEntityId) return false;
        if (!hasOpponentName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelInviteFieldNames;
      if (hasChallengerEntityId) {
        output.WriteUInt64(1, field_names[0], ChallengerEntityId);
      }
      if (hasChallengerName) {
        output.WriteString(2, field_names[1], ChallengerName);
      }
      if (hasOpponentEntityId) {
        output.WriteUInt64(3, field_names[2], OpponentEntityId);
      }
      if (hasOpponentName) {
        output.WriteString(4, field_names[3], OpponentName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChallengerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChallengerEntityId);
      }
      if (hasChallengerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ChallengerName);
      }
      if (hasOpponentEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, OpponentEntityId);
      }
      if (hasOpponentName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OpponentName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelInvite result;
      
      private NetMessageDuelInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelInvite original = result;
          result = new NetMessageDuelInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelInvite.Descriptor; }
      }
      
      public override NetMessageDuelInvite DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelInvite.DefaultInstance; }
      }
      
      public override NetMessageDuelInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelInvite) {
          return MergeFrom((NetMessageDuelInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelInvite other) {
        if (other == global::Gazillion.NetMessageDuelInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengerEntityId) {
          ChallengerEntityId = other.ChallengerEntityId;
        }
        if (other.HasChallengerName) {
          ChallengerName = other.ChallengerName;
        }
        if (other.HasOpponentEntityId) {
          OpponentEntityId = other.OpponentEntityId;
        }
        if (other.HasOpponentName) {
          OpponentName = other.OpponentName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengerEntityId = input.ReadUInt64(ref result.challengerEntityId_);
              break;
            }
            case 18: {
              result.hasChallengerName = input.ReadString(ref result.challengerName_);
              break;
            }
            case 24: {
              result.hasOpponentEntityId = input.ReadUInt64(ref result.opponentEntityId_);
              break;
            }
            case 34: {
              result.hasOpponentName = input.ReadString(ref result.opponentName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengerEntityId {
        get { return result.hasChallengerEntityId; }
      }
      public ulong ChallengerEntityId {
        get { return result.ChallengerEntityId; }
        set { SetChallengerEntityId(value); }
      }
      public Builder SetChallengerEntityId(ulong value) {
        PrepareBuilder();
        result.hasChallengerEntityId = true;
        result.challengerEntityId_ = value;
        return this;
      }
      public Builder ClearChallengerEntityId() {
        PrepareBuilder();
        result.hasChallengerEntityId = false;
        result.challengerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasChallengerName {
        get { return result.hasChallengerName; }
      }
      public string ChallengerName {
        get { return result.ChallengerName; }
        set { SetChallengerName(value); }
      }
      public Builder SetChallengerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengerName = true;
        result.challengerName_ = value;
        return this;
      }
      public Builder ClearChallengerName() {
        PrepareBuilder();
        result.hasChallengerName = false;
        result.challengerName_ = "";
        return this;
      }
      
      public bool HasOpponentEntityId {
        get { return result.hasOpponentEntityId; }
      }
      public ulong OpponentEntityId {
        get { return result.OpponentEntityId; }
        set { SetOpponentEntityId(value); }
      }
      public Builder SetOpponentEntityId(ulong value) {
        PrepareBuilder();
        result.hasOpponentEntityId = true;
        result.opponentEntityId_ = value;
        return this;
      }
      public Builder ClearOpponentEntityId() {
        PrepareBuilder();
        result.hasOpponentEntityId = false;
        result.opponentEntityId_ = 0UL;
        return this;
      }
      
      public bool HasOpponentName {
        get { return result.hasOpponentName; }
      }
      public string OpponentName {
        get { return result.OpponentName; }
        set { SetOpponentName(value); }
      }
      public Builder SetOpponentName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpponentName = true;
        result.opponentName_ = value;
        return this;
      }
      public Builder ClearOpponentName() {
        PrepareBuilder();
        result.hasOpponentName = false;
        result.opponentName_ = "";
        return this;
      }
    }
    static NetMessageDuelInvite() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelAccept : pb::GeneratedMessage<NetMessageDuelAccept, NetMessageDuelAccept.Builder> {
    private NetMessageDuelAccept() { }
    private static readonly NetMessageDuelAccept defaultInstance = new NetMessageDuelAccept().MakeReadOnly();
    private static readonly string[] _netMessageDuelAcceptFieldNames = new string[] { "challengedEntityId", "challengedName" };
    private static readonly uint[] _netMessageDuelAcceptFieldTags = new uint[] { 8, 18 };
    public static NetMessageDuelAccept DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelAccept DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelAccept ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelAccept__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelAccept, NetMessageDuelAccept.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelAccept__FieldAccessorTable; }
    }
    
    public const int ChallengedEntityIdFieldNumber = 1;
    private bool hasChallengedEntityId;
    private ulong challengedEntityId_;
    public bool HasChallengedEntityId {
      get { return hasChallengedEntityId; }
    }
    public ulong ChallengedEntityId {
      get { return challengedEntityId_; }
    }
    
    public const int ChallengedNameFieldNumber = 2;
    private bool hasChallengedName;
    private string challengedName_ = "";
    public bool HasChallengedName {
      get { return hasChallengedName; }
    }
    public string ChallengedName {
      get { return challengedName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallengedEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelAcceptFieldNames;
      if (hasChallengedEntityId) {
        output.WriteUInt64(1, field_names[0], ChallengedEntityId);
      }
      if (hasChallengedName) {
        output.WriteString(2, field_names[1], ChallengedName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChallengedEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChallengedEntityId);
      }
      if (hasChallengedName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ChallengedName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelAccept ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelAccept ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelAccept ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelAccept MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelAccept prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelAccept, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelAccept cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelAccept result;
      
      private NetMessageDuelAccept PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelAccept original = result;
          result = new NetMessageDuelAccept();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelAccept MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelAccept.Descriptor; }
      }
      
      public override NetMessageDuelAccept DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelAccept.DefaultInstance; }
      }
      
      public override NetMessageDuelAccept BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelAccept) {
          return MergeFrom((NetMessageDuelAccept) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelAccept other) {
        if (other == global::Gazillion.NetMessageDuelAccept.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengedEntityId) {
          ChallengedEntityId = other.ChallengedEntityId;
        }
        if (other.HasChallengedName) {
          ChallengedName = other.ChallengedName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelAcceptFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelAcceptFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengedEntityId = input.ReadUInt64(ref result.challengedEntityId_);
              break;
            }
            case 18: {
              result.hasChallengedName = input.ReadString(ref result.challengedName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengedEntityId {
        get { return result.hasChallengedEntityId; }
      }
      public ulong ChallengedEntityId {
        get { return result.ChallengedEntityId; }
        set { SetChallengedEntityId(value); }
      }
      public Builder SetChallengedEntityId(ulong value) {
        PrepareBuilder();
        result.hasChallengedEntityId = true;
        result.challengedEntityId_ = value;
        return this;
      }
      public Builder ClearChallengedEntityId() {
        PrepareBuilder();
        result.hasChallengedEntityId = false;
        result.challengedEntityId_ = 0UL;
        return this;
      }
      
      public bool HasChallengedName {
        get { return result.hasChallengedName; }
      }
      public string ChallengedName {
        get { return result.ChallengedName; }
        set { SetChallengedName(value); }
      }
      public Builder SetChallengedName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengedName = true;
        result.challengedName_ = value;
        return this;
      }
      public Builder ClearChallengedName() {
        PrepareBuilder();
        result.hasChallengedName = false;
        result.challengedName_ = "";
        return this;
      }
    }
    static NetMessageDuelAccept() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDuelCancel : pb::GeneratedMessage<NetMessageDuelCancel, NetMessageDuelCancel.Builder> {
    private NetMessageDuelCancel() { }
    private static readonly NetMessageDuelCancel defaultInstance = new NetMessageDuelCancel().MakeReadOnly();
    private static readonly string[] _netMessageDuelCancelFieldNames = new string[] { "cancellingEntityId", "cancellingName" };
    private static readonly uint[] _netMessageDuelCancelFieldTags = new uint[] { 8, 18 };
    public static NetMessageDuelCancel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDuelCancel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDuelCancel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelCancel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDuelCancel, NetMessageDuelCancel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDuelCancel__FieldAccessorTable; }
    }
    
    public const int CancellingEntityIdFieldNumber = 1;
    private bool hasCancellingEntityId;
    private ulong cancellingEntityId_;
    public bool HasCancellingEntityId {
      get { return hasCancellingEntityId; }
    }
    public ulong CancellingEntityId {
      get { return cancellingEntityId_; }
    }
    
    public const int CancellingNameFieldNumber = 2;
    private bool hasCancellingName;
    private string cancellingName_ = "";
    public bool HasCancellingName {
      get { return hasCancellingName; }
    }
    public string CancellingName {
      get { return cancellingName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCancellingEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDuelCancelFieldNames;
      if (hasCancellingEntityId) {
        output.WriteUInt64(1, field_names[0], CancellingEntityId);
      }
      if (hasCancellingName) {
        output.WriteString(2, field_names[1], CancellingName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCancellingEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CancellingEntityId);
      }
      if (hasCancellingName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CancellingName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDuelCancel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDuelCancel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDuelCancel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDuelCancel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDuelCancel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDuelCancel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDuelCancel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDuelCancel result;
      
      private NetMessageDuelCancel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDuelCancel original = result;
          result = new NetMessageDuelCancel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDuelCancel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDuelCancel.Descriptor; }
      }
      
      public override NetMessageDuelCancel DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDuelCancel.DefaultInstance; }
      }
      
      public override NetMessageDuelCancel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDuelCancel) {
          return MergeFrom((NetMessageDuelCancel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDuelCancel other) {
        if (other == global::Gazillion.NetMessageDuelCancel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCancellingEntityId) {
          CancellingEntityId = other.CancellingEntityId;
        }
        if (other.HasCancellingName) {
          CancellingName = other.CancellingName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDuelCancelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDuelCancelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCancellingEntityId = input.ReadUInt64(ref result.cancellingEntityId_);
              break;
            }
            case 18: {
              result.hasCancellingName = input.ReadString(ref result.cancellingName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCancellingEntityId {
        get { return result.hasCancellingEntityId; }
      }
      public ulong CancellingEntityId {
        get { return result.CancellingEntityId; }
        set { SetCancellingEntityId(value); }
      }
      public Builder SetCancellingEntityId(ulong value) {
        PrepareBuilder();
        result.hasCancellingEntityId = true;
        result.cancellingEntityId_ = value;
        return this;
      }
      public Builder ClearCancellingEntityId() {
        PrepareBuilder();
        result.hasCancellingEntityId = false;
        result.cancellingEntityId_ = 0UL;
        return this;
      }
      
      public bool HasCancellingName {
        get { return result.hasCancellingName; }
      }
      public string CancellingName {
        get { return result.CancellingName; }
        set { SetCancellingName(value); }
      }
      public Builder SetCancellingName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCancellingName = true;
        result.cancellingName_ = value;
        return this;
      }
      public Builder ClearCancellingName() {
        PrepareBuilder();
        result.hasCancellingName = false;
        result.cancellingName_ = "";
        return this;
      }
    }
    static NetMessageDuelCancel() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameUpdateNotification : pb::GeneratedMessage<NetMessageMetaGameUpdateNotification, NetMessageMetaGameUpdateNotification.Builder> {
    private NetMessageMetaGameUpdateNotification() { }
    private static readonly NetMessageMetaGameUpdateNotification defaultInstance = new NetMessageMetaGameUpdateNotification().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameUpdateNotificationFieldNames = new string[] { "metaGameEntityId" };
    private static readonly uint[] _netMessageMetaGameUpdateNotificationFieldTags = new uint[] { 8 };
    public static NetMessageMetaGameUpdateNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameUpdateNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameUpdateNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMetaGameUpdateNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameUpdateNotification, NetMessageMetaGameUpdateNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageMetaGameUpdateNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameUpdateNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameUpdateNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameUpdateNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameUpdateNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameUpdateNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameUpdateNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameUpdateNotification result;
      
      private NetMessageMetaGameUpdateNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameUpdateNotification original = result;
          result = new NetMessageMetaGameUpdateNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameUpdateNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameUpdateNotification.Descriptor; }
      }
      
      public override NetMessageMetaGameUpdateNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameUpdateNotification.DefaultInstance; }
      }
      
      public override NetMessageMetaGameUpdateNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameUpdateNotification) {
          return MergeFrom((NetMessageMetaGameUpdateNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameUpdateNotification other) {
        if (other == global::Gazillion.NetMessageMetaGameUpdateNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameUpdateNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameUpdateNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageMetaGameUpdateNotification() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChat : pb::GeneratedMessage<NetMessageChat, NetMessageChat.Builder> {
    private NetMessageChat() { }
    private static readonly NetMessageChat defaultInstance = new NetMessageChat().MakeReadOnly();
    private static readonly string[] _netMessageChatFieldNames = new string[] { "roomType", "theMessage" };
    private static readonly uint[] _netMessageChatFieldTags = new uint[] { 8, 18 };
    public static NetMessageChat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChat, NetMessageChat.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChat__FieldAccessorTable; }
    }
    
    public const int RoomTypeFieldNumber = 1;
    private bool hasRoomType;
    private global::Gazillion.ChatRoomTypes roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public global::Gazillion.ChatRoomTypes RoomType {
      get { return roomType_; }
    }
    
    public const int TheMessageFieldNumber = 2;
    private bool hasTheMessage;
    private global::Gazillion.ChatMessage theMessage_;
    public bool HasTheMessage {
      get { return hasTheMessage; }
    }
    public global::Gazillion.ChatMessage TheMessage {
      get { return theMessage_ ?? global::Gazillion.ChatMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomType) return false;
        if (!hasTheMessage) return false;
        if (!TheMessage.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatFieldNames;
      if (hasRoomType) {
        output.WriteEnum(1, field_names[0], (int) RoomType, RoomType);
      }
      if (hasTheMessage) {
        output.WriteMessage(2, field_names[1], TheMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) RoomType);
      }
      if (hasTheMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TheMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChat result;
      
      private NetMessageChat PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChat original = result;
          result = new NetMessageChat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChat.Descriptor; }
      }
      
      public override NetMessageChat DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChat.DefaultInstance; }
      }
      
      public override NetMessageChat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChat) {
          return MergeFrom((NetMessageChat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChat other) {
        if (other == global::Gazillion.NetMessageChat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        if (other.HasTheMessage) {
          MergeTheMessage(other.TheMessage);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.roomType_, out unknown)) {
                result.hasRoomType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Gazillion.ChatMessage.Builder subBuilder = global::Gazillion.ChatMessage.CreateBuilder();
              if (result.hasTheMessage) {
                subBuilder.MergeFrom(TheMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TheMessage = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomType {
       get { return result.hasRoomType; }
      }
      public global::Gazillion.ChatRoomTypes RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(global::Gazillion.ChatRoomTypes value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
        return this;
      }
      
      public bool HasTheMessage {
       get { return result.hasTheMessage; }
      }
      public global::Gazillion.ChatMessage TheMessage {
        get { return result.TheMessage; }
        set { SetTheMessage(value); }
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = value;
        return this;
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTheMessage &&
            result.theMessage_ != global::Gazillion.ChatMessage.DefaultInstance) {
            result.theMessage_ = global::Gazillion.ChatMessage.CreateBuilder(result.theMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.theMessage_ = value;
        }
        result.hasTheMessage = true;
        return this;
      }
      public Builder ClearTheMessage() {
        PrepareBuilder();
        result.hasTheMessage = false;
        result.theMessage_ = null;
        return this;
      }
    }
    static NetMessageChat() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTell : pb::GeneratedMessage<NetMessageTell, NetMessageTell.Builder> {
    private NetMessageTell() { }
    private static readonly NetMessageTell defaultInstance = new NetMessageTell().MakeReadOnly();
    private static readonly string[] _netMessageTellFieldNames = new string[] { "targetPlayerName", "theMessage" };
    private static readonly uint[] _netMessageTellFieldTags = new uint[] { 10, 18 };
    public static NetMessageTell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTell, NetMessageTell.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTell__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int TheMessageFieldNumber = 2;
    private bool hasTheMessage;
    private global::Gazillion.ChatMessage theMessage_;
    public bool HasTheMessage {
      get { return hasTheMessage; }
    }
    public global::Gazillion.ChatMessage TheMessage {
      get { return theMessage_ ?? global::Gazillion.ChatMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        if (!hasTheMessage) return false;
        if (!TheMessage.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTellFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[0], TargetPlayerName);
      }
      if (hasTheMessage) {
        output.WriteMessage(2, field_names[1], TheMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasTheMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TheMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTell result;
      
      private NetMessageTell PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTell original = result;
          result = new NetMessageTell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTell.Descriptor; }
      }
      
      public override NetMessageTell DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTell.DefaultInstance; }
      }
      
      public override NetMessageTell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTell) {
          return MergeFrom((NetMessageTell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTell other) {
        if (other == global::Gazillion.NetMessageTell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasTheMessage) {
          MergeTheMessage(other.TheMessage);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 18: {
              global::Gazillion.ChatMessage.Builder subBuilder = global::Gazillion.ChatMessage.CreateBuilder();
              if (result.hasTheMessage) {
                subBuilder.MergeFrom(TheMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TheMessage = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasTheMessage {
       get { return result.hasTheMessage; }
      }
      public global::Gazillion.ChatMessage TheMessage {
        get { return result.TheMessage; }
        set { SetTheMessage(value); }
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = value;
        return this;
      }
      public Builder SetTheMessage(global::Gazillion.ChatMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTheMessage = true;
        result.theMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTheMessage(global::Gazillion.ChatMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTheMessage &&
            result.theMessage_ != global::Gazillion.ChatMessage.DefaultInstance) {
            result.theMessage_ = global::Gazillion.ChatMessage.CreateBuilder(result.theMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.theMessage_ = value;
        }
        result.hasTheMessage = true;
        return this;
      }
      public Builder ClearTheMessage() {
        PrepareBuilder();
        result.hasTheMessage = false;
        result.theMessage_ = null;
        return this;
      }
    }
    static NetMessageTell() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReportPlayer : pb::GeneratedMessage<NetMessageReportPlayer, NetMessageReportPlayer.Builder> {
    private NetMessageReportPlayer() { }
    private static readonly NetMessageReportPlayer defaultInstance = new NetMessageReportPlayer().MakeReadOnly();
    private static readonly string[] _netMessageReportPlayerFieldNames = new string[] { "reason", "targetPlayerName" };
    private static readonly uint[] _netMessageReportPlayerFieldTags = new uint[] { 18, 10 };
    public static NetMessageReportPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReportPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReportPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReportPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReportPlayer, NetMessageReportPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageReportPlayer__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        if (!hasReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReportPlayerFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[1], TargetPlayerName);
      }
      if (hasReason) {
        output.WriteString(2, field_names[0], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReportPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReportPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReportPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReportPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReportPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReportPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReportPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReportPlayer result;
      
      private NetMessageReportPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReportPlayer original = result;
          result = new NetMessageReportPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReportPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReportPlayer.Descriptor; }
      }
      
      public override NetMessageReportPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReportPlayer.DefaultInstance; }
      }
      
      public override NetMessageReportPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReportPlayer) {
          return MergeFrom((NetMessageReportPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReportPlayer other) {
        if (other == global::Gazillion.NetMessageReportPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReportPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReportPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 18: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static NetMessageReportPlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatBanVote : pb::GeneratedMessage<NetMessageChatBanVote, NetMessageChatBanVote.Builder> {
    private NetMessageChatBanVote() { }
    private static readonly NetMessageChatBanVote defaultInstance = new NetMessageChatBanVote().MakeReadOnly();
    private static readonly string[] _netMessageChatBanVoteFieldNames = new string[] { "reason", "targetPlayerName" };
    private static readonly uint[] _netMessageChatBanVoteFieldTags = new uint[] { 18, 10 };
    public static NetMessageChatBanVote DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatBanVote DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatBanVote ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChatBanVote__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatBanVote, NetMessageChatBanVote.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChatBanVote__FieldAccessorTable; }
    }
    
    public const int TargetPlayerNameFieldNumber = 1;
    private bool hasTargetPlayerName;
    private string targetPlayerName_ = "";
    public bool HasTargetPlayerName {
      get { return hasTargetPlayerName; }
    }
    public string TargetPlayerName {
      get { return targetPlayerName_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatBanVoteFieldNames;
      if (hasTargetPlayerName) {
        output.WriteString(1, field_names[1], TargetPlayerName);
      }
      if (hasReason) {
        output.WriteString(2, field_names[0], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TargetPlayerName);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatBanVote ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatBanVote ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatBanVote ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatBanVote MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatBanVote prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatBanVote, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatBanVote cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatBanVote result;
      
      private NetMessageChatBanVote PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatBanVote original = result;
          result = new NetMessageChatBanVote();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatBanVote MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatBanVote.Descriptor; }
      }
      
      public override NetMessageChatBanVote DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatBanVote.DefaultInstance; }
      }
      
      public override NetMessageChatBanVote BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatBanVote) {
          return MergeFrom((NetMessageChatBanVote) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatBanVote other) {
        if (other == global::Gazillion.NetMessageChatBanVote.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetPlayerName) {
          TargetPlayerName = other.TargetPlayerName;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatBanVoteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatBanVoteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTargetPlayerName = input.ReadString(ref result.targetPlayerName_);
              break;
            }
            case 18: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetPlayerName {
        get { return result.hasTargetPlayerName; }
      }
      public string TargetPlayerName {
        get { return result.TargetPlayerName; }
        set { SetTargetPlayerName(value); }
      }
      public Builder SetTargetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPlayerName = true;
        result.targetPlayerName_ = value;
        return this;
      }
      public Builder ClearTargetPlayerName() {
        PrepareBuilder();
        result.hasTargetPlayerName = false;
        result.targetPlayerName_ = "";
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static NetMessageChatBanVote() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCatalog : pb::GeneratedMessage<NetMessageGetCatalog, NetMessageGetCatalog.Builder> {
    private NetMessageGetCatalog() { }
    private static readonly NetMessageGetCatalog defaultInstance = new NetMessageGetCatalog().MakeReadOnly();
    private static readonly string[] _netMessageGetCatalogFieldNames = new string[] { "itemPrototypeRuntimeId", "localeid", "timestamp_microseconds", "timestamp_seconds" };
    private static readonly uint[] _netMessageGetCatalogFieldTags = new uint[] { 8, 34, 40, 24 };
    public static NetMessageGetCatalog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCatalog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCatalog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCatalog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCatalog, NetMessageGetCatalog.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCatalog__FieldAccessorTable; }
    }
    
    public const int ItemPrototypeRuntimeIdFieldNumber = 1;
    private bool hasItemPrototypeRuntimeId;
    private ulong itemPrototypeRuntimeId_;
    public bool HasItemPrototypeRuntimeId {
      get { return hasItemPrototypeRuntimeId; }
    }
    public ulong ItemPrototypeRuntimeId {
      get { return itemPrototypeRuntimeId_; }
    }
    
    public const int TimestampSecondsFieldNumber = 3;
    private bool hasTimestampSeconds;
    private long timestampSeconds_;
    public bool HasTimestampSeconds {
      get { return hasTimestampSeconds; }
    }
    public long TimestampSeconds {
      get { return timestampSeconds_; }
    }
    
    public const int TimestampMicrosecondsFieldNumber = 5;
    private bool hasTimestampMicroseconds;
    private long timestampMicroseconds_;
    public bool HasTimestampMicroseconds {
      get { return hasTimestampMicroseconds; }
    }
    public long TimestampMicroseconds {
      get { return timestampMicroseconds_; }
    }
    
    public const int LocaleidFieldNumber = 4;
    private bool hasLocaleid;
    private string localeid_ = "en_us";
    public bool HasLocaleid {
      get { return hasLocaleid; }
    }
    public string Localeid {
      get { return localeid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCatalogFieldNames;
      if (hasItemPrototypeRuntimeId) {
        output.WriteUInt64(1, field_names[0], ItemPrototypeRuntimeId);
      }
      if (hasTimestampSeconds) {
        output.WriteInt64(3, field_names[3], TimestampSeconds);
      }
      if (hasLocaleid) {
        output.WriteString(4, field_names[1], Localeid);
      }
      if (hasTimestampMicroseconds) {
        output.WriteInt64(5, field_names[2], TimestampMicroseconds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemPrototypeRuntimeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemPrototypeRuntimeId);
      }
      if (hasTimestampSeconds) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, TimestampSeconds);
      }
      if (hasTimestampMicroseconds) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, TimestampMicroseconds);
      }
      if (hasLocaleid) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Localeid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCatalog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCatalog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCatalog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCatalog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCatalog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCatalog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCatalog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCatalog result;
      
      private NetMessageGetCatalog PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCatalog original = result;
          result = new NetMessageGetCatalog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCatalog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCatalog.Descriptor; }
      }
      
      public override NetMessageGetCatalog DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCatalog.DefaultInstance; }
      }
      
      public override NetMessageGetCatalog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCatalog) {
          return MergeFrom((NetMessageGetCatalog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCatalog other) {
        if (other == global::Gazillion.NetMessageGetCatalog.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemPrototypeRuntimeId) {
          ItemPrototypeRuntimeId = other.ItemPrototypeRuntimeId;
        }
        if (other.HasTimestampSeconds) {
          TimestampSeconds = other.TimestampSeconds;
        }
        if (other.HasTimestampMicroseconds) {
          TimestampMicroseconds = other.TimestampMicroseconds;
        }
        if (other.HasLocaleid) {
          Localeid = other.Localeid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCatalogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCatalogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemPrototypeRuntimeId = input.ReadUInt64(ref result.itemPrototypeRuntimeId_);
              break;
            }
            case 24: {
              result.hasTimestampSeconds = input.ReadInt64(ref result.timestampSeconds_);
              break;
            }
            case 34: {
              result.hasLocaleid = input.ReadString(ref result.localeid_);
              break;
            }
            case 40: {
              result.hasTimestampMicroseconds = input.ReadInt64(ref result.timestampMicroseconds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemPrototypeRuntimeId {
        get { return result.hasItemPrototypeRuntimeId; }
      }
      public ulong ItemPrototypeRuntimeId {
        get { return result.ItemPrototypeRuntimeId; }
        set { SetItemPrototypeRuntimeId(value); }
      }
      public Builder SetItemPrototypeRuntimeId(ulong value) {
        PrepareBuilder();
        result.hasItemPrototypeRuntimeId = true;
        result.itemPrototypeRuntimeId_ = value;
        return this;
      }
      public Builder ClearItemPrototypeRuntimeId() {
        PrepareBuilder();
        result.hasItemPrototypeRuntimeId = false;
        result.itemPrototypeRuntimeId_ = 0UL;
        return this;
      }
      
      public bool HasTimestampSeconds {
        get { return result.hasTimestampSeconds; }
      }
      public long TimestampSeconds {
        get { return result.TimestampSeconds; }
        set { SetTimestampSeconds(value); }
      }
      public Builder SetTimestampSeconds(long value) {
        PrepareBuilder();
        result.hasTimestampSeconds = true;
        result.timestampSeconds_ = value;
        return this;
      }
      public Builder ClearTimestampSeconds() {
        PrepareBuilder();
        result.hasTimestampSeconds = false;
        result.timestampSeconds_ = 0L;
        return this;
      }
      
      public bool HasTimestampMicroseconds {
        get { return result.hasTimestampMicroseconds; }
      }
      public long TimestampMicroseconds {
        get { return result.TimestampMicroseconds; }
        set { SetTimestampMicroseconds(value); }
      }
      public Builder SetTimestampMicroseconds(long value) {
        PrepareBuilder();
        result.hasTimestampMicroseconds = true;
        result.timestampMicroseconds_ = value;
        return this;
      }
      public Builder ClearTimestampMicroseconds() {
        PrepareBuilder();
        result.hasTimestampMicroseconds = false;
        result.timestampMicroseconds_ = 0L;
        return this;
      }
      
      public bool HasLocaleid {
        get { return result.hasLocaleid; }
      }
      public string Localeid {
        get { return result.Localeid; }
        set { SetLocaleid(value); }
      }
      public Builder SetLocaleid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocaleid = true;
        result.localeid_ = value;
        return this;
      }
      public Builder ClearLocaleid() {
        PrepareBuilder();
        result.hasLocaleid = false;
        result.localeid_ = "en_us";
        return this;
      }
    }
    static NetMessageGetCatalog() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCurrencyBalance : pb::GeneratedMessage<NetMessageGetCurrencyBalance, NetMessageGetCurrencyBalance.Builder> {
    private NetMessageGetCurrencyBalance() { }
    private static readonly NetMessageGetCurrencyBalance defaultInstance = new NetMessageGetCurrencyBalance().MakeReadOnly();
    private static readonly string[] _netMessageGetCurrencyBalanceFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGetCurrencyBalanceFieldTags = new uint[] {  };
    public static NetMessageGetCurrencyBalance DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCurrencyBalance DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCurrencyBalance ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCurrencyBalance__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCurrencyBalance, NetMessageGetCurrencyBalance.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetCurrencyBalance__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCurrencyBalanceFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCurrencyBalance MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCurrencyBalance prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCurrencyBalance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCurrencyBalance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCurrencyBalance result;
      
      private NetMessageGetCurrencyBalance PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCurrencyBalance original = result;
          result = new NetMessageGetCurrencyBalance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCurrencyBalance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalance.Descriptor; }
      }
      
      public override NetMessageGetCurrencyBalance DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalance.DefaultInstance; }
      }
      
      public override NetMessageGetCurrencyBalance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCurrencyBalance) {
          return MergeFrom((NetMessageGetCurrencyBalance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCurrencyBalance other) {
        if (other == global::Gazillion.NetMessageGetCurrencyBalance.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCurrencyBalanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCurrencyBalanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGetCurrencyBalance() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyItemFromCatalog : pb::GeneratedMessage<NetMessageBuyItemFromCatalog, NetMessageBuyItemFromCatalog.Builder> {
    private NetMessageBuyItemFromCatalog() { }
    private static readonly NetMessageBuyItemFromCatalog defaultInstance = new NetMessageBuyItemFromCatalog().MakeReadOnly();
    private static readonly string[] _netMessageBuyItemFromCatalogFieldNames = new string[] { "itemUnitPrice", "numUnits", "skuId" };
    private static readonly uint[] _netMessageBuyItemFromCatalogFieldTags = new uint[] { 16, 24, 8 };
    public static NetMessageBuyItemFromCatalog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyItemFromCatalog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyItemFromCatalog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyItemFromCatalog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyItemFromCatalog, NetMessageBuyItemFromCatalog.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyItemFromCatalog__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int ItemUnitPriceFieldNumber = 2;
    private bool hasItemUnitPrice;
    private long itemUnitPrice_;
    public bool HasItemUnitPrice {
      get { return hasItemUnitPrice; }
    }
    public long ItemUnitPrice {
      get { return itemUnitPrice_; }
    }
    
    public const int NumUnitsFieldNumber = 3;
    private bool hasNumUnits;
    private int numUnits_ = 1;
    public bool HasNumUnits {
      get { return hasNumUnits; }
    }
    public int NumUnits {
      get { return numUnits_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkuId) return false;
        if (!hasItemUnitPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyItemFromCatalogFieldNames;
      if (hasSkuId) {
        output.WriteInt64(1, field_names[2], SkuId);
      }
      if (hasItemUnitPrice) {
        output.WriteInt64(2, field_names[0], ItemUnitPrice);
      }
      if (hasNumUnits) {
        output.WriteInt32(3, field_names[1], NumUnits);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, SkuId);
      }
      if (hasItemUnitPrice) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, ItemUnitPrice);
      }
      if (hasNumUnits) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NumUnits);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyItemFromCatalog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyItemFromCatalog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyItemFromCatalog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyItemFromCatalog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyItemFromCatalog result;
      
      private NetMessageBuyItemFromCatalog PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyItemFromCatalog original = result;
          result = new NetMessageBuyItemFromCatalog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyItemFromCatalog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalog.Descriptor; }
      }
      
      public override NetMessageBuyItemFromCatalog DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalog.DefaultInstance; }
      }
      
      public override NetMessageBuyItemFromCatalog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyItemFromCatalog) {
          return MergeFrom((NetMessageBuyItemFromCatalog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyItemFromCatalog other) {
        if (other == global::Gazillion.NetMessageBuyItemFromCatalog.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasItemUnitPrice) {
          ItemUnitPrice = other.ItemUnitPrice;
        }
        if (other.HasNumUnits) {
          NumUnits = other.NumUnits;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyItemFromCatalogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyItemFromCatalogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 16: {
              result.hasItemUnitPrice = input.ReadInt64(ref result.itemUnitPrice_);
              break;
            }
            case 24: {
              result.hasNumUnits = input.ReadInt32(ref result.numUnits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasItemUnitPrice {
        get { return result.hasItemUnitPrice; }
      }
      public long ItemUnitPrice {
        get { return result.ItemUnitPrice; }
        set { SetItemUnitPrice(value); }
      }
      public Builder SetItemUnitPrice(long value) {
        PrepareBuilder();
        result.hasItemUnitPrice = true;
        result.itemUnitPrice_ = value;
        return this;
      }
      public Builder ClearItemUnitPrice() {
        PrepareBuilder();
        result.hasItemUnitPrice = false;
        result.itemUnitPrice_ = 0L;
        return this;
      }
      
      public bool HasNumUnits {
        get { return result.hasNumUnits; }
      }
      public int NumUnits {
        get { return result.NumUnits; }
        set { SetNumUnits(value); }
      }
      public Builder SetNumUnits(int value) {
        PrepareBuilder();
        result.hasNumUnits = true;
        result.numUnits_ = value;
        return this;
      }
      public Builder ClearNumUnits() {
        PrepareBuilder();
        result.hasNumUnits = false;
        result.numUnits_ = 1;
        return this;
      }
    }
    static NetMessageBuyItemFromCatalog() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyGiftForOtherPlayer : pb::GeneratedMessage<NetMessageBuyGiftForOtherPlayer, NetMessageBuyGiftForOtherPlayer.Builder> {
    private NetMessageBuyGiftForOtherPlayer() { }
    private static readonly NetMessageBuyGiftForOtherPlayer defaultInstance = new NetMessageBuyGiftForOtherPlayer().MakeReadOnly();
    private static readonly string[] _netMessageBuyGiftForOtherPlayerFieldNames = new string[] { "giftMessage", "itemUnitPrice", "numUnits", "recipientName", "skuId" };
    private static readonly uint[] _netMessageBuyGiftForOtherPlayerFieldTags = new uint[] { 42, 16, 32, 26, 8 };
    public static NetMessageBuyGiftForOtherPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyGiftForOtherPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyGiftForOtherPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyGiftForOtherPlayer, NetMessageBuyGiftForOtherPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBuyGiftForOtherPlayer__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int ItemUnitPriceFieldNumber = 2;
    private bool hasItemUnitPrice;
    private long itemUnitPrice_;
    public bool HasItemUnitPrice {
      get { return hasItemUnitPrice; }
    }
    public long ItemUnitPrice {
      get { return itemUnitPrice_; }
    }
    
    public const int RecipientNameFieldNumber = 3;
    private bool hasRecipientName;
    private string recipientName_ = "";
    public bool HasRecipientName {
      get { return hasRecipientName; }
    }
    public string RecipientName {
      get { return recipientName_; }
    }
    
    public const int NumUnitsFieldNumber = 4;
    private bool hasNumUnits;
    private int numUnits_ = 1;
    public bool HasNumUnits {
      get { return hasNumUnits; }
    }
    public int NumUnits {
      get { return numUnits_; }
    }
    
    public const int GiftMessageFieldNumber = 5;
    private bool hasGiftMessage;
    private string giftMessage_ = "";
    public bool HasGiftMessage {
      get { return hasGiftMessage; }
    }
    public string GiftMessage {
      get { return giftMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkuId) return false;
        if (!hasItemUnitPrice) return false;
        if (!hasRecipientName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyGiftForOtherPlayerFieldNames;
      if (hasSkuId) {
        output.WriteInt64(1, field_names[4], SkuId);
      }
      if (hasItemUnitPrice) {
        output.WriteInt64(2, field_names[1], ItemUnitPrice);
      }
      if (hasRecipientName) {
        output.WriteString(3, field_names[3], RecipientName);
      }
      if (hasNumUnits) {
        output.WriteInt32(4, field_names[2], NumUnits);
      }
      if (hasGiftMessage) {
        output.WriteString(5, field_names[0], GiftMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, SkuId);
      }
      if (hasItemUnitPrice) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, ItemUnitPrice);
      }
      if (hasRecipientName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, RecipientName);
      }
      if (hasNumUnits) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, NumUnits);
      }
      if (hasGiftMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(5, GiftMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyGiftForOtherPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyGiftForOtherPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyGiftForOtherPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyGiftForOtherPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyGiftForOtherPlayer result;
      
      private NetMessageBuyGiftForOtherPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyGiftForOtherPlayer original = result;
          result = new NetMessageBuyGiftForOtherPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyGiftForOtherPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyGiftForOtherPlayer.Descriptor; }
      }
      
      public override NetMessageBuyGiftForOtherPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyGiftForOtherPlayer.DefaultInstance; }
      }
      
      public override NetMessageBuyGiftForOtherPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyGiftForOtherPlayer) {
          return MergeFrom((NetMessageBuyGiftForOtherPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyGiftForOtherPlayer other) {
        if (other == global::Gazillion.NetMessageBuyGiftForOtherPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasItemUnitPrice) {
          ItemUnitPrice = other.ItemUnitPrice;
        }
        if (other.HasRecipientName) {
          RecipientName = other.RecipientName;
        }
        if (other.HasNumUnits) {
          NumUnits = other.NumUnits;
        }
        if (other.HasGiftMessage) {
          GiftMessage = other.GiftMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyGiftForOtherPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyGiftForOtherPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 16: {
              result.hasItemUnitPrice = input.ReadInt64(ref result.itemUnitPrice_);
              break;
            }
            case 26: {
              result.hasRecipientName = input.ReadString(ref result.recipientName_);
              break;
            }
            case 32: {
              result.hasNumUnits = input.ReadInt32(ref result.numUnits_);
              break;
            }
            case 42: {
              result.hasGiftMessage = input.ReadString(ref result.giftMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasItemUnitPrice {
        get { return result.hasItemUnitPrice; }
      }
      public long ItemUnitPrice {
        get { return result.ItemUnitPrice; }
        set { SetItemUnitPrice(value); }
      }
      public Builder SetItemUnitPrice(long value) {
        PrepareBuilder();
        result.hasItemUnitPrice = true;
        result.itemUnitPrice_ = value;
        return this;
      }
      public Builder ClearItemUnitPrice() {
        PrepareBuilder();
        result.hasItemUnitPrice = false;
        result.itemUnitPrice_ = 0L;
        return this;
      }
      
      public bool HasRecipientName {
        get { return result.hasRecipientName; }
      }
      public string RecipientName {
        get { return result.RecipientName; }
        set { SetRecipientName(value); }
      }
      public Builder SetRecipientName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecipientName = true;
        result.recipientName_ = value;
        return this;
      }
      public Builder ClearRecipientName() {
        PrepareBuilder();
        result.hasRecipientName = false;
        result.recipientName_ = "";
        return this;
      }
      
      public bool HasNumUnits {
        get { return result.hasNumUnits; }
      }
      public int NumUnits {
        get { return result.NumUnits; }
        set { SetNumUnits(value); }
      }
      public Builder SetNumUnits(int value) {
        PrepareBuilder();
        result.hasNumUnits = true;
        result.numUnits_ = value;
        return this;
      }
      public Builder ClearNumUnits() {
        PrepareBuilder();
        result.hasNumUnits = false;
        result.numUnits_ = 1;
        return this;
      }
      
      public bool HasGiftMessage {
        get { return result.hasGiftMessage; }
      }
      public string GiftMessage {
        get { return result.GiftMessage; }
        set { SetGiftMessage(value); }
      }
      public Builder SetGiftMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGiftMessage = true;
        result.giftMessage_ = value;
        return this;
      }
      public Builder ClearGiftMessage() {
        PrepareBuilder();
        result.hasGiftMessage = false;
        result.giftMessage_ = "";
        return this;
      }
    }
    static NetMessageBuyGiftForOtherPlayer() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePurchaseUnlock : pb::GeneratedMessage<NetMessagePurchaseUnlock, NetMessagePurchaseUnlock.Builder> {
    private NetMessagePurchaseUnlock() { }
    private static readonly NetMessagePurchaseUnlock defaultInstance = new NetMessagePurchaseUnlock().MakeReadOnly();
    private static readonly string[] _netMessagePurchaseUnlockFieldNames = new string[] { "agentPrototypeId" };
    private static readonly uint[] _netMessagePurchaseUnlockFieldTags = new uint[] { 8 };
    public static NetMessagePurchaseUnlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePurchaseUnlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePurchaseUnlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePurchaseUnlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePurchaseUnlock, NetMessagePurchaseUnlock.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePurchaseUnlock__FieldAccessorTable; }
    }
    
    public const int AgentPrototypeIdFieldNumber = 1;
    private bool hasAgentPrototypeId;
    private long agentPrototypeId_;
    public bool HasAgentPrototypeId {
      get { return hasAgentPrototypeId; }
    }
    public long AgentPrototypeId {
      get { return agentPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAgentPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePurchaseUnlockFieldNames;
      if (hasAgentPrototypeId) {
        output.WriteInt64(1, field_names[0], AgentPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentPrototypeId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, AgentPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePurchaseUnlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePurchaseUnlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePurchaseUnlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePurchaseUnlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePurchaseUnlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePurchaseUnlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePurchaseUnlock result;
      
      private NetMessagePurchaseUnlock PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePurchaseUnlock original = result;
          result = new NetMessagePurchaseUnlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePurchaseUnlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePurchaseUnlock.Descriptor; }
      }
      
      public override NetMessagePurchaseUnlock DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePurchaseUnlock.DefaultInstance; }
      }
      
      public override NetMessagePurchaseUnlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePurchaseUnlock) {
          return MergeFrom((NetMessagePurchaseUnlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePurchaseUnlock other) {
        if (other == global::Gazillion.NetMessagePurchaseUnlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentPrototypeId) {
          AgentPrototypeId = other.AgentPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePurchaseUnlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePurchaseUnlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAgentPrototypeId = input.ReadInt64(ref result.agentPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentPrototypeId {
        get { return result.hasAgentPrototypeId; }
      }
      public long AgentPrototypeId {
        get { return result.AgentPrototypeId; }
        set { SetAgentPrototypeId(value); }
      }
      public Builder SetAgentPrototypeId(long value) {
        PrepareBuilder();
        result.hasAgentPrototypeId = true;
        result.agentPrototypeId_ = value;
        return this;
      }
      public Builder ClearAgentPrototypeId() {
        PrepareBuilder();
        result.hasAgentPrototypeId = false;
        result.agentPrototypeId_ = 0L;
        return this;
      }
    }
    static NetMessagePurchaseUnlock() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetGiftHistory : pb::GeneratedMessage<NetMessageGetGiftHistory, NetMessageGetGiftHistory.Builder> {
    private NetMessageGetGiftHistory() { }
    private static readonly NetMessageGetGiftHistory defaultInstance = new NetMessageGetGiftHistory().MakeReadOnly();
    private static readonly string[] _netMessageGetGiftHistoryFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGetGiftHistoryFieldTags = new uint[] {  };
    public static NetMessageGetGiftHistory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetGiftHistory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetGiftHistory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetGiftHistory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetGiftHistory, NetMessageGetGiftHistory.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetGiftHistory__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetGiftHistoryFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetGiftHistory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetGiftHistory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetGiftHistory MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetGiftHistory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetGiftHistory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetGiftHistory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetGiftHistory result;
      
      private NetMessageGetGiftHistory PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetGiftHistory original = result;
          result = new NetMessageGetGiftHistory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetGiftHistory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetGiftHistory.Descriptor; }
      }
      
      public override NetMessageGetGiftHistory DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetGiftHistory.DefaultInstance; }
      }
      
      public override NetMessageGetGiftHistory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetGiftHistory) {
          return MergeFrom((NetMessageGetGiftHistory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetGiftHistory other) {
        if (other == global::Gazillion.NetMessageGetGiftHistory.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetGiftHistoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetGiftHistoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGetGiftHistory() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EntityPreviewerEnum : pb::GeneratedMessage<EntityPreviewerEnum, EntityPreviewerEnum.Builder> {
    private EntityPreviewerEnum() { }
    private static readonly EntityPreviewerEnum defaultInstance = new EntityPreviewerEnum().MakeReadOnly();
    private static readonly string[] _entityPreviewerEnumFieldNames = new string[] {  };
    private static readonly uint[] _entityPreviewerEnumFieldTags = new uint[] {  };
    public static EntityPreviewerEnum DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityPreviewerEnum DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntityPreviewerEnum ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_EntityPreviewerEnum__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityPreviewerEnum, EntityPreviewerEnum.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_EntityPreviewerEnum__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Alliance {
        Ally = 0,
        Enemy = 1,
        Total = 2,
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _entityPreviewerEnumFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EntityPreviewerEnum ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityPreviewerEnum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityPreviewerEnum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntityPreviewerEnum MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityPreviewerEnum prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EntityPreviewerEnum, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntityPreviewerEnum cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntityPreviewerEnum result;
      
      private EntityPreviewerEnum PrepareBuilder() {
        if (resultIsReadOnly) {
          EntityPreviewerEnum original = result;
          result = new EntityPreviewerEnum();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntityPreviewerEnum MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.EntityPreviewerEnum.Descriptor; }
      }
      
      public override EntityPreviewerEnum DefaultInstanceForType {
        get { return global::Gazillion.EntityPreviewerEnum.DefaultInstance; }
      }
      
      public override EntityPreviewerEnum BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityPreviewerEnum) {
          return MergeFrom((EntityPreviewerEnum) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityPreviewerEnum other) {
        if (other == global::Gazillion.EntityPreviewerEnum.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entityPreviewerEnumFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entityPreviewerEnumFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static EntityPreviewerEnum() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerNewTargets : pb::GeneratedMessage<NetMessageEntityPreviewerNewTargets, NetMessageEntityPreviewerNewTargets.Builder> {
    private NetMessageEntityPreviewerNewTargets() { }
    private static readonly NetMessageEntityPreviewerNewTargets defaultInstance = new NetMessageEntityPreviewerNewTargets().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerNewTargetsFieldNames = new string[] { "alliance", "numNewTargets" };
    private static readonly uint[] _netMessageEntityPreviewerNewTargetsFieldTags = new uint[] { 8, 16 };
    public static NetMessageEntityPreviewerNewTargets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerNewTargets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerNewTargets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerNewTargets, NetMessageEntityPreviewerNewTargets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerNewTargets__FieldAccessorTable; }
    }
    
    public const int AllianceFieldNumber = 1;
    private bool hasAlliance;
    private global::Gazillion.EntityPreviewerEnum.Types.Alliance alliance_ = global::Gazillion.EntityPreviewerEnum.Types.Alliance.Ally;
    public bool HasAlliance {
      get { return hasAlliance; }
    }
    public global::Gazillion.EntityPreviewerEnum.Types.Alliance Alliance {
      get { return alliance_; }
    }
    
    public const int NumNewTargetsFieldNumber = 2;
    private bool hasNumNewTargets;
    private uint numNewTargets_;
    public bool HasNumNewTargets {
      get { return hasNumNewTargets; }
    }
    public uint NumNewTargets {
      get { return numNewTargets_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAlliance) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerNewTargetsFieldNames;
      if (hasAlliance) {
        output.WriteEnum(1, field_names[0], (int) Alliance, Alliance);
      }
      if (hasNumNewTargets) {
        output.WriteUInt32(2, field_names[1], NumNewTargets);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAlliance) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Alliance);
      }
      if (hasNumNewTargets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, NumNewTargets);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTargets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerNewTargets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerNewTargets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerNewTargets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerNewTargets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerNewTargets result;
      
      private NetMessageEntityPreviewerNewTargets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerNewTargets original = result;
          result = new NetMessageEntityPreviewerNewTargets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerNewTargets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTargets.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerNewTargets DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTargets.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerNewTargets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerNewTargets) {
          return MergeFrom((NetMessageEntityPreviewerNewTargets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerNewTargets other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerNewTargets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAlliance) {
          Alliance = other.Alliance;
        }
        if (other.HasNumNewTargets) {
          NumNewTargets = other.NumNewTargets;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerNewTargetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerNewTargetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.alliance_, out unknown)) {
                result.hasAlliance = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasNumNewTargets = input.ReadUInt32(ref result.numNewTargets_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAlliance {
       get { return result.hasAlliance; }
      }
      public global::Gazillion.EntityPreviewerEnum.Types.Alliance Alliance {
        get { return result.Alliance; }
        set { SetAlliance(value); }
      }
      public Builder SetAlliance(global::Gazillion.EntityPreviewerEnum.Types.Alliance value) {
        PrepareBuilder();
        result.hasAlliance = true;
        result.alliance_ = value;
        return this;
      }
      public Builder ClearAlliance() {
        PrepareBuilder();
        result.hasAlliance = false;
        result.alliance_ = global::Gazillion.EntityPreviewerEnum.Types.Alliance.Ally;
        return this;
      }
      
      public bool HasNumNewTargets {
        get { return result.hasNumNewTargets; }
      }
      public uint NumNewTargets {
        get { return result.NumNewTargets; }
        set { SetNumNewTargets(value); }
      }
      public Builder SetNumNewTargets(uint value) {
        PrepareBuilder();
        result.hasNumNewTargets = true;
        result.numNewTargets_ = value;
        return this;
      }
      public Builder ClearNumNewTargets() {
        PrepareBuilder();
        result.hasNumNewTargets = false;
        result.numNewTargets_ = 0;
        return this;
      }
    }
    static NetMessageEntityPreviewerNewTargets() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerClearTargets : pb::GeneratedMessage<NetMessageEntityPreviewerClearTargets, NetMessageEntityPreviewerClearTargets.Builder> {
    private NetMessageEntityPreviewerClearTargets() { }
    private static readonly NetMessageEntityPreviewerClearTargets defaultInstance = new NetMessageEntityPreviewerClearTargets().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerClearTargetsFieldNames = new string[] {  };
    private static readonly uint[] _netMessageEntityPreviewerClearTargetsFieldTags = new uint[] {  };
    public static NetMessageEntityPreviewerClearTargets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerClearTargets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerClearTargets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerClearTargets, NetMessageEntityPreviewerClearTargets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerClearTargets__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerClearTargetsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerClearTargets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerClearTargets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerClearTargets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerClearTargets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerClearTargets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerClearTargets result;
      
      private NetMessageEntityPreviewerClearTargets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerClearTargets original = result;
          result = new NetMessageEntityPreviewerClearTargets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerClearTargets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerClearTargets.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerClearTargets DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerClearTargets.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerClearTargets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerClearTargets) {
          return MergeFrom((NetMessageEntityPreviewerClearTargets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerClearTargets other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerClearTargets.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerClearTargetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerClearTargetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageEntityPreviewerClearTargets() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerSetTargetRef : pb::GeneratedMessage<NetMessageEntityPreviewerSetTargetRef, NetMessageEntityPreviewerSetTargetRef.Builder> {
    private NetMessageEntityPreviewerSetTargetRef() { }
    private static readonly NetMessageEntityPreviewerSetTargetRef defaultInstance = new NetMessageEntityPreviewerSetTargetRef().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerSetTargetRefFieldNames = new string[] { "targetRefId" };
    private static readonly uint[] _netMessageEntityPreviewerSetTargetRefFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerSetTargetRef DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerSetTargetRef DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerSetTargetRef ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerSetTargetRef, NetMessageEntityPreviewerSetTargetRef.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetTargetRef__FieldAccessorTable; }
    }
    
    public const int TargetRefIdFieldNumber = 1;
    private bool hasTargetRefId;
    private ulong targetRefId_;
    public bool HasTargetRefId {
      get { return hasTargetRefId; }
    }
    public ulong TargetRefId {
      get { return targetRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerSetTargetRefFieldNames;
      if (hasTargetRefId) {
        output.WriteUInt64(1, field_names[0], TargetRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetTargetRef ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerSetTargetRef MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerSetTargetRef prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerSetTargetRef, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerSetTargetRef cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerSetTargetRef result;
      
      private NetMessageEntityPreviewerSetTargetRef PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerSetTargetRef original = result;
          result = new NetMessageEntityPreviewerSetTargetRef();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerSetTargetRef MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetTargetRef.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerSetTargetRef DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetTargetRef.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerSetTargetRef BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerSetTargetRef) {
          return MergeFrom((NetMessageEntityPreviewerSetTargetRef) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerSetTargetRef other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerSetTargetRef.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetRefId) {
          TargetRefId = other.TargetRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerSetTargetRefFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerSetTargetRefFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetRefId = input.ReadUInt64(ref result.targetRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetRefId {
        get { return result.hasTargetRefId; }
      }
      public ulong TargetRefId {
        get { return result.TargetRefId; }
        set { SetTargetRefId(value); }
      }
      public Builder SetTargetRefId(ulong value) {
        PrepareBuilder();
        result.hasTargetRefId = true;
        result.targetRefId_ = value;
        return this;
      }
      public Builder ClearTargetRefId() {
        PrepareBuilder();
        result.hasTargetRefId = false;
        result.targetRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerSetTargetRef() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerActivatePower : pb::GeneratedMessage<NetMessageEntityPreviewerActivatePower, NetMessageEntityPreviewerActivatePower.Builder> {
    private NetMessageEntityPreviewerActivatePower() { }
    private static readonly NetMessageEntityPreviewerActivatePower defaultInstance = new NetMessageEntityPreviewerActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerActivatePowerFieldNames = new string[] { "casterId", "createTarget", "powerRefId", "randomTargetPos" };
    private static readonly uint[] _netMessageEntityPreviewerActivatePowerFieldTags = new uint[] { 8, 24, 16, 32 };
    public static NetMessageEntityPreviewerActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerActivatePower, NetMessageEntityPreviewerActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerActivatePower__FieldAccessorTable; }
    }
    
    public const int CasterIdFieldNumber = 1;
    private bool hasCasterId;
    private ulong casterId_;
    public bool HasCasterId {
      get { return hasCasterId; }
    }
    public ulong CasterId {
      get { return casterId_; }
    }
    
    public const int PowerRefIdFieldNumber = 2;
    private bool hasPowerRefId;
    private ulong powerRefId_;
    public bool HasPowerRefId {
      get { return hasPowerRefId; }
    }
    public ulong PowerRefId {
      get { return powerRefId_; }
    }
    
    public const int CreateTargetFieldNumber = 3;
    private bool hasCreateTarget;
    private bool createTarget_;
    public bool HasCreateTarget {
      get { return hasCreateTarget; }
    }
    public bool CreateTarget {
      get { return createTarget_; }
    }
    
    public const int RandomTargetPosFieldNumber = 4;
    private bool hasRandomTargetPos;
    private bool randomTargetPos_;
    public bool HasRandomTargetPos {
      get { return hasRandomTargetPos; }
    }
    public bool RandomTargetPos {
      get { return randomTargetPos_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCasterId) return false;
        if (!hasPowerRefId) return false;
        if (!hasCreateTarget) return false;
        if (!hasRandomTargetPos) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerActivatePowerFieldNames;
      if (hasCasterId) {
        output.WriteUInt64(1, field_names[0], CasterId);
      }
      if (hasPowerRefId) {
        output.WriteUInt64(2, field_names[2], PowerRefId);
      }
      if (hasCreateTarget) {
        output.WriteBool(3, field_names[1], CreateTarget);
      }
      if (hasRandomTargetPos) {
        output.WriteBool(4, field_names[3], RandomTargetPos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCasterId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CasterId);
      }
      if (hasPowerRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerRefId);
      }
      if (hasCreateTarget) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, CreateTarget);
      }
      if (hasRandomTargetPos) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, RandomTargetPos);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerActivatePower result;
      
      private NetMessageEntityPreviewerActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerActivatePower original = result;
          result = new NetMessageEntityPreviewerActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerActivatePower.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerActivatePower.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerActivatePower) {
          return MergeFrom((NetMessageEntityPreviewerActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerActivatePower other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCasterId) {
          CasterId = other.CasterId;
        }
        if (other.HasPowerRefId) {
          PowerRefId = other.PowerRefId;
        }
        if (other.HasCreateTarget) {
          CreateTarget = other.CreateTarget;
        }
        if (other.HasRandomTargetPos) {
          RandomTargetPos = other.RandomTargetPos;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCasterId = input.ReadUInt64(ref result.casterId_);
              break;
            }
            case 16: {
              result.hasPowerRefId = input.ReadUInt64(ref result.powerRefId_);
              break;
            }
            case 24: {
              result.hasCreateTarget = input.ReadBool(ref result.createTarget_);
              break;
            }
            case 32: {
              result.hasRandomTargetPos = input.ReadBool(ref result.randomTargetPos_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCasterId {
        get { return result.hasCasterId; }
      }
      public ulong CasterId {
        get { return result.CasterId; }
        set { SetCasterId(value); }
      }
      public Builder SetCasterId(ulong value) {
        PrepareBuilder();
        result.hasCasterId = true;
        result.casterId_ = value;
        return this;
      }
      public Builder ClearCasterId() {
        PrepareBuilder();
        result.hasCasterId = false;
        result.casterId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRefId {
        get { return result.hasPowerRefId; }
      }
      public ulong PowerRefId {
        get { return result.PowerRefId; }
        set { SetPowerRefId(value); }
      }
      public Builder SetPowerRefId(ulong value) {
        PrepareBuilder();
        result.hasPowerRefId = true;
        result.powerRefId_ = value;
        return this;
      }
      public Builder ClearPowerRefId() {
        PrepareBuilder();
        result.hasPowerRefId = false;
        result.powerRefId_ = 0UL;
        return this;
      }
      
      public bool HasCreateTarget {
        get { return result.hasCreateTarget; }
      }
      public bool CreateTarget {
        get { return result.CreateTarget; }
        set { SetCreateTarget(value); }
      }
      public Builder SetCreateTarget(bool value) {
        PrepareBuilder();
        result.hasCreateTarget = true;
        result.createTarget_ = value;
        return this;
      }
      public Builder ClearCreateTarget() {
        PrepareBuilder();
        result.hasCreateTarget = false;
        result.createTarget_ = false;
        return this;
      }
      
      public bool HasRandomTargetPos {
        get { return result.hasRandomTargetPos; }
      }
      public bool RandomTargetPos {
        get { return result.RandomTargetPos; }
        set { SetRandomTargetPos(value); }
      }
      public Builder SetRandomTargetPos(bool value) {
        PrepareBuilder();
        result.hasRandomTargetPos = true;
        result.randomTargetPos_ = value;
        return this;
      }
      public Builder ClearRandomTargetPos() {
        PrepareBuilder();
        result.hasRandomTargetPos = false;
        result.randomTargetPos_ = false;
        return this;
      }
    }
    static NetMessageEntityPreviewerActivatePower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerAddTarget : pb::GeneratedMessage<NetMessageEntityPreviewerAddTarget, NetMessageEntityPreviewerAddTarget.Builder> {
    private NetMessageEntityPreviewerAddTarget() { }
    private static readonly NetMessageEntityPreviewerAddTarget defaultInstance = new NetMessageEntityPreviewerAddTarget().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerAddTargetFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerAddTargetFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerAddTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerAddTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerAddTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerAddTarget, NetMessageEntityPreviewerAddTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerAddTarget__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerAddTargetFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerAddTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerAddTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerAddTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerAddTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerAddTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerAddTarget result;
      
      private NetMessageEntityPreviewerAddTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerAddTarget original = result;
          result = new NetMessageEntityPreviewerAddTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerAddTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerAddTarget.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerAddTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerAddTarget.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerAddTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerAddTarget) {
          return MergeFrom((NetMessageEntityPreviewerAddTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerAddTarget other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerAddTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerAddTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerAddTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerAddTarget() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerSetEntityState : pb::GeneratedMessage<NetMessageEntityPreviewerSetEntityState, NetMessageEntityPreviewerSetEntityState.Builder> {
    private NetMessageEntityPreviewerSetEntityState() { }
    private static readonly NetMessageEntityPreviewerSetEntityState defaultInstance = new NetMessageEntityPreviewerSetEntityState().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerSetEntityStateFieldNames = new string[] { "stateRefId", "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerSetEntityStateFieldTags = new uint[] { 16, 8 };
    public static NetMessageEntityPreviewerSetEntityState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerSetEntityState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerSetEntityState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerSetEntityState, NetMessageEntityPreviewerSetEntityState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerSetEntityState__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int StateRefIdFieldNumber = 2;
    private bool hasStateRefId;
    private ulong stateRefId_;
    public bool HasStateRefId {
      get { return hasStateRefId; }
    }
    public ulong StateRefId {
      get { return stateRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasStateRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerSetEntityStateFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasStateRefId) {
        output.WriteUInt64(2, field_names[0], StateRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasStateRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, StateRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerSetEntityState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerSetEntityState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerSetEntityState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerSetEntityState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerSetEntityState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerSetEntityState result;
      
      private NetMessageEntityPreviewerSetEntityState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerSetEntityState original = result;
          result = new NetMessageEntityPreviewerSetEntityState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerSetEntityState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetEntityState.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerSetEntityState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerSetEntityState.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerSetEntityState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerSetEntityState) {
          return MergeFrom((NetMessageEntityPreviewerSetEntityState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerSetEntityState other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerSetEntityState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasStateRefId) {
          StateRefId = other.StateRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerSetEntityStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerSetEntityStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasStateRefId = input.ReadUInt64(ref result.stateRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasStateRefId {
        get { return result.hasStateRefId; }
      }
      public ulong StateRefId {
        get { return result.StateRefId; }
        set { SetStateRefId(value); }
      }
      public Builder SetStateRefId(ulong value) {
        PrepareBuilder();
        result.hasStateRefId = true;
        result.stateRefId_ = value;
        return this;
      }
      public Builder ClearStateRefId() {
        PrepareBuilder();
        result.hasStateRefId = false;
        result.stateRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerSetEntityState() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerApplyConditions : pb::GeneratedMessage<NetMessageEntityPreviewerApplyConditions, NetMessageEntityPreviewerApplyConditions.Builder> {
    private NetMessageEntityPreviewerApplyConditions() { }
    private static readonly NetMessageEntityPreviewerApplyConditions defaultInstance = new NetMessageEntityPreviewerApplyConditions().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerApplyConditionsFieldNames = new string[] { "powerRefId", "targetId" };
    private static readonly uint[] _netMessageEntityPreviewerApplyConditionsFieldTags = new uint[] { 16, 8 };
    public static NetMessageEntityPreviewerApplyConditions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerApplyConditions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerApplyConditions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerApplyConditions, NetMessageEntityPreviewerApplyConditions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEntityPreviewerApplyConditions__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int PowerRefIdFieldNumber = 2;
    private bool hasPowerRefId;
    private ulong powerRefId_;
    public bool HasPowerRefId {
      get { return hasPowerRefId; }
    }
    public ulong PowerRefId {
      get { return powerRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasPowerRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerApplyConditionsFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasPowerRefId) {
        output.WriteUInt64(2, field_names[0], PowerRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasPowerRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerApplyConditions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerApplyConditions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerApplyConditions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerApplyConditions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerApplyConditions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerApplyConditions result;
      
      private NetMessageEntityPreviewerApplyConditions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerApplyConditions original = result;
          result = new NetMessageEntityPreviewerApplyConditions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerApplyConditions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerApplyConditions.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerApplyConditions DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerApplyConditions.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerApplyConditions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerApplyConditions) {
          return MergeFrom((NetMessageEntityPreviewerApplyConditions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerApplyConditions other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerApplyConditions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasPowerRefId) {
          PowerRefId = other.PowerRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerApplyConditionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerApplyConditionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasPowerRefId = input.ReadUInt64(ref result.powerRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRefId {
        get { return result.hasPowerRefId; }
      }
      public ulong PowerRefId {
        get { return result.PowerRefId; }
        set { SetPowerRefId(value); }
      }
      public Builder SetPowerRefId(ulong value) {
        PrepareBuilder();
        result.hasPowerRefId = true;
        result.powerRefId_ = value;
        return this;
      }
      public Builder ClearPowerRefId() {
        PrepareBuilder();
        result.hasPowerRefId = false;
        result.powerRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerApplyConditions() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCreateNewPlayerWithSelectedStartingAvatar : pb::GeneratedMessage<NetMessageCreateNewPlayerWithSelectedStartingAvatar, NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> {
    private NetMessageCreateNewPlayerWithSelectedStartingAvatar() { }
    private static readonly NetMessageCreateNewPlayerWithSelectedStartingAvatar defaultInstance = new NetMessageCreateNewPlayerWithSelectedStartingAvatar().MakeReadOnly();
    private static readonly string[] _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames = new string[] { "startingAvatarPrototypeId", "totalTime" };
    private static readonly uint[] _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldTags = new uint[] { 8, 16 };
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCreateNewPlayerWithSelectedStartingAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCreateNewPlayerWithSelectedStartingAvatar, NetMessageCreateNewPlayerWithSelectedStartingAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCreateNewPlayerWithSelectedStartingAvatar__FieldAccessorTable; }
    }
    
    public const int StartingAvatarPrototypeIdFieldNumber = 1;
    private bool hasStartingAvatarPrototypeId;
    private ulong startingAvatarPrototypeId_;
    public bool HasStartingAvatarPrototypeId {
      get { return hasStartingAvatarPrototypeId; }
    }
    public ulong StartingAvatarPrototypeId {
      get { return startingAvatarPrototypeId_; }
    }
    
    public const int TotalTimeFieldNumber = 2;
    private bool hasTotalTime;
    private uint totalTime_;
    public bool HasTotalTime {
      get { return hasTotalTime; }
    }
    public uint TotalTime {
      get { return totalTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartingAvatarPrototypeId) return false;
        if (!hasTotalTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames;
      if (hasStartingAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[0], StartingAvatarPrototypeId);
      }
      if (hasTotalTime) {
        output.WriteUInt32(2, field_names[1], TotalTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartingAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, StartingAvatarPrototypeId);
      }
      if (hasTotalTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TotalTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateNewPlayerWithSelectedStartingAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCreateNewPlayerWithSelectedStartingAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCreateNewPlayerWithSelectedStartingAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCreateNewPlayerWithSelectedStartingAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCreateNewPlayerWithSelectedStartingAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCreateNewPlayerWithSelectedStartingAvatar result;
      
      private NetMessageCreateNewPlayerWithSelectedStartingAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCreateNewPlayerWithSelectedStartingAvatar original = result;
          result = new NetMessageCreateNewPlayerWithSelectedStartingAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCreateNewPlayerWithSelectedStartingAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.Descriptor; }
      }
      
      public override NetMessageCreateNewPlayerWithSelectedStartingAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.DefaultInstance; }
      }
      
      public override NetMessageCreateNewPlayerWithSelectedStartingAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCreateNewPlayerWithSelectedStartingAvatar) {
          return MergeFrom((NetMessageCreateNewPlayerWithSelectedStartingAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCreateNewPlayerWithSelectedStartingAvatar other) {
        if (other == global::Gazillion.NetMessageCreateNewPlayerWithSelectedStartingAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartingAvatarPrototypeId) {
          StartingAvatarPrototypeId = other.StartingAvatarPrototypeId;
        }
        if (other.HasTotalTime) {
          TotalTime = other.TotalTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCreateNewPlayerWithSelectedStartingAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCreateNewPlayerWithSelectedStartingAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartingAvatarPrototypeId = input.ReadUInt64(ref result.startingAvatarPrototypeId_);
              break;
            }
            case 16: {
              result.hasTotalTime = input.ReadUInt32(ref result.totalTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartingAvatarPrototypeId {
        get { return result.hasStartingAvatarPrototypeId; }
      }
      public ulong StartingAvatarPrototypeId {
        get { return result.StartingAvatarPrototypeId; }
        set { SetStartingAvatarPrototypeId(value); }
      }
      public Builder SetStartingAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasStartingAvatarPrototypeId = true;
        result.startingAvatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearStartingAvatarPrototypeId() {
        PrepareBuilder();
        result.hasStartingAvatarPrototypeId = false;
        result.startingAvatarPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasTotalTime {
        get { return result.hasTotalTime; }
      }
      public uint TotalTime {
        get { return result.TotalTime; }
        set { SetTotalTime(value); }
      }
      public Builder SetTotalTime(uint value) {
        PrepareBuilder();
        result.hasTotalTime = true;
        result.totalTime_ = value;
        return this;
      }
      public Builder ClearTotalTime() {
        PrepareBuilder();
        result.hasTotalTime = false;
        result.totalTime_ = 0;
        return this;
      }
    }
    static NetMessageCreateNewPlayerWithSelectedStartingAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnKioskStartButtonPressed : pb::GeneratedMessage<NetMessageOnKioskStartButtonPressed, NetMessageOnKioskStartButtonPressed.Builder> {
    private NetMessageOnKioskStartButtonPressed() { }
    private static readonly NetMessageOnKioskStartButtonPressed defaultInstance = new NetMessageOnKioskStartButtonPressed().MakeReadOnly();
    private static readonly string[] _netMessageOnKioskStartButtonPressedFieldNames = new string[] {  };
    private static readonly uint[] _netMessageOnKioskStartButtonPressedFieldTags = new uint[] {  };
    public static NetMessageOnKioskStartButtonPressed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnKioskStartButtonPressed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnKioskStartButtonPressed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnKioskStartButtonPressed, NetMessageOnKioskStartButtonPressed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOnKioskStartButtonPressed__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnKioskStartButtonPressedFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnKioskStartButtonPressed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnKioskStartButtonPressed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnKioskStartButtonPressed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnKioskStartButtonPressed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnKioskStartButtonPressed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnKioskStartButtonPressed result;
      
      private NetMessageOnKioskStartButtonPressed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnKioskStartButtonPressed original = result;
          result = new NetMessageOnKioskStartButtonPressed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnKioskStartButtonPressed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnKioskStartButtonPressed.Descriptor; }
      }
      
      public override NetMessageOnKioskStartButtonPressed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnKioskStartButtonPressed.DefaultInstance; }
      }
      
      public override NetMessageOnKioskStartButtonPressed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnKioskStartButtonPressed) {
          return MergeFrom((NetMessageOnKioskStartButtonPressed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnKioskStartButtonPressed other) {
        if (other == global::Gazillion.NetMessageOnKioskStartButtonPressed.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnKioskStartButtonPressedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnKioskStartButtonPressedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageOnKioskStartButtonPressed() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNotifyFullscreenMovieStarted : pb::GeneratedMessage<NetMessageNotifyFullscreenMovieStarted, NetMessageNotifyFullscreenMovieStarted.Builder> {
    private NetMessageNotifyFullscreenMovieStarted() { }
    private static readonly NetMessageNotifyFullscreenMovieStarted defaultInstance = new NetMessageNotifyFullscreenMovieStarted().MakeReadOnly();
    private static readonly string[] _netMessageNotifyFullscreenMovieStartedFieldNames = new string[] { "moviePrototypeId" };
    private static readonly uint[] _netMessageNotifyFullscreenMovieStartedFieldTags = new uint[] { 8 };
    public static NetMessageNotifyFullscreenMovieStarted DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNotifyFullscreenMovieStarted DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNotifyFullscreenMovieStarted ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNotifyFullscreenMovieStarted, NetMessageNotifyFullscreenMovieStarted.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieStarted__FieldAccessorTable; }
    }
    
    public const int MoviePrototypeIdFieldNumber = 1;
    private bool hasMoviePrototypeId;
    private ulong moviePrototypeId_;
    public bool HasMoviePrototypeId {
      get { return hasMoviePrototypeId; }
    }
    public ulong MoviePrototypeId {
      get { return moviePrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMoviePrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNotifyFullscreenMovieStartedFieldNames;
      if (hasMoviePrototypeId) {
        output.WriteUInt64(1, field_names[0], MoviePrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMoviePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MoviePrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieStarted ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNotifyFullscreenMovieStarted MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNotifyFullscreenMovieStarted prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNotifyFullscreenMovieStarted, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNotifyFullscreenMovieStarted cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNotifyFullscreenMovieStarted result;
      
      private NetMessageNotifyFullscreenMovieStarted PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNotifyFullscreenMovieStarted original = result;
          result = new NetMessageNotifyFullscreenMovieStarted();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNotifyFullscreenMovieStarted MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieStarted.Descriptor; }
      }
      
      public override NetMessageNotifyFullscreenMovieStarted DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieStarted.DefaultInstance; }
      }
      
      public override NetMessageNotifyFullscreenMovieStarted BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNotifyFullscreenMovieStarted) {
          return MergeFrom((NetMessageNotifyFullscreenMovieStarted) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNotifyFullscreenMovieStarted other) {
        if (other == global::Gazillion.NetMessageNotifyFullscreenMovieStarted.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMoviePrototypeId) {
          MoviePrototypeId = other.MoviePrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNotifyFullscreenMovieStartedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNotifyFullscreenMovieStartedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMoviePrototypeId = input.ReadUInt64(ref result.moviePrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMoviePrototypeId {
        get { return result.hasMoviePrototypeId; }
      }
      public ulong MoviePrototypeId {
        get { return result.MoviePrototypeId; }
        set { SetMoviePrototypeId(value); }
      }
      public Builder SetMoviePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMoviePrototypeId = true;
        result.moviePrototypeId_ = value;
        return this;
      }
      public Builder ClearMoviePrototypeId() {
        PrepareBuilder();
        result.hasMoviePrototypeId = false;
        result.moviePrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageNotifyFullscreenMovieStarted() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNotifyFullscreenMovieFinished : pb::GeneratedMessage<NetMessageNotifyFullscreenMovieFinished, NetMessageNotifyFullscreenMovieFinished.Builder> {
    private NetMessageNotifyFullscreenMovieFinished() { }
    private static readonly NetMessageNotifyFullscreenMovieFinished defaultInstance = new NetMessageNotifyFullscreenMovieFinished().MakeReadOnly();
    private static readonly string[] _netMessageNotifyFullscreenMovieFinishedFieldNames = new string[] { "moviePrototypeId", "syncRequestId", "userCancelled" };
    private static readonly uint[] _netMessageNotifyFullscreenMovieFinishedFieldTags = new uint[] { 8, 24, 16 };
    public static NetMessageNotifyFullscreenMovieFinished DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNotifyFullscreenMovieFinished DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNotifyFullscreenMovieFinished ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNotifyFullscreenMovieFinished, NetMessageNotifyFullscreenMovieFinished.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyFullscreenMovieFinished__FieldAccessorTable; }
    }
    
    public const int MoviePrototypeIdFieldNumber = 1;
    private bool hasMoviePrototypeId;
    private ulong moviePrototypeId_;
    public bool HasMoviePrototypeId {
      get { return hasMoviePrototypeId; }
    }
    public ulong MoviePrototypeId {
      get { return moviePrototypeId_; }
    }
    
    public const int UserCancelledFieldNumber = 2;
    private bool hasUserCancelled;
    private bool userCancelled_;
    public bool HasUserCancelled {
      get { return hasUserCancelled; }
    }
    public bool UserCancelled {
      get { return userCancelled_; }
    }
    
    public const int SyncRequestIdFieldNumber = 3;
    private bool hasSyncRequestId;
    private uint syncRequestId_;
    public bool HasSyncRequestId {
      get { return hasSyncRequestId; }
    }
    public uint SyncRequestId {
      get { return syncRequestId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMoviePrototypeId) return false;
        if (!hasUserCancelled) return false;
        if (!hasSyncRequestId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNotifyFullscreenMovieFinishedFieldNames;
      if (hasMoviePrototypeId) {
        output.WriteUInt64(1, field_names[0], MoviePrototypeId);
      }
      if (hasUserCancelled) {
        output.WriteBool(2, field_names[2], UserCancelled);
      }
      if (hasSyncRequestId) {
        output.WriteUInt32(3, field_names[1], SyncRequestId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMoviePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MoviePrototypeId);
      }
      if (hasUserCancelled) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, UserCancelled);
      }
      if (hasSyncRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SyncRequestId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyFullscreenMovieFinished ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNotifyFullscreenMovieFinished MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNotifyFullscreenMovieFinished prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNotifyFullscreenMovieFinished, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNotifyFullscreenMovieFinished cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNotifyFullscreenMovieFinished result;
      
      private NetMessageNotifyFullscreenMovieFinished PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNotifyFullscreenMovieFinished original = result;
          result = new NetMessageNotifyFullscreenMovieFinished();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNotifyFullscreenMovieFinished MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieFinished.Descriptor; }
      }
      
      public override NetMessageNotifyFullscreenMovieFinished DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNotifyFullscreenMovieFinished.DefaultInstance; }
      }
      
      public override NetMessageNotifyFullscreenMovieFinished BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNotifyFullscreenMovieFinished) {
          return MergeFrom((NetMessageNotifyFullscreenMovieFinished) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNotifyFullscreenMovieFinished other) {
        if (other == global::Gazillion.NetMessageNotifyFullscreenMovieFinished.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMoviePrototypeId) {
          MoviePrototypeId = other.MoviePrototypeId;
        }
        if (other.HasUserCancelled) {
          UserCancelled = other.UserCancelled;
        }
        if (other.HasSyncRequestId) {
          SyncRequestId = other.SyncRequestId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNotifyFullscreenMovieFinishedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNotifyFullscreenMovieFinishedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMoviePrototypeId = input.ReadUInt64(ref result.moviePrototypeId_);
              break;
            }
            case 16: {
              result.hasUserCancelled = input.ReadBool(ref result.userCancelled_);
              break;
            }
            case 24: {
              result.hasSyncRequestId = input.ReadUInt32(ref result.syncRequestId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMoviePrototypeId {
        get { return result.hasMoviePrototypeId; }
      }
      public ulong MoviePrototypeId {
        get { return result.MoviePrototypeId; }
        set { SetMoviePrototypeId(value); }
      }
      public Builder SetMoviePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMoviePrototypeId = true;
        result.moviePrototypeId_ = value;
        return this;
      }
      public Builder ClearMoviePrototypeId() {
        PrepareBuilder();
        result.hasMoviePrototypeId = false;
        result.moviePrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasUserCancelled {
        get { return result.hasUserCancelled; }
      }
      public bool UserCancelled {
        get { return result.UserCancelled; }
        set { SetUserCancelled(value); }
      }
      public Builder SetUserCancelled(bool value) {
        PrepareBuilder();
        result.hasUserCancelled = true;
        result.userCancelled_ = value;
        return this;
      }
      public Builder ClearUserCancelled() {
        PrepareBuilder();
        result.hasUserCancelled = false;
        result.userCancelled_ = false;
        return this;
      }
      
      public bool HasSyncRequestId {
        get { return result.hasSyncRequestId; }
      }
      public uint SyncRequestId {
        get { return result.SyncRequestId; }
        set { SetSyncRequestId(value); }
      }
      public Builder SetSyncRequestId(uint value) {
        PrepareBuilder();
        result.hasSyncRequestId = true;
        result.syncRequestId_ = value;
        return this;
      }
      public Builder ClearSyncRequestId() {
        PrepareBuilder();
        result.hasSyncRequestId = false;
        result.syncRequestId_ = 0;
        return this;
      }
    }
    static NetMessageNotifyFullscreenMovieFinished() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNotifyLoadingScreenFinished : pb::GeneratedMessage<NetMessageNotifyLoadingScreenFinished, NetMessageNotifyLoadingScreenFinished.Builder> {
    private NetMessageNotifyLoadingScreenFinished() { }
    private static readonly NetMessageNotifyLoadingScreenFinished defaultInstance = new NetMessageNotifyLoadingScreenFinished().MakeReadOnly();
    private static readonly string[] _netMessageNotifyLoadingScreenFinishedFieldNames = new string[] {  };
    private static readonly uint[] _netMessageNotifyLoadingScreenFinishedFieldTags = new uint[] {  };
    public static NetMessageNotifyLoadingScreenFinished DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNotifyLoadingScreenFinished DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNotifyLoadingScreenFinished ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNotifyLoadingScreenFinished, NetMessageNotifyLoadingScreenFinished.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNotifyLoadingScreenFinished__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNotifyLoadingScreenFinishedFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNotifyLoadingScreenFinished ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNotifyLoadingScreenFinished MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNotifyLoadingScreenFinished prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNotifyLoadingScreenFinished, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNotifyLoadingScreenFinished cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNotifyLoadingScreenFinished result;
      
      private NetMessageNotifyLoadingScreenFinished PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNotifyLoadingScreenFinished original = result;
          result = new NetMessageNotifyLoadingScreenFinished();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNotifyLoadingScreenFinished MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNotifyLoadingScreenFinished.Descriptor; }
      }
      
      public override NetMessageNotifyLoadingScreenFinished DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNotifyLoadingScreenFinished.DefaultInstance; }
      }
      
      public override NetMessageNotifyLoadingScreenFinished BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNotifyLoadingScreenFinished) {
          return MergeFrom((NetMessageNotifyLoadingScreenFinished) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNotifyLoadingScreenFinished other) {
        if (other == global::Gazillion.NetMessageNotifyLoadingScreenFinished.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNotifyLoadingScreenFinishedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNotifyLoadingScreenFinishedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageNotifyLoadingScreenFinished() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotSetLevel : pb::GeneratedMessage<NetMessageBotSetLevel, NetMessageBotSetLevel.Builder> {
    private NetMessageBotSetLevel() { }
    private static readonly NetMessageBotSetLevel defaultInstance = new NetMessageBotSetLevel().MakeReadOnly();
    private static readonly string[] _netMessageBotSetLevelFieldNames = new string[] { "level" };
    private static readonly uint[] _netMessageBotSetLevelFieldTags = new uint[] { 8 };
    public static NetMessageBotSetLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotSetLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotSetLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotSetLevel, NetMessageBotSetLevel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetLevel__FieldAccessorTable; }
    }
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotSetLevelFieldNames;
      if (hasLevel) {
        output.WriteInt32(1, field_names[0], Level);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotSetLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotSetLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotSetLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotSetLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotSetLevel result;
      
      private NetMessageBotSetLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotSetLevel original = result;
          result = new NetMessageBotSetLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotSetLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotSetLevel.Descriptor; }
      }
      
      public override NetMessageBotSetLevel DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotSetLevel.DefaultInstance; }
      }
      
      public override NetMessageBotSetLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotSetLevel) {
          return MergeFrom((NetMessageBotSetLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotSetLevel other) {
        if (other == global::Gazillion.NetMessageBotSetLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotSetLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotSetLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static NetMessageBotSetLevel() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotGodMode : pb::GeneratedMessage<NetMessageBotGodMode, NetMessageBotGodMode.Builder> {
    private NetMessageBotGodMode() { }
    private static readonly NetMessageBotGodMode defaultInstance = new NetMessageBotGodMode().MakeReadOnly();
    private static readonly string[] _netMessageBotGodModeFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBotGodModeFieldTags = new uint[] {  };
    public static NetMessageBotGodMode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotGodMode DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotGodMode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotGodMode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotGodMode, NetMessageBotGodMode.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotGodMode__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotGodModeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotGodMode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotGodMode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotGodMode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotGodMode MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotGodMode prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotGodMode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotGodMode cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotGodMode result;
      
      private NetMessageBotGodMode PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotGodMode original = result;
          result = new NetMessageBotGodMode();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotGodMode MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotGodMode.Descriptor; }
      }
      
      public override NetMessageBotGodMode DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotGodMode.DefaultInstance; }
      }
      
      public override NetMessageBotGodMode BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotGodMode) {
          return MergeFrom((NetMessageBotGodMode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotGodMode other) {
        if (other == global::Gazillion.NetMessageBotGodMode.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotGodModeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotGodModeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBotGodMode() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotPickAvatar : pb::GeneratedMessage<NetMessageBotPickAvatar, NetMessageBotPickAvatar.Builder> {
    private NetMessageBotPickAvatar() { }
    private static readonly NetMessageBotPickAvatar defaultInstance = new NetMessageBotPickAvatar().MakeReadOnly();
    private static readonly string[] _netMessageBotPickAvatarFieldNames = new string[] { "avatarBotDataId", "level", "lootPrototype", "lootTableRoll" };
    private static readonly uint[] _netMessageBotPickAvatarFieldTags = new uint[] { 8, 16, 24, 32 };
    public static NetMessageBotPickAvatar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotPickAvatar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotPickAvatar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPickAvatar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotPickAvatar, NetMessageBotPickAvatar.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPickAvatar__FieldAccessorTable; }
    }
    
    public const int AvatarBotDataIdFieldNumber = 1;
    private bool hasAvatarBotDataId;
    private ulong avatarBotDataId_;
    public bool HasAvatarBotDataId {
      get { return hasAvatarBotDataId; }
    }
    public ulong AvatarBotDataId {
      get { return avatarBotDataId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int LootPrototypeFieldNumber = 3;
    private bool hasLootPrototype;
    private ulong lootPrototype_;
    public bool HasLootPrototype {
      get { return hasLootPrototype; }
    }
    public ulong LootPrototype {
      get { return lootPrototype_; }
    }
    
    public const int LootTableRollFieldNumber = 4;
    private bool hasLootTableRoll;
    private uint lootTableRoll_;
    public bool HasLootTableRoll {
      get { return hasLootTableRoll; }
    }
    public uint LootTableRoll {
      get { return lootTableRoll_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarBotDataId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotPickAvatarFieldNames;
      if (hasAvatarBotDataId) {
        output.WriteUInt64(1, field_names[0], AvatarBotDataId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[1], Level);
      }
      if (hasLootPrototype) {
        output.WriteUInt64(3, field_names[2], LootPrototype);
      }
      if (hasLootTableRoll) {
        output.WriteUInt32(4, field_names[3], LootTableRoll);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarBotDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarBotDataId);
      }
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
      }
      if (hasLootPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, LootPrototype);
      }
      if (hasLootTableRoll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LootTableRoll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPickAvatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotPickAvatar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotPickAvatar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotPickAvatar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotPickAvatar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotPickAvatar result;
      
      private NetMessageBotPickAvatar PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotPickAvatar original = result;
          result = new NetMessageBotPickAvatar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotPickAvatar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotPickAvatar.Descriptor; }
      }
      
      public override NetMessageBotPickAvatar DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotPickAvatar.DefaultInstance; }
      }
      
      public override NetMessageBotPickAvatar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotPickAvatar) {
          return MergeFrom((NetMessageBotPickAvatar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotPickAvatar other) {
        if (other == global::Gazillion.NetMessageBotPickAvatar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarBotDataId) {
          AvatarBotDataId = other.AvatarBotDataId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasLootPrototype) {
          LootPrototype = other.LootPrototype;
        }
        if (other.HasLootTableRoll) {
          LootTableRoll = other.LootTableRoll;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotPickAvatarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotPickAvatarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarBotDataId = input.ReadUInt64(ref result.avatarBotDataId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasLootPrototype = input.ReadUInt64(ref result.lootPrototype_);
              break;
            }
            case 32: {
              result.hasLootTableRoll = input.ReadUInt32(ref result.lootTableRoll_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarBotDataId {
        get { return result.hasAvatarBotDataId; }
      }
      public ulong AvatarBotDataId {
        get { return result.AvatarBotDataId; }
        set { SetAvatarBotDataId(value); }
      }
      public Builder SetAvatarBotDataId(ulong value) {
        PrepareBuilder();
        result.hasAvatarBotDataId = true;
        result.avatarBotDataId_ = value;
        return this;
      }
      public Builder ClearAvatarBotDataId() {
        PrepareBuilder();
        result.hasAvatarBotDataId = false;
        result.avatarBotDataId_ = 0UL;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasLootPrototype {
        get { return result.hasLootPrototype; }
      }
      public ulong LootPrototype {
        get { return result.LootPrototype; }
        set { SetLootPrototype(value); }
      }
      public Builder SetLootPrototype(ulong value) {
        PrepareBuilder();
        result.hasLootPrototype = true;
        result.lootPrototype_ = value;
        return this;
      }
      public Builder ClearLootPrototype() {
        PrepareBuilder();
        result.hasLootPrototype = false;
        result.lootPrototype_ = 0UL;
        return this;
      }
      
      public bool HasLootTableRoll {
        get { return result.hasLootTableRoll; }
      }
      public uint LootTableRoll {
        get { return result.LootTableRoll; }
        set { SetLootTableRoll(value); }
      }
      public Builder SetLootTableRoll(uint value) {
        PrepareBuilder();
        result.hasLootTableRoll = true;
        result.lootTableRoll_ = value;
        return this;
      }
      public Builder ClearLootTableRoll() {
        PrepareBuilder();
        result.hasLootTableRoll = false;
        result.lootTableRoll_ = 0;
        return this;
      }
    }
    static NetMessageBotPickAvatar() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotRegionChange : pb::GeneratedMessage<NetMessageBotRegionChange, NetMessageBotRegionChange.Builder> {
    private NetMessageBotRegionChange() { }
    private static readonly NetMessageBotRegionChange defaultInstance = new NetMessageBotRegionChange().MakeReadOnly();
    private static readonly string[] _netMessageBotRegionChangeFieldNames = new string[] { "regionDataId" };
    private static readonly uint[] _netMessageBotRegionChangeFieldTags = new uint[] { 8 };
    public static NetMessageBotRegionChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotRegionChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotRegionChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotRegionChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotRegionChange, NetMessageBotRegionChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotRegionChange__FieldAccessorTable; }
    }
    
    public const int RegionDataIdFieldNumber = 1;
    private bool hasRegionDataId;
    private ulong regionDataId_;
    public bool HasRegionDataId {
      get { return hasRegionDataId; }
    }
    public ulong RegionDataId {
      get { return regionDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionDataId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotRegionChangeFieldNames;
      if (hasRegionDataId) {
        output.WriteUInt64(1, field_names[0], RegionDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotRegionChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotRegionChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotRegionChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotRegionChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotRegionChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotRegionChange result;
      
      private NetMessageBotRegionChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotRegionChange original = result;
          result = new NetMessageBotRegionChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotRegionChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotRegionChange.Descriptor; }
      }
      
      public override NetMessageBotRegionChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotRegionChange.DefaultInstance; }
      }
      
      public override NetMessageBotRegionChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotRegionChange) {
          return MergeFrom((NetMessageBotRegionChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotRegionChange other) {
        if (other == global::Gazillion.NetMessageBotRegionChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionDataId) {
          RegionDataId = other.RegionDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotRegionChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotRegionChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionDataId = input.ReadUInt64(ref result.regionDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionDataId {
        get { return result.hasRegionDataId; }
      }
      public ulong RegionDataId {
        get { return result.RegionDataId; }
        set { SetRegionDataId(value); }
      }
      public Builder SetRegionDataId(ulong value) {
        PrepareBuilder();
        result.hasRegionDataId = true;
        result.regionDataId_ = value;
        return this;
      }
      public Builder ClearRegionDataId() {
        PrepareBuilder();
        result.hasRegionDataId = false;
        result.regionDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageBotRegionChange() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotWarpAreaNext : pb::GeneratedMessage<NetMessageBotWarpAreaNext, NetMessageBotWarpAreaNext.Builder> {
    private NetMessageBotWarpAreaNext() { }
    private static readonly NetMessageBotWarpAreaNext defaultInstance = new NetMessageBotWarpAreaNext().MakeReadOnly();
    private static readonly string[] _netMessageBotWarpAreaNextFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBotWarpAreaNextFieldTags = new uint[] {  };
    public static NetMessageBotWarpAreaNext DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotWarpAreaNext DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotWarpAreaNext ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotWarpAreaNext__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotWarpAreaNext, NetMessageBotWarpAreaNext.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotWarpAreaNext__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotWarpAreaNextFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotWarpAreaNext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotWarpAreaNext MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotWarpAreaNext prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotWarpAreaNext, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotWarpAreaNext cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotWarpAreaNext result;
      
      private NetMessageBotWarpAreaNext PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotWarpAreaNext original = result;
          result = new NetMessageBotWarpAreaNext();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotWarpAreaNext MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotWarpAreaNext.Descriptor; }
      }
      
      public override NetMessageBotWarpAreaNext DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotWarpAreaNext.DefaultInstance; }
      }
      
      public override NetMessageBotWarpAreaNext BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotWarpAreaNext) {
          return MergeFrom((NetMessageBotWarpAreaNext) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotWarpAreaNext other) {
        if (other == global::Gazillion.NetMessageBotWarpAreaNext.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotWarpAreaNextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotWarpAreaNextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBotWarpAreaNext() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotLootGive : pb::GeneratedMessage<NetMessageBotLootGive, NetMessageBotLootGive.Builder> {
    private NetMessageBotLootGive() { }
    private static readonly NetMessageBotLootGive defaultInstance = new NetMessageBotLootGive().MakeReadOnly();
    private static readonly string[] _netMessageBotLootGiveFieldNames = new string[] { "lootPrototype", "lootTableRoll" };
    private static readonly uint[] _netMessageBotLootGiveFieldTags = new uint[] { 8, 16 };
    public static NetMessageBotLootGive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotLootGive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotLootGive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotLootGive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotLootGive, NetMessageBotLootGive.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotLootGive__FieldAccessorTable; }
    }
    
    public const int LootPrototypeFieldNumber = 1;
    private bool hasLootPrototype;
    private ulong lootPrototype_;
    public bool HasLootPrototype {
      get { return hasLootPrototype; }
    }
    public ulong LootPrototype {
      get { return lootPrototype_; }
    }
    
    public const int LootTableRollFieldNumber = 2;
    private bool hasLootTableRoll;
    private uint lootTableRoll_;
    public bool HasLootTableRoll {
      get { return hasLootTableRoll; }
    }
    public uint LootTableRoll {
      get { return lootTableRoll_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLootPrototype) return false;
        if (!hasLootTableRoll) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotLootGiveFieldNames;
      if (hasLootPrototype) {
        output.WriteUInt64(1, field_names[0], LootPrototype);
      }
      if (hasLootTableRoll) {
        output.WriteUInt32(2, field_names[1], LootTableRoll);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLootPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LootPrototype);
      }
      if (hasLootTableRoll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, LootTableRoll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotLootGive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotLootGive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotLootGive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotLootGive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotLootGive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotLootGive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotLootGive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotLootGive result;
      
      private NetMessageBotLootGive PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotLootGive original = result;
          result = new NetMessageBotLootGive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotLootGive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotLootGive.Descriptor; }
      }
      
      public override NetMessageBotLootGive DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotLootGive.DefaultInstance; }
      }
      
      public override NetMessageBotLootGive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotLootGive) {
          return MergeFrom((NetMessageBotLootGive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotLootGive other) {
        if (other == global::Gazillion.NetMessageBotLootGive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLootPrototype) {
          LootPrototype = other.LootPrototype;
        }
        if (other.HasLootTableRoll) {
          LootTableRoll = other.LootTableRoll;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotLootGiveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotLootGiveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLootPrototype = input.ReadUInt64(ref result.lootPrototype_);
              break;
            }
            case 16: {
              result.hasLootTableRoll = input.ReadUInt32(ref result.lootTableRoll_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLootPrototype {
        get { return result.hasLootPrototype; }
      }
      public ulong LootPrototype {
        get { return result.LootPrototype; }
        set { SetLootPrototype(value); }
      }
      public Builder SetLootPrototype(ulong value) {
        PrepareBuilder();
        result.hasLootPrototype = true;
        result.lootPrototype_ = value;
        return this;
      }
      public Builder ClearLootPrototype() {
        PrepareBuilder();
        result.hasLootPrototype = false;
        result.lootPrototype_ = 0UL;
        return this;
      }
      
      public bool HasLootTableRoll {
        get { return result.hasLootTableRoll; }
      }
      public uint LootTableRoll {
        get { return result.LootTableRoll; }
        set { SetLootTableRoll(value); }
      }
      public Builder SetLootTableRoll(uint value) {
        PrepareBuilder();
        result.hasLootTableRoll = true;
        result.lootTableRoll_ = value;
        return this;
      }
      public Builder ClearLootTableRoll() {
        PrepareBuilder();
        result.hasLootTableRoll = false;
        result.lootTableRoll_ = 0;
        return this;
      }
    }
    static NetMessageBotLootGive() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotSetPvPFaction : pb::GeneratedMessage<NetMessageBotSetPvPFaction, NetMessageBotSetPvPFaction.Builder> {
    private NetMessageBotSetPvPFaction() { }
    private static readonly NetMessageBotSetPvPFaction defaultInstance = new NetMessageBotSetPvPFaction().MakeReadOnly();
    private static readonly string[] _netMessageBotSetPvPFactionFieldNames = new string[] { "factionSetPrototype" };
    private static readonly uint[] _netMessageBotSetPvPFactionFieldTags = new uint[] { 8 };
    public static NetMessageBotSetPvPFaction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotSetPvPFaction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotSetPvPFaction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetPvPFaction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotSetPvPFaction, NetMessageBotSetPvPFaction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotSetPvPFaction__FieldAccessorTable; }
    }
    
    public const int FactionSetPrototypeFieldNumber = 1;
    private bool hasFactionSetPrototype;
    private ulong factionSetPrototype_;
    public bool HasFactionSetPrototype {
      get { return hasFactionSetPrototype; }
    }
    public ulong FactionSetPrototype {
      get { return factionSetPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactionSetPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotSetPvPFactionFieldNames;
      if (hasFactionSetPrototype) {
        output.WriteUInt64(1, field_names[0], FactionSetPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFactionSetPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, FactionSetPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotSetPvPFaction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotSetPvPFaction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotSetPvPFaction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotSetPvPFaction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotSetPvPFaction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotSetPvPFaction result;
      
      private NetMessageBotSetPvPFaction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotSetPvPFaction original = result;
          result = new NetMessageBotSetPvPFaction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotSetPvPFaction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotSetPvPFaction.Descriptor; }
      }
      
      public override NetMessageBotSetPvPFaction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotSetPvPFaction.DefaultInstance; }
      }
      
      public override NetMessageBotSetPvPFaction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotSetPvPFaction) {
          return MergeFrom((NetMessageBotSetPvPFaction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotSetPvPFaction other) {
        if (other == global::Gazillion.NetMessageBotSetPvPFaction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFactionSetPrototype) {
          FactionSetPrototype = other.FactionSetPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotSetPvPFactionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotSetPvPFactionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFactionSetPrototype = input.ReadUInt64(ref result.factionSetPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFactionSetPrototype {
        get { return result.hasFactionSetPrototype; }
      }
      public ulong FactionSetPrototype {
        get { return result.FactionSetPrototype; }
        set { SetFactionSetPrototype(value); }
      }
      public Builder SetFactionSetPrototype(ulong value) {
        PrepareBuilder();
        result.hasFactionSetPrototype = true;
        result.factionSetPrototype_ = value;
        return this;
      }
      public Builder ClearFactionSetPrototype() {
        PrepareBuilder();
        result.hasFactionSetPrototype = false;
        result.factionSetPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageBotSetPvPFaction() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBotPvPQueue : pb::GeneratedMessage<NetMessageBotPvPQueue, NetMessageBotPvPQueue.Builder> {
    private NetMessageBotPvPQueue() { }
    private static readonly NetMessageBotPvPQueue defaultInstance = new NetMessageBotPvPQueue().MakeReadOnly();
    private static readonly string[] _netMessageBotPvPQueueFieldNames = new string[] { "pvpQueueId" };
    private static readonly uint[] _netMessageBotPvPQueueFieldTags = new uint[] { 8 };
    public static NetMessageBotPvPQueue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBotPvPQueue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBotPvPQueue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPvPQueue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBotPvPQueue, NetMessageBotPvPQueue.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBotPvPQueue__FieldAccessorTable; }
    }
    
    public const int PvpQueueIdFieldNumber = 1;
    private bool hasPvpQueueId;
    private ulong pvpQueueId_;
    public bool HasPvpQueueId {
      get { return hasPvpQueueId; }
    }
    public ulong PvpQueueId {
      get { return pvpQueueId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpQueueId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBotPvPQueueFieldNames;
      if (hasPvpQueueId) {
        output.WriteUInt64(1, field_names[0], PvpQueueId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpQueueId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpQueueId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBotPvPQueue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBotPvPQueue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBotPvPQueue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBotPvPQueue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBotPvPQueue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBotPvPQueue result;
      
      private NetMessageBotPvPQueue PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBotPvPQueue original = result;
          result = new NetMessageBotPvPQueue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBotPvPQueue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBotPvPQueue.Descriptor; }
      }
      
      public override NetMessageBotPvPQueue DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBotPvPQueue.DefaultInstance; }
      }
      
      public override NetMessageBotPvPQueue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBotPvPQueue) {
          return MergeFrom((NetMessageBotPvPQueue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBotPvPQueue other) {
        if (other == global::Gazillion.NetMessageBotPvPQueue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpQueueId) {
          PvpQueueId = other.PvpQueueId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBotPvPQueueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBotPvPQueueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpQueueId = input.ReadUInt64(ref result.pvpQueueId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpQueueId {
        get { return result.hasPvpQueueId; }
      }
      public ulong PvpQueueId {
        get { return result.PvpQueueId; }
        set { SetPvpQueueId(value); }
      }
      public Builder SetPvpQueueId(ulong value) {
        PrepareBuilder();
        result.hasPvpQueueId = true;
        result.pvpQueueId_ = value;
        return this;
      }
      public Builder ClearPvpQueueId() {
        PrepareBuilder();
        result.hasPvpQueueId = false;
        result.pvpQueueId_ = 0UL;
        return this;
      }
    }
    static NetMessageBotPvPQueue() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetTrackerReport : pb::GeneratedMessage<NetMessageGetTrackerReport, NetMessageGetTrackerReport.Builder> {
    private NetMessageGetTrackerReport() { }
    private static readonly NetMessageGetTrackerReport defaultInstance = new NetMessageGetTrackerReport().MakeReadOnly();
    private static readonly string[] _netMessageGetTrackerReportFieldNames = new string[] { "messageDirection", "messageSource" };
    private static readonly uint[] _netMessageGetTrackerReportFieldTags = new uint[] { 16, 8 };
    public static NetMessageGetTrackerReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetTrackerReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetTrackerReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetTrackerReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetTrackerReport, NetMessageGetTrackerReport.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGetTrackerReport__FieldAccessorTable; }
    }
    
    public const int MessageSourceFieldNumber = 1;
    private bool hasMessageSource;
    private uint messageSource_;
    public bool HasMessageSource {
      get { return hasMessageSource; }
    }
    public uint MessageSource {
      get { return messageSource_; }
    }
    
    public const int MessageDirectionFieldNumber = 2;
    private bool hasMessageDirection;
    private uint messageDirection_;
    public bool HasMessageDirection {
      get { return hasMessageDirection; }
    }
    public uint MessageDirection {
      get { return messageDirection_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageSource) return false;
        if (!hasMessageDirection) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetTrackerReportFieldNames;
      if (hasMessageSource) {
        output.WriteUInt32(1, field_names[1], MessageSource);
      }
      if (hasMessageDirection) {
        output.WriteUInt32(2, field_names[0], MessageDirection);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageSource) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MessageSource);
      }
      if (hasMessageDirection) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MessageDirection);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetTrackerReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetTrackerReport MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetTrackerReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetTrackerReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetTrackerReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetTrackerReport result;
      
      private NetMessageGetTrackerReport PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetTrackerReport original = result;
          result = new NetMessageGetTrackerReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetTrackerReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetTrackerReport.Descriptor; }
      }
      
      public override NetMessageGetTrackerReport DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetTrackerReport.DefaultInstance; }
      }
      
      public override NetMessageGetTrackerReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetTrackerReport) {
          return MergeFrom((NetMessageGetTrackerReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetTrackerReport other) {
        if (other == global::Gazillion.NetMessageGetTrackerReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageSource) {
          MessageSource = other.MessageSource;
        }
        if (other.HasMessageDirection) {
          MessageDirection = other.MessageDirection;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetTrackerReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetTrackerReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageSource = input.ReadUInt32(ref result.messageSource_);
              break;
            }
            case 16: {
              result.hasMessageDirection = input.ReadUInt32(ref result.messageDirection_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageSource {
        get { return result.hasMessageSource; }
      }
      public uint MessageSource {
        get { return result.MessageSource; }
        set { SetMessageSource(value); }
      }
      public Builder SetMessageSource(uint value) {
        PrepareBuilder();
        result.hasMessageSource = true;
        result.messageSource_ = value;
        return this;
      }
      public Builder ClearMessageSource() {
        PrepareBuilder();
        result.hasMessageSource = false;
        result.messageSource_ = 0;
        return this;
      }
      
      public bool HasMessageDirection {
        get { return result.hasMessageDirection; }
      }
      public uint MessageDirection {
        get { return result.MessageDirection; }
        set { SetMessageDirection(value); }
      }
      public Builder SetMessageDirection(uint value) {
        PrepareBuilder();
        result.hasMessageDirection = true;
        result.messageDirection_ = value;
        return this;
      }
      public Builder ClearMessageDirection() {
        PrepareBuilder();
        result.hasMessageDirection = false;
        result.messageDirection_ = 0;
        return this;
      }
    }
    static NetMessageGetTrackerReport() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayKismetSeqDone : pb::GeneratedMessage<NetMessagePlayKismetSeqDone, NetMessagePlayKismetSeqDone.Builder> {
    private NetMessagePlayKismetSeqDone() { }
    private static readonly NetMessagePlayKismetSeqDone defaultInstance = new NetMessagePlayKismetSeqDone().MakeReadOnly();
    private static readonly string[] _netMessagePlayKismetSeqDoneFieldNames = new string[] { "kismetSeqPrototypeId", "syncRequestId" };
    private static readonly uint[] _netMessagePlayKismetSeqDoneFieldTags = new uint[] { 8, 16 };
    public static NetMessagePlayKismetSeqDone DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayKismetSeqDone DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayKismetSeqDone ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayKismetSeqDone__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayKismetSeqDone, NetMessagePlayKismetSeqDone.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayKismetSeqDone__FieldAccessorTable; }
    }
    
    public const int KismetSeqPrototypeIdFieldNumber = 1;
    private bool hasKismetSeqPrototypeId;
    private ulong kismetSeqPrototypeId_;
    public bool HasKismetSeqPrototypeId {
      get { return hasKismetSeqPrototypeId; }
    }
    public ulong KismetSeqPrototypeId {
      get { return kismetSeqPrototypeId_; }
    }
    
    public const int SyncRequestIdFieldNumber = 2;
    private bool hasSyncRequestId;
    private uint syncRequestId_;
    public bool HasSyncRequestId {
      get { return hasSyncRequestId; }
    }
    public uint SyncRequestId {
      get { return syncRequestId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKismetSeqPrototypeId) return false;
        if (!hasSyncRequestId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayKismetSeqDoneFieldNames;
      if (hasKismetSeqPrototypeId) {
        output.WriteUInt64(1, field_names[0], KismetSeqPrototypeId);
      }
      if (hasSyncRequestId) {
        output.WriteUInt32(2, field_names[1], SyncRequestId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKismetSeqPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, KismetSeqPrototypeId);
      }
      if (hasSyncRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SyncRequestId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeqDone ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayKismetSeqDone MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayKismetSeqDone prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayKismetSeqDone, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayKismetSeqDone cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayKismetSeqDone result;
      
      private NetMessagePlayKismetSeqDone PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayKismetSeqDone original = result;
          result = new NetMessagePlayKismetSeqDone();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayKismetSeqDone MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayKismetSeqDone.Descriptor; }
      }
      
      public override NetMessagePlayKismetSeqDone DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayKismetSeqDone.DefaultInstance; }
      }
      
      public override NetMessagePlayKismetSeqDone BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayKismetSeqDone) {
          return MergeFrom((NetMessagePlayKismetSeqDone) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayKismetSeqDone other) {
        if (other == global::Gazillion.NetMessagePlayKismetSeqDone.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKismetSeqPrototypeId) {
          KismetSeqPrototypeId = other.KismetSeqPrototypeId;
        }
        if (other.HasSyncRequestId) {
          SyncRequestId = other.SyncRequestId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayKismetSeqDoneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayKismetSeqDoneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKismetSeqPrototypeId = input.ReadUInt64(ref result.kismetSeqPrototypeId_);
              break;
            }
            case 16: {
              result.hasSyncRequestId = input.ReadUInt32(ref result.syncRequestId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKismetSeqPrototypeId {
        get { return result.hasKismetSeqPrototypeId; }
      }
      public ulong KismetSeqPrototypeId {
        get { return result.KismetSeqPrototypeId; }
        set { SetKismetSeqPrototypeId(value); }
      }
      public Builder SetKismetSeqPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = true;
        result.kismetSeqPrototypeId_ = value;
        return this;
      }
      public Builder ClearKismetSeqPrototypeId() {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = false;
        result.kismetSeqPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasSyncRequestId {
        get { return result.hasSyncRequestId; }
      }
      public uint SyncRequestId {
        get { return result.SyncRequestId; }
        set { SetSyncRequestId(value); }
      }
      public Builder SetSyncRequestId(uint value) {
        PrepareBuilder();
        result.hasSyncRequestId = true;
        result.syncRequestId_ = value;
        return this;
      }
      public Builder ClearSyncRequestId() {
        PrepareBuilder();
        result.hasSyncRequestId = false;
        result.syncRequestId_ = 0;
        return this;
      }
    }
    static NetMessagePlayKismetSeqDone() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVerifyFailedForRepId : pb::GeneratedMessage<NetMessageVerifyFailedForRepId, NetMessageVerifyFailedForRepId.Builder> {
    private NetMessageVerifyFailedForRepId() { }
    private static readonly NetMessageVerifyFailedForRepId defaultInstance = new NetMessageVerifyFailedForRepId().MakeReadOnly();
    private static readonly string[] _netMessageVerifyFailedForRepIdFieldNames = new string[] { "debugmsg", "file", "line", "repid1", "repid2" };
    private static readonly uint[] _netMessageVerifyFailedForRepIdFieldTags = new uint[] { 34, 18, 24, 8, 40 };
    public static NetMessageVerifyFailedForRepId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVerifyFailedForRepId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVerifyFailedForRepId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVerifyFailedForRepId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVerifyFailedForRepId, NetMessageVerifyFailedForRepId.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVerifyFailedForRepId__FieldAccessorTable; }
    }
    
    public const int Repid1FieldNumber = 1;
    private bool hasRepid1;
    private ulong repid1_;
    public bool HasRepid1 {
      get { return hasRepid1; }
    }
    public ulong Repid1 {
      get { return repid1_; }
    }
    
    public const int FileFieldNumber = 2;
    private bool hasFile;
    private string file_ = "";
    public bool HasFile {
      get { return hasFile; }
    }
    public string File {
      get { return file_; }
    }
    
    public const int LineFieldNumber = 3;
    private bool hasLine;
    private uint line_;
    public bool HasLine {
      get { return hasLine; }
    }
    public uint Line {
      get { return line_; }
    }
    
    public const int DebugmsgFieldNumber = 4;
    private bool hasDebugmsg;
    private string debugmsg_ = "";
    public bool HasDebugmsg {
      get { return hasDebugmsg; }
    }
    public string Debugmsg {
      get { return debugmsg_; }
    }
    
    public const int Repid2FieldNumber = 5;
    private bool hasRepid2;
    private ulong repid2_;
    public bool HasRepid2 {
      get { return hasRepid2; }
    }
    public ulong Repid2 {
      get { return repid2_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRepid1) return false;
        if (!hasFile) return false;
        if (!hasLine) return false;
        if (!hasDebugmsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVerifyFailedForRepIdFieldNames;
      if (hasRepid1) {
        output.WriteUInt64(1, field_names[3], Repid1);
      }
      if (hasFile) {
        output.WriteString(2, field_names[1], File);
      }
      if (hasLine) {
        output.WriteUInt32(3, field_names[2], Line);
      }
      if (hasDebugmsg) {
        output.WriteString(4, field_names[0], Debugmsg);
      }
      if (hasRepid2) {
        output.WriteUInt64(5, field_names[4], Repid2);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRepid1) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Repid1);
      }
      if (hasFile) {
        size += pb::CodedOutputStream.ComputeStringSize(2, File);
      }
      if (hasLine) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Line);
      }
      if (hasDebugmsg) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Debugmsg);
      }
      if (hasRepid2) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, Repid2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyFailedForRepId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVerifyFailedForRepId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVerifyFailedForRepId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVerifyFailedForRepId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVerifyFailedForRepId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVerifyFailedForRepId result;
      
      private NetMessageVerifyFailedForRepId PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVerifyFailedForRepId original = result;
          result = new NetMessageVerifyFailedForRepId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVerifyFailedForRepId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVerifyFailedForRepId.Descriptor; }
      }
      
      public override NetMessageVerifyFailedForRepId DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVerifyFailedForRepId.DefaultInstance; }
      }
      
      public override NetMessageVerifyFailedForRepId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVerifyFailedForRepId) {
          return MergeFrom((NetMessageVerifyFailedForRepId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVerifyFailedForRepId other) {
        if (other == global::Gazillion.NetMessageVerifyFailedForRepId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRepid1) {
          Repid1 = other.Repid1;
        }
        if (other.HasFile) {
          File = other.File;
        }
        if (other.HasLine) {
          Line = other.Line;
        }
        if (other.HasDebugmsg) {
          Debugmsg = other.Debugmsg;
        }
        if (other.HasRepid2) {
          Repid2 = other.Repid2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVerifyFailedForRepIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVerifyFailedForRepIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRepid1 = input.ReadUInt64(ref result.repid1_);
              break;
            }
            case 18: {
              result.hasFile = input.ReadString(ref result.file_);
              break;
            }
            case 24: {
              result.hasLine = input.ReadUInt32(ref result.line_);
              break;
            }
            case 34: {
              result.hasDebugmsg = input.ReadString(ref result.debugmsg_);
              break;
            }
            case 40: {
              result.hasRepid2 = input.ReadUInt64(ref result.repid2_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRepid1 {
        get { return result.hasRepid1; }
      }
      public ulong Repid1 {
        get { return result.Repid1; }
        set { SetRepid1(value); }
      }
      public Builder SetRepid1(ulong value) {
        PrepareBuilder();
        result.hasRepid1 = true;
        result.repid1_ = value;
        return this;
      }
      public Builder ClearRepid1() {
        PrepareBuilder();
        result.hasRepid1 = false;
        result.repid1_ = 0UL;
        return this;
      }
      
      public bool HasFile {
        get { return result.hasFile; }
      }
      public string File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = "";
        return this;
      }
      
      public bool HasLine {
        get { return result.hasLine; }
      }
      public uint Line {
        get { return result.Line; }
        set { SetLine(value); }
      }
      public Builder SetLine(uint value) {
        PrepareBuilder();
        result.hasLine = true;
        result.line_ = value;
        return this;
      }
      public Builder ClearLine() {
        PrepareBuilder();
        result.hasLine = false;
        result.line_ = 0;
        return this;
      }
      
      public bool HasDebugmsg {
        get { return result.hasDebugmsg; }
      }
      public string Debugmsg {
        get { return result.Debugmsg; }
        set { SetDebugmsg(value); }
      }
      public Builder SetDebugmsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugmsg = true;
        result.debugmsg_ = value;
        return this;
      }
      public Builder ClearDebugmsg() {
        PrepareBuilder();
        result.hasDebugmsg = false;
        result.debugmsg_ = "";
        return this;
      }
      
      public bool HasRepid2 {
        get { return result.hasRepid2; }
      }
      public ulong Repid2 {
        get { return result.Repid2; }
        set { SetRepid2(value); }
      }
      public Builder SetRepid2(ulong value) {
        PrepareBuilder();
        result.hasRepid2 = true;
        result.repid2_ = value;
        return this;
      }
      public Builder ClearRepid2() {
        PrepareBuilder();
        result.hasRepid2 = false;
        result.repid2_ = 0UL;
        return this;
      }
    }
    static NetMessageVerifyFailedForRepId() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGracefulDisconnect : pb::GeneratedMessage<NetMessageGracefulDisconnect, NetMessageGracefulDisconnect.Builder> {
    private NetMessageGracefulDisconnect() { }
    private static readonly NetMessageGracefulDisconnect defaultInstance = new NetMessageGracefulDisconnect().MakeReadOnly();
    private static readonly string[] _netMessageGracefulDisconnectFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGracefulDisconnectFieldTags = new uint[] {  };
    public static NetMessageGracefulDisconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGracefulDisconnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGracefulDisconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGracefulDisconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGracefulDisconnect, NetMessageGracefulDisconnect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGracefulDisconnect__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGracefulDisconnectFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGracefulDisconnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGracefulDisconnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGracefulDisconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGracefulDisconnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGracefulDisconnect result;
      
      private NetMessageGracefulDisconnect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGracefulDisconnect original = result;
          result = new NetMessageGracefulDisconnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGracefulDisconnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGracefulDisconnect.Descriptor; }
      }
      
      public override NetMessageGracefulDisconnect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGracefulDisconnect.DefaultInstance; }
      }
      
      public override NetMessageGracefulDisconnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGracefulDisconnect) {
          return MergeFrom((NetMessageGracefulDisconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGracefulDisconnect other) {
        if (other == global::Gazillion.NetMessageGracefulDisconnect.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGracefulDisconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGracefulDisconnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGracefulDisconnect() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestStartNewGame : pb::GeneratedMessage<NetMessageRequestStartNewGame, NetMessageRequestStartNewGame.Builder> {
    private NetMessageRequestStartNewGame() { }
    private static readonly NetMessageRequestStartNewGame defaultInstance = new NetMessageRequestStartNewGame().MakeReadOnly();
    private static readonly string[] _netMessageRequestStartNewGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestStartNewGameFieldTags = new uint[] {  };
    public static NetMessageRequestStartNewGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestStartNewGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestStartNewGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStartNewGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestStartNewGame, NetMessageRequestStartNewGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestStartNewGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestStartNewGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestStartNewGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestStartNewGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestStartNewGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestStartNewGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestStartNewGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestStartNewGame result;
      
      private NetMessageRequestStartNewGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestStartNewGame original = result;
          result = new NetMessageRequestStartNewGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestStartNewGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestStartNewGame.Descriptor; }
      }
      
      public override NetMessageRequestStartNewGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestStartNewGame.DefaultInstance; }
      }
      
      public override NetMessageRequestStartNewGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestStartNewGame) {
          return MergeFrom((NetMessageRequestStartNewGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestStartNewGame other) {
        if (other == global::Gazillion.NetMessageRequestStartNewGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestStartNewGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestStartNewGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestStartNewGame() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetDialogTarget : pb::GeneratedMessage<NetMessageSetDialogTarget, NetMessageSetDialogTarget.Builder> {
    private NetMessageSetDialogTarget() { }
    private static readonly NetMessageSetDialogTarget defaultInstance = new NetMessageSetDialogTarget().MakeReadOnly();
    private static readonly string[] _netMessageSetDialogTargetFieldNames = new string[] { "interactorId", "targetId" };
    private static readonly uint[] _netMessageSetDialogTargetFieldTags = new uint[] { 16, 8 };
    public static NetMessageSetDialogTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetDialogTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetDialogTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetDialogTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetDialogTarget, NetMessageSetDialogTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetDialogTarget__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int InteractorIdFieldNumber = 2;
    private bool hasInteractorId;
    private ulong interactorId_;
    public bool HasInteractorId {
      get { return hasInteractorId; }
    }
    public ulong InteractorId {
      get { return interactorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasInteractorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetDialogTargetFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasInteractorId) {
        output.WriteUInt64(2, field_names[0], InteractorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasInteractorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InteractorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDialogTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetDialogTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetDialogTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetDialogTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetDialogTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetDialogTarget result;
      
      private NetMessageSetDialogTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetDialogTarget original = result;
          result = new NetMessageSetDialogTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetDialogTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetDialogTarget.Descriptor; }
      }
      
      public override NetMessageSetDialogTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetDialogTarget.DefaultInstance; }
      }
      
      public override NetMessageSetDialogTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetDialogTarget) {
          return MergeFrom((NetMessageSetDialogTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetDialogTarget other) {
        if (other == global::Gazillion.NetMessageSetDialogTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasInteractorId) {
          InteractorId = other.InteractorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetDialogTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetDialogTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasInteractorId = input.ReadUInt64(ref result.interactorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasInteractorId {
        get { return result.hasInteractorId; }
      }
      public ulong InteractorId {
        get { return result.InteractorId; }
        set { SetInteractorId(value); }
      }
      public Builder SetInteractorId(ulong value) {
        PrepareBuilder();
        result.hasInteractorId = true;
        result.interactorId_ = value;
        return this;
      }
      public Builder ClearInteractorId() {
        PrepareBuilder();
        result.hasInteractorId = false;
        result.interactorId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetDialogTarget() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDialogResult : pb::GeneratedMessage<NetMessageDialogResult, NetMessageDialogResult.Builder> {
    private NetMessageDialogResult() { }
    private static readonly NetMessageDialogResult defaultInstance = new NetMessageDialogResult().MakeReadOnly();
    private static readonly string[] _netMessageDialogResultFieldNames = new string[] { "buttonIndex", "checkboxClicked", "playerGuid", "serverId" };
    private static readonly uint[] _netMessageDialogResultFieldTags = new uint[] { 24, 32, 16, 8 };
    public static NetMessageDialogResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDialogResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDialogResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDialogResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDialogResult, NetMessageDialogResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageDialogResult__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private ulong serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public ulong ServerId {
      get { return serverId_; }
    }
    
    public const int PlayerGuidFieldNumber = 2;
    private bool hasPlayerGuid;
    private ulong playerGuid_;
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public ulong PlayerGuid {
      get { return playerGuid_; }
    }
    
    public const int ButtonIndexFieldNumber = 3;
    private bool hasButtonIndex;
    private global::Gazillion.GameDialogResultEnum buttonIndex_ = global::Gazillion.GameDialogResultEnum.eGDR_TimeoutOnServer;
    public bool HasButtonIndex {
      get { return hasButtonIndex; }
    }
    public global::Gazillion.GameDialogResultEnum ButtonIndex {
      get { return buttonIndex_; }
    }
    
    public const int CheckboxClickedFieldNumber = 4;
    private bool hasCheckboxClicked;
    private bool checkboxClicked_;
    public bool HasCheckboxClicked {
      get { return hasCheckboxClicked; }
    }
    public bool CheckboxClicked {
      get { return checkboxClicked_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!hasPlayerGuid) return false;
        if (!hasButtonIndex) return false;
        if (!hasCheckboxClicked) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDialogResultFieldNames;
      if (hasServerId) {
        output.WriteUInt64(1, field_names[3], ServerId);
      }
      if (hasPlayerGuid) {
        output.WriteUInt64(2, field_names[2], PlayerGuid);
      }
      if (hasButtonIndex) {
        output.WriteEnum(3, field_names[0], (int) ButtonIndex, ButtonIndex);
      }
      if (hasCheckboxClicked) {
        output.WriteBool(4, field_names[1], CheckboxClicked);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ServerId);
      }
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerGuid);
      }
      if (hasButtonIndex) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) ButtonIndex);
      }
      if (hasCheckboxClicked) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, CheckboxClicked);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDialogResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDialogResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDialogResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDialogResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDialogResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDialogResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDialogResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDialogResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDialogResult result;
      
      private NetMessageDialogResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDialogResult original = result;
          result = new NetMessageDialogResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDialogResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDialogResult.Descriptor; }
      }
      
      public override NetMessageDialogResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDialogResult.DefaultInstance; }
      }
      
      public override NetMessageDialogResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDialogResult) {
          return MergeFrom((NetMessageDialogResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDialogResult other) {
        if (other == global::Gazillion.NetMessageDialogResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        if (other.HasButtonIndex) {
          ButtonIndex = other.ButtonIndex;
        }
        if (other.HasCheckboxClicked) {
          CheckboxClicked = other.CheckboxClicked;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDialogResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDialogResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServerId = input.ReadUInt64(ref result.serverId_);
              break;
            }
            case 16: {
              result.hasPlayerGuid = input.ReadUInt64(ref result.playerGuid_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.buttonIndex_, out unknown)) {
                result.hasButtonIndex = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasCheckboxClicked = input.ReadBool(ref result.checkboxClicked_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      public ulong ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(ulong value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public ulong PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = 0UL;
        return this;
      }
      
      public bool HasButtonIndex {
       get { return result.hasButtonIndex; }
      }
      public global::Gazillion.GameDialogResultEnum ButtonIndex {
        get { return result.ButtonIndex; }
        set { SetButtonIndex(value); }
      }
      public Builder SetButtonIndex(global::Gazillion.GameDialogResultEnum value) {
        PrepareBuilder();
        result.hasButtonIndex = true;
        result.buttonIndex_ = value;
        return this;
      }
      public Builder ClearButtonIndex() {
        PrepareBuilder();
        result.hasButtonIndex = false;
        result.buttonIndex_ = global::Gazillion.GameDialogResultEnum.eGDR_TimeoutOnServer;
        return this;
      }
      
      public bool HasCheckboxClicked {
        get { return result.hasCheckboxClicked; }
      }
      public bool CheckboxClicked {
        get { return result.CheckboxClicked; }
        set { SetCheckboxClicked(value); }
      }
      public Builder SetCheckboxClicked(bool value) {
        PrepareBuilder();
        result.hasCheckboxClicked = true;
        result.checkboxClicked_ = value;
        return this;
      }
      public Builder ClearCheckboxClicked() {
        PrepareBuilder();
        result.hasCheckboxClicked = false;
        result.checkboxClicked_ = false;
        return this;
      }
    }
    static NetMessageDialogResult() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestBuyItemFrom : pb::GeneratedMessage<NetMessageVendorRequestBuyItemFrom, NetMessageVendorRequestBuyItemFrom.Builder> {
    private NetMessageVendorRequestBuyItemFrom() { }
    private static readonly NetMessageVendorRequestBuyItemFrom defaultInstance = new NetMessageVendorRequestBuyItemFrom().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestBuyItemFromFieldNames = new string[] { "inventorySlot", "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestBuyItemFromFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageVendorRequestBuyItemFrom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestBuyItemFrom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestBuyItemFrom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestBuyItemFrom, NetMessageVendorRequestBuyItemFrom.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestBuyItemFrom__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public const int InventorySlotFieldNumber = 3;
    private bool hasInventorySlot;
    private uint inventorySlot_;
    public bool HasInventorySlot {
      get { return hasInventorySlot; }
    }
    public uint InventorySlot {
      get { return inventorySlot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        if (!hasInventorySlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestBuyItemFromFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[1], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[2], VendorId);
      }
      if (hasInventorySlot) {
        output.WriteUInt32(3, field_names[0], InventorySlot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      if (hasInventorySlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, InventorySlot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestBuyItemFrom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestBuyItemFrom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestBuyItemFrom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestBuyItemFrom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestBuyItemFrom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestBuyItemFrom result;
      
      private NetMessageVendorRequestBuyItemFrom PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestBuyItemFrom original = result;
          result = new NetMessageVendorRequestBuyItemFrom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestBuyItemFrom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestBuyItemFrom.Descriptor; }
      }
      
      public override NetMessageVendorRequestBuyItemFrom DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestBuyItemFrom.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestBuyItemFrom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestBuyItemFrom) {
          return MergeFrom((NetMessageVendorRequestBuyItemFrom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestBuyItemFrom other) {
        if (other == global::Gazillion.NetMessageVendorRequestBuyItemFrom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        if (other.HasInventorySlot) {
          InventorySlot = other.InventorySlot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestBuyItemFromFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestBuyItemFromFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
            case 24: {
              result.hasInventorySlot = input.ReadUInt32(ref result.inventorySlot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
      
      public bool HasInventorySlot {
        get { return result.hasInventorySlot; }
      }
      public uint InventorySlot {
        get { return result.InventorySlot; }
        set { SetInventorySlot(value); }
      }
      public Builder SetInventorySlot(uint value) {
        PrepareBuilder();
        result.hasInventorySlot = true;
        result.inventorySlot_ = value;
        return this;
      }
      public Builder ClearInventorySlot() {
        PrepareBuilder();
        result.hasInventorySlot = false;
        result.inventorySlot_ = 0;
        return this;
      }
    }
    static NetMessageVendorRequestBuyItemFrom() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestSellItemTo : pb::GeneratedMessage<NetMessageVendorRequestSellItemTo, NetMessageVendorRequestSellItemTo.Builder> {
    private NetMessageVendorRequestSellItemTo() { }
    private static readonly NetMessageVendorRequestSellItemTo defaultInstance = new NetMessageVendorRequestSellItemTo().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestSellItemToFieldNames = new string[] { "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestSellItemToFieldTags = new uint[] { 8, 16 };
    public static NetMessageVendorRequestSellItemTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestSellItemTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestSellItemTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestSellItemTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestSellItemTo, NetMessageVendorRequestSellItemTo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestSellItemTo__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestSellItemToFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[1], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestSellItemTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestSellItemTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestSellItemTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestSellItemTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestSellItemTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestSellItemTo result;
      
      private NetMessageVendorRequestSellItemTo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestSellItemTo original = result;
          result = new NetMessageVendorRequestSellItemTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestSellItemTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestSellItemTo.Descriptor; }
      }
      
      public override NetMessageVendorRequestSellItemTo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestSellItemTo.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestSellItemTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestSellItemTo) {
          return MergeFrom((NetMessageVendorRequestSellItemTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestSellItemTo other) {
        if (other == global::Gazillion.NetMessageVendorRequestSellItemTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestSellItemToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestSellItemToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestSellItemTo() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestDonateItemTo : pb::GeneratedMessage<NetMessageVendorRequestDonateItemTo, NetMessageVendorRequestDonateItemTo.Builder> {
    private NetMessageVendorRequestDonateItemTo() { }
    private static readonly NetMessageVendorRequestDonateItemTo defaultInstance = new NetMessageVendorRequestDonateItemTo().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestDonateItemToFieldNames = new string[] { "itemId", "vendorId" };
    private static readonly uint[] _netMessageVendorRequestDonateItemToFieldTags = new uint[] { 8, 16 };
    public static NetMessageVendorRequestDonateItemTo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestDonateItemTo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestDonateItemTo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestDonateItemTo, NetMessageVendorRequestDonateItemTo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestDonateItemTo__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int VendorIdFieldNumber = 2;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestDonateItemToFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      if (hasVendorId) {
        output.WriteUInt64(2, field_names[1], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestDonateItemTo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestDonateItemTo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestDonateItemTo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestDonateItemTo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestDonateItemTo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestDonateItemTo result;
      
      private NetMessageVendorRequestDonateItemTo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestDonateItemTo original = result;
          result = new NetMessageVendorRequestDonateItemTo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestDonateItemTo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestDonateItemTo.Descriptor; }
      }
      
      public override NetMessageVendorRequestDonateItemTo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestDonateItemTo.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestDonateItemTo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestDonateItemTo) {
          return MergeFrom((NetMessageVendorRequestDonateItemTo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestDonateItemTo other) {
        if (other == global::Gazillion.NetMessageVendorRequestDonateItemTo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestDonateItemToFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestDonateItemToFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestDonateItemTo() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRequestRefresh : pb::GeneratedMessage<NetMessageVendorRequestRefresh, NetMessageVendorRequestRefresh.Builder> {
    private NetMessageVendorRequestRefresh() { }
    private static readonly NetMessageVendorRequestRefresh defaultInstance = new NetMessageVendorRequestRefresh().MakeReadOnly();
    private static readonly string[] _netMessageVendorRequestRefreshFieldNames = new string[] { "vendorId" };
    private static readonly uint[] _netMessageVendorRequestRefreshFieldTags = new uint[] { 8 };
    public static NetMessageVendorRequestRefresh DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRequestRefresh DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRequestRefresh ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestRefresh__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRequestRefresh, NetMessageVendorRequestRefresh.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVendorRequestRefresh__FieldAccessorTable; }
    }
    
    public const int VendorIdFieldNumber = 1;
    private bool hasVendorId;
    private ulong vendorId_;
    public bool HasVendorId {
      get { return hasVendorId; }
    }
    public ulong VendorId {
      get { return vendorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRequestRefreshFieldNames;
      if (hasVendorId) {
        output.WriteUInt64(1, field_names[0], VendorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRequestRefresh ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRequestRefresh MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRequestRefresh prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRequestRefresh, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRequestRefresh cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRequestRefresh result;
      
      private NetMessageVendorRequestRefresh PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRequestRefresh original = result;
          result = new NetMessageVendorRequestRefresh();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRequestRefresh MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRequestRefresh.Descriptor; }
      }
      
      public override NetMessageVendorRequestRefresh DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRequestRefresh.DefaultInstance; }
      }
      
      public override NetMessageVendorRequestRefresh BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRequestRefresh) {
          return MergeFrom((NetMessageVendorRequestRefresh) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRequestRefresh other) {
        if (other == global::Gazillion.NetMessageVendorRequestRefresh.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorId) {
          VendorId = other.VendorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRequestRefreshFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRequestRefreshFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorId = input.ReadUInt64(ref result.vendorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorId {
        get { return result.hasVendorId; }
      }
      public ulong VendorId {
        get { return result.VendorId; }
        set { SetVendorId(value); }
      }
      public Builder SetVendorId(ulong value) {
        PrepareBuilder();
        result.hasVendorId = true;
        result.vendorId_ = value;
        return this;
      }
      public Builder ClearVendorId() {
        PrepareBuilder();
        result.hasVendorId = false;
        result.vendorId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRequestRefresh() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryModifyCommunityMemberCircle : pb::GeneratedMessage<NetMessageTryModifyCommunityMemberCircle, NetMessageTryModifyCommunityMemberCircle.Builder> {
    private NetMessageTryModifyCommunityMemberCircle() { }
    private static readonly NetMessageTryModifyCommunityMemberCircle defaultInstance = new NetMessageTryModifyCommunityMemberCircle().MakeReadOnly();
    private static readonly string[] _netMessageTryModifyCommunityMemberCircleFieldNames = new string[] { "circleId", "operation", "playerName" };
    private static readonly uint[] _netMessageTryModifyCommunityMemberCircleFieldTags = new uint[] { 8, 16, 26 };
    public static NetMessageTryModifyCommunityMemberCircle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryModifyCommunityMemberCircle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryModifyCommunityMemberCircle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryModifyCommunityMemberCircle, NetMessageTryModifyCommunityMemberCircle.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryModifyCommunityMemberCircle__FieldAccessorTable; }
    }
    
    public const int CircleIdFieldNumber = 1;
    private bool hasCircleId;
    private ulong circleId_;
    public bool HasCircleId {
      get { return hasCircleId; }
    }
    public ulong CircleId {
      get { return circleId_; }
    }
    
    public const int OperationFieldNumber = 2;
    private bool hasOperation;
    private global::Gazillion.ModifyCircleOperation operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::Gazillion.ModifyCircleOperation Operation {
      get { return operation_; }
    }
    
    public const int PlayerNameFieldNumber = 3;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCircleId) return false;
        if (!hasOperation) return false;
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryModifyCommunityMemberCircleFieldNames;
      if (hasCircleId) {
        output.WriteUInt64(1, field_names[0], CircleId);
      }
      if (hasOperation) {
        output.WriteEnum(2, field_names[1], (int) Operation, Operation);
      }
      if (hasPlayerName) {
        output.WriteString(3, field_names[2], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCircleId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CircleId);
      }
      if (hasOperation) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Operation);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryModifyCommunityMemberCircle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryModifyCommunityMemberCircle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryModifyCommunityMemberCircle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryModifyCommunityMemberCircle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryModifyCommunityMemberCircle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryModifyCommunityMemberCircle result;
      
      private NetMessageTryModifyCommunityMemberCircle PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryModifyCommunityMemberCircle original = result;
          result = new NetMessageTryModifyCommunityMemberCircle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryModifyCommunityMemberCircle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryModifyCommunityMemberCircle.Descriptor; }
      }
      
      public override NetMessageTryModifyCommunityMemberCircle DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryModifyCommunityMemberCircle.DefaultInstance; }
      }
      
      public override NetMessageTryModifyCommunityMemberCircle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryModifyCommunityMemberCircle) {
          return MergeFrom((NetMessageTryModifyCommunityMemberCircle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryModifyCommunityMemberCircle other) {
        if (other == global::Gazillion.NetMessageTryModifyCommunityMemberCircle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCircleId) {
          CircleId = other.CircleId;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryModifyCommunityMemberCircleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryModifyCommunityMemberCircleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCircleId = input.ReadUInt64(ref result.circleId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCircleId {
        get { return result.hasCircleId; }
      }
      public ulong CircleId {
        get { return result.CircleId; }
        set { SetCircleId(value); }
      }
      public Builder SetCircleId(ulong value) {
        PrepareBuilder();
        result.hasCircleId = true;
        result.circleId_ = value;
        return this;
      }
      public Builder ClearCircleId() {
        PrepareBuilder();
        result.hasCircleId = false;
        result.circleId_ = 0UL;
        return this;
      }
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::Gazillion.ModifyCircleOperation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::Gazillion.ModifyCircleOperation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageTryModifyCommunityMemberCircle() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePullCommunityStatus : pb::GeneratedMessage<NetMessagePullCommunityStatus, NetMessagePullCommunityStatus.Builder> {
    private NetMessagePullCommunityStatus() { }
    private static readonly NetMessagePullCommunityStatus defaultInstance = new NetMessagePullCommunityStatus().MakeReadOnly();
    private static readonly string[] _netMessagePullCommunityStatusFieldNames = new string[] {  };
    private static readonly uint[] _netMessagePullCommunityStatusFieldTags = new uint[] {  };
    public static NetMessagePullCommunityStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePullCommunityStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePullCommunityStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePullCommunityStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePullCommunityStatus, NetMessagePullCommunityStatus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePullCommunityStatus__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePullCommunityStatusFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePullCommunityStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePullCommunityStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePullCommunityStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePullCommunityStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePullCommunityStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePullCommunityStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePullCommunityStatus result;
      
      private NetMessagePullCommunityStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePullCommunityStatus original = result;
          result = new NetMessagePullCommunityStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePullCommunityStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePullCommunityStatus.Descriptor; }
      }
      
      public override NetMessagePullCommunityStatus DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePullCommunityStatus.DefaultInstance; }
      }
      
      public override NetMessagePullCommunityStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePullCommunityStatus) {
          return MergeFrom((NetMessagePullCommunityStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePullCommunityStatus other) {
        if (other == global::Gazillion.NetMessagePullCommunityStatus.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePullCommunityStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePullCommunityStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessagePullCommunityStatus() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildMessageToPlayerManager : pb::GeneratedMessage<NetMessageGuildMessageToPlayerManager, NetMessageGuildMessageToPlayerManager.Builder> {
    private NetMessageGuildMessageToPlayerManager() { }
    private static readonly NetMessageGuildMessageToPlayerManager defaultInstance = new NetMessageGuildMessageToPlayerManager().MakeReadOnly();
    private static readonly string[] _netMessageGuildMessageToPlayerManagerFieldNames = new string[] { "messages" };
    private static readonly uint[] _netMessageGuildMessageToPlayerManagerFieldTags = new uint[] { 10 };
    public static NetMessageGuildMessageToPlayerManager DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildMessageToPlayerManager DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildMessageToPlayerManager ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildMessageToPlayerManager, NetMessageGuildMessageToPlayerManager.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageGuildMessageToPlayerManager__FieldAccessorTable; }
    }
    
    public const int MessagesFieldNumber = 1;
    private bool hasMessages;
    private global::Gazillion.GuildMessageSetToPlayerManager messages_;
    public bool HasMessages {
      get { return hasMessages; }
    }
    public global::Gazillion.GuildMessageSetToPlayerManager Messages {
      get { return messages_ ?? global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessages) return false;
        if (!Messages.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildMessageToPlayerManagerFieldNames;
      if (hasMessages) {
        output.WriteMessage(1, field_names[0], Messages);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessages) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Messages);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToPlayerManager ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildMessageToPlayerManager MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildMessageToPlayerManager prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildMessageToPlayerManager, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildMessageToPlayerManager cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildMessageToPlayerManager result;
      
      private NetMessageGuildMessageToPlayerManager PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildMessageToPlayerManager original = result;
          result = new NetMessageGuildMessageToPlayerManager();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildMessageToPlayerManager MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildMessageToPlayerManager.Descriptor; }
      }
      
      public override NetMessageGuildMessageToPlayerManager DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildMessageToPlayerManager.DefaultInstance; }
      }
      
      public override NetMessageGuildMessageToPlayerManager BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildMessageToPlayerManager) {
          return MergeFrom((NetMessageGuildMessageToPlayerManager) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildMessageToPlayerManager other) {
        if (other == global::Gazillion.NetMessageGuildMessageToPlayerManager.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessages) {
          MergeMessages(other.Messages);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildMessageToPlayerManagerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildMessageToPlayerManagerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildMessageSetToPlayerManager.Builder subBuilder = global::Gazillion.GuildMessageSetToPlayerManager.CreateBuilder();
              if (result.hasMessages) {
                subBuilder.MergeFrom(Messages);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Messages = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessages {
       get { return result.hasMessages; }
      }
      public global::Gazillion.GuildMessageSetToPlayerManager Messages {
        get { return result.Messages; }
        set { SetMessages(value); }
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToPlayerManager value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = value;
        return this;
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToPlayerManager.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessages(global::Gazillion.GuildMessageSetToPlayerManager value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessages &&
            result.messages_ != global::Gazillion.GuildMessageSetToPlayerManager.DefaultInstance) {
            result.messages_ = global::Gazillion.GuildMessageSetToPlayerManager.CreateBuilder(result.messages_).MergeFrom(value).BuildPartial();
        } else {
          result.messages_ = value;
        }
        result.hasMessages = true;
        return this;
      }
      public Builder ClearMessages() {
        PrepareBuilder();
        result.hasMessages = false;
        result.messages_ = null;
        return this;
      }
    }
    static NetMessageGuildMessageToPlayerManager() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAkEvent : pb::GeneratedMessage<NetMessageAkEvent, NetMessageAkEvent.Builder> {
    private NetMessageAkEvent() { }
    private static readonly NetMessageAkEvent defaultInstance = new NetMessageAkEvent().MakeReadOnly();
    private static readonly string[] _netMessageAkEventFieldNames = new string[] { "akEventId", "cooldownMS", "eventType", "isVO" };
    private static readonly uint[] _netMessageAkEventFieldTags = new uint[] { 8, 32, 24, 16 };
    public static NetMessageAkEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAkEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAkEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAkEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAkEvent, NetMessageAkEvent.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAkEvent__FieldAccessorTable; }
    }
    
    public const int AkEventIdFieldNumber = 1;
    private bool hasAkEventId;
    private uint akEventId_;
    public bool HasAkEventId {
      get { return hasAkEventId; }
    }
    public uint AkEventId {
      get { return akEventId_; }
    }
    
    public const int IsVOFieldNumber = 2;
    private bool hasIsVO;
    private bool isVO_;
    public bool HasIsVO {
      get { return hasIsVO; }
    }
    public bool IsVO {
      get { return isVO_; }
    }
    
    public const int EventTypeFieldNumber = 3;
    private bool hasEventType;
    private uint eventType_;
    public bool HasEventType {
      get { return hasEventType; }
    }
    public uint EventType {
      get { return eventType_; }
    }
    
    public const int CooldownMSFieldNumber = 4;
    private bool hasCooldownMS;
    private uint cooldownMS_;
    public bool HasCooldownMS {
      get { return hasCooldownMS; }
    }
    public uint CooldownMS {
      get { return cooldownMS_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAkEventId) return false;
        if (!hasIsVO) return false;
        if (!hasEventType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAkEventFieldNames;
      if (hasAkEventId) {
        output.WriteUInt32(1, field_names[0], AkEventId);
      }
      if (hasIsVO) {
        output.WriteBool(2, field_names[3], IsVO);
      }
      if (hasEventType) {
        output.WriteUInt32(3, field_names[2], EventType);
      }
      if (hasCooldownMS) {
        output.WriteUInt32(4, field_names[1], CooldownMS);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAkEventId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AkEventId);
      }
      if (hasIsVO) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsVO);
      }
      if (hasEventType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EventType);
      }
      if (hasCooldownMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, CooldownMS);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAkEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAkEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAkEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAkEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAkEvent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAkEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAkEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAkEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAkEvent result;
      
      private NetMessageAkEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAkEvent original = result;
          result = new NetMessageAkEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAkEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAkEvent.Descriptor; }
      }
      
      public override NetMessageAkEvent DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAkEvent.DefaultInstance; }
      }
      
      public override NetMessageAkEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAkEvent) {
          return MergeFrom((NetMessageAkEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAkEvent other) {
        if (other == global::Gazillion.NetMessageAkEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAkEventId) {
          AkEventId = other.AkEventId;
        }
        if (other.HasIsVO) {
          IsVO = other.IsVO;
        }
        if (other.HasEventType) {
          EventType = other.EventType;
        }
        if (other.HasCooldownMS) {
          CooldownMS = other.CooldownMS;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAkEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAkEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAkEventId = input.ReadUInt32(ref result.akEventId_);
              break;
            }
            case 16: {
              result.hasIsVO = input.ReadBool(ref result.isVO_);
              break;
            }
            case 24: {
              result.hasEventType = input.ReadUInt32(ref result.eventType_);
              break;
            }
            case 32: {
              result.hasCooldownMS = input.ReadUInt32(ref result.cooldownMS_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAkEventId {
        get { return result.hasAkEventId; }
      }
      public uint AkEventId {
        get { return result.AkEventId; }
        set { SetAkEventId(value); }
      }
      public Builder SetAkEventId(uint value) {
        PrepareBuilder();
        result.hasAkEventId = true;
        result.akEventId_ = value;
        return this;
      }
      public Builder ClearAkEventId() {
        PrepareBuilder();
        result.hasAkEventId = false;
        result.akEventId_ = 0;
        return this;
      }
      
      public bool HasIsVO {
        get { return result.hasIsVO; }
      }
      public bool IsVO {
        get { return result.IsVO; }
        set { SetIsVO(value); }
      }
      public Builder SetIsVO(bool value) {
        PrepareBuilder();
        result.hasIsVO = true;
        result.isVO_ = value;
        return this;
      }
      public Builder ClearIsVO() {
        PrepareBuilder();
        result.hasIsVO = false;
        result.isVO_ = false;
        return this;
      }
      
      public bool HasEventType {
        get { return result.hasEventType; }
      }
      public uint EventType {
        get { return result.EventType; }
        set { SetEventType(value); }
      }
      public Builder SetEventType(uint value) {
        PrepareBuilder();
        result.hasEventType = true;
        result.eventType_ = value;
        return this;
      }
      public Builder ClearEventType() {
        PrepareBuilder();
        result.hasEventType = false;
        result.eventType_ = 0;
        return this;
      }
      
      public bool HasCooldownMS {
        get { return result.hasCooldownMS; }
      }
      public uint CooldownMS {
        get { return result.CooldownMS; }
        set { SetCooldownMS(value); }
      }
      public Builder SetCooldownMS(uint value) {
        PrepareBuilder();
        result.hasCooldownMS = true;
        result.cooldownMS_ = value;
        return this;
      }
      public Builder ClearCooldownMS() {
        PrepareBuilder();
        result.hasCooldownMS = false;
        result.cooldownMS_ = 0;
        return this;
      }
    }
    static NetMessageAkEvent() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetShowTips : pb::GeneratedMessage<NetMessageSetShowTips, NetMessageSetShowTips.Builder> {
    private NetMessageSetShowTips() { }
    private static readonly NetMessageSetShowTips defaultInstance = new NetMessageSetShowTips().MakeReadOnly();
    private static readonly string[] _netMessageSetShowTipsFieldNames = new string[] { "showTips" };
    private static readonly uint[] _netMessageSetShowTipsFieldTags = new uint[] { 8 };
    public static NetMessageSetShowTips DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetShowTips DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetShowTips ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetShowTips__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetShowTips, NetMessageSetShowTips.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetShowTips__FieldAccessorTable; }
    }
    
    public const int ShowTipsFieldNumber = 1;
    private bool hasShowTips;
    private bool showTips_;
    public bool HasShowTips {
      get { return hasShowTips; }
    }
    public bool ShowTips {
      get { return showTips_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasShowTips) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetShowTipsFieldNames;
      if (hasShowTips) {
        output.WriteBool(1, field_names[0], ShowTips);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasShowTips) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, ShowTips);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetShowTips ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetShowTips ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetShowTips ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetShowTips MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetShowTips prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetShowTips, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetShowTips cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetShowTips result;
      
      private NetMessageSetShowTips PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetShowTips original = result;
          result = new NetMessageSetShowTips();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetShowTips MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetShowTips.Descriptor; }
      }
      
      public override NetMessageSetShowTips DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetShowTips.DefaultInstance; }
      }
      
      public override NetMessageSetShowTips BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetShowTips) {
          return MergeFrom((NetMessageSetShowTips) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetShowTips other) {
        if (other == global::Gazillion.NetMessageSetShowTips.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasShowTips) {
          ShowTips = other.ShowTips;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetShowTipsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetShowTipsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasShowTips = input.ReadBool(ref result.showTips_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasShowTips {
        get { return result.hasShowTips; }
      }
      public bool ShowTips {
        get { return result.ShowTips; }
        set { SetShowTips(value); }
      }
      public Builder SetShowTips(bool value) {
        PrepareBuilder();
        result.hasShowTips = true;
        result.showTips_ = value;
        return this;
      }
      public Builder ClearShowTips() {
        PrepareBuilder();
        result.hasShowTips = false;
        result.showTips_ = false;
        return this;
      }
    }
    static NetMessageSetShowTips() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTipSeen : pb::GeneratedMessage<NetMessageSetTipSeen, NetMessageSetTipSeen.Builder> {
    private NetMessageSetTipSeen() { }
    private static readonly NetMessageSetTipSeen defaultInstance = new NetMessageSetTipSeen().MakeReadOnly();
    private static readonly string[] _netMessageSetTipSeenFieldNames = new string[] { "avatarEntityId", "tipDataRefId" };
    private static readonly uint[] _netMessageSetTipSeenFieldTags = new uint[] { 16, 8 };
    public static NetMessageSetTipSeen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTipSeen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTipSeen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTipSeen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTipSeen, NetMessageSetTipSeen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetTipSeen__FieldAccessorTable; }
    }
    
    public const int TipDataRefIdFieldNumber = 1;
    private bool hasTipDataRefId;
    private ulong tipDataRefId_;
    public bool HasTipDataRefId {
      get { return hasTipDataRefId; }
    }
    public ulong TipDataRefId {
      get { return tipDataRefId_; }
    }
    
    public const int AvatarEntityIdFieldNumber = 2;
    private bool hasAvatarEntityId;
    private ulong avatarEntityId_;
    public bool HasAvatarEntityId {
      get { return hasAvatarEntityId; }
    }
    public ulong AvatarEntityId {
      get { return avatarEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTipDataRefId) return false;
        if (!hasAvatarEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTipSeenFieldNames;
      if (hasTipDataRefId) {
        output.WriteUInt64(1, field_names[1], TipDataRefId);
      }
      if (hasAvatarEntityId) {
        output.WriteUInt64(2, field_names[0], AvatarEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTipDataRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TipDataRefId);
      }
      if (hasAvatarEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AvatarEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTipSeen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTipSeen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTipSeen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTipSeen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTipSeen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTipSeen result;
      
      private NetMessageSetTipSeen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTipSeen original = result;
          result = new NetMessageSetTipSeen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTipSeen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTipSeen.Descriptor; }
      }
      
      public override NetMessageSetTipSeen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTipSeen.DefaultInstance; }
      }
      
      public override NetMessageSetTipSeen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTipSeen) {
          return MergeFrom((NetMessageSetTipSeen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTipSeen other) {
        if (other == global::Gazillion.NetMessageSetTipSeen.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTipDataRefId) {
          TipDataRefId = other.TipDataRefId;
        }
        if (other.HasAvatarEntityId) {
          AvatarEntityId = other.AvatarEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTipSeenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTipSeenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTipDataRefId = input.ReadUInt64(ref result.tipDataRefId_);
              break;
            }
            case 16: {
              result.hasAvatarEntityId = input.ReadUInt64(ref result.avatarEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTipDataRefId {
        get { return result.hasTipDataRefId; }
      }
      public ulong TipDataRefId {
        get { return result.TipDataRefId; }
        set { SetTipDataRefId(value); }
      }
      public Builder SetTipDataRefId(ulong value) {
        PrepareBuilder();
        result.hasTipDataRefId = true;
        result.tipDataRefId_ = value;
        return this;
      }
      public Builder ClearTipDataRefId() {
        PrepareBuilder();
        result.hasTipDataRefId = false;
        result.tipDataRefId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarEntityId {
        get { return result.hasAvatarEntityId; }
      }
      public ulong AvatarEntityId {
        get { return result.AvatarEntityId; }
        set { SetAvatarEntityId(value); }
      }
      public Builder SetAvatarEntityId(ulong value) {
        PrepareBuilder();
        result.hasAvatarEntityId = true;
        result.avatarEntityId_ = value;
        return this;
      }
      public Builder ClearAvatarEntityId() {
        PrepareBuilder();
        result.hasAvatarEntityId = false;
        result.avatarEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetTipSeen() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageResetSeenTips : pb::GeneratedMessage<NetMessageResetSeenTips, NetMessageResetSeenTips.Builder> {
    private NetMessageResetSeenTips() { }
    private static readonly NetMessageResetSeenTips defaultInstance = new NetMessageResetSeenTips().MakeReadOnly();
    private static readonly string[] _netMessageResetSeenTipsFieldNames = new string[] {  };
    private static readonly uint[] _netMessageResetSeenTipsFieldTags = new uint[] {  };
    public static NetMessageResetSeenTips DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageResetSeenTips DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageResetSeenTips ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageResetSeenTips__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageResetSeenTips, NetMessageResetSeenTips.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageResetSeenTips__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageResetSeenTipsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageResetSeenTips ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageResetSeenTips MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageResetSeenTips prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageResetSeenTips, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageResetSeenTips cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageResetSeenTips result;
      
      private NetMessageResetSeenTips PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageResetSeenTips original = result;
          result = new NetMessageResetSeenTips();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageResetSeenTips MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageResetSeenTips.Descriptor; }
      }
      
      public override NetMessageResetSeenTips DefaultInstanceForType {
        get { return global::Gazillion.NetMessageResetSeenTips.DefaultInstance; }
      }
      
      public override NetMessageResetSeenTips BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageResetSeenTips) {
          return MergeFrom((NetMessageResetSeenTips) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageResetSeenTips other) {
        if (other == global::Gazillion.NetMessageResetSeenTips.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageResetSeenTipsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageResetSeenTipsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageResetSeenTips() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageHUDTutorialDismissed : pb::GeneratedMessage<NetMessageHUDTutorialDismissed, NetMessageHUDTutorialDismissed.Builder> {
    private NetMessageHUDTutorialDismissed() { }
    private static readonly NetMessageHUDTutorialDismissed defaultInstance = new NetMessageHUDTutorialDismissed().MakeReadOnly();
    private static readonly string[] _netMessageHUDTutorialDismissedFieldNames = new string[] { "hudTutorialProtoId" };
    private static readonly uint[] _netMessageHUDTutorialDismissedFieldTags = new uint[] { 8 };
    public static NetMessageHUDTutorialDismissed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageHUDTutorialDismissed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageHUDTutorialDismissed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageHUDTutorialDismissed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageHUDTutorialDismissed, NetMessageHUDTutorialDismissed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageHUDTutorialDismissed__FieldAccessorTable; }
    }
    
    public const int HudTutorialProtoIdFieldNumber = 1;
    private bool hasHudTutorialProtoId;
    private ulong hudTutorialProtoId_;
    public bool HasHudTutorialProtoId {
      get { return hasHudTutorialProtoId; }
    }
    public ulong HudTutorialProtoId {
      get { return hudTutorialProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHudTutorialProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageHUDTutorialDismissedFieldNames;
      if (hasHudTutorialProtoId) {
        output.WriteUInt64(1, field_names[0], HudTutorialProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHudTutorialProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, HudTutorialProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHUDTutorialDismissed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageHUDTutorialDismissed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageHUDTutorialDismissed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageHUDTutorialDismissed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageHUDTutorialDismissed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageHUDTutorialDismissed result;
      
      private NetMessageHUDTutorialDismissed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageHUDTutorialDismissed original = result;
          result = new NetMessageHUDTutorialDismissed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageHUDTutorialDismissed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageHUDTutorialDismissed.Descriptor; }
      }
      
      public override NetMessageHUDTutorialDismissed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageHUDTutorialDismissed.DefaultInstance; }
      }
      
      public override NetMessageHUDTutorialDismissed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageHUDTutorialDismissed) {
          return MergeFrom((NetMessageHUDTutorialDismissed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageHUDTutorialDismissed other) {
        if (other == global::Gazillion.NetMessageHUDTutorialDismissed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHudTutorialProtoId) {
          HudTutorialProtoId = other.HudTutorialProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageHUDTutorialDismissedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageHUDTutorialDismissedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHudTutorialProtoId = input.ReadUInt64(ref result.hudTutorialProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHudTutorialProtoId {
        get { return result.hasHudTutorialProtoId; }
      }
      public ulong HudTutorialProtoId {
        get { return result.HudTutorialProtoId; }
        set { SetHudTutorialProtoId(value); }
      }
      public Builder SetHudTutorialProtoId(ulong value) {
        PrepareBuilder();
        result.hasHudTutorialProtoId = true;
        result.hudTutorialProtoId_ = value;
        return this;
      }
      public Builder ClearHudTutorialProtoId() {
        PrepareBuilder();
        result.hasHudTutorialProtoId = false;
        result.hudTutorialProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageHUDTutorialDismissed() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryMoveInventoryContentsToGeneral : pb::GeneratedMessage<NetMessageTryMoveInventoryContentsToGeneral, NetMessageTryMoveInventoryContentsToGeneral.Builder> {
    private NetMessageTryMoveInventoryContentsToGeneral() { }
    private static readonly NetMessageTryMoveInventoryContentsToGeneral defaultInstance = new NetMessageTryMoveInventoryContentsToGeneral().MakeReadOnly();
    private static readonly string[] _netMessageTryMoveInventoryContentsToGeneralFieldNames = new string[] { "sourceInventoryPrototype" };
    private static readonly uint[] _netMessageTryMoveInventoryContentsToGeneralFieldTags = new uint[] { 8 };
    public static NetMessageTryMoveInventoryContentsToGeneral DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryMoveInventoryContentsToGeneral DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryMoveInventoryContentsToGeneral ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryMoveInventoryContentsToGeneral, NetMessageTryMoveInventoryContentsToGeneral.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryMoveInventoryContentsToGeneral__FieldAccessorTable; }
    }
    
    public const int SourceInventoryPrototypeFieldNumber = 1;
    private bool hasSourceInventoryPrototype;
    private ulong sourceInventoryPrototype_;
    public bool HasSourceInventoryPrototype {
      get { return hasSourceInventoryPrototype; }
    }
    public ulong SourceInventoryPrototype {
      get { return sourceInventoryPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourceInventoryPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryMoveInventoryContentsToGeneralFieldNames;
      if (hasSourceInventoryPrototype) {
        output.WriteUInt64(1, field_names[0], SourceInventoryPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSourceInventoryPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SourceInventoryPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryMoveInventoryContentsToGeneral ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryMoveInventoryContentsToGeneral MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryMoveInventoryContentsToGeneral prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryMoveInventoryContentsToGeneral, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryMoveInventoryContentsToGeneral cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryMoveInventoryContentsToGeneral result;
      
      private NetMessageTryMoveInventoryContentsToGeneral PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryMoveInventoryContentsToGeneral original = result;
          result = new NetMessageTryMoveInventoryContentsToGeneral();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryMoveInventoryContentsToGeneral MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.Descriptor; }
      }
      
      public override NetMessageTryMoveInventoryContentsToGeneral DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.DefaultInstance; }
      }
      
      public override NetMessageTryMoveInventoryContentsToGeneral BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryMoveInventoryContentsToGeneral) {
          return MergeFrom((NetMessageTryMoveInventoryContentsToGeneral) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryMoveInventoryContentsToGeneral other) {
        if (other == global::Gazillion.NetMessageTryMoveInventoryContentsToGeneral.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSourceInventoryPrototype) {
          SourceInventoryPrototype = other.SourceInventoryPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryMoveInventoryContentsToGeneralFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryMoveInventoryContentsToGeneralFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSourceInventoryPrototype = input.ReadUInt64(ref result.sourceInventoryPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSourceInventoryPrototype {
        get { return result.hasSourceInventoryPrototype; }
      }
      public ulong SourceInventoryPrototype {
        get { return result.SourceInventoryPrototype; }
        set { SetSourceInventoryPrototype(value); }
      }
      public Builder SetSourceInventoryPrototype(ulong value) {
        PrepareBuilder();
        result.hasSourceInventoryPrototype = true;
        result.sourceInventoryPrototype_ = value;
        return this;
      }
      public Builder ClearSourceInventoryPrototype() {
        PrepareBuilder();
        result.hasSourceInventoryPrototype = false;
        result.sourceInventoryPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageTryMoveInventoryContentsToGeneral() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetPlayerGameplayOptions : pb::GeneratedMessage<NetMessageSetPlayerGameplayOptions, NetMessageSetPlayerGameplayOptions.Builder> {
    private NetMessageSetPlayerGameplayOptions() { }
    private static readonly NetMessageSetPlayerGameplayOptions defaultInstance = new NetMessageSetPlayerGameplayOptions().MakeReadOnly();
    private static readonly string[] _netMessageSetPlayerGameplayOptionsFieldNames = new string[] { "optionsData" };
    private static readonly uint[] _netMessageSetPlayerGameplayOptionsFieldTags = new uint[] { 10 };
    public static NetMessageSetPlayerGameplayOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetPlayerGameplayOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetPlayerGameplayOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetPlayerGameplayOptions, NetMessageSetPlayerGameplayOptions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetPlayerGameplayOptions__FieldAccessorTable; }
    }
    
    public const int OptionsDataFieldNumber = 1;
    private bool hasOptionsData;
    private global::Gazillion.NetStructGameplayOptions optionsData_;
    public bool HasOptionsData {
      get { return hasOptionsData; }
    }
    public global::Gazillion.NetStructGameplayOptions OptionsData {
      get { return optionsData_ ?? global::Gazillion.NetStructGameplayOptions.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOptionsData) return false;
        if (!OptionsData.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetPlayerGameplayOptionsFieldNames;
      if (hasOptionsData) {
        output.WriteMessage(1, field_names[0], OptionsData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOptionsData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, OptionsData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetPlayerGameplayOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetPlayerGameplayOptions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetPlayerGameplayOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetPlayerGameplayOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetPlayerGameplayOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetPlayerGameplayOptions result;
      
      private NetMessageSetPlayerGameplayOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetPlayerGameplayOptions original = result;
          result = new NetMessageSetPlayerGameplayOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetPlayerGameplayOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetPlayerGameplayOptions.Descriptor; }
      }
      
      public override NetMessageSetPlayerGameplayOptions DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetPlayerGameplayOptions.DefaultInstance; }
      }
      
      public override NetMessageSetPlayerGameplayOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetPlayerGameplayOptions) {
          return MergeFrom((NetMessageSetPlayerGameplayOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetPlayerGameplayOptions other) {
        if (other == global::Gazillion.NetMessageSetPlayerGameplayOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOptionsData) {
          MergeOptionsData(other.OptionsData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetPlayerGameplayOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetPlayerGameplayOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructGameplayOptions.Builder subBuilder = global::Gazillion.NetStructGameplayOptions.CreateBuilder();
              if (result.hasOptionsData) {
                subBuilder.MergeFrom(OptionsData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OptionsData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOptionsData {
       get { return result.hasOptionsData; }
      }
      public global::Gazillion.NetStructGameplayOptions OptionsData {
        get { return result.OptionsData; }
        set { SetOptionsData(value); }
      }
      public Builder SetOptionsData(global::Gazillion.NetStructGameplayOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptionsData = true;
        result.optionsData_ = value;
        return this;
      }
      public Builder SetOptionsData(global::Gazillion.NetStructGameplayOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptionsData = true;
        result.optionsData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptionsData(global::Gazillion.NetStructGameplayOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptionsData &&
            result.optionsData_ != global::Gazillion.NetStructGameplayOptions.DefaultInstance) {
            result.optionsData_ = global::Gazillion.NetStructGameplayOptions.CreateBuilder(result.optionsData_).MergeFrom(value).BuildPartial();
        } else {
          result.optionsData_ = value;
        }
        result.hasOptionsData = true;
        return this;
      }
      public Builder ClearOptionsData() {
        PrepareBuilder();
        result.hasOptionsData = false;
        result.optionsData_ = null;
        return this;
      }
    }
    static NetMessageSetPlayerGameplayOptions() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportToPartyMember : pb::GeneratedMessage<NetMessageTeleportToPartyMember, NetMessageTeleportToPartyMember.Builder> {
    private NetMessageTeleportToPartyMember() { }
    private static readonly NetMessageTeleportToPartyMember defaultInstance = new NetMessageTeleportToPartyMember().MakeReadOnly();
    private static readonly string[] _netMessageTeleportToPartyMemberFieldNames = new string[] { "playerName" };
    private static readonly uint[] _netMessageTeleportToPartyMemberFieldTags = new uint[] { 10 };
    public static NetMessageTeleportToPartyMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportToPartyMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportToPartyMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportToPartyMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportToPartyMember, NetMessageTeleportToPartyMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTeleportToPartyMember__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportToPartyMemberFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[0], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportToPartyMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportToPartyMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportToPartyMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportToPartyMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportToPartyMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportToPartyMember result;
      
      private NetMessageTeleportToPartyMember PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportToPartyMember original = result;
          result = new NetMessageTeleportToPartyMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportToPartyMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportToPartyMember.Descriptor; }
      }
      
      public override NetMessageTeleportToPartyMember DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportToPartyMember.DefaultInstance; }
      }
      
      public override NetMessageTeleportToPartyMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportToPartyMember) {
          return MergeFrom((NetMessageTeleportToPartyMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportToPartyMember other) {
        if (other == global::Gazillion.NetMessageTeleportToPartyMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportToPartyMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportToPartyMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageTeleportToPartyMember() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionRequestQueueCommandClient : pb::GeneratedMessage<NetMessageRegionRequestQueueCommandClient, NetMessageRegionRequestQueueCommandClient.Builder> {
    private NetMessageRegionRequestQueueCommandClient() { }
    private static readonly NetMessageRegionRequestQueueCommandClient defaultInstance = new NetMessageRegionRequestQueueCommandClient().MakeReadOnly();
    private static readonly string[] _netMessageRegionRequestQueueCommandClientFieldNames = new string[] { "allowAutoParty", "command", "regionProtoId", "regionRequestGroupId" };
    private static readonly uint[] _netMessageRegionRequestQueueCommandClientFieldTags = new uint[] { 32, 24, 8, 16 };
    public static NetMessageRegionRequestQueueCommandClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionRequestQueueCommandClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionRequestQueueCommandClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionRequestQueueCommandClient, NetMessageRegionRequestQueueCommandClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRegionRequestQueueCommandClient__FieldAccessorTable; }
    }
    
    public const int RegionProtoIdFieldNumber = 1;
    private bool hasRegionProtoId;
    private ulong regionProtoId_;
    public bool HasRegionProtoId {
      get { return hasRegionProtoId; }
    }
    public ulong RegionProtoId {
      get { return regionProtoId_; }
    }
    
    public const int RegionRequestGroupIdFieldNumber = 2;
    private bool hasRegionRequestGroupId;
    private ulong regionRequestGroupId_;
    public bool HasRegionRequestGroupId {
      get { return hasRegionRequestGroupId; }
    }
    public ulong RegionRequestGroupId {
      get { return regionRequestGroupId_; }
    }
    
    public const int CommandFieldNumber = 3;
    private bool hasCommand;
    private global::Gazillion.RegionRequestQueueCommandVar command_ = global::Gazillion.RegionRequestQueueCommandVar.eRRQC_AddToQueueSolo;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::Gazillion.RegionRequestQueueCommandVar Command {
      get { return command_; }
    }
    
    public const int AllowAutoPartyFieldNumber = 4;
    private bool hasAllowAutoParty;
    private bool allowAutoParty_;
    public bool HasAllowAutoParty {
      get { return hasAllowAutoParty; }
    }
    public bool AllowAutoParty {
      get { return allowAutoParty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionProtoId) return false;
        if (!hasCommand) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionRequestQueueCommandClientFieldNames;
      if (hasRegionProtoId) {
        output.WriteUInt64(1, field_names[2], RegionProtoId);
      }
      if (hasRegionRequestGroupId) {
        output.WriteUInt64(2, field_names[3], RegionRequestGroupId);
      }
      if (hasCommand) {
        output.WriteEnum(3, field_names[1], (int) Command, Command);
      }
      if (hasAllowAutoParty) {
        output.WriteBool(4, field_names[0], AllowAutoParty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionProtoId);
      }
      if (hasRegionRequestGroupId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RegionRequestGroupId);
      }
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Command);
      }
      if (hasAllowAutoParty) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, AllowAutoParty);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionRequestQueueCommandClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionRequestQueueCommandClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionRequestQueueCommandClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionRequestQueueCommandClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionRequestQueueCommandClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionRequestQueueCommandClient result;
      
      private NetMessageRegionRequestQueueCommandClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionRequestQueueCommandClient original = result;
          result = new NetMessageRegionRequestQueueCommandClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionRequestQueueCommandClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionRequestQueueCommandClient.Descriptor; }
      }
      
      public override NetMessageRegionRequestQueueCommandClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionRequestQueueCommandClient.DefaultInstance; }
      }
      
      public override NetMessageRegionRequestQueueCommandClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionRequestQueueCommandClient) {
          return MergeFrom((NetMessageRegionRequestQueueCommandClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionRequestQueueCommandClient other) {
        if (other == global::Gazillion.NetMessageRegionRequestQueueCommandClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionProtoId) {
          RegionProtoId = other.RegionProtoId;
        }
        if (other.HasRegionRequestGroupId) {
          RegionRequestGroupId = other.RegionRequestGroupId;
        }
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.HasAllowAutoParty) {
          AllowAutoParty = other.AllowAutoParty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionRequestQueueCommandClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionRequestQueueCommandClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionProtoId = input.ReadUInt64(ref result.regionProtoId_);
              break;
            }
            case 16: {
              result.hasRegionRequestGroupId = input.ReadUInt64(ref result.regionRequestGroupId_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.command_, out unknown)) {
                result.hasCommand = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasAllowAutoParty = input.ReadBool(ref result.allowAutoParty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionProtoId {
        get { return result.hasRegionProtoId; }
      }
      public ulong RegionProtoId {
        get { return result.RegionProtoId; }
        set { SetRegionProtoId(value); }
      }
      public Builder SetRegionProtoId(ulong value) {
        PrepareBuilder();
        result.hasRegionProtoId = true;
        result.regionProtoId_ = value;
        return this;
      }
      public Builder ClearRegionProtoId() {
        PrepareBuilder();
        result.hasRegionProtoId = false;
        result.regionProtoId_ = 0UL;
        return this;
      }
      
      public bool HasRegionRequestGroupId {
        get { return result.hasRegionRequestGroupId; }
      }
      public ulong RegionRequestGroupId {
        get { return result.RegionRequestGroupId; }
        set { SetRegionRequestGroupId(value); }
      }
      public Builder SetRegionRequestGroupId(ulong value) {
        PrepareBuilder();
        result.hasRegionRequestGroupId = true;
        result.regionRequestGroupId_ = value;
        return this;
      }
      public Builder ClearRegionRequestGroupId() {
        PrepareBuilder();
        result.hasRegionRequestGroupId = false;
        result.regionRequestGroupId_ = 0UL;
        return this;
      }
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::Gazillion.RegionRequestQueueCommandVar Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::Gazillion.RegionRequestQueueCommandVar value) {
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = global::Gazillion.RegionRequestQueueCommandVar.eRRQC_AddToQueueSolo;
        return this;
      }
      
      public bool HasAllowAutoParty {
        get { return result.hasAllowAutoParty; }
      }
      public bool AllowAutoParty {
        get { return result.AllowAutoParty; }
        set { SetAllowAutoParty(value); }
      }
      public Builder SetAllowAutoParty(bool value) {
        PrepareBuilder();
        result.hasAllowAutoParty = true;
        result.allowAutoParty_ = value;
        return this;
      }
      public Builder ClearAllowAutoParty() {
        PrepareBuilder();
        result.hasAllowAutoParty = false;
        result.allowAutoParty_ = false;
        return this;
      }
    }
    static NetMessageRegionRequestQueueCommandClient() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectAvatarSynergies : pb::GeneratedMessage<NetMessageSelectAvatarSynergies, NetMessageSelectAvatarSynergies.Builder> {
    private NetMessageSelectAvatarSynergies() { }
    private static readonly NetMessageSelectAvatarSynergies defaultInstance = new NetMessageSelectAvatarSynergies().MakeReadOnly();
    private static readonly string[] _netMessageSelectAvatarSynergiesFieldNames = new string[] { "avatarId", "avatarPrototypes" };
    private static readonly uint[] _netMessageSelectAvatarSynergiesFieldTags = new uint[] { 8, 16 };
    public static NetMessageSelectAvatarSynergies DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectAvatarSynergies DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectAvatarSynergies ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectAvatarSynergies__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectAvatarSynergies, NetMessageSelectAvatarSynergies.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectAvatarSynergies__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int AvatarPrototypesFieldNumber = 2;
    private pbc::PopsicleList<ulong> avatarPrototypes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> AvatarPrototypesList {
      get { return pbc::Lists.AsReadOnly(avatarPrototypes_); }
    }
    public int AvatarPrototypesCount {
      get { return avatarPrototypes_.Count; }
    }
    public ulong GetAvatarPrototypes(int index) {
      return avatarPrototypes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectAvatarSynergiesFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (avatarPrototypes_.Count > 0) {
        output.WriteUInt64Array(2, field_names[1], avatarPrototypes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in AvatarPrototypesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * avatarPrototypes_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectAvatarSynergies ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectAvatarSynergies MakeReadOnly() {
      avatarPrototypes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectAvatarSynergies prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectAvatarSynergies, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectAvatarSynergies cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectAvatarSynergies result;
      
      private NetMessageSelectAvatarSynergies PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectAvatarSynergies original = result;
          result = new NetMessageSelectAvatarSynergies();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectAvatarSynergies MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectAvatarSynergies.Descriptor; }
      }
      
      public override NetMessageSelectAvatarSynergies DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectAvatarSynergies.DefaultInstance; }
      }
      
      public override NetMessageSelectAvatarSynergies BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectAvatarSynergies) {
          return MergeFrom((NetMessageSelectAvatarSynergies) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectAvatarSynergies other) {
        if (other == global::Gazillion.NetMessageSelectAvatarSynergies.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.avatarPrototypes_.Count != 0) {
          result.avatarPrototypes_.Add(other.avatarPrototypes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectAvatarSynergiesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectAvatarSynergiesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.avatarPrototypes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> AvatarPrototypesList {
        get { return PrepareBuilder().avatarPrototypes_; }
      }
      public int AvatarPrototypesCount {
        get { return result.AvatarPrototypesCount; }
      }
      public ulong GetAvatarPrototypes(int index) {
        return result.GetAvatarPrototypes(index);
      }
      public Builder SetAvatarPrototypes(int index, ulong value) {
        PrepareBuilder();
        result.avatarPrototypes_[index] = value;
        return this;
      }
      public Builder AddAvatarPrototypes(ulong value) {
        PrepareBuilder();
        result.avatarPrototypes_.Add(value);
        return this;
      }
      public Builder AddRangeAvatarPrototypes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.avatarPrototypes_.Add(values);
        return this;
      }
      public Builder ClearAvatarPrototypes() {
        PrepareBuilder();
        result.avatarPrototypes_.Clear();
        return this;
      }
    }
    static NetMessageSelectAvatarSynergies() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestLegendaryMissionReroll : pb::GeneratedMessage<NetMessageRequestLegendaryMissionReroll, NetMessageRequestLegendaryMissionReroll.Builder> {
    private NetMessageRequestLegendaryMissionReroll() { }
    private static readonly NetMessageRequestLegendaryMissionReroll defaultInstance = new NetMessageRequestLegendaryMissionReroll().MakeReadOnly();
    private static readonly string[] _netMessageRequestLegendaryMissionRerollFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestLegendaryMissionRerollFieldTags = new uint[] {  };
    public static NetMessageRequestLegendaryMissionReroll DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestLegendaryMissionReroll DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestLegendaryMissionReroll ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestLegendaryMissionReroll, NetMessageRequestLegendaryMissionReroll.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLegendaryMissionReroll__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestLegendaryMissionRerollFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLegendaryMissionReroll ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestLegendaryMissionReroll MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestLegendaryMissionReroll prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestLegendaryMissionReroll, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestLegendaryMissionReroll cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestLegendaryMissionReroll result;
      
      private NetMessageRequestLegendaryMissionReroll PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestLegendaryMissionReroll original = result;
          result = new NetMessageRequestLegendaryMissionReroll();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestLegendaryMissionReroll MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestLegendaryMissionReroll.Descriptor; }
      }
      
      public override NetMessageRequestLegendaryMissionReroll DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestLegendaryMissionReroll.DefaultInstance; }
      }
      
      public override NetMessageRequestLegendaryMissionReroll BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestLegendaryMissionReroll) {
          return MergeFrom((NetMessageRequestLegendaryMissionReroll) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestLegendaryMissionReroll other) {
        if (other == global::Gazillion.NetMessageRequestLegendaryMissionReroll.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestLegendaryMissionRerollFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestLegendaryMissionRerollFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestLegendaryMissionReroll() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAttemptShareLegendaryMission : pb::GeneratedMessage<NetMessageAttemptShareLegendaryMission, NetMessageAttemptShareLegendaryMission.Builder> {
    private NetMessageAttemptShareLegendaryMission() { }
    private static readonly NetMessageAttemptShareLegendaryMission defaultInstance = new NetMessageAttemptShareLegendaryMission().MakeReadOnly();
    private static readonly string[] _netMessageAttemptShareLegendaryMissionFieldNames = new string[] { "playerName" };
    private static readonly uint[] _netMessageAttemptShareLegendaryMissionFieldTags = new uint[] { 10 };
    public static NetMessageAttemptShareLegendaryMission DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAttemptShareLegendaryMission DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAttemptShareLegendaryMission ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAttemptShareLegendaryMission, NetMessageAttemptShareLegendaryMission.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAttemptShareLegendaryMission__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAttemptShareLegendaryMissionFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[0], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMission ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAttemptShareLegendaryMission MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAttemptShareLegendaryMission prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAttemptShareLegendaryMission, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAttemptShareLegendaryMission cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAttemptShareLegendaryMission result;
      
      private NetMessageAttemptShareLegendaryMission PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAttemptShareLegendaryMission original = result;
          result = new NetMessageAttemptShareLegendaryMission();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAttemptShareLegendaryMission MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAttemptShareLegendaryMission.Descriptor; }
      }
      
      public override NetMessageAttemptShareLegendaryMission DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAttemptShareLegendaryMission.DefaultInstance; }
      }
      
      public override NetMessageAttemptShareLegendaryMission BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAttemptShareLegendaryMission) {
          return MergeFrom((NetMessageAttemptShareLegendaryMission) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAttemptShareLegendaryMission other) {
        if (other == global::Gazillion.NetMessageAttemptShareLegendaryMission.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAttemptShareLegendaryMissionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAttemptShareLegendaryMissionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageAttemptShareLegendaryMission() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAttemptShareLegendaryMissionResponse : pb::GeneratedMessage<NetMessageAttemptShareLegendaryMissionResponse, NetMessageAttemptShareLegendaryMissionResponse.Builder> {
    private NetMessageAttemptShareLegendaryMissionResponse() { }
    private static readonly NetMessageAttemptShareLegendaryMissionResponse defaultInstance = new NetMessageAttemptShareLegendaryMissionResponse().MakeReadOnly();
    private static readonly string[] _netMessageAttemptShareLegendaryMissionResponseFieldNames = new string[] { "missionAccepted" };
    private static readonly uint[] _netMessageAttemptShareLegendaryMissionResponseFieldTags = new uint[] { 8 };
    public static NetMessageAttemptShareLegendaryMissionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAttemptShareLegendaryMissionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAttemptShareLegendaryMissionResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAttemptShareLegendaryMissionResponse, NetMessageAttemptShareLegendaryMissionResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageAttemptShareLegendaryMissionResponse__FieldAccessorTable; }
    }
    
    public const int MissionAcceptedFieldNumber = 1;
    private bool hasMissionAccepted;
    private bool missionAccepted_;
    public bool HasMissionAccepted {
      get { return hasMissionAccepted; }
    }
    public bool MissionAccepted {
      get { return missionAccepted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionAccepted) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAttemptShareLegendaryMissionResponseFieldNames;
      if (hasMissionAccepted) {
        output.WriteBool(1, field_names[0], MissionAccepted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionAccepted) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, MissionAccepted);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAttemptShareLegendaryMissionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAttemptShareLegendaryMissionResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAttemptShareLegendaryMissionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAttemptShareLegendaryMissionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAttemptShareLegendaryMissionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAttemptShareLegendaryMissionResponse result;
      
      private NetMessageAttemptShareLegendaryMissionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAttemptShareLegendaryMissionResponse original = result;
          result = new NetMessageAttemptShareLegendaryMissionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAttemptShareLegendaryMissionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse.Descriptor; }
      }
      
      public override NetMessageAttemptShareLegendaryMissionResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse.DefaultInstance; }
      }
      
      public override NetMessageAttemptShareLegendaryMissionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAttemptShareLegendaryMissionResponse) {
          return MergeFrom((NetMessageAttemptShareLegendaryMissionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAttemptShareLegendaryMissionResponse other) {
        if (other == global::Gazillion.NetMessageAttemptShareLegendaryMissionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionAccepted) {
          MissionAccepted = other.MissionAccepted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAttemptShareLegendaryMissionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAttemptShareLegendaryMissionResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionAccepted = input.ReadBool(ref result.missionAccepted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionAccepted {
        get { return result.hasMissionAccepted; }
      }
      public bool MissionAccepted {
        get { return result.MissionAccepted; }
        set { SetMissionAccepted(value); }
      }
      public Builder SetMissionAccepted(bool value) {
        PrepareBuilder();
        result.hasMissionAccepted = true;
        result.missionAccepted_ = value;
        return this;
      }
      public Builder ClearMissionAccepted() {
        PrepareBuilder();
        result.hasMissionAccepted = false;
        result.missionAccepted_ = false;
        return this;
      }
    }
    static NetMessageAttemptShareLegendaryMissionResponse() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestPlayerOwnsItemStatus : pb::GeneratedMessage<NetMessageRequestPlayerOwnsItemStatus, NetMessageRequestPlayerOwnsItemStatus.Builder> {
    private NetMessageRequestPlayerOwnsItemStatus() { }
    private static readonly NetMessageRequestPlayerOwnsItemStatus defaultInstance = new NetMessageRequestPlayerOwnsItemStatus().MakeReadOnly();
    private static readonly string[] _netMessageRequestPlayerOwnsItemStatusFieldNames = new string[] { "itemProtoId" };
    private static readonly uint[] _netMessageRequestPlayerOwnsItemStatusFieldTags = new uint[] { 8 };
    public static NetMessageRequestPlayerOwnsItemStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestPlayerOwnsItemStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestPlayerOwnsItemStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestPlayerOwnsItemStatus, NetMessageRequestPlayerOwnsItemStatus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPlayerOwnsItemStatus__FieldAccessorTable; }
    }
    
    public const int ItemProtoIdFieldNumber = 1;
    private bool hasItemProtoId;
    private ulong itemProtoId_;
    public bool HasItemProtoId {
      get { return hasItemProtoId; }
    }
    public ulong ItemProtoId {
      get { return itemProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestPlayerOwnsItemStatusFieldNames;
      if (hasItemProtoId) {
        output.WriteUInt64(1, field_names[0], ItemProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPlayerOwnsItemStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestPlayerOwnsItemStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestPlayerOwnsItemStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestPlayerOwnsItemStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestPlayerOwnsItemStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestPlayerOwnsItemStatus result;
      
      private NetMessageRequestPlayerOwnsItemStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestPlayerOwnsItemStatus original = result;
          result = new NetMessageRequestPlayerOwnsItemStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestPlayerOwnsItemStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestPlayerOwnsItemStatus.Descriptor; }
      }
      
      public override NetMessageRequestPlayerOwnsItemStatus DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestPlayerOwnsItemStatus.DefaultInstance; }
      }
      
      public override NetMessageRequestPlayerOwnsItemStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestPlayerOwnsItemStatus) {
          return MergeFrom((NetMessageRequestPlayerOwnsItemStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestPlayerOwnsItemStatus other) {
        if (other == global::Gazillion.NetMessageRequestPlayerOwnsItemStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemProtoId) {
          ItemProtoId = other.ItemProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestPlayerOwnsItemStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestPlayerOwnsItemStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemProtoId = input.ReadUInt64(ref result.itemProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemProtoId {
        get { return result.hasItemProtoId; }
      }
      public ulong ItemProtoId {
        get { return result.ItemProtoId; }
        set { SetItemProtoId(value); }
      }
      public Builder SetItemProtoId(ulong value) {
        PrepareBuilder();
        result.hasItemProtoId = true;
        result.itemProtoId_ = value;
        return this;
      }
      public Builder ClearItemProtoId() {
        PrepareBuilder();
        result.hasItemProtoId = false;
        result.itemProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestPlayerOwnsItemStatus() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestInterestInInventory : pb::GeneratedMessage<NetMessageRequestInterestInInventory, NetMessageRequestInterestInInventory.Builder> {
    private NetMessageRequestInterestInInventory() { }
    private static readonly NetMessageRequestInterestInInventory defaultInstance = new NetMessageRequestInterestInInventory().MakeReadOnly();
    private static readonly string[] _netMessageRequestInterestInInventoryFieldNames = new string[] { "inventoryProtoId" };
    private static readonly uint[] _netMessageRequestInterestInInventoryFieldTags = new uint[] { 8 };
    public static NetMessageRequestInterestInInventory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestInterestInInventory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestInterestInInventory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInInventory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestInterestInInventory, NetMessageRequestInterestInInventory.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInInventory__FieldAccessorTable; }
    }
    
    public const int InventoryProtoIdFieldNumber = 1;
    private bool hasInventoryProtoId;
    private ulong inventoryProtoId_;
    public bool HasInventoryProtoId {
      get { return hasInventoryProtoId; }
    }
    public ulong InventoryProtoId {
      get { return inventoryProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInventoryProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestInterestInInventoryFieldNames;
      if (hasInventoryProtoId) {
        output.WriteUInt64(1, field_names[0], InventoryProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInventoryProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InventoryProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestInterestInInventory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInInventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestInterestInInventory MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestInterestInInventory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestInterestInInventory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestInterestInInventory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestInterestInInventory result;
      
      private NetMessageRequestInterestInInventory PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestInterestInInventory original = result;
          result = new NetMessageRequestInterestInInventory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestInterestInInventory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestInterestInInventory.Descriptor; }
      }
      
      public override NetMessageRequestInterestInInventory DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestInterestInInventory.DefaultInstance; }
      }
      
      public override NetMessageRequestInterestInInventory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestInterestInInventory) {
          return MergeFrom((NetMessageRequestInterestInInventory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestInterestInInventory other) {
        if (other == global::Gazillion.NetMessageRequestInterestInInventory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInventoryProtoId) {
          InventoryProtoId = other.InventoryProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestInterestInInventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestInterestInInventoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInventoryProtoId = input.ReadUInt64(ref result.inventoryProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInventoryProtoId {
        get { return result.hasInventoryProtoId; }
      }
      public ulong InventoryProtoId {
        get { return result.InventoryProtoId; }
        set { SetInventoryProtoId(value); }
      }
      public Builder SetInventoryProtoId(ulong value) {
        PrepareBuilder();
        result.hasInventoryProtoId = true;
        result.inventoryProtoId_ = value;
        return this;
      }
      public Builder ClearInventoryProtoId() {
        PrepareBuilder();
        result.hasInventoryProtoId = false;
        result.inventoryProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestInterestInInventory() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestInterestInAvatarEquipment : pb::GeneratedMessage<NetMessageRequestInterestInAvatarEquipment, NetMessageRequestInterestInAvatarEquipment.Builder> {
    private NetMessageRequestInterestInAvatarEquipment() { }
    private static readonly NetMessageRequestInterestInAvatarEquipment defaultInstance = new NetMessageRequestInterestInAvatarEquipment().MakeReadOnly();
    private static readonly string[] _netMessageRequestInterestInAvatarEquipmentFieldNames = new string[] { "avatarModeEnum", "avatarProtoId" };
    private static readonly uint[] _netMessageRequestInterestInAvatarEquipmentFieldTags = new uint[] { 16, 8 };
    public static NetMessageRequestInterestInAvatarEquipment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestInterestInAvatarEquipment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestInterestInAvatarEquipment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestInterestInAvatarEquipment, NetMessageRequestInterestInAvatarEquipment.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInAvatarEquipment__FieldAccessorTable; }
    }
    
    public const int AvatarProtoIdFieldNumber = 1;
    private bool hasAvatarProtoId;
    private ulong avatarProtoId_;
    public bool HasAvatarProtoId {
      get { return hasAvatarProtoId; }
    }
    public ulong AvatarProtoId {
      get { return avatarProtoId_; }
    }
    
    public const int AvatarModeEnumFieldNumber = 2;
    private bool hasAvatarModeEnum;
    private uint avatarModeEnum_;
    public bool HasAvatarModeEnum {
      get { return hasAvatarModeEnum; }
    }
    public uint AvatarModeEnum {
      get { return avatarModeEnum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarProtoId) return false;
        if (!hasAvatarModeEnum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestInterestInAvatarEquipmentFieldNames;
      if (hasAvatarProtoId) {
        output.WriteUInt64(1, field_names[1], AvatarProtoId);
      }
      if (hasAvatarModeEnum) {
        output.WriteUInt32(2, field_names[0], AvatarModeEnum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarProtoId);
      }
      if (hasAvatarModeEnum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, AvatarModeEnum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInAvatarEquipment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestInterestInAvatarEquipment MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestInterestInAvatarEquipment prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestInterestInAvatarEquipment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestInterestInAvatarEquipment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestInterestInAvatarEquipment result;
      
      private NetMessageRequestInterestInAvatarEquipment PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestInterestInAvatarEquipment original = result;
          result = new NetMessageRequestInterestInAvatarEquipment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestInterestInAvatarEquipment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestInterestInAvatarEquipment.Descriptor; }
      }
      
      public override NetMessageRequestInterestInAvatarEquipment DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestInterestInAvatarEquipment.DefaultInstance; }
      }
      
      public override NetMessageRequestInterestInAvatarEquipment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestInterestInAvatarEquipment) {
          return MergeFrom((NetMessageRequestInterestInAvatarEquipment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestInterestInAvatarEquipment other) {
        if (other == global::Gazillion.NetMessageRequestInterestInAvatarEquipment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarProtoId) {
          AvatarProtoId = other.AvatarProtoId;
        }
        if (other.HasAvatarModeEnum) {
          AvatarModeEnum = other.AvatarModeEnum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestInterestInAvatarEquipmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestInterestInAvatarEquipmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarProtoId = input.ReadUInt64(ref result.avatarProtoId_);
              break;
            }
            case 16: {
              result.hasAvatarModeEnum = input.ReadUInt32(ref result.avatarModeEnum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarProtoId {
        get { return result.hasAvatarProtoId; }
      }
      public ulong AvatarProtoId {
        get { return result.AvatarProtoId; }
        set { SetAvatarProtoId(value); }
      }
      public Builder SetAvatarProtoId(ulong value) {
        PrepareBuilder();
        result.hasAvatarProtoId = true;
        result.avatarProtoId_ = value;
        return this;
      }
      public Builder ClearAvatarProtoId() {
        PrepareBuilder();
        result.hasAvatarProtoId = false;
        result.avatarProtoId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarModeEnum {
        get { return result.hasAvatarModeEnum; }
      }
      public uint AvatarModeEnum {
        get { return result.AvatarModeEnum; }
        set { SetAvatarModeEnum(value); }
      }
      public Builder SetAvatarModeEnum(uint value) {
        PrepareBuilder();
        result.hasAvatarModeEnum = true;
        result.avatarModeEnum_ = value;
        return this;
      }
      public Builder ClearAvatarModeEnum() {
        PrepareBuilder();
        result.hasAvatarModeEnum = false;
        result.avatarModeEnum_ = 0;
        return this;
      }
    }
    static NetMessageRequestInterestInAvatarEquipment() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestInterestInTeamUpEquipment : pb::GeneratedMessage<NetMessageRequestInterestInTeamUpEquipment, NetMessageRequestInterestInTeamUpEquipment.Builder> {
    private NetMessageRequestInterestInTeamUpEquipment() { }
    private static readonly NetMessageRequestInterestInTeamUpEquipment defaultInstance = new NetMessageRequestInterestInTeamUpEquipment().MakeReadOnly();
    private static readonly string[] _netMessageRequestInterestInTeamUpEquipmentFieldNames = new string[] { "teamUpProtoId" };
    private static readonly uint[] _netMessageRequestInterestInTeamUpEquipmentFieldTags = new uint[] { 8 };
    public static NetMessageRequestInterestInTeamUpEquipment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestInterestInTeamUpEquipment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestInterestInTeamUpEquipment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestInterestInTeamUpEquipment, NetMessageRequestInterestInTeamUpEquipment.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestInterestInTeamUpEquipment__FieldAccessorTable; }
    }
    
    public const int TeamUpProtoIdFieldNumber = 1;
    private bool hasTeamUpProtoId;
    private ulong teamUpProtoId_;
    public bool HasTeamUpProtoId {
      get { return hasTeamUpProtoId; }
    }
    public ulong TeamUpProtoId {
      get { return teamUpProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamUpProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestInterestInTeamUpEquipmentFieldNames;
      if (hasTeamUpProtoId) {
        output.WriteUInt64(1, field_names[0], TeamUpProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamUpProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamUpProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestInterestInTeamUpEquipment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestInterestInTeamUpEquipment MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestInterestInTeamUpEquipment prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestInterestInTeamUpEquipment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestInterestInTeamUpEquipment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestInterestInTeamUpEquipment result;
      
      private NetMessageRequestInterestInTeamUpEquipment PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestInterestInTeamUpEquipment original = result;
          result = new NetMessageRequestInterestInTeamUpEquipment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestInterestInTeamUpEquipment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestInterestInTeamUpEquipment.Descriptor; }
      }
      
      public override NetMessageRequestInterestInTeamUpEquipment DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestInterestInTeamUpEquipment.DefaultInstance; }
      }
      
      public override NetMessageRequestInterestInTeamUpEquipment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestInterestInTeamUpEquipment) {
          return MergeFrom((NetMessageRequestInterestInTeamUpEquipment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestInterestInTeamUpEquipment other) {
        if (other == global::Gazillion.NetMessageRequestInterestInTeamUpEquipment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamUpProtoId) {
          TeamUpProtoId = other.TeamUpProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestInterestInTeamUpEquipmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestInterestInTeamUpEquipmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamUpProtoId = input.ReadUInt64(ref result.teamUpProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamUpProtoId {
        get { return result.hasTeamUpProtoId; }
      }
      public ulong TeamUpProtoId {
        get { return result.TeamUpProtoId; }
        set { SetTeamUpProtoId(value); }
      }
      public Builder SetTeamUpProtoId(ulong value) {
        PrepareBuilder();
        result.hasTeamUpProtoId = true;
        result.teamUpProtoId_ = value;
        return this;
      }
      public Builder ClearTeamUpProtoId() {
        PrepareBuilder();
        result.hasTeamUpProtoId = false;
        result.teamUpProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestInterestInTeamUpEquipment() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryTeamUpSelect : pb::GeneratedMessage<NetMessageTryTeamUpSelect, NetMessageTryTeamUpSelect.Builder> {
    private NetMessageTryTeamUpSelect() { }
    private static readonly NetMessageTryTeamUpSelect defaultInstance = new NetMessageTryTeamUpSelect().MakeReadOnly();
    private static readonly string[] _netMessageTryTeamUpSelectFieldNames = new string[] { "teamUpPrototypeId" };
    private static readonly uint[] _netMessageTryTeamUpSelectFieldTags = new uint[] { 8 };
    public static NetMessageTryTeamUpSelect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryTeamUpSelect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryTeamUpSelect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryTeamUpSelect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryTeamUpSelect, NetMessageTryTeamUpSelect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryTeamUpSelect__FieldAccessorTable; }
    }
    
    public const int TeamUpPrototypeIdFieldNumber = 1;
    private bool hasTeamUpPrototypeId;
    private ulong teamUpPrototypeId_;
    public bool HasTeamUpPrototypeId {
      get { return hasTeamUpPrototypeId; }
    }
    public ulong TeamUpPrototypeId {
      get { return teamUpPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamUpPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryTeamUpSelectFieldNames;
      if (hasTeamUpPrototypeId) {
        output.WriteUInt64(1, field_names[0], TeamUpPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamUpPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamUpPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryTeamUpSelect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryTeamUpSelect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryTeamUpSelect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryTeamUpSelect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryTeamUpSelect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryTeamUpSelect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryTeamUpSelect result;
      
      private NetMessageTryTeamUpSelect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryTeamUpSelect original = result;
          result = new NetMessageTryTeamUpSelect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryTeamUpSelect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryTeamUpSelect.Descriptor; }
      }
      
      public override NetMessageTryTeamUpSelect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryTeamUpSelect.DefaultInstance; }
      }
      
      public override NetMessageTryTeamUpSelect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryTeamUpSelect) {
          return MergeFrom((NetMessageTryTeamUpSelect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryTeamUpSelect other) {
        if (other == global::Gazillion.NetMessageTryTeamUpSelect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamUpPrototypeId) {
          TeamUpPrototypeId = other.TeamUpPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryTeamUpSelectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryTeamUpSelectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamUpPrototypeId = input.ReadUInt64(ref result.teamUpPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamUpPrototypeId {
        get { return result.hasTeamUpPrototypeId; }
      }
      public ulong TeamUpPrototypeId {
        get { return result.TeamUpPrototypeId; }
        set { SetTeamUpPrototypeId(value); }
      }
      public Builder SetTeamUpPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTeamUpPrototypeId = true;
        result.teamUpPrototypeId_ = value;
        return this;
      }
      public Builder ClearTeamUpPrototypeId() {
        PrepareBuilder();
        result.hasTeamUpPrototypeId = false;
        result.teamUpPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageTryTeamUpSelect() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestTeamUpDismiss : pb::GeneratedMessage<NetMessageRequestTeamUpDismiss, NetMessageRequestTeamUpDismiss.Builder> {
    private NetMessageRequestTeamUpDismiss() { }
    private static readonly NetMessageRequestTeamUpDismiss defaultInstance = new NetMessageRequestTeamUpDismiss().MakeReadOnly();
    private static readonly string[] _netMessageRequestTeamUpDismissFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestTeamUpDismissFieldTags = new uint[] {  };
    public static NetMessageRequestTeamUpDismiss DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestTeamUpDismiss DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestTeamUpDismiss ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestTeamUpDismiss__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestTeamUpDismiss, NetMessageRequestTeamUpDismiss.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestTeamUpDismiss__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestTeamUpDismissFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestTeamUpDismiss ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestTeamUpDismiss MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestTeamUpDismiss prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestTeamUpDismiss, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestTeamUpDismiss cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestTeamUpDismiss result;
      
      private NetMessageRequestTeamUpDismiss PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestTeamUpDismiss original = result;
          result = new NetMessageRequestTeamUpDismiss();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestTeamUpDismiss MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestTeamUpDismiss.Descriptor; }
      }
      
      public override NetMessageRequestTeamUpDismiss DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestTeamUpDismiss.DefaultInstance; }
      }
      
      public override NetMessageRequestTeamUpDismiss BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestTeamUpDismiss) {
          return MergeFrom((NetMessageRequestTeamUpDismiss) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestTeamUpDismiss other) {
        if (other == global::Gazillion.NetMessageRequestTeamUpDismiss.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestTeamUpDismissFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestTeamUpDismissFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestTeamUpDismiss() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTryTeamUpStyleSelect : pb::GeneratedMessage<NetMessageTryTeamUpStyleSelect, NetMessageTryTeamUpStyleSelect.Builder> {
    private NetMessageTryTeamUpStyleSelect() { }
    private static readonly NetMessageTryTeamUpStyleSelect defaultInstance = new NetMessageTryTeamUpStyleSelect().MakeReadOnly();
    private static readonly string[] _netMessageTryTeamUpStyleSelectFieldNames = new string[] { "styleIndex" };
    private static readonly uint[] _netMessageTryTeamUpStyleSelectFieldTags = new uint[] { 8 };
    public static NetMessageTryTeamUpStyleSelect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTryTeamUpStyleSelect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTryTeamUpStyleSelect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTryTeamUpStyleSelect, NetMessageTryTeamUpStyleSelect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageTryTeamUpStyleSelect__FieldAccessorTable; }
    }
    
    public const int StyleIndexFieldNumber = 1;
    private bool hasStyleIndex;
    private uint styleIndex_;
    public bool HasStyleIndex {
      get { return hasStyleIndex; }
    }
    public uint StyleIndex {
      get { return styleIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStyleIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTryTeamUpStyleSelectFieldNames;
      if (hasStyleIndex) {
        output.WriteUInt32(1, field_names[0], StyleIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStyleIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StyleIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTryTeamUpStyleSelect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTryTeamUpStyleSelect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTryTeamUpStyleSelect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTryTeamUpStyleSelect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTryTeamUpStyleSelect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTryTeamUpStyleSelect result;
      
      private NetMessageTryTeamUpStyleSelect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTryTeamUpStyleSelect original = result;
          result = new NetMessageTryTeamUpStyleSelect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTryTeamUpStyleSelect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTryTeamUpStyleSelect.Descriptor; }
      }
      
      public override NetMessageTryTeamUpStyleSelect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTryTeamUpStyleSelect.DefaultInstance; }
      }
      
      public override NetMessageTryTeamUpStyleSelect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTryTeamUpStyleSelect) {
          return MergeFrom((NetMessageTryTeamUpStyleSelect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTryTeamUpStyleSelect other) {
        if (other == global::Gazillion.NetMessageTryTeamUpStyleSelect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStyleIndex) {
          StyleIndex = other.StyleIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTryTeamUpStyleSelectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTryTeamUpStyleSelectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStyleIndex = input.ReadUInt32(ref result.styleIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStyleIndex {
        get { return result.hasStyleIndex; }
      }
      public uint StyleIndex {
        get { return result.StyleIndex; }
        set { SetStyleIndex(value); }
      }
      public Builder SetStyleIndex(uint value) {
        PrepareBuilder();
        result.hasStyleIndex = true;
        result.styleIndex_ = value;
        return this;
      }
      public Builder ClearStyleIndex() {
        PrepareBuilder();
        result.hasStyleIndex = false;
        result.styleIndex_ = 0;
        return this;
      }
    }
    static NetMessageTryTeamUpStyleSelect() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectOmegaBonus : pb::GeneratedMessage<NetMessageSelectOmegaBonus, NetMessageSelectOmegaBonus.Builder> {
    private NetMessageSelectOmegaBonus() { }
    private static readonly NetMessageSelectOmegaBonus defaultInstance = new NetMessageSelectOmegaBonus().MakeReadOnly();
    private static readonly string[] _netMessageSelectOmegaBonusFieldNames = new string[] { "omegaBonusProtoRefID", "points" };
    private static readonly uint[] _netMessageSelectOmegaBonusFieldTags = new uint[] { 8, 16 };
    public static NetMessageSelectOmegaBonus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectOmegaBonus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectOmegaBonus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectOmegaBonus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectOmegaBonus, NetMessageSelectOmegaBonus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSelectOmegaBonus__FieldAccessorTable; }
    }
    
    public const int OmegaBonusProtoRefIDFieldNumber = 1;
    private bool hasOmegaBonusProtoRefID;
    private ulong omegaBonusProtoRefID_;
    public bool HasOmegaBonusProtoRefID {
      get { return hasOmegaBonusProtoRefID; }
    }
    public ulong OmegaBonusProtoRefID {
      get { return omegaBonusProtoRefID_; }
    }
    
    public const int PointsFieldNumber = 2;
    private bool hasPoints;
    private int points_;
    public bool HasPoints {
      get { return hasPoints; }
    }
    public int Points {
      get { return points_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOmegaBonusProtoRefID) return false;
        if (!hasPoints) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectOmegaBonusFieldNames;
      if (hasOmegaBonusProtoRefID) {
        output.WriteUInt64(1, field_names[0], OmegaBonusProtoRefID);
      }
      if (hasPoints) {
        output.WriteInt32(2, field_names[1], Points);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOmegaBonusProtoRefID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, OmegaBonusProtoRefID);
      }
      if (hasPoints) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Points);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectOmegaBonus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectOmegaBonus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectOmegaBonus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectOmegaBonus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectOmegaBonus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectOmegaBonus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectOmegaBonus result;
      
      private NetMessageSelectOmegaBonus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectOmegaBonus original = result;
          result = new NetMessageSelectOmegaBonus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectOmegaBonus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectOmegaBonus.Descriptor; }
      }
      
      public override NetMessageSelectOmegaBonus DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectOmegaBonus.DefaultInstance; }
      }
      
      public override NetMessageSelectOmegaBonus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectOmegaBonus) {
          return MergeFrom((NetMessageSelectOmegaBonus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectOmegaBonus other) {
        if (other == global::Gazillion.NetMessageSelectOmegaBonus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOmegaBonusProtoRefID) {
          OmegaBonusProtoRefID = other.OmegaBonusProtoRefID;
        }
        if (other.HasPoints) {
          Points = other.Points;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectOmegaBonusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectOmegaBonusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOmegaBonusProtoRefID = input.ReadUInt64(ref result.omegaBonusProtoRefID_);
              break;
            }
            case 16: {
              result.hasPoints = input.ReadInt32(ref result.points_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOmegaBonusProtoRefID {
        get { return result.hasOmegaBonusProtoRefID; }
      }
      public ulong OmegaBonusProtoRefID {
        get { return result.OmegaBonusProtoRefID; }
        set { SetOmegaBonusProtoRefID(value); }
      }
      public Builder SetOmegaBonusProtoRefID(ulong value) {
        PrepareBuilder();
        result.hasOmegaBonusProtoRefID = true;
        result.omegaBonusProtoRefID_ = value;
        return this;
      }
      public Builder ClearOmegaBonusProtoRefID() {
        PrepareBuilder();
        result.hasOmegaBonusProtoRefID = false;
        result.omegaBonusProtoRefID_ = 0UL;
        return this;
      }
      
      public bool HasPoints {
        get { return result.hasPoints; }
      }
      public int Points {
        get { return result.Points; }
        set { SetPoints(value); }
      }
      public Builder SetPoints(int value) {
        PrepareBuilder();
        result.hasPoints = true;
        result.points_ = value;
        return this;
      }
      public Builder ClearPoints() {
        PrepareBuilder();
        result.hasPoints = false;
        result.points_ = 0;
        return this;
      }
    }
    static NetMessageSelectOmegaBonus() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOmegaBonusAllocationCommit : pb::GeneratedMessage<NetMessageOmegaBonusAllocationCommit, NetMessageOmegaBonusAllocationCommit.Builder> {
    private NetMessageOmegaBonusAllocationCommit() { }
    private static readonly NetMessageOmegaBonusAllocationCommit defaultInstance = new NetMessageOmegaBonusAllocationCommit().MakeReadOnly();
    private static readonly string[] _netMessageOmegaBonusAllocationCommitFieldNames = new string[] { "allocations", "avatarId" };
    private static readonly uint[] _netMessageOmegaBonusAllocationCommitFieldTags = new uint[] { 18, 8 };
    public static NetMessageOmegaBonusAllocationCommit DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOmegaBonusAllocationCommit DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOmegaBonusAllocationCommit ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOmegaBonusAllocationCommit, NetMessageOmegaBonusAllocationCommit.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageOmegaBonusAllocationCommit__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int AllocationsFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.NetMessageSelectOmegaBonus> allocations_ = new pbc::PopsicleList<global::Gazillion.NetMessageSelectOmegaBonus>();
    public scg::IList<global::Gazillion.NetMessageSelectOmegaBonus> AllocationsList {
      get { return allocations_; }
    }
    public int AllocationsCount {
      get { return allocations_.Count; }
    }
    public global::Gazillion.NetMessageSelectOmegaBonus GetAllocations(int index) {
      return allocations_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        foreach (global::Gazillion.NetMessageSelectOmegaBonus element in AllocationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOmegaBonusAllocationCommitFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[1], AvatarId);
      }
      if (allocations_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], allocations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      foreach (global::Gazillion.NetMessageSelectOmegaBonus element in AllocationsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOmegaBonusAllocationCommit ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOmegaBonusAllocationCommit MakeReadOnly() {
      allocations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOmegaBonusAllocationCommit prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOmegaBonusAllocationCommit, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOmegaBonusAllocationCommit cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOmegaBonusAllocationCommit result;
      
      private NetMessageOmegaBonusAllocationCommit PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOmegaBonusAllocationCommit original = result;
          result = new NetMessageOmegaBonusAllocationCommit();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOmegaBonusAllocationCommit MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOmegaBonusAllocationCommit.Descriptor; }
      }
      
      public override NetMessageOmegaBonusAllocationCommit DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOmegaBonusAllocationCommit.DefaultInstance; }
      }
      
      public override NetMessageOmegaBonusAllocationCommit BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOmegaBonusAllocationCommit) {
          return MergeFrom((NetMessageOmegaBonusAllocationCommit) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOmegaBonusAllocationCommit other) {
        if (other == global::Gazillion.NetMessageOmegaBonusAllocationCommit.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.allocations_.Count != 0) {
          result.allocations_.Add(other.allocations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOmegaBonusAllocationCommitFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOmegaBonusAllocationCommitFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.allocations_, global::Gazillion.NetMessageSelectOmegaBonus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetMessageSelectOmegaBonus> AllocationsList {
        get { return PrepareBuilder().allocations_; }
      }
      public int AllocationsCount {
        get { return result.AllocationsCount; }
      }
      public global::Gazillion.NetMessageSelectOmegaBonus GetAllocations(int index) {
        return result.GetAllocations(index);
      }
      public Builder SetAllocations(int index, global::Gazillion.NetMessageSelectOmegaBonus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_[index] = value;
        return this;
      }
      public Builder SetAllocations(int index, global::Gazillion.NetMessageSelectOmegaBonus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetMessageSelectOmegaBonus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allocations_.Add(value);
        return this;
      }
      public Builder AddAllocations(global::Gazillion.NetMessageSelectOmegaBonus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allocations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllocations(scg::IEnumerable<global::Gazillion.NetMessageSelectOmegaBonus> values) {
        PrepareBuilder();
        result.allocations_.Add(values);
        return this;
      }
      public Builder ClearAllocations() {
        PrepareBuilder();
        result.allocations_.Clear();
        return this;
      }
    }
    static NetMessageOmegaBonusAllocationCommit() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRespecOmegaBonus : pb::GeneratedMessage<NetMessageRespecOmegaBonus, NetMessageRespecOmegaBonus.Builder> {
    private NetMessageRespecOmegaBonus() { }
    private static readonly NetMessageRespecOmegaBonus defaultInstance = new NetMessageRespecOmegaBonus().MakeReadOnly();
    private static readonly string[] _netMessageRespecOmegaBonusFieldNames = new string[] { "avatarId" };
    private static readonly uint[] _netMessageRespecOmegaBonusFieldTags = new uint[] { 8 };
    public static NetMessageRespecOmegaBonus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRespecOmegaBonus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRespecOmegaBonus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRespecOmegaBonus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRespecOmegaBonus, NetMessageRespecOmegaBonus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRespecOmegaBonus__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRespecOmegaBonusFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRespecOmegaBonus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRespecOmegaBonus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRespecOmegaBonus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRespecOmegaBonus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRespecOmegaBonus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRespecOmegaBonus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRespecOmegaBonus result;
      
      private NetMessageRespecOmegaBonus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRespecOmegaBonus original = result;
          result = new NetMessageRespecOmegaBonus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRespecOmegaBonus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRespecOmegaBonus.Descriptor; }
      }
      
      public override NetMessageRespecOmegaBonus DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRespecOmegaBonus.DefaultInstance; }
      }
      
      public override NetMessageRespecOmegaBonus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRespecOmegaBonus) {
          return MergeFrom((NetMessageRespecOmegaBonus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRespecOmegaBonus other) {
        if (other == global::Gazillion.NetMessageRespecOmegaBonus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRespecOmegaBonusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRespecOmegaBonusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
    }
    static NetMessageRespecOmegaBonus() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRespecPowerSpec : pb::GeneratedMessage<NetMessageRespecPowerSpec, NetMessageRespecPowerSpec.Builder> {
    private NetMessageRespecPowerSpec() { }
    private static readonly NetMessageRespecPowerSpec defaultInstance = new NetMessageRespecPowerSpec().MakeReadOnly();
    private static readonly string[] _netMessageRespecPowerSpecFieldNames = new string[] { "characterId", "powerSpecIndex" };
    private static readonly uint[] _netMessageRespecPowerSpecFieldTags = new uint[] { 8, 16 };
    public static NetMessageRespecPowerSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRespecPowerSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRespecPowerSpec ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRespecPowerSpec__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRespecPowerSpec, NetMessageRespecPowerSpec.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRespecPowerSpec__FieldAccessorTable; }
    }
    
    public const int CharacterIdFieldNumber = 1;
    private bool hasCharacterId;
    private ulong characterId_;
    public bool HasCharacterId {
      get { return hasCharacterId; }
    }
    public ulong CharacterId {
      get { return characterId_; }
    }
    
    public const int PowerSpecIndexFieldNumber = 2;
    private bool hasPowerSpecIndex;
    private int powerSpecIndex_;
    public bool HasPowerSpecIndex {
      get { return hasPowerSpecIndex; }
    }
    public int PowerSpecIndex {
      get { return powerSpecIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCharacterId) return false;
        if (!hasPowerSpecIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRespecPowerSpecFieldNames;
      if (hasCharacterId) {
        output.WriteUInt64(1, field_names[0], CharacterId);
      }
      if (hasPowerSpecIndex) {
        output.WriteInt32(2, field_names[1], PowerSpecIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCharacterId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CharacterId);
      }
      if (hasPowerSpecIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, PowerSpecIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRespecPowerSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRespecPowerSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRespecPowerSpec MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRespecPowerSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRespecPowerSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRespecPowerSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRespecPowerSpec result;
      
      private NetMessageRespecPowerSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRespecPowerSpec original = result;
          result = new NetMessageRespecPowerSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRespecPowerSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRespecPowerSpec.Descriptor; }
      }
      
      public override NetMessageRespecPowerSpec DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRespecPowerSpec.DefaultInstance; }
      }
      
      public override NetMessageRespecPowerSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRespecPowerSpec) {
          return MergeFrom((NetMessageRespecPowerSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRespecPowerSpec other) {
        if (other == global::Gazillion.NetMessageRespecPowerSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCharacterId) {
          CharacterId = other.CharacterId;
        }
        if (other.HasPowerSpecIndex) {
          PowerSpecIndex = other.PowerSpecIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRespecPowerSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRespecPowerSpecFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCharacterId = input.ReadUInt64(ref result.characterId_);
              break;
            }
            case 16: {
              result.hasPowerSpecIndex = input.ReadInt32(ref result.powerSpecIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCharacterId {
        get { return result.hasCharacterId; }
      }
      public ulong CharacterId {
        get { return result.CharacterId; }
        set { SetCharacterId(value); }
      }
      public Builder SetCharacterId(ulong value) {
        PrepareBuilder();
        result.hasCharacterId = true;
        result.characterId_ = value;
        return this;
      }
      public Builder ClearCharacterId() {
        PrepareBuilder();
        result.hasCharacterId = false;
        result.characterId_ = 0UL;
        return this;
      }
      
      public bool HasPowerSpecIndex {
        get { return result.hasPowerSpecIndex; }
      }
      public int PowerSpecIndex {
        get { return result.PowerSpecIndex; }
        set { SetPowerSpecIndex(value); }
      }
      public Builder SetPowerSpecIndex(int value) {
        PrepareBuilder();
        result.hasPowerSpecIndex = true;
        result.powerSpecIndex_ = value;
        return this;
      }
      public Builder ClearPowerSpecIndex() {
        PrepareBuilder();
        result.hasPowerSpecIndex = false;
        result.powerSpecIndex_ = 0;
        return this;
      }
    }
    static NetMessageRespecPowerSpec() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNewItemGlintPlayed : pb::GeneratedMessage<NetMessageNewItemGlintPlayed, NetMessageNewItemGlintPlayed.Builder> {
    private NetMessageNewItemGlintPlayed() { }
    private static readonly NetMessageNewItemGlintPlayed defaultInstance = new NetMessageNewItemGlintPlayed().MakeReadOnly();
    private static readonly string[] _netMessageNewItemGlintPlayedFieldNames = new string[] { "itemIds", "playerId" };
    private static readonly uint[] _netMessageNewItemGlintPlayedFieldTags = new uint[] { 16, 8 };
    public static NetMessageNewItemGlintPlayed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNewItemGlintPlayed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNewItemGlintPlayed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNewItemGlintPlayed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNewItemGlintPlayed, NetMessageNewItemGlintPlayed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNewItemGlintPlayed__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int ItemIdsFieldNumber = 2;
    private pbc::PopsicleList<ulong> itemIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ItemIdsList {
      get { return pbc::Lists.AsReadOnly(itemIds_); }
    }
    public int ItemIdsCount {
      get { return itemIds_.Count; }
    }
    public ulong GetItemIds(int index) {
      return itemIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNewItemGlintPlayedFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (itemIds_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], itemIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ItemIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * itemIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewItemGlintPlayed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNewItemGlintPlayed MakeReadOnly() {
      itemIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNewItemGlintPlayed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNewItemGlintPlayed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNewItemGlintPlayed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNewItemGlintPlayed result;
      
      private NetMessageNewItemGlintPlayed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNewItemGlintPlayed original = result;
          result = new NetMessageNewItemGlintPlayed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNewItemGlintPlayed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNewItemGlintPlayed.Descriptor; }
      }
      
      public override NetMessageNewItemGlintPlayed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNewItemGlintPlayed.DefaultInstance; }
      }
      
      public override NetMessageNewItemGlintPlayed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNewItemGlintPlayed) {
          return MergeFrom((NetMessageNewItemGlintPlayed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNewItemGlintPlayed other) {
        if (other == global::Gazillion.NetMessageNewItemGlintPlayed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.itemIds_.Count != 0) {
          result.itemIds_.Add(other.itemIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNewItemGlintPlayedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNewItemGlintPlayedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.itemIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ItemIdsList {
        get { return PrepareBuilder().itemIds_; }
      }
      public int ItemIdsCount {
        get { return result.ItemIdsCount; }
      }
      public ulong GetItemIds(int index) {
        return result.GetItemIds(index);
      }
      public Builder SetItemIds(int index, ulong value) {
        PrepareBuilder();
        result.itemIds_[index] = value;
        return this;
      }
      public Builder AddItemIds(ulong value) {
        PrepareBuilder();
        result.itemIds_.Add(value);
        return this;
      }
      public Builder AddRangeItemIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.itemIds_.Add(values);
        return this;
      }
      public Builder ClearItemIds() {
        PrepareBuilder();
        result.itemIds_.Clear();
        return this;
      }
    }
    static NetMessageNewItemGlintPlayed() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNewItemHighlightCleared : pb::GeneratedMessage<NetMessageNewItemHighlightCleared, NetMessageNewItemHighlightCleared.Builder> {
    private NetMessageNewItemHighlightCleared() { }
    private static readonly NetMessageNewItemHighlightCleared defaultInstance = new NetMessageNewItemHighlightCleared().MakeReadOnly();
    private static readonly string[] _netMessageNewItemHighlightClearedFieldNames = new string[] { "itemId", "playerId" };
    private static readonly uint[] _netMessageNewItemHighlightClearedFieldTags = new uint[] { 16, 8 };
    public static NetMessageNewItemHighlightCleared DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNewItemHighlightCleared DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNewItemHighlightCleared ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNewItemHighlightCleared__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNewItemHighlightCleared, NetMessageNewItemHighlightCleared.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageNewItemHighlightCleared__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public const int ItemIdFieldNumber = 2;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNewItemHighlightClearedFieldNames;
      if (hasPlayerId) {
        output.WriteUInt64(1, field_names[1], PlayerId);
      }
      if (hasItemId) {
        output.WriteUInt64(2, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerId);
      }
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewItemHighlightCleared ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNewItemHighlightCleared MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNewItemHighlightCleared prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNewItemHighlightCleared, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNewItemHighlightCleared cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNewItemHighlightCleared result;
      
      private NetMessageNewItemHighlightCleared PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNewItemHighlightCleared original = result;
          result = new NetMessageNewItemHighlightCleared();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNewItemHighlightCleared MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNewItemHighlightCleared.Descriptor; }
      }
      
      public override NetMessageNewItemHighlightCleared DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNewItemHighlightCleared.DefaultInstance; }
      }
      
      public override NetMessageNewItemHighlightCleared BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNewItemHighlightCleared) {
          return MergeFrom((NetMessageNewItemHighlightCleared) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNewItemHighlightCleared other) {
        if (other == global::Gazillion.NetMessageNewItemHighlightCleared.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNewItemHighlightClearedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNewItemHighlightClearedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
    }
    static NetMessageNewItemHighlightCleared() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnassignMappedPower : pb::GeneratedMessage<NetMessageUnassignMappedPower, NetMessageUnassignMappedPower.Builder> {
    private NetMessageUnassignMappedPower() { }
    private static readonly NetMessageUnassignMappedPower defaultInstance = new NetMessageUnassignMappedPower().MakeReadOnly();
    private static readonly string[] _netMessageUnassignMappedPowerFieldNames = new string[] { "avatarId", "mappedPowerProtoId" };
    private static readonly uint[] _netMessageUnassignMappedPowerFieldTags = new uint[] { 8, 16 };
    public static NetMessageUnassignMappedPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnassignMappedPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnassignMappedPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignMappedPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnassignMappedPower, NetMessageUnassignMappedPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUnassignMappedPower__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int MappedPowerProtoIdFieldNumber = 2;
    private bool hasMappedPowerProtoId;
    private ulong mappedPowerProtoId_;
    public bool HasMappedPowerProtoId {
      get { return hasMappedPowerProtoId; }
    }
    public ulong MappedPowerProtoId {
      get { return mappedPowerProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasMappedPowerProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnassignMappedPowerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasMappedPowerProtoId) {
        output.WriteUInt64(2, field_names[1], MappedPowerProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasMappedPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MappedPowerProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnassignMappedPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignMappedPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnassignMappedPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnassignMappedPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnassignMappedPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnassignMappedPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnassignMappedPower result;
      
      private NetMessageUnassignMappedPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnassignMappedPower original = result;
          result = new NetMessageUnassignMappedPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnassignMappedPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnassignMappedPower.Descriptor; }
      }
      
      public override NetMessageUnassignMappedPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnassignMappedPower.DefaultInstance; }
      }
      
      public override NetMessageUnassignMappedPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnassignMappedPower) {
          return MergeFrom((NetMessageUnassignMappedPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnassignMappedPower other) {
        if (other == global::Gazillion.NetMessageUnassignMappedPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasMappedPowerProtoId) {
          MappedPowerProtoId = other.MappedPowerProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnassignMappedPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnassignMappedPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasMappedPowerProtoId = input.ReadUInt64(ref result.mappedPowerProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasMappedPowerProtoId {
        get { return result.hasMappedPowerProtoId; }
      }
      public ulong MappedPowerProtoId {
        get { return result.MappedPowerProtoId; }
        set { SetMappedPowerProtoId(value); }
      }
      public Builder SetMappedPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasMappedPowerProtoId = true;
        result.mappedPowerProtoId_ = value;
        return this;
      }
      public Builder ClearMappedPowerProtoId() {
        PrepareBuilder();
        result.hasMappedPowerProtoId = false;
        result.mappedPowerProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageUnassignMappedPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVanityTitleSelect : pb::GeneratedMessage<NetMessageVanityTitleSelect, NetMessageVanityTitleSelect.Builder> {
    private NetMessageVanityTitleSelect() { }
    private static readonly NetMessageVanityTitleSelect defaultInstance = new NetMessageVanityTitleSelect().MakeReadOnly();
    private static readonly string[] _netMessageVanityTitleSelectFieldNames = new string[] { "vanityTitlePrototypeId" };
    private static readonly uint[] _netMessageVanityTitleSelectFieldTags = new uint[] { 8 };
    public static NetMessageVanityTitleSelect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVanityTitleSelect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVanityTitleSelect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVanityTitleSelect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVanityTitleSelect, NetMessageVanityTitleSelect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageVanityTitleSelect__FieldAccessorTable; }
    }
    
    public const int VanityTitlePrototypeIdFieldNumber = 1;
    private bool hasVanityTitlePrototypeId;
    private ulong vanityTitlePrototypeId_;
    public bool HasVanityTitlePrototypeId {
      get { return hasVanityTitlePrototypeId; }
    }
    public ulong VanityTitlePrototypeId {
      get { return vanityTitlePrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVanityTitlePrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVanityTitleSelectFieldNames;
      if (hasVanityTitlePrototypeId) {
        output.WriteUInt64(1, field_names[0], VanityTitlePrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVanityTitlePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VanityTitlePrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVanityTitleSelect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVanityTitleSelect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVanityTitleSelect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVanityTitleSelect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVanityTitleSelect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVanityTitleSelect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVanityTitleSelect result;
      
      private NetMessageVanityTitleSelect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVanityTitleSelect original = result;
          result = new NetMessageVanityTitleSelect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVanityTitleSelect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVanityTitleSelect.Descriptor; }
      }
      
      public override NetMessageVanityTitleSelect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVanityTitleSelect.DefaultInstance; }
      }
      
      public override NetMessageVanityTitleSelect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVanityTitleSelect) {
          return MergeFrom((NetMessageVanityTitleSelect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVanityTitleSelect other) {
        if (other == global::Gazillion.NetMessageVanityTitleSelect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVanityTitlePrototypeId) {
          VanityTitlePrototypeId = other.VanityTitlePrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVanityTitleSelectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVanityTitleSelectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVanityTitlePrototypeId = input.ReadUInt64(ref result.vanityTitlePrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVanityTitlePrototypeId {
        get { return result.hasVanityTitlePrototypeId; }
      }
      public ulong VanityTitlePrototypeId {
        get { return result.VanityTitlePrototypeId; }
        set { SetVanityTitlePrototypeId(value); }
      }
      public Builder SetVanityTitlePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasVanityTitlePrototypeId = true;
        result.vanityTitlePrototypeId_ = value;
        return this;
      }
      public Builder ClearVanityTitlePrototypeId() {
        PrepareBuilder();
        result.hasVanityTitlePrototypeId = false;
        result.vanityTitlePrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageVanityTitleSelect() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestGlobalEventUpdate : pb::GeneratedMessage<NetMessageRequestGlobalEventUpdate, NetMessageRequestGlobalEventUpdate.Builder> {
    private NetMessageRequestGlobalEventUpdate() { }
    private static readonly NetMessageRequestGlobalEventUpdate defaultInstance = new NetMessageRequestGlobalEventUpdate().MakeReadOnly();
    private static readonly string[] _netMessageRequestGlobalEventUpdateFieldNames = new string[] { "eventId", "updateType" };
    private static readonly uint[] _netMessageRequestGlobalEventUpdateFieldTags = new uint[] { 8, 16 };
    public static NetMessageRequestGlobalEventUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestGlobalEventUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestGlobalEventUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestGlobalEventUpdate, NetMessageRequestGlobalEventUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestGlobalEventUpdate__FieldAccessorTable; }
    }
    
    public const int EventIdFieldNumber = 1;
    private bool hasEventId;
    private ulong eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    public ulong EventId {
      get { return eventId_; }
    }
    
    public const int UpdateTypeFieldNumber = 2;
    private bool hasUpdateType;
    private global::Gazillion.GlobalEventUpdateType updateType_ = global::Gazillion.GlobalEventUpdateType.eGlobalEventUpdate_EventData;
    public bool HasUpdateType {
      get { return hasUpdateType; }
    }
    public global::Gazillion.GlobalEventUpdateType UpdateType {
      get { return updateType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEventId) return false;
        if (!hasUpdateType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestGlobalEventUpdateFieldNames;
      if (hasEventId) {
        output.WriteUInt64(1, field_names[0], EventId);
      }
      if (hasUpdateType) {
        output.WriteEnum(2, field_names[1], (int) UpdateType, UpdateType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EventId);
      }
      if (hasUpdateType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) UpdateType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestGlobalEventUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestGlobalEventUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestGlobalEventUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestGlobalEventUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestGlobalEventUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestGlobalEventUpdate result;
      
      private NetMessageRequestGlobalEventUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestGlobalEventUpdate original = result;
          result = new NetMessageRequestGlobalEventUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestGlobalEventUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestGlobalEventUpdate.Descriptor; }
      }
      
      public override NetMessageRequestGlobalEventUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestGlobalEventUpdate.DefaultInstance; }
      }
      
      public override NetMessageRequestGlobalEventUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestGlobalEventUpdate) {
          return MergeFrom((NetMessageRequestGlobalEventUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestGlobalEventUpdate other) {
        if (other == global::Gazillion.NetMessageRequestGlobalEventUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasUpdateType) {
          UpdateType = other.UpdateType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestGlobalEventUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestGlobalEventUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEventId = input.ReadUInt64(ref result.eventId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.updateType_, out unknown)) {
                result.hasUpdateType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public ulong EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(ulong value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = 0UL;
        return this;
      }
      
      public bool HasUpdateType {
       get { return result.hasUpdateType; }
      }
      public global::Gazillion.GlobalEventUpdateType UpdateType {
        get { return result.UpdateType; }
        set { SetUpdateType(value); }
      }
      public Builder SetUpdateType(global::Gazillion.GlobalEventUpdateType value) {
        PrepareBuilder();
        result.hasUpdateType = true;
        result.updateType_ = value;
        return this;
      }
      public Builder ClearUpdateType() {
        PrepareBuilder();
        result.hasUpdateType = false;
        result.updateType_ = global::Gazillion.GlobalEventUpdateType.eGlobalEventUpdate_EventData;
        return this;
      }
    }
    static NetMessageRequestGlobalEventUpdate() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageHasPendingGift : pb::GeneratedMessage<NetMessageHasPendingGift, NetMessageHasPendingGift.Builder> {
    private NetMessageHasPendingGift() { }
    private static readonly NetMessageHasPendingGift defaultInstance = new NetMessageHasPendingGift().MakeReadOnly();
    private static readonly string[] _netMessageHasPendingGiftFieldNames = new string[] { "hasPendingGift" };
    private static readonly uint[] _netMessageHasPendingGiftFieldTags = new uint[] { 8 };
    public static NetMessageHasPendingGift DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageHasPendingGift DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageHasPendingGift ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageHasPendingGift__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageHasPendingGift, NetMessageHasPendingGift.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageHasPendingGift__FieldAccessorTable; }
    }
    
    public const int HasPendingGiftFieldNumber = 1;
    private bool hasHasPendingGift;
    private bool hasPendingGift_;
    public bool HasHasPendingGift {
      get { return hasHasPendingGift; }
    }
    public bool HasPendingGift {
      get { return hasPendingGift_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageHasPendingGiftFieldNames;
      if (hasHasPendingGift) {
        output.WriteBool(1, field_names[0], HasPendingGift);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHasPendingGift) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, HasPendingGift);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageHasPendingGift ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHasPendingGift ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageHasPendingGift MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageHasPendingGift prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageHasPendingGift, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageHasPendingGift cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageHasPendingGift result;
      
      private NetMessageHasPendingGift PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageHasPendingGift original = result;
          result = new NetMessageHasPendingGift();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageHasPendingGift MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageHasPendingGift.Descriptor; }
      }
      
      public override NetMessageHasPendingGift DefaultInstanceForType {
        get { return global::Gazillion.NetMessageHasPendingGift.DefaultInstance; }
      }
      
      public override NetMessageHasPendingGift BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageHasPendingGift) {
          return MergeFrom((NetMessageHasPendingGift) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageHasPendingGift other) {
        if (other == global::Gazillion.NetMessageHasPendingGift.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHasPendingGift) {
          HasPendingGift = other.HasPendingGift;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageHasPendingGiftFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageHasPendingGiftFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHasPendingGift = input.ReadBool(ref result.hasPendingGift_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHasPendingGift {
        get { return result.hasHasPendingGift; }
      }
      public bool HasPendingGift {
        get { return result.HasPendingGift; }
        set { SetHasPendingGift(value); }
      }
      public Builder SetHasPendingGift(bool value) {
        PrepareBuilder();
        result.hasHasPendingGift = true;
        result.hasPendingGift_ = value;
        return this;
      }
      public Builder ClearHasPendingGift() {
        PrepareBuilder();
        result.hasHasPendingGift = false;
        result.hasPendingGift_ = false;
        return this;
      }
    }
    static NetMessageHasPendingGift() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerTradeStart : pb::GeneratedMessage<NetMessagePlayerTradeStart, NetMessagePlayerTradeStart.Builder> {
    private NetMessagePlayerTradeStart() { }
    private static readonly NetMessagePlayerTradeStart defaultInstance = new NetMessagePlayerTradeStart().MakeReadOnly();
    private static readonly string[] _netMessagePlayerTradeStartFieldNames = new string[] { "partnerPlayerName" };
    private static readonly uint[] _netMessagePlayerTradeStartFieldTags = new uint[] { 10 };
    public static NetMessagePlayerTradeStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerTradeStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerTradeStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerTradeStart, NetMessagePlayerTradeStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeStart__FieldAccessorTable; }
    }
    
    public const int PartnerPlayerNameFieldNumber = 1;
    private bool hasPartnerPlayerName;
    private string partnerPlayerName_ = "";
    public bool HasPartnerPlayerName {
      get { return hasPartnerPlayerName; }
    }
    public string PartnerPlayerName {
      get { return partnerPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartnerPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerTradeStartFieldNames;
      if (hasPartnerPlayerName) {
        output.WriteString(1, field_names[0], PartnerPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPartnerPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PartnerPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerTradeStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerTradeStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerTradeStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerTradeStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerTradeStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerTradeStart result;
      
      private NetMessagePlayerTradeStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerTradeStart original = result;
          result = new NetMessagePlayerTradeStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerTradeStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerTradeStart.Descriptor; }
      }
      
      public override NetMessagePlayerTradeStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerTradeStart.DefaultInstance; }
      }
      
      public override NetMessagePlayerTradeStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerTradeStart) {
          return MergeFrom((NetMessagePlayerTradeStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerTradeStart other) {
        if (other == global::Gazillion.NetMessagePlayerTradeStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartnerPlayerName) {
          PartnerPlayerName = other.PartnerPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerTradeStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerTradeStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPartnerPlayerName = input.ReadString(ref result.partnerPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartnerPlayerName {
        get { return result.hasPartnerPlayerName; }
      }
      public string PartnerPlayerName {
        get { return result.PartnerPlayerName; }
        set { SetPartnerPlayerName(value); }
      }
      public Builder SetPartnerPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartnerPlayerName = true;
        result.partnerPlayerName_ = value;
        return this;
      }
      public Builder ClearPartnerPlayerName() {
        PrepareBuilder();
        result.hasPartnerPlayerName = false;
        result.partnerPlayerName_ = "";
        return this;
      }
    }
    static NetMessagePlayerTradeStart() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerTradeCancel : pb::GeneratedMessage<NetMessagePlayerTradeCancel, NetMessagePlayerTradeCancel.Builder> {
    private NetMessagePlayerTradeCancel() { }
    private static readonly NetMessagePlayerTradeCancel defaultInstance = new NetMessagePlayerTradeCancel().MakeReadOnly();
    private static readonly string[] _netMessagePlayerTradeCancelFieldNames = new string[] {  };
    private static readonly uint[] _netMessagePlayerTradeCancelFieldTags = new uint[] {  };
    public static NetMessagePlayerTradeCancel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerTradeCancel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerTradeCancel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeCancel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerTradeCancel, NetMessagePlayerTradeCancel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeCancel__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerTradeCancelFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerTradeCancel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeCancel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerTradeCancel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerTradeCancel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerTradeCancel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerTradeCancel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerTradeCancel result;
      
      private NetMessagePlayerTradeCancel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerTradeCancel original = result;
          result = new NetMessagePlayerTradeCancel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerTradeCancel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerTradeCancel.Descriptor; }
      }
      
      public override NetMessagePlayerTradeCancel DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerTradeCancel.DefaultInstance; }
      }
      
      public override NetMessagePlayerTradeCancel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerTradeCancel) {
          return MergeFrom((NetMessagePlayerTradeCancel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerTradeCancel other) {
        if (other == global::Gazillion.NetMessagePlayerTradeCancel.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerTradeCancelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerTradeCancelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessagePlayerTradeCancel() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerTradeSetConfirmFlag : pb::GeneratedMessage<NetMessagePlayerTradeSetConfirmFlag, NetMessagePlayerTradeSetConfirmFlag.Builder> {
    private NetMessagePlayerTradeSetConfirmFlag() { }
    private static readonly NetMessagePlayerTradeSetConfirmFlag defaultInstance = new NetMessagePlayerTradeSetConfirmFlag().MakeReadOnly();
    private static readonly string[] _netMessagePlayerTradeSetConfirmFlagFieldNames = new string[] { "confirmFlag", "sequenceNumber" };
    private static readonly uint[] _netMessagePlayerTradeSetConfirmFlagFieldTags = new uint[] { 8, 16 };
    public static NetMessagePlayerTradeSetConfirmFlag DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerTradeSetConfirmFlag DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerTradeSetConfirmFlag ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerTradeSetConfirmFlag, NetMessagePlayerTradeSetConfirmFlag.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessagePlayerTradeSetConfirmFlag__FieldAccessorTable; }
    }
    
    public const int ConfirmFlagFieldNumber = 1;
    private bool hasConfirmFlag;
    private bool confirmFlag_;
    public bool HasConfirmFlag {
      get { return hasConfirmFlag; }
    }
    public bool ConfirmFlag {
      get { return confirmFlag_; }
    }
    
    public const int SequenceNumberFieldNumber = 2;
    private bool hasSequenceNumber;
    private uint sequenceNumber_;
    public bool HasSequenceNumber {
      get { return hasSequenceNumber; }
    }
    public uint SequenceNumber {
      get { return sequenceNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasConfirmFlag) return false;
        if (!hasSequenceNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerTradeSetConfirmFlagFieldNames;
      if (hasConfirmFlag) {
        output.WriteBool(1, field_names[0], ConfirmFlag);
      }
      if (hasSequenceNumber) {
        output.WriteUInt32(2, field_names[1], SequenceNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasConfirmFlag) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, ConfirmFlag);
      }
      if (hasSequenceNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SequenceNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeSetConfirmFlag ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerTradeSetConfirmFlag MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerTradeSetConfirmFlag prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerTradeSetConfirmFlag, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerTradeSetConfirmFlag cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerTradeSetConfirmFlag result;
      
      private NetMessagePlayerTradeSetConfirmFlag PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerTradeSetConfirmFlag original = result;
          result = new NetMessagePlayerTradeSetConfirmFlag();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerTradeSetConfirmFlag MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerTradeSetConfirmFlag.Descriptor; }
      }
      
      public override NetMessagePlayerTradeSetConfirmFlag DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerTradeSetConfirmFlag.DefaultInstance; }
      }
      
      public override NetMessagePlayerTradeSetConfirmFlag BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerTradeSetConfirmFlag) {
          return MergeFrom((NetMessagePlayerTradeSetConfirmFlag) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerTradeSetConfirmFlag other) {
        if (other == global::Gazillion.NetMessagePlayerTradeSetConfirmFlag.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasConfirmFlag) {
          ConfirmFlag = other.ConfirmFlag;
        }
        if (other.HasSequenceNumber) {
          SequenceNumber = other.SequenceNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerTradeSetConfirmFlagFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerTradeSetConfirmFlagFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasConfirmFlag = input.ReadBool(ref result.confirmFlag_);
              break;
            }
            case 16: {
              result.hasSequenceNumber = input.ReadUInt32(ref result.sequenceNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasConfirmFlag {
        get { return result.hasConfirmFlag; }
      }
      public bool ConfirmFlag {
        get { return result.ConfirmFlag; }
        set { SetConfirmFlag(value); }
      }
      public Builder SetConfirmFlag(bool value) {
        PrepareBuilder();
        result.hasConfirmFlag = true;
        result.confirmFlag_ = value;
        return this;
      }
      public Builder ClearConfirmFlag() {
        PrepareBuilder();
        result.hasConfirmFlag = false;
        result.confirmFlag_ = false;
        return this;
      }
      
      public bool HasSequenceNumber {
        get { return result.hasSequenceNumber; }
      }
      public uint SequenceNumber {
        get { return result.SequenceNumber; }
        set { SetSequenceNumber(value); }
      }
      public Builder SetSequenceNumber(uint value) {
        PrepareBuilder();
        result.hasSequenceNumber = true;
        result.sequenceNumber_ = value;
        return this;
      }
      public Builder ClearSequenceNumber() {
        PrepareBuilder();
        result.hasSequenceNumber = false;
        result.sequenceNumber_ = 0;
        return this;
      }
    }
    static NetMessagePlayerTradeSetConfirmFlag() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestPetTechDonate : pb::GeneratedMessage<NetMessageRequestPetTechDonate, NetMessageRequestPetTechDonate.Builder> {
    private NetMessageRequestPetTechDonate() { }
    private static readonly NetMessageRequestPetTechDonate defaultInstance = new NetMessageRequestPetTechDonate().MakeReadOnly();
    private static readonly string[] _netMessageRequestPetTechDonateFieldNames = new string[] { "avatarId", "itemId" };
    private static readonly uint[] _netMessageRequestPetTechDonateFieldTags = new uint[] { 16, 8 };
    public static NetMessageRequestPetTechDonate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestPetTechDonate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestPetTechDonate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPetTechDonate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestPetTechDonate, NetMessageRequestPetTechDonate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestPetTechDonate__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int AvatarIdFieldNumber = 2;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestPetTechDonateFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[1], ItemId);
      }
      if (hasAvatarId) {
        output.WriteUInt64(2, field_names[0], AvatarId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AvatarId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestPetTechDonate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestPetTechDonate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestPetTechDonate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestPetTechDonate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestPetTechDonate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestPetTechDonate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestPetTechDonate result;
      
      private NetMessageRequestPetTechDonate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestPetTechDonate original = result;
          result = new NetMessageRequestPetTechDonate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestPetTechDonate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestPetTechDonate.Descriptor; }
      }
      
      public override NetMessageRequestPetTechDonate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestPetTechDonate.DefaultInstance; }
      }
      
      public override NetMessageRequestPetTechDonate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestPetTechDonate) {
          return MergeFrom((NetMessageRequestPetTechDonate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestPetTechDonate other) {
        if (other == global::Gazillion.NetMessageRequestPetTechDonate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestPetTechDonateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestPetTechDonateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestPetTechDonate() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetActivePowerSpec : pb::GeneratedMessage<NetMessageSetActivePowerSpec, NetMessageSetActivePowerSpec.Builder> {
    private NetMessageSetActivePowerSpec() { }
    private static readonly NetMessageSetActivePowerSpec defaultInstance = new NetMessageSetActivePowerSpec().MakeReadOnly();
    private static readonly string[] _netMessageSetActivePowerSpecFieldNames = new string[] { "activeSpec", "avatarId" };
    private static readonly uint[] _netMessageSetActivePowerSpecFieldTags = new uint[] { 16, 8 };
    public static NetMessageSetActivePowerSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetActivePowerSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetActivePowerSpec ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetActivePowerSpec__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetActivePowerSpec, NetMessageSetActivePowerSpec.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageSetActivePowerSpec__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int ActiveSpecFieldNumber = 2;
    private bool hasActiveSpec;
    private uint activeSpec_;
    public bool HasActiveSpec {
      get { return hasActiveSpec; }
    }
    public uint ActiveSpec {
      get { return activeSpec_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasActiveSpec) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetActivePowerSpecFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[1], AvatarId);
      }
      if (hasActiveSpec) {
        output.WriteUInt32(2, field_names[0], ActiveSpec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasActiveSpec) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ActiveSpec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetActivePowerSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetActivePowerSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetActivePowerSpec MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetActivePowerSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetActivePowerSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetActivePowerSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetActivePowerSpec result;
      
      private NetMessageSetActivePowerSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetActivePowerSpec original = result;
          result = new NetMessageSetActivePowerSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetActivePowerSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetActivePowerSpec.Descriptor; }
      }
      
      public override NetMessageSetActivePowerSpec DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetActivePowerSpec.DefaultInstance; }
      }
      
      public override NetMessageSetActivePowerSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetActivePowerSpec) {
          return MergeFrom((NetMessageSetActivePowerSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetActivePowerSpec other) {
        if (other == global::Gazillion.NetMessageSetActivePowerSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasActiveSpec) {
          ActiveSpec = other.ActiveSpec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetActivePowerSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetActivePowerSpecFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasActiveSpec = input.ReadUInt32(ref result.activeSpec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasActiveSpec {
        get { return result.hasActiveSpec; }
      }
      public uint ActiveSpec {
        get { return result.ActiveSpec; }
        set { SetActiveSpec(value); }
      }
      public Builder SetActiveSpec(uint value) {
        PrepareBuilder();
        result.hasActiveSpec = true;
        result.activeSpec_ = value;
        return this;
      }
      public Builder ClearActiveSpec() {
        PrepareBuilder();
        result.hasActiveSpec = false;
        result.activeSpec_ = 0;
        return this;
      }
    }
    static NetMessageSetActivePowerSpec() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeCameraSettings : pb::GeneratedMessage<NetMessageChangeCameraSettings, NetMessageChangeCameraSettings.Builder> {
    private NetMessageChangeCameraSettings() { }
    private static readonly NetMessageChangeCameraSettings defaultInstance = new NetMessageChangeCameraSettings().MakeReadOnly();
    private static readonly string[] _netMessageChangeCameraSettingsFieldNames = new string[] { "cameraSettings" };
    private static readonly uint[] _netMessageChangeCameraSettingsFieldTags = new uint[] { 8 };
    public static NetMessageChangeCameraSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeCameraSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeCameraSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeCameraSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeCameraSettings, NetMessageChangeCameraSettings.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageChangeCameraSettings__FieldAccessorTable; }
    }
    
    public const int CameraSettingsFieldNumber = 1;
    private bool hasCameraSettings;
    private ulong cameraSettings_;
    public bool HasCameraSettings {
      get { return hasCameraSettings; }
    }
    public ulong CameraSettings {
      get { return cameraSettings_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCameraSettings) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeCameraSettingsFieldNames;
      if (hasCameraSettings) {
        output.WriteUInt64(1, field_names[0], CameraSettings);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCameraSettings) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CameraSettings);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeCameraSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeCameraSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeCameraSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeCameraSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeCameraSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeCameraSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeCameraSettings result;
      
      private NetMessageChangeCameraSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeCameraSettings original = result;
          result = new NetMessageChangeCameraSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeCameraSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeCameraSettings.Descriptor; }
      }
      
      public override NetMessageChangeCameraSettings DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeCameraSettings.DefaultInstance; }
      }
      
      public override NetMessageChangeCameraSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeCameraSettings) {
          return MergeFrom((NetMessageChangeCameraSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeCameraSettings other) {
        if (other == global::Gazillion.NetMessageChangeCameraSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCameraSettings) {
          CameraSettings = other.CameraSettings;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeCameraSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeCameraSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCameraSettings = input.ReadUInt64(ref result.cameraSettings_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCameraSettings {
        get { return result.hasCameraSettings; }
      }
      public ulong CameraSettings {
        get { return result.CameraSettings; }
        set { SetCameraSettings(value); }
      }
      public Builder SetCameraSettings(ulong value) {
        PrepareBuilder();
        result.hasCameraSettings = true;
        result.cameraSettings_ = value;
        return this;
      }
      public Builder ClearCameraSettings() {
        PrepareBuilder();
        result.hasCameraSettings = false;
        result.cameraSettings_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeCameraSettings() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestSocketAffix : pb::GeneratedMessage<NetMessageRequestSocketAffix, NetMessageRequestSocketAffix.Builder> {
    private NetMessageRequestSocketAffix() { }
    private static readonly NetMessageRequestSocketAffix defaultInstance = new NetMessageRequestSocketAffix().MakeReadOnly();
    private static readonly string[] _netMessageRequestSocketAffixFieldNames = new string[] { "destItemId", "gemAffixItemId" };
    private static readonly uint[] _netMessageRequestSocketAffixFieldTags = new uint[] { 8, 16 };
    public static NetMessageRequestSocketAffix DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestSocketAffix DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestSocketAffix ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestSocketAffix__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestSocketAffix, NetMessageRequestSocketAffix.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestSocketAffix__FieldAccessorTable; }
    }
    
    public const int DestItemIdFieldNumber = 1;
    private bool hasDestItemId;
    private ulong destItemId_;
    public bool HasDestItemId {
      get { return hasDestItemId; }
    }
    public ulong DestItemId {
      get { return destItemId_; }
    }
    
    public const int GemAffixItemIdFieldNumber = 2;
    private bool hasGemAffixItemId;
    private ulong gemAffixItemId_;
    public bool HasGemAffixItemId {
      get { return hasGemAffixItemId; }
    }
    public ulong GemAffixItemId {
      get { return gemAffixItemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDestItemId) return false;
        if (!hasGemAffixItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestSocketAffixFieldNames;
      if (hasDestItemId) {
        output.WriteUInt64(1, field_names[0], DestItemId);
      }
      if (hasGemAffixItemId) {
        output.WriteUInt64(2, field_names[1], GemAffixItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDestItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DestItemId);
      }
      if (hasGemAffixItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GemAffixItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestSocketAffix ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestSocketAffix ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestSocketAffix MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestSocketAffix prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestSocketAffix, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestSocketAffix cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestSocketAffix result;
      
      private NetMessageRequestSocketAffix PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestSocketAffix original = result;
          result = new NetMessageRequestSocketAffix();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestSocketAffix MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestSocketAffix.Descriptor; }
      }
      
      public override NetMessageRequestSocketAffix DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestSocketAffix.DefaultInstance; }
      }
      
      public override NetMessageRequestSocketAffix BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestSocketAffix) {
          return MergeFrom((NetMessageRequestSocketAffix) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestSocketAffix other) {
        if (other == global::Gazillion.NetMessageRequestSocketAffix.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDestItemId) {
          DestItemId = other.DestItemId;
        }
        if (other.HasGemAffixItemId) {
          GemAffixItemId = other.GemAffixItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestSocketAffixFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestSocketAffixFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDestItemId = input.ReadUInt64(ref result.destItemId_);
              break;
            }
            case 16: {
              result.hasGemAffixItemId = input.ReadUInt64(ref result.gemAffixItemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDestItemId {
        get { return result.hasDestItemId; }
      }
      public ulong DestItemId {
        get { return result.DestItemId; }
        set { SetDestItemId(value); }
      }
      public Builder SetDestItemId(ulong value) {
        PrepareBuilder();
        result.hasDestItemId = true;
        result.destItemId_ = value;
        return this;
      }
      public Builder ClearDestItemId() {
        PrepareBuilder();
        result.hasDestItemId = false;
        result.destItemId_ = 0UL;
        return this;
      }
      
      public bool HasGemAffixItemId {
        get { return result.hasGemAffixItemId; }
      }
      public ulong GemAffixItemId {
        get { return result.GemAffixItemId; }
        set { SetGemAffixItemId(value); }
      }
      public Builder SetGemAffixItemId(ulong value) {
        PrepareBuilder();
        result.hasGemAffixItemId = true;
        result.gemAffixItemId_ = value;
        return this;
      }
      public Builder ClearGemAffixItemId() {
        PrepareBuilder();
        result.hasGemAffixItemId = false;
        result.gemAffixItemId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestSocketAffix() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUISystemLockState : pb::GeneratedMessage<NetMessageUISystemLockState, NetMessageUISystemLockState.Builder> {
    private NetMessageUISystemLockState() { }
    private static readonly NetMessageUISystemLockState defaultInstance = new NetMessageUISystemLockState().MakeReadOnly();
    private static readonly string[] _netMessageUISystemLockStateFieldNames = new string[] { "prototypeId", "state" };
    private static readonly uint[] _netMessageUISystemLockStateFieldTags = new uint[] { 8, 16 };
    public static NetMessageUISystemLockState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUISystemLockState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUISystemLockState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUISystemLockState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUISystemLockState, NetMessageUISystemLockState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageUISystemLockState__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private uint state_;
    public bool HasState {
      get { return hasState; }
    }
    public uint State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUISystemLockStateFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      if (hasState) {
        output.WriteUInt32(2, field_names[1], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUISystemLockState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISystemLockState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUISystemLockState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUISystemLockState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUISystemLockState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUISystemLockState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUISystemLockState result;
      
      private NetMessageUISystemLockState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUISystemLockState original = result;
          result = new NetMessageUISystemLockState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUISystemLockState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUISystemLockState.Descriptor; }
      }
      
      public override NetMessageUISystemLockState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUISystemLockState.DefaultInstance; }
      }
      
      public override NetMessageUISystemLockState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUISystemLockState) {
          return MergeFrom((NetMessageUISystemLockState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUISystemLockState other) {
        if (other == global::Gazillion.NetMessageUISystemLockState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUISystemLockStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUISystemLockStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
            case 16: {
              result.hasState = input.ReadUInt32(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public uint State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(uint value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static NetMessageUISystemLockState() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEnableSpecializationPower : pb::GeneratedMessage<NetMessageEnableSpecializationPower, NetMessageEnableSpecializationPower.Builder> {
    private NetMessageEnableSpecializationPower() { }
    private static readonly NetMessageEnableSpecializationPower defaultInstance = new NetMessageEnableSpecializationPower().MakeReadOnly();
    private static readonly string[] _netMessageEnableSpecializationPowerFieldNames = new string[] { "avatarId", "enable", "prototypeId", "spec" };
    private static readonly uint[] _netMessageEnableSpecializationPowerFieldTags = new uint[] { 8, 24, 16, 32 };
    public static NetMessageEnableSpecializationPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEnableSpecializationPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEnableSpecializationPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEnableSpecializationPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEnableSpecializationPower, NetMessageEnableSpecializationPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageEnableSpecializationPower__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeIdFieldNumber = 2;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public const int EnableFieldNumber = 3;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public const int SpecFieldNumber = 4;
    private bool hasSpec;
    private uint spec_;
    public bool HasSpec {
      get { return hasSpec; }
    }
    public uint Spec {
      get { return spec_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeId) return false;
        if (!hasEnable) return false;
        if (!hasSpec) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEnableSpecializationPowerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeId) {
        output.WriteUInt64(2, field_names[2], PrototypeId);
      }
      if (hasEnable) {
        output.WriteBool(3, field_names[1], Enable);
      }
      if (hasSpec) {
        output.WriteUInt32(4, field_names[3], Spec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeId);
      }
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Enable);
      }
      if (hasSpec) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Spec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEnableSpecializationPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnableSpecializationPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEnableSpecializationPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEnableSpecializationPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEnableSpecializationPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEnableSpecializationPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEnableSpecializationPower result;
      
      private NetMessageEnableSpecializationPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEnableSpecializationPower original = result;
          result = new NetMessageEnableSpecializationPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEnableSpecializationPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEnableSpecializationPower.Descriptor; }
      }
      
      public override NetMessageEnableSpecializationPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEnableSpecializationPower.DefaultInstance; }
      }
      
      public override NetMessageEnableSpecializationPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEnableSpecializationPower) {
          return MergeFrom((NetMessageEnableSpecializationPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEnableSpecializationPower other) {
        if (other == global::Gazillion.NetMessageEnableSpecializationPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        if (other.HasSpec) {
          Spec = other.Spec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEnableSpecializationPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEnableSpecializationPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
            case 24: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
            case 32: {
              result.hasSpec = input.ReadUInt32(ref result.spec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
      
      public bool HasSpec {
        get { return result.hasSpec; }
      }
      public uint Spec {
        get { return result.Spec; }
        set { SetSpec(value); }
      }
      public Builder SetSpec(uint value) {
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = value;
        return this;
      }
      public Builder ClearSpec() {
        PrepareBuilder();
        result.hasSpec = false;
        result.spec_ = 0;
        return this;
      }
    }
    static NetMessageEnableSpecializationPower() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStashInventoryViewed : pb::GeneratedMessage<NetMessageStashInventoryViewed, NetMessageStashInventoryViewed.Builder> {
    private NetMessageStashInventoryViewed() { }
    private static readonly NetMessageStashInventoryViewed defaultInstance = new NetMessageStashInventoryViewed().MakeReadOnly();
    private static readonly string[] _netMessageStashInventoryViewedFieldNames = new string[] { "prototypeId" };
    private static readonly uint[] _netMessageStashInventoryViewedFieldTags = new uint[] { 8 };
    public static NetMessageStashInventoryViewed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStashInventoryViewed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStashInventoryViewed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashInventoryViewed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStashInventoryViewed, NetMessageStashInventoryViewed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashInventoryViewed__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStashInventoryViewedFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStashInventoryViewed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashInventoryViewed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStashInventoryViewed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStashInventoryViewed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStashInventoryViewed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStashInventoryViewed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStashInventoryViewed result;
      
      private NetMessageStashInventoryViewed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStashInventoryViewed original = result;
          result = new NetMessageStashInventoryViewed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStashInventoryViewed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStashInventoryViewed.Descriptor; }
      }
      
      public override NetMessageStashInventoryViewed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStashInventoryViewed.DefaultInstance; }
      }
      
      public override NetMessageStashInventoryViewed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStashInventoryViewed) {
          return MergeFrom((NetMessageStashInventoryViewed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStashInventoryViewed other) {
        if (other == global::Gazillion.NetMessageStashInventoryViewed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStashInventoryViewedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStashInventoryViewedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageStashInventoryViewed() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStashCurrentlyOpen : pb::GeneratedMessage<NetMessageStashCurrentlyOpen, NetMessageStashCurrentlyOpen.Builder> {
    private NetMessageStashCurrentlyOpen() { }
    private static readonly NetMessageStashCurrentlyOpen defaultInstance = new NetMessageStashCurrentlyOpen().MakeReadOnly();
    private static readonly string[] _netMessageStashCurrentlyOpenFieldNames = new string[] { "prototypeId" };
    private static readonly uint[] _netMessageStashCurrentlyOpenFieldTags = new uint[] { 8 };
    public static NetMessageStashCurrentlyOpen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStashCurrentlyOpen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStashCurrentlyOpen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashCurrentlyOpen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStashCurrentlyOpen, NetMessageStashCurrentlyOpen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashCurrentlyOpen__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStashCurrentlyOpenFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashCurrentlyOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStashCurrentlyOpen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStashCurrentlyOpen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStashCurrentlyOpen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStashCurrentlyOpen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStashCurrentlyOpen result;
      
      private NetMessageStashCurrentlyOpen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStashCurrentlyOpen original = result;
          result = new NetMessageStashCurrentlyOpen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStashCurrentlyOpen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStashCurrentlyOpen.Descriptor; }
      }
      
      public override NetMessageStashCurrentlyOpen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStashCurrentlyOpen.DefaultInstance; }
      }
      
      public override NetMessageStashCurrentlyOpen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStashCurrentlyOpen) {
          return MergeFrom((NetMessageStashCurrentlyOpen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStashCurrentlyOpen other) {
        if (other == global::Gazillion.NetMessageStashCurrentlyOpen.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStashCurrentlyOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStashCurrentlyOpenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageStashCurrentlyOpen() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageWidgetButtonResult : pb::GeneratedMessage<NetMessageWidgetButtonResult, NetMessageWidgetButtonResult.Builder> {
    private NetMessageWidgetButtonResult() { }
    private static readonly NetMessageWidgetButtonResult defaultInstance = new NetMessageWidgetButtonResult().MakeReadOnly();
    private static readonly string[] _netMessageWidgetButtonResultFieldNames = new string[] { "playerGuid", "result", "widgetContextRefId", "widgetRefId" };
    private static readonly uint[] _netMessageWidgetButtonResultFieldTags = new uint[] { 24, 32, 16, 8 };
    public static NetMessageWidgetButtonResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageWidgetButtonResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageWidgetButtonResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageWidgetButtonResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageWidgetButtonResult, NetMessageWidgetButtonResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageWidgetButtonResult__FieldAccessorTable; }
    }
    
    public const int WidgetRefIdFieldNumber = 1;
    private bool hasWidgetRefId;
    private ulong widgetRefId_;
    public bool HasWidgetRefId {
      get { return hasWidgetRefId; }
    }
    public ulong WidgetRefId {
      get { return widgetRefId_; }
    }
    
    public const int WidgetContextRefIdFieldNumber = 2;
    private bool hasWidgetContextRefId;
    private ulong widgetContextRefId_;
    public bool HasWidgetContextRefId {
      get { return hasWidgetContextRefId; }
    }
    public ulong WidgetContextRefId {
      get { return widgetContextRefId_; }
    }
    
    public const int PlayerGuidFieldNumber = 3;
    private bool hasPlayerGuid;
    private ulong playerGuid_;
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public ulong PlayerGuid {
      get { return playerGuid_; }
    }
    
    public const int ResultFieldNumber = 4;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWidgetRefId) return false;
        if (!hasWidgetContextRefId) return false;
        if (!hasPlayerGuid) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageWidgetButtonResultFieldNames;
      if (hasWidgetRefId) {
        output.WriteUInt64(1, field_names[3], WidgetRefId);
      }
      if (hasWidgetContextRefId) {
        output.WriteUInt64(2, field_names[2], WidgetContextRefId);
      }
      if (hasPlayerGuid) {
        output.WriteUInt64(3, field_names[0], PlayerGuid);
      }
      if (hasResult) {
        output.WriteBool(4, field_names[1], Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWidgetRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, WidgetRefId);
      }
      if (hasWidgetContextRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, WidgetContextRefId);
      }
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, PlayerGuid);
      }
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageWidgetButtonResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWidgetButtonResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageWidgetButtonResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageWidgetButtonResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageWidgetButtonResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageWidgetButtonResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageWidgetButtonResult result;
      
      private NetMessageWidgetButtonResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageWidgetButtonResult original = result;
          result = new NetMessageWidgetButtonResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageWidgetButtonResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageWidgetButtonResult.Descriptor; }
      }
      
      public override NetMessageWidgetButtonResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessageWidgetButtonResult.DefaultInstance; }
      }
      
      public override NetMessageWidgetButtonResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageWidgetButtonResult) {
          return MergeFrom((NetMessageWidgetButtonResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageWidgetButtonResult other) {
        if (other == global::Gazillion.NetMessageWidgetButtonResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWidgetRefId) {
          WidgetRefId = other.WidgetRefId;
        }
        if (other.HasWidgetContextRefId) {
          WidgetContextRefId = other.WidgetContextRefId;
        }
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageWidgetButtonResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageWidgetButtonResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWidgetRefId = input.ReadUInt64(ref result.widgetRefId_);
              break;
            }
            case 16: {
              result.hasWidgetContextRefId = input.ReadUInt64(ref result.widgetContextRefId_);
              break;
            }
            case 24: {
              result.hasPlayerGuid = input.ReadUInt64(ref result.playerGuid_);
              break;
            }
            case 32: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWidgetRefId {
        get { return result.hasWidgetRefId; }
      }
      public ulong WidgetRefId {
        get { return result.WidgetRefId; }
        set { SetWidgetRefId(value); }
      }
      public Builder SetWidgetRefId(ulong value) {
        PrepareBuilder();
        result.hasWidgetRefId = true;
        result.widgetRefId_ = value;
        return this;
      }
      public Builder ClearWidgetRefId() {
        PrepareBuilder();
        result.hasWidgetRefId = false;
        result.widgetRefId_ = 0UL;
        return this;
      }
      
      public bool HasWidgetContextRefId {
        get { return result.hasWidgetContextRefId; }
      }
      public ulong WidgetContextRefId {
        get { return result.WidgetContextRefId; }
        set { SetWidgetContextRefId(value); }
      }
      public Builder SetWidgetContextRefId(ulong value) {
        PrepareBuilder();
        result.hasWidgetContextRefId = true;
        result.widgetContextRefId_ = value;
        return this;
      }
      public Builder ClearWidgetContextRefId() {
        PrepareBuilder();
        result.hasWidgetContextRefId = false;
        result.widgetContextRefId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public ulong PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
    }
    static NetMessageWidgetButtonResult() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStashTabInsert : pb::GeneratedMessage<NetMessageStashTabInsert, NetMessageStashTabInsert.Builder> {
    private NetMessageStashTabInsert() { }
    private static readonly NetMessageStashTabInsert defaultInstance = new NetMessageStashTabInsert().MakeReadOnly();
    private static readonly string[] _netMessageStashTabInsertFieldNames = new string[] { "insertIndex", "invId" };
    private static readonly uint[] _netMessageStashTabInsertFieldTags = new uint[] { 16, 8 };
    public static NetMessageStashTabInsert DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStashTabInsert DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStashTabInsert ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashTabInsert__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStashTabInsert, NetMessageStashTabInsert.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashTabInsert__FieldAccessorTable; }
    }
    
    public const int InvIdFieldNumber = 1;
    private bool hasInvId;
    private ulong invId_;
    public bool HasInvId {
      get { return hasInvId; }
    }
    public ulong InvId {
      get { return invId_; }
    }
    
    public const int InsertIndexFieldNumber = 2;
    private bool hasInsertIndex;
    private ulong insertIndex_;
    public bool HasInsertIndex {
      get { return hasInsertIndex; }
    }
    public ulong InsertIndex {
      get { return insertIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInvId) return false;
        if (!hasInsertIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStashTabInsertFieldNames;
      if (hasInvId) {
        output.WriteUInt64(1, field_names[1], InvId);
      }
      if (hasInsertIndex) {
        output.WriteUInt64(2, field_names[0], InsertIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInvId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InvId);
      }
      if (hasInsertIndex) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InsertIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStashTabInsert ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashTabInsert ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStashTabInsert MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStashTabInsert prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStashTabInsert, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStashTabInsert cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStashTabInsert result;
      
      private NetMessageStashTabInsert PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStashTabInsert original = result;
          result = new NetMessageStashTabInsert();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStashTabInsert MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStashTabInsert.Descriptor; }
      }
      
      public override NetMessageStashTabInsert DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStashTabInsert.DefaultInstance; }
      }
      
      public override NetMessageStashTabInsert BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStashTabInsert) {
          return MergeFrom((NetMessageStashTabInsert) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStashTabInsert other) {
        if (other == global::Gazillion.NetMessageStashTabInsert.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInvId) {
          InvId = other.InvId;
        }
        if (other.HasInsertIndex) {
          InsertIndex = other.InsertIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStashTabInsertFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStashTabInsertFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInvId = input.ReadUInt64(ref result.invId_);
              break;
            }
            case 16: {
              result.hasInsertIndex = input.ReadUInt64(ref result.insertIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInvId {
        get { return result.hasInvId; }
      }
      public ulong InvId {
        get { return result.InvId; }
        set { SetInvId(value); }
      }
      public Builder SetInvId(ulong value) {
        PrepareBuilder();
        result.hasInvId = true;
        result.invId_ = value;
        return this;
      }
      public Builder ClearInvId() {
        PrepareBuilder();
        result.hasInvId = false;
        result.invId_ = 0UL;
        return this;
      }
      
      public bool HasInsertIndex {
        get { return result.hasInsertIndex; }
      }
      public ulong InsertIndex {
        get { return result.InsertIndex; }
        set { SetInsertIndex(value); }
      }
      public Builder SetInsertIndex(ulong value) {
        PrepareBuilder();
        result.hasInsertIndex = true;
        result.insertIndex_ = value;
        return this;
      }
      public Builder ClearInsertIndex() {
        PrepareBuilder();
        result.hasInsertIndex = false;
        result.insertIndex_ = 0UL;
        return this;
      }
    }
    static NetMessageStashTabInsert() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStashTabOptions : pb::GeneratedMessage<NetMessageStashTabOptions, NetMessageStashTabOptions.Builder> {
    private NetMessageStashTabOptions() { }
    private static readonly NetMessageStashTabOptions defaultInstance = new NetMessageStashTabOptions().MakeReadOnly();
    private static readonly string[] _netMessageStashTabOptionsFieldNames = new string[] { "color", "displayName", "iconPathAssetId", "inventoryRefId" };
    private static readonly uint[] _netMessageStashTabOptionsFieldTags = new uint[] { 32, 18, 24, 8 };
    public static NetMessageStashTabOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStashTabOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStashTabOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashTabOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStashTabOptions, NetMessageStashTabOptions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageStashTabOptions__FieldAccessorTable; }
    }
    
    public const int InventoryRefIdFieldNumber = 1;
    private bool hasInventoryRefId;
    private ulong inventoryRefId_;
    public bool HasInventoryRefId {
      get { return hasInventoryRefId; }
    }
    public ulong InventoryRefId {
      get { return inventoryRefId_; }
    }
    
    public const int DisplayNameFieldNumber = 2;
    private bool hasDisplayName;
    private string displayName_ = "";
    public bool HasDisplayName {
      get { return hasDisplayName; }
    }
    public string DisplayName {
      get { return displayName_; }
    }
    
    public const int IconPathAssetIdFieldNumber = 3;
    private bool hasIconPathAssetId;
    private ulong iconPathAssetId_;
    public bool HasIconPathAssetId {
      get { return hasIconPathAssetId; }
    }
    public ulong IconPathAssetId {
      get { return iconPathAssetId_; }
    }
    
    public const int ColorFieldNumber = 4;
    private bool hasColor;
    private uint color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public uint Color {
      get { return color_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInventoryRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStashTabOptionsFieldNames;
      if (hasInventoryRefId) {
        output.WriteUInt64(1, field_names[3], InventoryRefId);
      }
      if (hasDisplayName) {
        output.WriteString(2, field_names[1], DisplayName);
      }
      if (hasIconPathAssetId) {
        output.WriteUInt64(3, field_names[2], IconPathAssetId);
      }
      if (hasColor) {
        output.WriteUInt32(4, field_names[0], Color);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInventoryRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InventoryRefId);
      }
      if (hasDisplayName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, DisplayName);
      }
      if (hasIconPathAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IconPathAssetId);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Color);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStashTabOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStashTabOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStashTabOptions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStashTabOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStashTabOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStashTabOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStashTabOptions result;
      
      private NetMessageStashTabOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStashTabOptions original = result;
          result = new NetMessageStashTabOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStashTabOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStashTabOptions.Descriptor; }
      }
      
      public override NetMessageStashTabOptions DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStashTabOptions.DefaultInstance; }
      }
      
      public override NetMessageStashTabOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStashTabOptions) {
          return MergeFrom((NetMessageStashTabOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStashTabOptions other) {
        if (other == global::Gazillion.NetMessageStashTabOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInventoryRefId) {
          InventoryRefId = other.InventoryRefId;
        }
        if (other.HasDisplayName) {
          DisplayName = other.DisplayName;
        }
        if (other.HasIconPathAssetId) {
          IconPathAssetId = other.IconPathAssetId;
        }
        if (other.HasColor) {
          Color = other.Color;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStashTabOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStashTabOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInventoryRefId = input.ReadUInt64(ref result.inventoryRefId_);
              break;
            }
            case 18: {
              result.hasDisplayName = input.ReadString(ref result.displayName_);
              break;
            }
            case 24: {
              result.hasIconPathAssetId = input.ReadUInt64(ref result.iconPathAssetId_);
              break;
            }
            case 32: {
              result.hasColor = input.ReadUInt32(ref result.color_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInventoryRefId {
        get { return result.hasInventoryRefId; }
      }
      public ulong InventoryRefId {
        get { return result.InventoryRefId; }
        set { SetInventoryRefId(value); }
      }
      public Builder SetInventoryRefId(ulong value) {
        PrepareBuilder();
        result.hasInventoryRefId = true;
        result.inventoryRefId_ = value;
        return this;
      }
      public Builder ClearInventoryRefId() {
        PrepareBuilder();
        result.hasInventoryRefId = false;
        result.inventoryRefId_ = 0UL;
        return this;
      }
      
      public bool HasDisplayName {
        get { return result.hasDisplayName; }
      }
      public string DisplayName {
        get { return result.DisplayName; }
        set { SetDisplayName(value); }
      }
      public Builder SetDisplayName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayName = true;
        result.displayName_ = value;
        return this;
      }
      public Builder ClearDisplayName() {
        PrepareBuilder();
        result.hasDisplayName = false;
        result.displayName_ = "";
        return this;
      }
      
      public bool HasIconPathAssetId {
        get { return result.hasIconPathAssetId; }
      }
      public ulong IconPathAssetId {
        get { return result.IconPathAssetId; }
        set { SetIconPathAssetId(value); }
      }
      public Builder SetIconPathAssetId(ulong value) {
        PrepareBuilder();
        result.hasIconPathAssetId = true;
        result.iconPathAssetId_ = value;
        return this;
      }
      public Builder ClearIconPathAssetId() {
        PrepareBuilder();
        result.hasIconPathAssetId = false;
        result.iconPathAssetId_ = 0UL;
        return this;
      }
      
      public bool HasColor {
        get { return result.hasColor; }
      }
      public uint Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(uint value) {
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = 0;
        return this;
      }
    }
    static NetMessageStashTabOptions() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardRequest : pb::GeneratedMessage<NetMessageLeaderboardRequest, NetMessageLeaderboardRequest.Builder> {
    private NetMessageLeaderboardRequest() { }
    private static readonly NetMessageLeaderboardRequest defaultInstance = new NetMessageLeaderboardRequest().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardRequestFieldNames = new string[] { "dataQuery", "guildScoreQuery", "metaScoreQuery", "playerScoreQuery" };
    private static readonly uint[] _netMessageLeaderboardRequestFieldTags = new uint[] { 34, 18, 26, 10 };
    public static NetMessageLeaderboardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardRequest, NetMessageLeaderboardRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardRequest__FieldAccessorTable; }
    }
    
    public const int PlayerScoreQueryFieldNumber = 1;
    private bool hasPlayerScoreQuery;
    private global::Gazillion.LeaderboardPlayerScoreQuery playerScoreQuery_;
    public bool HasPlayerScoreQuery {
      get { return hasPlayerScoreQuery; }
    }
    public global::Gazillion.LeaderboardPlayerScoreQuery PlayerScoreQuery {
      get { return playerScoreQuery_ ?? global::Gazillion.LeaderboardPlayerScoreQuery.DefaultInstance; }
    }
    
    public const int GuildScoreQueryFieldNumber = 2;
    private bool hasGuildScoreQuery;
    private global::Gazillion.LeaderboardGuildScoreQuery guildScoreQuery_;
    public bool HasGuildScoreQuery {
      get { return hasGuildScoreQuery; }
    }
    public global::Gazillion.LeaderboardGuildScoreQuery GuildScoreQuery {
      get { return guildScoreQuery_ ?? global::Gazillion.LeaderboardGuildScoreQuery.DefaultInstance; }
    }
    
    public const int MetaScoreQueryFieldNumber = 3;
    private bool hasMetaScoreQuery;
    private global::Gazillion.LeaderboardMetaScoreQuery metaScoreQuery_;
    public bool HasMetaScoreQuery {
      get { return hasMetaScoreQuery; }
    }
    public global::Gazillion.LeaderboardMetaScoreQuery MetaScoreQuery {
      get { return metaScoreQuery_ ?? global::Gazillion.LeaderboardMetaScoreQuery.DefaultInstance; }
    }
    
    public const int DataQueryFieldNumber = 4;
    private bool hasDataQuery;
    private global::Gazillion.LeaderboardDataQuery dataQuery_;
    public bool HasDataQuery {
      get { return hasDataQuery; }
    }
    public global::Gazillion.LeaderboardDataQuery DataQuery {
      get { return dataQuery_ ?? global::Gazillion.LeaderboardDataQuery.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasPlayerScoreQuery) {
          if (!PlayerScoreQuery.IsInitialized) return false;
        }
        if (HasGuildScoreQuery) {
          if (!GuildScoreQuery.IsInitialized) return false;
        }
        if (HasMetaScoreQuery) {
          if (!MetaScoreQuery.IsInitialized) return false;
        }
        if (HasDataQuery) {
          if (!DataQuery.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardRequestFieldNames;
      if (hasPlayerScoreQuery) {
        output.WriteMessage(1, field_names[3], PlayerScoreQuery);
      }
      if (hasGuildScoreQuery) {
        output.WriteMessage(2, field_names[1], GuildScoreQuery);
      }
      if (hasMetaScoreQuery) {
        output.WriteMessage(3, field_names[2], MetaScoreQuery);
      }
      if (hasDataQuery) {
        output.WriteMessage(4, field_names[0], DataQuery);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerScoreQuery) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, PlayerScoreQuery);
      }
      if (hasGuildScoreQuery) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GuildScoreQuery);
      }
      if (hasMetaScoreQuery) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, MetaScoreQuery);
      }
      if (hasDataQuery) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, DataQuery);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardRequest result;
      
      private NetMessageLeaderboardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardRequest original = result;
          result = new NetMessageLeaderboardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardRequest.Descriptor; }
      }
      
      public override NetMessageLeaderboardRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardRequest.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardRequest) {
          return MergeFrom((NetMessageLeaderboardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardRequest other) {
        if (other == global::Gazillion.NetMessageLeaderboardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerScoreQuery) {
          MergePlayerScoreQuery(other.PlayerScoreQuery);
        }
        if (other.HasGuildScoreQuery) {
          MergeGuildScoreQuery(other.GuildScoreQuery);
        }
        if (other.HasMetaScoreQuery) {
          MergeMetaScoreQuery(other.MetaScoreQuery);
        }
        if (other.HasDataQuery) {
          MergeDataQuery(other.DataQuery);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.LeaderboardPlayerScoreQuery.Builder subBuilder = global::Gazillion.LeaderboardPlayerScoreQuery.CreateBuilder();
              if (result.hasPlayerScoreQuery) {
                subBuilder.MergeFrom(PlayerScoreQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlayerScoreQuery = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.LeaderboardGuildScoreQuery.Builder subBuilder = global::Gazillion.LeaderboardGuildScoreQuery.CreateBuilder();
              if (result.hasGuildScoreQuery) {
                subBuilder.MergeFrom(GuildScoreQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildScoreQuery = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.LeaderboardMetaScoreQuery.Builder subBuilder = global::Gazillion.LeaderboardMetaScoreQuery.CreateBuilder();
              if (result.hasMetaScoreQuery) {
                subBuilder.MergeFrom(MetaScoreQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MetaScoreQuery = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.LeaderboardDataQuery.Builder subBuilder = global::Gazillion.LeaderboardDataQuery.CreateBuilder();
              if (result.hasDataQuery) {
                subBuilder.MergeFrom(DataQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DataQuery = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerScoreQuery {
       get { return result.hasPlayerScoreQuery; }
      }
      public global::Gazillion.LeaderboardPlayerScoreQuery PlayerScoreQuery {
        get { return result.PlayerScoreQuery; }
        set { SetPlayerScoreQuery(value); }
      }
      public Builder SetPlayerScoreQuery(global::Gazillion.LeaderboardPlayerScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerScoreQuery = true;
        result.playerScoreQuery_ = value;
        return this;
      }
      public Builder SetPlayerScoreQuery(global::Gazillion.LeaderboardPlayerScoreQuery.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayerScoreQuery = true;
        result.playerScoreQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayerScoreQuery(global::Gazillion.LeaderboardPlayerScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayerScoreQuery &&
            result.playerScoreQuery_ != global::Gazillion.LeaderboardPlayerScoreQuery.DefaultInstance) {
            result.playerScoreQuery_ = global::Gazillion.LeaderboardPlayerScoreQuery.CreateBuilder(result.playerScoreQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.playerScoreQuery_ = value;
        }
        result.hasPlayerScoreQuery = true;
        return this;
      }
      public Builder ClearPlayerScoreQuery() {
        PrepareBuilder();
        result.hasPlayerScoreQuery = false;
        result.playerScoreQuery_ = null;
        return this;
      }
      
      public bool HasGuildScoreQuery {
       get { return result.hasGuildScoreQuery; }
      }
      public global::Gazillion.LeaderboardGuildScoreQuery GuildScoreQuery {
        get { return result.GuildScoreQuery; }
        set { SetGuildScoreQuery(value); }
      }
      public Builder SetGuildScoreQuery(global::Gazillion.LeaderboardGuildScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildScoreQuery = true;
        result.guildScoreQuery_ = value;
        return this;
      }
      public Builder SetGuildScoreQuery(global::Gazillion.LeaderboardGuildScoreQuery.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildScoreQuery = true;
        result.guildScoreQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildScoreQuery(global::Gazillion.LeaderboardGuildScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildScoreQuery &&
            result.guildScoreQuery_ != global::Gazillion.LeaderboardGuildScoreQuery.DefaultInstance) {
            result.guildScoreQuery_ = global::Gazillion.LeaderboardGuildScoreQuery.CreateBuilder(result.guildScoreQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.guildScoreQuery_ = value;
        }
        result.hasGuildScoreQuery = true;
        return this;
      }
      public Builder ClearGuildScoreQuery() {
        PrepareBuilder();
        result.hasGuildScoreQuery = false;
        result.guildScoreQuery_ = null;
        return this;
      }
      
      public bool HasMetaScoreQuery {
       get { return result.hasMetaScoreQuery; }
      }
      public global::Gazillion.LeaderboardMetaScoreQuery MetaScoreQuery {
        get { return result.MetaScoreQuery; }
        set { SetMetaScoreQuery(value); }
      }
      public Builder SetMetaScoreQuery(global::Gazillion.LeaderboardMetaScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetaScoreQuery = true;
        result.metaScoreQuery_ = value;
        return this;
      }
      public Builder SetMetaScoreQuery(global::Gazillion.LeaderboardMetaScoreQuery.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetaScoreQuery = true;
        result.metaScoreQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetaScoreQuery(global::Gazillion.LeaderboardMetaScoreQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetaScoreQuery &&
            result.metaScoreQuery_ != global::Gazillion.LeaderboardMetaScoreQuery.DefaultInstance) {
            result.metaScoreQuery_ = global::Gazillion.LeaderboardMetaScoreQuery.CreateBuilder(result.metaScoreQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.metaScoreQuery_ = value;
        }
        result.hasMetaScoreQuery = true;
        return this;
      }
      public Builder ClearMetaScoreQuery() {
        PrepareBuilder();
        result.hasMetaScoreQuery = false;
        result.metaScoreQuery_ = null;
        return this;
      }
      
      public bool HasDataQuery {
       get { return result.hasDataQuery; }
      }
      public global::Gazillion.LeaderboardDataQuery DataQuery {
        get { return result.DataQuery; }
        set { SetDataQuery(value); }
      }
      public Builder SetDataQuery(global::Gazillion.LeaderboardDataQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataQuery = true;
        result.dataQuery_ = value;
        return this;
      }
      public Builder SetDataQuery(global::Gazillion.LeaderboardDataQuery.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDataQuery = true;
        result.dataQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDataQuery(global::Gazillion.LeaderboardDataQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDataQuery &&
            result.dataQuery_ != global::Gazillion.LeaderboardDataQuery.DefaultInstance) {
            result.dataQuery_ = global::Gazillion.LeaderboardDataQuery.CreateBuilder(result.dataQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.dataQuery_ = value;
        }
        result.hasDataQuery = true;
        return this;
      }
      public Builder ClearDataQuery() {
        PrepareBuilder();
        result.hasDataQuery = false;
        result.dataQuery_ = null;
        return this;
      }
    }
    static NetMessageLeaderboardRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardArchivedInstanceListRequest : pb::GeneratedMessage<NetMessageLeaderboardArchivedInstanceListRequest, NetMessageLeaderboardArchivedInstanceListRequest.Builder> {
    private NetMessageLeaderboardArchivedInstanceListRequest() { }
    private static readonly NetMessageLeaderboardArchivedInstanceListRequest defaultInstance = new NetMessageLeaderboardArchivedInstanceListRequest().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardArchivedInstanceListRequestFieldNames = new string[] { "leaderboardIds" };
    private static readonly uint[] _netMessageLeaderboardArchivedInstanceListRequestFieldTags = new uint[] { 8 };
    public static NetMessageLeaderboardArchivedInstanceListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardArchivedInstanceListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardArchivedInstanceListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardArchivedInstanceListRequest, NetMessageLeaderboardArchivedInstanceListRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListRequest__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> leaderboardIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> LeaderboardIdsList {
      get { return pbc::Lists.AsReadOnly(leaderboardIds_); }
    }
    public int LeaderboardIdsCount {
      get { return leaderboardIds_.Count; }
    }
    public ulong GetLeaderboardIds(int index) {
      return leaderboardIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardArchivedInstanceListRequestFieldNames;
      if (leaderboardIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], leaderboardIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in LeaderboardIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * leaderboardIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardArchivedInstanceListRequest MakeReadOnly() {
      leaderboardIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardArchivedInstanceListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardArchivedInstanceListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardArchivedInstanceListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardArchivedInstanceListRequest result;
      
      private NetMessageLeaderboardArchivedInstanceListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardArchivedInstanceListRequest original = result;
          result = new NetMessageLeaderboardArchivedInstanceListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardArchivedInstanceListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest.Descriptor; }
      }
      
      public override NetMessageLeaderboardArchivedInstanceListRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardArchivedInstanceListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardArchivedInstanceListRequest) {
          return MergeFrom((NetMessageLeaderboardArchivedInstanceListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardArchivedInstanceListRequest other) {
        if (other == global::Gazillion.NetMessageLeaderboardArchivedInstanceListRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.leaderboardIds_.Count != 0) {
          result.leaderboardIds_.Add(other.leaderboardIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardArchivedInstanceListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardArchivedInstanceListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.leaderboardIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> LeaderboardIdsList {
        get { return PrepareBuilder().leaderboardIds_; }
      }
      public int LeaderboardIdsCount {
        get { return result.LeaderboardIdsCount; }
      }
      public ulong GetLeaderboardIds(int index) {
        return result.GetLeaderboardIds(index);
      }
      public Builder SetLeaderboardIds(int index, ulong value) {
        PrepareBuilder();
        result.leaderboardIds_[index] = value;
        return this;
      }
      public Builder AddLeaderboardIds(ulong value) {
        PrepareBuilder();
        result.leaderboardIds_.Add(value);
        return this;
      }
      public Builder AddRangeLeaderboardIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.leaderboardIds_.Add(values);
        return this;
      }
      public Builder ClearLeaderboardIds() {
        PrepareBuilder();
        result.leaderboardIds_.Clear();
        return this;
      }
    }
    static NetMessageLeaderboardArchivedInstanceListRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardInitializeRequest : pb::GeneratedMessage<NetMessageLeaderboardInitializeRequest, NetMessageLeaderboardInitializeRequest.Builder> {
    private NetMessageLeaderboardInitializeRequest() { }
    private static readonly NetMessageLeaderboardInitializeRequest defaultInstance = new NetMessageLeaderboardInitializeRequest().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardInitializeRequestFieldNames = new string[] { "leaderboardIds" };
    private static readonly uint[] _netMessageLeaderboardInitializeRequestFieldTags = new uint[] { 8 };
    public static NetMessageLeaderboardInitializeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardInitializeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardInitializeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardInitializeRequest, NetMessageLeaderboardInitializeRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageLeaderboardInitializeRequest__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> leaderboardIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> LeaderboardIdsList {
      get { return pbc::Lists.AsReadOnly(leaderboardIds_); }
    }
    public int LeaderboardIdsCount {
      get { return leaderboardIds_.Count; }
    }
    public ulong GetLeaderboardIds(int index) {
      return leaderboardIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardInitializeRequestFieldNames;
      if (leaderboardIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], leaderboardIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in LeaderboardIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * leaderboardIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardInitializeRequest MakeReadOnly() {
      leaderboardIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardInitializeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardInitializeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardInitializeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardInitializeRequest result;
      
      private NetMessageLeaderboardInitializeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardInitializeRequest original = result;
          result = new NetMessageLeaderboardInitializeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardInitializeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardInitializeRequest.Descriptor; }
      }
      
      public override NetMessageLeaderboardInitializeRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardInitializeRequest.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardInitializeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardInitializeRequest) {
          return MergeFrom((NetMessageLeaderboardInitializeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardInitializeRequest other) {
        if (other == global::Gazillion.NetMessageLeaderboardInitializeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.leaderboardIds_.Count != 0) {
          result.leaderboardIds_.Add(other.leaderboardIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardInitializeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardInitializeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.leaderboardIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> LeaderboardIdsList {
        get { return PrepareBuilder().leaderboardIds_; }
      }
      public int LeaderboardIdsCount {
        get { return result.LeaderboardIdsCount; }
      }
      public ulong GetLeaderboardIds(int index) {
        return result.GetLeaderboardIds(index);
      }
      public Builder SetLeaderboardIds(int index, ulong value) {
        PrepareBuilder();
        result.leaderboardIds_[index] = value;
        return this;
      }
      public Builder AddLeaderboardIds(ulong value) {
        PrepareBuilder();
        result.leaderboardIds_.Add(value);
        return this;
      }
      public Builder AddRangeLeaderboardIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.leaderboardIds_.Add(values);
        return this;
      }
      public Builder ClearLeaderboardIds() {
        PrepareBuilder();
        result.leaderboardIds_.Clear();
        return this;
      }
    }
    static NetMessageLeaderboardInitializeRequest() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestLocalCoopStart : pb::GeneratedMessage<NetMessageRequestLocalCoopStart, NetMessageRequestLocalCoopStart.Builder> {
    private NetMessageRequestLocalCoopStart() { }
    private static readonly NetMessageRequestLocalCoopStart defaultInstance = new NetMessageRequestLocalCoopStart().MakeReadOnly();
    private static readonly string[] _netMessageRequestLocalCoopStartFieldNames = new string[] { "avatarPrototypeId" };
    private static readonly uint[] _netMessageRequestLocalCoopStartFieldTags = new uint[] { 8 };
    public static NetMessageRequestLocalCoopStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestLocalCoopStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestLocalCoopStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLocalCoopStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestLocalCoopStart, NetMessageRequestLocalCoopStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLocalCoopStart__FieldAccessorTable; }
    }
    
    public const int AvatarPrototypeIdFieldNumber = 1;
    private bool hasAvatarPrototypeId;
    private ulong avatarPrototypeId_;
    public bool HasAvatarPrototypeId {
      get { return hasAvatarPrototypeId; }
    }
    public ulong AvatarPrototypeId {
      get { return avatarPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestLocalCoopStartFieldNames;
      if (hasAvatarPrototypeId) {
        output.WriteUInt64(1, field_names[0], AvatarPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestLocalCoopStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestLocalCoopStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestLocalCoopStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestLocalCoopStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestLocalCoopStart result;
      
      private NetMessageRequestLocalCoopStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestLocalCoopStart original = result;
          result = new NetMessageRequestLocalCoopStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestLocalCoopStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestLocalCoopStart.Descriptor; }
      }
      
      public override NetMessageRequestLocalCoopStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestLocalCoopStart.DefaultInstance; }
      }
      
      public override NetMessageRequestLocalCoopStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestLocalCoopStart) {
          return MergeFrom((NetMessageRequestLocalCoopStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestLocalCoopStart other) {
        if (other == global::Gazillion.NetMessageRequestLocalCoopStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarPrototypeId) {
          AvatarPrototypeId = other.AvatarPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestLocalCoopStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestLocalCoopStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarPrototypeId = input.ReadUInt64(ref result.avatarPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarPrototypeId {
        get { return result.hasAvatarPrototypeId; }
      }
      public ulong AvatarPrototypeId {
        get { return result.AvatarPrototypeId; }
        set { SetAvatarPrototypeId(value); }
      }
      public Builder SetAvatarPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAvatarPrototypeId = true;
        result.avatarPrototypeId_ = value;
        return this;
      }
      public Builder ClearAvatarPrototypeId() {
        PrepareBuilder();
        result.hasAvatarPrototypeId = false;
        result.avatarPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageRequestLocalCoopStart() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRequestLocalCoopEnd : pb::GeneratedMessage<NetMessageRequestLocalCoopEnd, NetMessageRequestLocalCoopEnd.Builder> {
    private NetMessageRequestLocalCoopEnd() { }
    private static readonly NetMessageRequestLocalCoopEnd defaultInstance = new NetMessageRequestLocalCoopEnd().MakeReadOnly();
    private static readonly string[] _netMessageRequestLocalCoopEndFieldNames = new string[] {  };
    private static readonly uint[] _netMessageRequestLocalCoopEndFieldTags = new uint[] {  };
    public static NetMessageRequestLocalCoopEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRequestLocalCoopEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRequestLocalCoopEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLocalCoopEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRequestLocalCoopEnd, NetMessageRequestLocalCoopEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageRequestLocalCoopEnd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRequestLocalCoopEndFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRequestLocalCoopEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRequestLocalCoopEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRequestLocalCoopEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRequestLocalCoopEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRequestLocalCoopEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRequestLocalCoopEnd result;
      
      private NetMessageRequestLocalCoopEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRequestLocalCoopEnd original = result;
          result = new NetMessageRequestLocalCoopEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRequestLocalCoopEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRequestLocalCoopEnd.Descriptor; }
      }
      
      public override NetMessageRequestLocalCoopEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRequestLocalCoopEnd.DefaultInstance; }
      }
      
      public override NetMessageRequestLocalCoopEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRequestLocalCoopEnd) {
          return MergeFrom((NetMessageRequestLocalCoopEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRequestLocalCoopEnd other) {
        if (other == global::Gazillion.NetMessageRequestLocalCoopEnd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRequestLocalCoopEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRequestLocalCoopEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageRequestLocalCoopEnd() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCouponAwardPresented : pb::GeneratedMessage<NetMessageCouponAwardPresented, NetMessageCouponAwardPresented.Builder> {
    private NetMessageCouponAwardPresented() { }
    private static readonly NetMessageCouponAwardPresented defaultInstance = new NetMessageCouponAwardPresented().MakeReadOnly();
    private static readonly string[] _netMessageCouponAwardPresentedFieldNames = new string[] {  };
    private static readonly uint[] _netMessageCouponAwardPresentedFieldTags = new uint[] {  };
    public static NetMessageCouponAwardPresented DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCouponAwardPresented DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCouponAwardPresented ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCouponAwardPresented__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCouponAwardPresented, NetMessageCouponAwardPresented.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageCouponAwardPresented__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCouponAwardPresentedFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCouponAwardPresented ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCouponAwardPresented ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCouponAwardPresented MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCouponAwardPresented prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCouponAwardPresented, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCouponAwardPresented cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCouponAwardPresented result;
      
      private NetMessageCouponAwardPresented PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCouponAwardPresented original = result;
          result = new NetMessageCouponAwardPresented();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCouponAwardPresented MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCouponAwardPresented.Descriptor; }
      }
      
      public override NetMessageCouponAwardPresented DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCouponAwardPresented.DefaultInstance; }
      }
      
      public override NetMessageCouponAwardPresented BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCouponAwardPresented) {
          return MergeFrom((NetMessageCouponAwardPresented) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCouponAwardPresented other) {
        if (other == global::Gazillion.NetMessageCouponAwardPresented.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCouponAwardPresentedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCouponAwardPresentedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageCouponAwardPresented() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBillingRoutedClientMessage : pb::GeneratedMessage<NetMessageBillingRoutedClientMessage, NetMessageBillingRoutedClientMessage.Builder> {
    private NetMessageBillingRoutedClientMessage() { }
    private static readonly NetMessageBillingRoutedClientMessage defaultInstance = new NetMessageBillingRoutedClientMessage().MakeReadOnly();
    private static readonly string[] _netMessageBillingRoutedClientMessageFieldNames = new string[] { "payload" };
    private static readonly uint[] _netMessageBillingRoutedClientMessageFieldTags = new uint[] { 10 };
    public static NetMessageBillingRoutedClientMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBillingRoutedClientMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBillingRoutedClientMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBillingRoutedClientMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBillingRoutedClientMessage, NetMessageBillingRoutedClientMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.ClientToGameServer.internal__static_Gazillion_NetMessageBillingRoutedClientMessage__FieldAccessorTable; }
    }
    
    public const int PayloadFieldNumber = 1;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPayload) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBillingRoutedClientMessageFieldNames;
      if (hasPayload) {
        output.WriteBytes(1, field_names[0], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Payload);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBillingRoutedClientMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBillingRoutedClientMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBillingRoutedClientMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBillingRoutedClientMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBillingRoutedClientMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBillingRoutedClientMessage result;
      
      private NetMessageBillingRoutedClientMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBillingRoutedClientMessage original = result;
          result = new NetMessageBillingRoutedClientMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBillingRoutedClientMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBillingRoutedClientMessage.Descriptor; }
      }
      
      public override NetMessageBillingRoutedClientMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBillingRoutedClientMessage.DefaultInstance; }
      }
      
      public override NetMessageBillingRoutedClientMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBillingRoutedClientMessage) {
          return MergeFrom((NetMessageBillingRoutedClientMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBillingRoutedClientMessage other) {
        if (other == global::Gazillion.NetMessageBillingRoutedClientMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBillingRoutedClientMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBillingRoutedClientMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageBillingRoutedClientMessage() {
      object.ReferenceEquals(global::Gazillion.ClientToGameServer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
