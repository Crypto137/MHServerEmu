// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gazillion {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameServerToClient {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn, global::Gazillion.NetMessageReadyAndLoggedIn.Builder> internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig, global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.Builder> internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoadedOnGameServer, global::Gazillion.NetMessageReadyAndLoadedOnGameServer.Builder> internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForTimeSync, global::Gazillion.NetMessageReadyForTimeSync.Builder> internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructGameOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructGameOptions, global::Gazillion.NetStructGameOptions.Builder> internal__static_Gazillion_NetStructGameOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocalPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalPlayer, global::Gazillion.NetMessageLocalPlayer.Builder> internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityCreate, global::Gazillion.NetMessageEntityCreate.Builder> internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityDestroy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityDestroy, global::Gazillion.NetMessageEntityDestroy.Builder> internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityTracked__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityTracked, global::Gazillion.NetMessageEntityTracked.Builder> internal__static_Gazillion_NetMessageEntityTracked__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntitySelectorAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntitySelectorAction, global::Gazillion.NetMessageEntitySelectorAction.Builder> internal__static_Gazillion_NetMessageEntitySelectorAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryMove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryMove, global::Gazillion.NetMessageInventoryMove.Builder> internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryUnlock, global::Gazillion.NetMessageInventoryUnlock.Builder> internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePermaBuffUnlock, global::Gazillion.NetMessagePermaBuffUnlock.Builder> internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityKill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityKill, global::Gazillion.NetMessageEntityKill.Builder> internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFullscreenMovieSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullscreenMovieSync, global::Gazillion.NetMessageFullscreenMovieSync.Builder> internal__static_Gazillion_NetMessageFullscreenMovieSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueFullscreenMovie, global::Gazillion.NetMessageQueueFullscreenMovie.Builder> internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueLoadingScreen, global::Gazillion.NetMessageQueueLoadingScreen.Builder> internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDequeueLoadingScreen, global::Gazillion.NetMessageDequeueLoadingScreen.Builder> internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionChange, global::Gazillion.NetMessageRegionChange.Builder> internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPosition, global::Gazillion.NetMessageEntityPosition.Builder> internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocomotionStateUpdate, global::Gazillion.NetMessageLocomotionStateUpdate.Builder> internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLootRollFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLootRollFailed, global::Gazillion.NetMessageLootRollFailed.Builder> internal__static_Gazillion_NetMessageLootRollFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInterestPolicies__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInterestPolicies, global::Gazillion.NetMessageInterestPolicies.Builder> internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnableToChangeRegion, global::Gazillion.NetMessageUnableToChangeRegion.Builder> internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructAreaConnection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAreaConnection, global::Gazillion.NetStructAreaConnection.Builder> internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAddArea__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddArea, global::Gazillion.NetMessageAddArea.Builder> internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoveArea__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveArea, global::Gazillion.NetMessageRemoveArea.Builder> internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructReservedSpawn__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructReservedSpawn, global::Gazillion.NetStructReservedSpawn.Builder> internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellCreate, global::Gazillion.NetMessageCellCreate.Builder> internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCellDestroy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellDestroy, global::Gazillion.NetMessageCellDestroy.Builder> internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnvironmentUpdate, global::Gazillion.NetMessageEnvironmentUpdate.Builder> internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugSpawnMapVisualization, global::Gazillion.NetMessageDebugSpawnMapVisualization.Builder> internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeAOIPolicies, global::Gazillion.NetMessageChangeAOIPolicies.Builder> internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd, global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Builder> internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin, global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Builder> internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommandResponse, global::Gazillion.NetMessageAdminCommandResponse.Builder> internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePowerFailed, global::Gazillion.NetMessageActivatePowerFailed.Builder> internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCancelPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPower, global::Gazillion.NetMessageCancelPower.Builder> internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToClient, global::Gazillion.NetMessageContinuousPowerUpdateToClient.Builder> internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePower, global::Gazillion.NetMessageActivatePower.Builder> internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePreActivatePower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePreActivatePower, global::Gazillion.NetMessagePreActivatePower.Builder> internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerResult, global::Gazillion.NetMessagePowerResult.Builder> internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerBounce__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerBounce, global::Gazillion.NetMessagePowerBounce.Builder> internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnPreInteractPowerEnd, global::Gazillion.NetMessageOnPreInteractPowerEnd.Builder> internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveBox, global::Gazillion.NetMessageRegionPrimitiveBox.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveTriangle, global::Gazillion.NetMessageRegionPrimitiveTriangle.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveSphere, global::Gazillion.NetMessageRegionPrimitiveSphere.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveCircle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveCircle, global::Gazillion.NetMessageRegionPrimitiveCircle.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveCircle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveLine, global::Gazillion.NetMessageRegionPrimitiveLine.Builder> internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMarkFirstGameFrame, global::Gazillion.NetMessageMarkFirstGameFrame.Builder> internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBeginExitGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBeginExitGame, global::Gazillion.NetMessageBeginExitGame.Builder> internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSystemMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSystemMessage, global::Gazillion.NetMessageSystemMessage.Builder> internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIPerformanceUIUpdate, global::Gazillion.NetMessageAIPerformanceUIUpdate.Builder> internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIDebugUIUpdate, global::Gazillion.NetMessageAIDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePropertiesDebugUIUpdate, global::Gazillion.NetMessagePropertiesDebugUIUpdate.Builder> internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConditionsDebugUIUpdate, global::Gazillion.NetMessageConditionsDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowersDebugUIUpdate, global::Gazillion.NetMessagePowersDebugUIUpdate.Builder> internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionDebugUIUpdate, global::Gazillion.NetMessageMissionDebugUIUpdate.Builder> internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugEntityPosition, global::Gazillion.NetMessageDebugEntityPosition.Builder> internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageServerFrameProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerFrameProfile, global::Gazillion.NetMessageServerFrameProfile.Builder> internal__static_Gazillion_NetMessageServerFrameProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePingResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePingResponse, global::Gazillion.NetMessagePingResponse.Builder> internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityEnterGameWorld, global::Gazillion.NetMessageEntityEnterGameWorld.Builder> internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckRequest, global::Gazillion.NetMessageTeleportAckRequest.Builder> internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageServerVersion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerVersion, global::Gazillion.NetMessageServerVersion.Builder> internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructAgentSpec__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAgentSpec, global::Gazillion.NetStructAgentSpec.Builder> internal__static_Gazillion_NetStructAgentSpec__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructVendorXPSummary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructVendorXPSummary, global::Gazillion.NetStructVendorXPSummary.Builder> internal__static_Gazillion_NetStructVendorXPSummary__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructItemSpecStack__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpecStack, global::Gazillion.NetStructItemSpecStack.Builder> internal__static_Gazillion_NetStructItemSpecStack__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructLootResultSummary__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructLootResultSummary, global::Gazillion.NetStructLootResultSummary.Builder> internal__static_Gazillion_NetStructLootResultSummary__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructVaporizedItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructVaporizedItem, global::Gazillion.NetStructVaporizedItem.Builder> internal__static_Gazillion_NetStructVaporizedItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVaporizedLootResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVaporizedLootResult, global::Gazillion.NetMessageVaporizedLootResult.Builder> internal__static_Gazillion_NetMessageVaporizedLootResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSocketGem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSocketGem, global::Gazillion.NetMessageSocketGem.Builder> internal__static_Gazillion_NetMessageSocketGem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionUpdate, global::Gazillion.NetMessageMissionUpdate.Builder> internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructMissionInteractionTag__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMissionInteractionTag, global::Gazillion.NetStructMissionInteractionTag.Builder> internal__static_Gazillion_NetStructMissionInteractionTag__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionObjectiveUpdate, global::Gazillion.NetMessageMissionObjectiveUpdate.Builder> internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionRewardsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionRewardsResponse, global::Gazillion.NetMessageMissionRewardsResponse.Builder> internal__static_Gazillion_NetMessageMissionRewardsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCurrentAvatarChanged, global::Gazillion.NetMessageCurrentAvatarChanged.Builder> internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewAvatarAcquired, global::Gazillion.NetMessageNewAvatarAcquired.Builder> internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageNewTeamUpAcquired__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewTeamUpAcquired, global::Gazillion.NetMessageNewTeamUpAcquired.Builder> internal__static_Gazillion_NetMessageNewTeamUpAcquired__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetStructPrefetchCell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchCell, global::Gazillion.NetStructPrefetchCell.Builder> internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchAssets, global::Gazillion.NetMessagePrefetchAssets.Builder> internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchRegionsForDownload, global::Gazillion.NetMessagePrefetchRegionsForDownload.Builder> internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueryIsRegionAvailable, global::Gazillion.NetMessageQueryIsRegionAvailable.Builder> internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowOverheadText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowOverheadText, global::Gazillion.NetMessageShowOverheadText.Builder> internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowXPAwardedText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowXPAwardedText, global::Gazillion.NetMessageShowXPAwardedText.Builder> internal__static_Gazillion_NetMessageShowXPAwardedText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIToggleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIToggleState, global::Gazillion.NetMessageAIToggleState.Builder> internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDamageToggleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageToggleState, global::Gazillion.NetMessageDamageToggleState.Builder> internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDynamicCombatLevelToggleState, global::Gazillion.NetMessageDynamicCombatLevelToggleState.Builder> internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamRosterNotification, global::Gazillion.NetMessageMatchTeamRosterNotification.Builder> internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamSizeNotification, global::Gazillion.NetMessageMatchTeamSizeNotification.Builder> internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromGameSystem, global::Gazillion.NetMessageChatFromGameSystem.Builder> internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatFromMetaGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromMetaGame, global::Gazillion.NetMessageChatFromMetaGame.Builder> internal__static_Gazillion_NetMessageChatFromMetaGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBroadcastRareItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBroadcastRareItem, global::Gazillion.NetMessageBroadcastRareItem.Builder> internal__static_Gazillion_NetMessageBroadcastRareItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChatError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatError, global::Gazillion.NetMessageChatError.Builder> internal__static_Gazillion_NetMessageChatError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCatalogItems__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCatalogItems, global::Gazillion.NetMessageCatalogItems.Builder> internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_AwardCouponEntryDesc__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardCouponEntryDesc, global::Gazillion.AwardCouponEntryDesc.Builder> internal__static_Gazillion_AwardCouponEntryDesc__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_AwardCouponEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardCouponEntry, global::Gazillion.AwardCouponEntry.Builder> internal__static_Gazillion_AwardCouponEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_AwardItemEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardItemEntry, global::Gazillion.AwardItemEntry.Builder> internal__static_Gazillion_AwardItemEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalanceResponse, global::Gazillion.NetMessageGetCurrencyBalanceResponse.Builder> internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalogResponse, global::Gazillion.NetMessageBuyItemFromCatalogResponse.Builder> internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse, global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse.Builder> internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGrantGToPlayerNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGrantGToPlayerNotification, global::Gazillion.NetMessageGrantGToPlayerNotification.Builder> internal__static_Gazillion_NetMessageGrantGToPlayerNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePurchaseUnlockResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePurchaseUnlockResponse, global::Gazillion.NetMessagePurchaseUnlockResponse.Builder> internal__static_Gazillion_NetMessagePurchaseUnlockResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTarget, global::Gazillion.NetMessageEntityPreviewerNewTarget.Builder> internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoteMissionNotification, global::Gazillion.NetMessageRemoteMissionNotification.Builder> internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameInfoNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameInfoNotification, global::Gazillion.NetMessageMetaGameInfoNotification.Builder> internal__static_Gazillion_NetMessageMetaGameInfoNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageClearMetaGameInfoNotification, global::Gazillion.NetMessageClearMetaGameInfoNotification.Builder> internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUINotificationMessage, global::Gazillion.NetMessageUINotificationMessage.Builder> internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowPvPScoreboard__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowPvPScoreboard, global::Gazillion.NetMessageShowPvPScoreboard.Builder> internal__static_Gazillion_NetMessageShowPvPScoreboard__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPvPTimer, global::Gazillion.NetMessageStartPvPTimer.Builder> internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStopPvPTimer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPvPTimer, global::Gazillion.NetMessageStopPvPTimer.Builder> internal__static_Gazillion_NetMessageStopPvPTimer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDifficultyThresholds, global::Gazillion.NetMessageSetDifficultyThresholds.Builder> internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetUITrackedEntityId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetUITrackedEntityId, global::Gazillion.NetMessageSetUITrackedEntityId.Builder> internal__static_Gazillion_NetMessageSetUITrackedEntityId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetTimerText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimerText, global::Gazillion.NetMessageSetTimerText.Builder> internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetModeText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetModeText, global::Gazillion.NetMessageSetModeText.Builder> internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetExtraText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetExtraText, global::Gazillion.NetMessageSetExtraText.Builder> internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageBannerMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBannerMessage, global::Gazillion.NetMessageBannerMessage.Builder> internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageHUDTutorial__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHUDTutorial, global::Gazillion.NetMessageHUDTutorial.Builder> internal__static_Gazillion_NetMessageHUDTutorial__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionAvatarSwapUpdate, global::Gazillion.NetMessageRegionAvatarSwapUpdate.Builder> internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionRestrictedRosterUpdate, global::Gazillion.NetMessageRegionRestrictedRosterUpdate.Builder> internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTeamSelectDialog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeamSelectDialog, global::Gazillion.NetMessageTeamSelectDialog.Builder> internal__static_Gazillion_NetMessageTeamSelectDialog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIAggroNotification, global::Gazillion.NetMessageAIAggroNotification.Builder> internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAITargetChangeNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAITargetChangeNotification, global::Gazillion.NetMessageAITargetChangeNotification.Builder> internal__static_Gazillion_NetMessageAITargetChangeNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStoryNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoryNotification, global::Gazillion.NetMessageStoryNotification.Builder> internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeReply, global::Gazillion.NetMessageSyncTimeReply.Builder> internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInitialTimeSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInitialTimeSync, global::Gazillion.NetMessageInitialTimeSync.Builder> internal__static_Gazillion_NetMessageInitialTimeSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer, global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Builder> internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowKioskStartScreen, global::Gazillion.NetMessageShowKioskStartScreen.Builder> internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryFull__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryFull, global::Gazillion.NetMessageInventoryFull.Builder> internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesStart, global::Gazillion.NetMessageUnloadPackagesStart.Builder> internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesEnd, global::Gazillion.NetMessageUnloadPackagesEnd.Builder> internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageForceDisconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageForceDisconnect, global::Gazillion.NetMessageForceDisconnect.Builder> internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLevelUp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLevelUp, global::Gazillion.NetMessageLevelUp.Builder> internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOmegaPointGain__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOmegaPointGain, global::Gazillion.NetMessageOmegaPointGain.Builder> internal__static_Gazillion_NetMessageOmegaPointGain__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorLevelUp, global::Gazillion.NetMessageVendorLevelUp.Builder> internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVendorRefresh__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRefresh, global::Gazillion.NetMessageVendorRefresh.Builder> internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCraftingSuccess__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingSuccess, global::Gazillion.NetMessageCraftingSuccess.Builder> internal__static_Gazillion_NetMessageCraftingSuccess__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCraftingFailure__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFailure, global::Gazillion.NetMessageCraftingFailure.Builder> internal__static_Gazillion_NetMessageCraftingFailure__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayPowerVisuals__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayPowerVisuals, global::Gazillion.NetMessagePlayPowerVisuals.Builder> internal__static_Gazillion_NetMessagePlayPowerVisuals__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWaypointUnlocked, global::Gazillion.NetMessageWaypointUnlocked.Builder> internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReplicationArchive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReplicationArchive, global::Gazillion.NetMessageReplicationArchive.Builder> internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetProperty__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetProperty, global::Gazillion.NetMessageSetProperty.Builder> internal__static_Gazillion_NetMessageSetProperty__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoveProperty__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveProperty, global::Gazillion.NetMessageRemoveProperty.Builder> internal__static_Gazillion_NetMessageRemoveProperty__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder> internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerNewId, global::Gazillion.NetMessagePvPScorePlayerNewId.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerTeamChange, global::Gazillion.NetMessagePvPScorePlayerTeamChange.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerUpdate, global::Gazillion.NetMessagePvPScorePlayerUpdate.Builder> internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTransitionUpdate, global::Gazillion.NetMessageTransitionUpdate.Builder> internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarNameChange, global::Gazillion.NetMessageAvatarNameChange.Builder> internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRepeat, global::Gazillion.NetMessageMissionInteractRepeat.Builder> internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRelease, global::Gazillion.NetMessageMissionInteractRelease.Builder> internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAddCondition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddCondition, global::Gazillion.NetMessageAddCondition.Builder> internal__static_Gazillion_NetMessageAddCondition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDeleteCondition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeleteCondition, global::Gazillion.NetMessageDeleteCondition.Builder> internal__static_Gazillion_NetMessageDeleteCondition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEnableCondition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnableCondition, global::Gazillion.NetMessageEnableCondition.Builder> internal__static_Gazillion_NetMessageEnableCondition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeConditionPauseTime__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeConditionPauseTime, global::Gazillion.NetMessageChangeConditionPauseTime.Builder> internal__static_Gazillion_NetMessageChangeConditionPauseTime__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageChangeConditionDuration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeConditionDuration, global::Gazillion.NetMessageChangeConditionDuration.Builder> internal__static_Gazillion_NetMessageChangeConditionDuration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer, global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer.Builder> internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer, global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer.Builder> internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer, global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer.Builder> internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignHotkeyFromServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkeyFromServer, global::Gazillion.NetMessageAssignHotkeyFromServer.Builder> internal__static_Gazillion_NetMessageAssignHotkeyFromServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkeyFromServer, global::Gazillion.NetMessageUnassignHotkeyFromServer.Builder> internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionAssignPower, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder> internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignPowerCollection, global::Gazillion.NetMessageAssignPowerCollection.Builder> internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionUnassignPower, global::Gazillion.NetMessagePowerCollectionUnassignPower.Builder> internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdatePowerIndexProps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdatePowerIndexProps, global::Gazillion.NetMessageUpdatePowerIndexProps.Builder> internal__static_Gazillion_NetMessageUpdatePowerIndexProps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnWaypointUpdated, global::Gazillion.NetMessageOnWaypointUpdated.Builder> internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInternalReportPlayerLoadError, global::Gazillion.NetMessageInternalReportPlayerLoadError.Builder> internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_MessageReportEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.MessageReportEntry, global::Gazillion.MessageReportEntry.Builder> internal__static_Gazillion_MessageReportEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMessageReport__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMessageReport, global::Gazillion.NetMessageMessageReport.Builder> internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateMiniMap, global::Gazillion.NetMessageUpdateMiniMap.Builder> internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMoveToAlternateLandingSpot, global::Gazillion.NetMessageMoveToAlternateLandingSpot.Builder> internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConsoleMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConsoleMessage, global::Gazillion.NetMessageConsoleMessage.Builder> internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarOnKilledInfoOverride, global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Builder> internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrect, global::Gazillion.NetMessageOnResurrect.Builder> internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectRequest, global::Gazillion.NetMessageOnResurrectRequest.Builder> internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectDecline, global::Gazillion.NetMessageOnResurrectDecline.Builder> internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReloadPackagesStart, global::Gazillion.NetMessageReloadPackagesStart.Builder> internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayStoryBanter, global::Gazillion.NetMessagePlayStoryBanter.Builder> internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayUISoundTheme__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayUISoundTheme, global::Gazillion.NetMessagePlayUISoundTheme.Builder> internal__static_Gazillion_NetMessagePlayUISoundTheme__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeq, global::Gazillion.NetMessagePlayKismetSeq.Builder> internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnectAck, global::Gazillion.NetMessageGracefulDisconnectAck.Builder> internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLiveTuningUpdate, global::Gazillion.NetMessageLiveTuningUpdate.Builder> internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateSituationalTarget, global::Gazillion.NetMessageUpdateSituationalTarget.Builder> internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmStartNewGame, global::Gazillion.NetMessageConfirmStartNewGame.Builder> internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOneTimeSnapCamera__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOneTimeSnapCamera, global::Gazillion.NetMessageOneTimeSnapCamera.Builder> internal__static_Gazillion_NetMessageOneTimeSnapCamera__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMemberFailure, global::Gazillion.NetMessageModifyCommunityMemberFailure.Builder> internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMember, global::Gazillion.NetMessageModifyCommunityMember.Builder> internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceiveCommunityNotify, global::Gazillion.NetMessageReceiveCommunityNotify.Builder> internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemBindingChanged, global::Gazillion.NetMessageItemBindingChanged.Builder> internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemsHeldForRecovery, global::Gazillion.NetMessageItemsHeldForRecovery.Builder> internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageItemRecovered__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemRecovered, global::Gazillion.NetMessageItemRecovered.Builder> internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed, global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Builder> internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCoopStartEntranceFailed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCoopStartEntranceFailed, global::Gazillion.NetMessageCoopStartEntranceFailed.Builder> internal__static_Gazillion_NetMessageCoopStartEntranceFailed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToClient, global::Gazillion.NetMessageGuildMessageToClient.Builder> internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityGuildInfo, global::Gazillion.NetMessageEntityGuildInfo.Builder> internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaveGuild__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGuild, global::Gazillion.NetMessageLeaveGuild.Builder> internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildSystemMessage, global::Gazillion.NetMessageGuildSystemMessage.Builder> internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionDifficultyChange, global::Gazillion.NetMessageRegionDifficultyChange.Builder> internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameWaveUpdate, global::Gazillion.NetMessageMetaGameWaveUpdate.Builder> internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceCrystalUpdate, global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Builder> internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceDeathUpdate, global::Gazillion.NetMessagePvEInstanceDeathUpdate.Builder> internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate, global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate.Builder> internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMetaGameBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameBanner, global::Gazillion.NetMessageMetaGameBanner.Builder> internal__static_Gazillion_NetMessageMetaGameBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePostDialogToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePostDialogToClient, global::Gazillion.NetMessagePostDialogToClient.Builder> internal__static_Gazillion_NetMessagePostDialogToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRemoveDialogFromClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveDialogFromClient, global::Gazillion.NetMessageRemoveDialogFromClient.Builder> internal__static_Gazillion_NetMessageRemoveDialogFromClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCancelPendingActionToClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingActionToClient, global::Gazillion.NetMessageCancelPendingActionToClient.Builder> internal__static_Gazillion_NetMessageCancelPendingActionToClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRecvAkEventFromEntity__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRecvAkEventFromEntity, global::Gazillion.NetMessageRecvAkEventFromEntity.Builder> internal__static_Gazillion_NetMessageRecvAkEventFromEntity__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowTutorialTip, global::Gazillion.NetMessageShowTutorialTip.Builder> internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageMatchQueueUpdateClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueUpdateClient, global::Gazillion.NetMessageMatchQueueUpdateClient.Builder> internal__static_Gazillion_NetMessageMatchQueueUpdateClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_GlobalEventCriteriaData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.GlobalEventCriteriaData, global::Gazillion.GlobalEventCriteriaData.Builder> internal__static_Gazillion_GlobalEventCriteriaData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGlobalEventDataUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGlobalEventDataUpdate, global::Gazillion.NetMessageGlobalEventDataUpdate.Builder> internal__static_Gazillion_NetMessageGlobalEventDataUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGlobalEventLeaderboardUpdate, global::Gazillion.NetMessageGlobalEventLeaderboardUpdate.Builder> internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageOpenUIPanel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOpenUIPanel, global::Gazillion.NetMessageOpenUIPanel.Builder> internal__static_Gazillion_NetMessageOpenUIPanel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerOwnsItemResponse, global::Gazillion.NetMessagePlayerOwnsItemResponse.Builder> internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowShareLegendaryMissionNotification, global::Gazillion.NetMessageShowShareLegendaryMissionNotification.Builder> internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageShareLegendaryMissionResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShareLegendaryMissionResult, global::Gazillion.NetMessageShareLegendaryMissionResult.Builder> internal__static_Gazillion_NetMessageShareLegendaryMissionResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUISyncDataUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISyncDataUpdate, global::Gazillion.NetMessageUISyncDataUpdate.Builder> internal__static_Gazillion_NetMessageUISyncDataUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePlayerTradeStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeStatus, global::Gazillion.NetMessagePlayerTradeStatus.Builder> internal__static_Gazillion_NetMessagePlayerTradeStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageUISyncDataRemove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISyncDataRemove, global::Gazillion.NetMessageUISyncDataRemove.Builder> internal__static_Gazillion_NetMessageUISyncDataRemove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_AchievementDatabaseDump__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.AchievementDatabaseDump, global::Gazillion.AchievementDatabaseDump.Builder> internal__static_Gazillion_AchievementDatabaseDump__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo, global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.Builder> internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAchievementDatabaseDump__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementDatabaseDump, global::Gazillion.NetMessageAchievementDatabaseDump.Builder> internal__static_Gazillion_NetMessageAchievementDatabaseDump__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAchievementStateUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementStateUpdate, global::Gazillion.NetMessageAchievementStateUpdate.Builder> internal__static_Gazillion_NetMessageAchievementStateUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState, global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.Builder> internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePartyKickGracePeriod__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePartyKickGracePeriod, global::Gazillion.NetMessagePartyKickGracePeriod.Builder> internal__static_Gazillion_NetMessagePartyKickGracePeriod__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageReceivedGift__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceivedGift, global::Gazillion.NetMessageReceivedGift.Builder> internal__static_Gazillion_NetMessageReceivedGift__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementCompletedByPartyMember, global::Gazillion.NetMessageAchievementCompletedByPartyMember.Builder> internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageVerifyOnClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyOnClient, global::Gazillion.NetMessageVerifyOnClient.Builder> internal__static_Gazillion_NetMessageVerifyOnClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateAndOpenFileOnClient, global::Gazillion.NetMessageCreateAndOpenFileOnClient.Builder> internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageInventoryLoaded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryLoaded, global::Gazillion.NetMessageInventoryLoaded.Builder> internal__static_Gazillion_NetMessageInventoryLoaded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardReportClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardReportClient, global::Gazillion.NetMessageLeaderboardReportClient.Builder> internal__static_Gazillion_NetMessageLeaderboardReportClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardCheatResponseClient, global::Gazillion.NetMessageLeaderboardCheatResponseClient.Builder> internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_LeaderboardArchivedInstanceListData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.LeaderboardArchivedInstanceListData, global::Gazillion.LeaderboardArchivedInstanceListData.Builder> internal__static_Gazillion_LeaderboardArchivedInstanceListData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_LeaderboardInitData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.LeaderboardInitData, global::Gazillion.LeaderboardInitData.Builder> internal__static_Gazillion_LeaderboardInitData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse, global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse.Builder> internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardInitializeRequestResponse, global::Gazillion.NetMessageLeaderboardInitializeRequestResponse.Builder> internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardStateChange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardStateChange, global::Gazillion.NetMessageLeaderboardStateChange.Builder> internal__static_Gazillion_NetMessageLeaderboardStateChange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLeaderboardRewarded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardRewarded, global::Gazillion.NetMessageLeaderboardRewarded.Builder> internal__static_Gazillion_NetMessageLeaderboardRewarded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGiftHistoryResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGiftHistoryResult, global::Gazillion.NetMessageGiftHistoryResult.Builder> internal__static_Gazillion_NetMessageGiftHistoryResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageStoreTooBusy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoreTooBusy, global::Gazillion.NetMessageStoreTooBusy.Builder> internal__static_Gazillion_NetMessageStoreTooBusy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageSetDebuggingClient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDebuggingClient, global::Gazillion.NetMessageSetDebuggingClient.Builder> internal__static_Gazillion_NetMessageSetDebuggingClient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocalCoopStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalCoopStart, global::Gazillion.NetMessageLocalCoopStart.Builder> internal__static_Gazillion_NetMessageLocalCoopStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageLocalCoopEnd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalCoopEnd, global::Gazillion.NetMessageLocalCoopEnd.Builder> internal__static_Gazillion_NetMessageLocalCoopEnd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageAwardUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAwardUpdate, global::Gazillion.NetMessageAwardUpdate.Builder> internal__static_Gazillion_NetMessageAwardUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageDisplayCouponNotifications__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisplayCouponNotifications, global::Gazillion.NetMessageDisplayCouponNotifications.Builder> internal__static_Gazillion_NetMessageDisplayCouponNotifications__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessagePublicEventTeamAssigned__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePublicEventTeamAssigned, global::Gazillion.NetMessagePublicEventTeamAssigned.Builder> internal__static_Gazillion_NetMessagePublicEventTeamAssigned__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageRoutedClientMessageResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRoutedClientMessageResponse, global::Gazillion.NetMessageRoutedClientMessageResponse.Builder> internal__static_Gazillion_NetMessageRoutedClientMessageResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGiftingRestrictionsUpdate, global::Gazillion.NetMessageGiftingRestrictionsUpdate.Builder> internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameServerToClient() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhHYW1lU2VydmVyVG9DbGllbnQucHJvdG8SCUdhemlsbGlvbhoVR2F6aWxs", 
            "aW9uQ29tbW9uLnByb3RvGhRDb21tb25NZXNzYWdlcy5wcm90bxoQQ2hhdENv", 
            "bW1vbi5wcm90bxoRTWF0Y2hDb21tb24ucHJvdG8aE0JpbGxpbmdDb21tb24u", 
            "cHJvdG8aC0d1aWxkLnByb3RvItYBChpOZXRNZXNzYWdlUmVhZHlBbmRMb2dn", 
            "ZWRJbhJoChJyZXBvcnREZWZlY3RDb25maWcYASABKAsyOC5HYXppbGxpb24u", 
            "TmV0TWVzc2FnZVJlYWR5QW5kTG9nZ2VkSW4uUmVwb3J0RGVmZWN0Q29uZmln", 
            "UhJyZXBvcnREZWZlY3RDb25maWcaTgoSUmVwb3J0RGVmZWN0Q29uZmlnEhIK", 
            "BGhvc3QYASACKAlSBGhvc3QSEAoDdXJsGAIgAigJUgN1cmwSEgoEcG9ydBgD", 
            "IAIoDVIEcG9ydCImCiROZXRNZXNzYWdlUmVhZHlBbmRMb2FkZWRPbkdhbWVT", 
            "ZXJ2ZXIiHAoaTmV0TWVzc2FnZVJlYWR5Rm9yVGltZVN5bmMisAkKFE5ldFN0", 
            "cnVjdEdhbWVPcHRpb25zEjAKE3RlYW1VcFN5c3RlbUVuYWJsZWQYASACKAhS", 
            "E3RlYW1VcFN5c3RlbUVuYWJsZWQSMAoTYWNoaWV2ZW1lbnRzRW5hYmxlZBgD", 
            "IAIoCFITYWNoaWV2ZW1lbnRzRW5hYmxlZBIyChRvbWVnYU1pc3Npb25zRW5h", 
            "YmxlZBgEIAIoCFIUb21lZ2FNaXNzaW9uc0VuYWJsZWQSNAoVdmV0ZXJhblJl", 
            "d2FyZHNFbmFibGVkGAUgAigIUhV2ZXRlcmFuUmV3YXJkc0VuYWJsZWQSOAoX", 
            "bXVsdGlTcGVjUmV3YXJkc0VuYWJsZWQYBiACKAhSF211bHRpU3BlY1Jld2Fy", 
            "ZHNFbmFibGVkEiYKDmdpZnRpbmdFbmFibGVkGAcgAigIUg5naWZ0aW5nRW5h", 
            "YmxlZBI6ChhjaGFyYWN0ZXJTZWxlY3RWMkVuYWJsZWQYCCACKAhSGGNoYXJh", 
            "Y3RlclNlbGVjdFYyRW5hYmxlZBI2ChZjb21tdW5pdHlOZXdzVjJFbmFibGVk", 
            "GAkgAigIUhZjb21tdW5pdHlOZXdzVjJFbmFibGVkEjAKE2xlYWRlcmJvYXJk", 
            "c0VuYWJsZWQYCiACKAhSE2xlYWRlcmJvYXJkc0VuYWJsZWQSPAoZZHluYW1p", 
            "Y0NvbWJhdExldmVsRW5hYmxlZBgLIAIoCFIZZHluYW1pY0NvbWJhdExldmVs", 
            "RW5hYmxlZBI+ChpuZXdQbGF5ZXJFeHBlcmllbmNlRW5hYmxlZBgMIAIoCFIa", 
            "bmV3UGxheWVyRXhwZXJpZW5jZUVuYWJsZWQSMAoTc2VydmVyVGltZU9mZnNl", 
            "dFVUQxgNIAIoBVITc2VydmVyVGltZU9mZnNldFVUQxIwChN1c2VTZXJ2ZXJU", 
            "aW1lT2Zmc2V0GA4gAigIUhN1c2VTZXJ2ZXJUaW1lT2Zmc2V0EjgKF21pc3Np", 
            "b25UcmFja2VyVjJFbmFibGVkGA8gAigIUhdtaXNzaW9uVHJhY2tlclYyRW5h", 
            "YmxlZBJICh9naWZ0aW5nQWNjb3VudEFnZUluRGF5c1JlcXVpcmVkGBAgAigF", 
            "Uh9naWZ0aW5nQWNjb3VudEFnZUluRGF5c1JlcXVpcmVkEj4KGmdpZnRpbmdB", 
            "dmF0YXJMZXZlbFJlcXVpcmVkGBEgAigFUhpnaWZ0aW5nQXZhdGFyTGV2ZWxS", 
            "ZXF1aXJlZBI8ChlnaWZ0aW5nTG9naW5Db3VudFJlcXVpcmVkGBIgAigFUhln", 
            "aWZ0aW5nTG9naW5Db3VudFJlcXVpcmVkElAKI2NoYXRCYW5Wb3RlQWNjb3Vu", 
            "dEFnZUluRGF5c1JlcXVpcmVkGBQgAigFUiNjaGF0QmFuVm90ZUFjY291bnRB", 
            "Z2VJbkRheXNSZXF1aXJlZBJGCh5jaGF0QmFuVm90ZUF2YXRhckxldmVsUmVx", 
            "dWlyZWQYFSACKAVSHmNoYXRCYW5Wb3RlQXZhdGFyTGV2ZWxSZXF1aXJlZBJE", 
            "Ch1jaGF0QmFuVm90ZUxvZ2luQ291bnRSZXF1aXJlZBgWIAIoBVIdY2hhdEJh", 
            "blZvdGVMb2dpbkNvdW50UmVxdWlyZWQijAEKFU5ldE1lc3NhZ2VMb2NhbFBs", 
            "YXllchIwChNsb2NhbFBsYXllckVudGl0eUlkGAEgAigEUhNsb2NhbFBsYXll", 
            "ckVudGl0eUlkEkEKC2dhbWVPcHRpb25zGAIgAigLMh8uR2F6aWxsaW9uLk5l", 
            "dFN0cnVjdEdhbWVPcHRpb25zUgtnYW1lT3B0aW9ucyJWChZOZXRNZXNzYWdl", 
            "RW50aXR5Q3JlYXRlEhoKCGJhc2VEYXRhGAEgAigMUghiYXNlRGF0YRIgCgth", 
            "cmNoaXZlRGF0YRgCIAIoDFILYXJjaGl2ZURhdGEi3QIKF05ldE1lc3NhZ2VF", 
            "bnRpdHlEZXN0cm95EhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIgCgtw", 
            "cm90b3R5cGVJZBgCIAEoBFILcHJvdG90eXBlSWQSFgoGY2VsbElkGAMgASgN", 
            "UgZjZWxsSWQSFgoGYXJlYUlkGAQgASgNUgZhcmVhSWQSGgoIcmVnaW9uSWQY", 
            "BSABKARSCHJlZ2lvbklkEjYKCHBvc2l0aW9uGAYgASgLMhouR2F6aWxsaW9u", 
            "Lk5ldFN0cnVjdFBvaW50M1IIcG9zaXRpb24SJAoNb3duZXJFbnRpdHlJZBgH", 
            "IAEoBFINb3duZXJFbnRpdHlJZBIqChBvd25lclByb3RvdHlwZUlkGAggASgE", 
            "UhBvd25lclByb3RvdHlwZUlkEi4KEmVudGl0eVNlcnZlclN0cmluZxgJIAEo", 
            "CVISZW50aXR5U2VydmVyU3RyaW5nInUKF05ldE1lc3NhZ2VFbnRpdHlUcmFj", 
            "a2VkEhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIoCg90cmFja2luZ1By", 
            "b3RvSWQYAiACKARSD3RyYWNraW5nUHJvdG9JZBIUCgVmbGFncxgDIAIoDVIF", 
            "ZmxhZ3MiuAEKHk5ldE1lc3NhZ2VFbnRpdHlTZWxlY3RvckFjdGlvbhIaCghp", 
            "ZEVudGl0eRgBIAIoBFIIaWRFbnRpdHkSGgoIaWRUYXJnZXQYAiACKARSCGlk", 
            "VGFyZ2V0EkQKHWVudGl0eVNlbGVjdG9yQWN0aW9uRXZlbnRUeXBlGAMgAigN", 
            "Uh1lbnRpdHlTZWxlY3RvckFjdGlvbkV2ZW50VHlwZRIYCgdjYW5TZW5kGAQg", 
            "AigIUgdjYW5TZW5kItcCChdOZXRNZXNzYWdlSW52ZW50b3J5TW92ZRIaCghl", 
            "bnRpdHlJZBgBIAIoBFIIZW50aXR5SWQSOAoXaW52TG9jQ29udGFpbmVyRW50", 
            "aXR5SWQYAiACKARSF2ludkxvY0NvbnRhaW5lckVudGl0eUlkEj4KGmludkxv", 
            "Y0ludmVudG9yeVByb3RvdHlwZUlkGAMgAigEUhppbnZMb2NJbnZlbnRvcnlQ", 
            "cm90b3R5cGVJZBIeCgppbnZMb2NTbG90GAQgAigNUgppbnZMb2NTbG90EjgK", 
            "F3JlcXVpcmVkTm9Pd25lck9uQ2xpZW50GAUgASgIUhdyZXF1aXJlZE5vT3du", 
            "ZXJPbkNsaWVudBIiCgxlbnRpdHlEYXRhSWQYBiABKARSDGVudGl0eURhdGFJ", 
            "ZBIoCg9kZXN0T3duZXJEYXRhSWQYByABKARSD2Rlc3RPd25lckRhdGFJZCI7", 
            "ChlOZXRNZXNzYWdlSW52ZW50b3J5VW5sb2NrEh4KCmludlByb3RvSWQYASAC", 
            "KARSCmludlByb3RvSWQiRwoZTmV0TWVzc2FnZVBlcm1hQnVmZlVubG9jaxIq", 
            "ChBwZXJtYUJ1ZmZQcm90b0lkGAEgAigEUhBwZXJtYUJ1ZmZQcm90b0lkIngK", 
            "FE5ldE1lc3NhZ2VFbnRpdHlLaWxsEhoKCGlkRW50aXR5GAEgAigEUghpZEVu", 
            "dGl0eRImCg5pZEtpbGxlckVudGl0eRgCIAIoBFIOaWRLaWxsZXJFbnRpdHkS", 
            "HAoJa2lsbEZsYWdzGAMgAigNUglraWxsRmxhZ3MiaQodTmV0TWVzc2FnZUZ1", 
            "bGxzY3JlZW5Nb3ZpZVN5bmMSJAoNc3luY1JlcXVlc3RJZBgBIAIoDVINc3lu", 
            "Y1JlcXVlc3RJZBIiCgxtb3ZpZVByb3RvSWQYAiADKARSDG1vdmllUHJvdG9J", 
            "ZCJMCh5OZXRNZXNzYWdlUXVldWVGdWxsc2NyZWVuTW92aWUSKgoQbW92aWVQ", 
            "cm90b3R5cGVJZBgBIAEoBFIQbW92aWVQcm90b3R5cGVJZCKIAQocTmV0TWVz", 
            "c2FnZVF1ZXVlTG9hZGluZ1NjcmVlbhIsChFyZWdpb25Qcm90b3R5cGVJZBgB", 
            "IAEoBFIRcmVnaW9uUHJvdG90eXBlSWQSOgoYbG9hZGluZ1NjcmVlblByb3Rv", 
            "dHlwZUlkGAIgASgEUhhsb2FkaW5nU2NyZWVuUHJvdG90eXBlSWQiIAoeTmV0", 
            "TWVzc2FnZURlcXVldWVMb2FkaW5nU2NyZWVuIoAEChZOZXRNZXNzYWdlUmVn", 
            "aW9uQ2hhbmdlEhoKCHJlZ2lvbklkGAEgAigEUghyZWdpb25JZBIiCgxzZXJ2", 
            "ZXJHYW1lSWQYAiACKARSDHNlcnZlckdhbWVJZBIwChNjbGVhcmluZ0FsbElu", 
            "dGVyZXN0GAMgAigIUhNjbGVhcmluZ0FsbEludGVyZXN0EiwKEWVudGl0aWVz", 
            "dG9kZXN0cm95GAQgAygEUhFlbnRpdGllc3RvZGVzdHJveRIsChFyZWdpb25Q", 
            "cm90b3R5cGVJZBgFIAEoBFIRcmVnaW9uUHJvdG90eXBlSWQSKgoQcmVnaW9u", 
            "UmFuZG9tU2VlZBgGIAEoBVIQcmVnaW9uUmFuZG9tU2VlZBIgCgthcmNoaXZl", 
            "RGF0YRgHIAEoDFILYXJjaGl2ZURhdGESOAoJcmVnaW9uTWluGAggASgLMhou", 
            "R2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IJcmVnaW9uTWluEjgKCXJlZ2lv", 
            "bk1heBgJIAEoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSCXJlZ2lv", 
            "bk1heBJWChJjcmVhdGVSZWdpb25QYXJhbXMYCiABKAsyJi5HYXppbGxpb24u", 
            "TmV0U3RydWN0Q3JlYXRlUmVnaW9uUGFyYW1zUhJjcmVhdGVSZWdpb25QYXJh", 
            "bXMioAIKGE5ldE1lc3NhZ2VFbnRpdHlQb3NpdGlvbhIaCghpZEVudGl0eRgB", 
            "IAIoBFIIaWRFbnRpdHkSFAoFZmxhZ3MYAiACKA1SBWZsYWdzEjYKCHBvc2l0", 
            "aW9uGAMgASgLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IIcG9zaXRp", 
            "b24SPAoLb3JpZW50YXRpb24YBCABKAsyGi5HYXppbGxpb24uTmV0U3RydWN0", 
            "UG9pbnQzUgtvcmllbnRhdGlvbhIWCgZjZWxsSWQYBSABKA1SBmNlbGxJZBIW", 
            "CgZhcmVhSWQYBiABKA1SBmFyZWFJZBIsChFlbnRpdHlQcm90b3R5cGVJZBgH", 
            "IAEoBFIRZW50aXR5UHJvdG90eXBlSWQiQwofTmV0TWVzc2FnZUxvY29tb3Rp", 
            "b25TdGF0ZVVwZGF0ZRIgCgthcmNoaXZlRGF0YRgBIAIoDFILYXJjaGl2ZURh", 
            "dGEiRgoYTmV0TWVzc2FnZUxvb3RSb2xsRmFpbGVkEioKEGxvb3RUYWJsZVBy", 
            "b3RvSWQYASABKARSEGxvb3RUYWJsZVByb3RvSWQiogEKGk5ldE1lc3NhZ2VJ", 
            "bnRlcmVzdFBvbGljaWVzEhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIg", 
            "CgtuZXdQb2xpY2llcxgCIAIoDVILbmV3UG9saWNpZXMSIgoMcHJldlBvbGlj", 
            "aWVzGAMgAigNUgxwcmV2UG9saWNpZXMSIgoMZW50aXR5RGF0YUlkGAQgASgE", 
            "UgxlbnRpdHlEYXRhSWQiYwoeTmV0TWVzc2FnZVVuYWJsZVRvQ2hhbmdlUmVn", 
            "aW9uEkEKDGNoYW5nZUZhaWxlZBgBIAIoCzIdLkdhemlsbGlvbi5DaGFuZ2VS", 
            "ZWdpb25GYWlsZWRSDGNoYW5nZUZhaWxlZCJyChdOZXRTdHJ1Y3RBcmVhQ29u", 
            "bmVjdGlvbhIWCgZhcmVhSWQYASACKA1SBmFyZWFJZBI/Cgxjb25uZWN0UG9p", 
            "bnQYAiACKAsyGy5HYXppbGxpb24uTmV0U3RydWN0SVBvaW50MlIMY29ubmVj", 
            "dFBvaW50IrMBChFOZXRNZXNzYWdlQWRkQXJlYRIWCgZhcmVhSWQYASACKA1S", 
            "BmFyZWFJZBIoCg9hcmVhUHJvdG90eXBlSWQYAiACKARSD2FyZWFQcm90b3R5", 
            "cGVJZBI6CgphcmVhT3JpZ2luGAMgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVj", 
            "dFBvaW50M1IKYXJlYU9yaWdpbhIgCgtpc1N0YXJ0QXJlYRgEIAEoCFILaXNT", 
            "dGFydEFyZWEiLgoUTmV0TWVzc2FnZVJlbW92ZUFyZWESFgoGYXJlYUlkGAEg", 
            "AigNUgZhcmVhSWQicgoWTmV0U3RydWN0UmVzZXJ2ZWRTcGF3bhIUCgVhc3Nl", 
            "dBgBIAIoBFIFYXNzZXQSDgoCaWQYAiACKA1SAmlkEjIKFHVzZU1hcmtlck9y", 
            "aWVudGF0aW9uGAMgAigIUhR1c2VNYXJrZXJPcmllbnRhdGlvbiL1AgoUTmV0", 
            "TWVzc2FnZUNlbGxDcmVhdGUSFgoGYXJlYUlkGAEgAigNUgZhcmVhSWQSFgoG", 
            "Y2VsbElkGAIgAigNUgZjZWxsSWQSKAoPY2VsbFByb3RvdHlwZUlkGAMgAigE", 
            "Ug9jZWxsUHJvdG90eXBlSWQSQgoOcG9zaXRpb25JbkFyZWEYBCACKAsyGi5H", 
            "YXppbGxpb24uTmV0U3RydWN0UG9pbnQzUg5wb3NpdGlvbkluQXJlYRImCg5j", 
            "ZWxsUmFuZG9tU2VlZBgFIAIoBVIOY2VsbFJhbmRvbVNlZWQSQQoKZW5jb3Vu", 
            "dGVycxgGIAMoCzIhLkdhemlsbGlvbi5OZXRTdHJ1Y3RSZXNlcnZlZFNwYXdu", 
            "UgplbmNvdW50ZXJzEiAKC2J1ZmZlcndpZHRoGAcgAigFUgtidWZmZXJ3aWR0", 
            "aBIyChRvdmVycmlkZUxvY2F0aW9uTmFtZRgIIAIoBFIUb3ZlcnJpZGVMb2Nh", 
            "dGlvbk5hbWUiRwoVTmV0TWVzc2FnZUNlbGxEZXN0cm95EhYKBmFyZWFJZBgB", 
            "IAIoDVIGYXJlYUlkEhYKBmNlbGxJZBgCIAIoDVIGY2VsbElkIjMKG05ldE1l", 
            "c3NhZ2VFbnZpcm9ubWVudFVwZGF0ZRIUCgVmbGFncxgBIAIoDVIFZmxhZ3Mi", 
            "qgEKJE5ldE1lc3NhZ2VEZWJ1Z1NwYXduTWFwVmlzdWFsaXphdGlvbhIcCgl2", 
            "aXN1YWxpemUYASACKAhSCXZpc3VhbGl6ZRIWCgZhcmVhaWQYAiACKA1SBmFy", 
            "ZWFpZBIYCgdib3VuZHN4GAMgAigNUgdib3VuZHN4EhgKB2JvdW5kc3kYBCAC", 
            "KA1SB2JvdW5kc3kSGAoHbWFwZGF0YRgFIAEoDFIHbWFwZGF0YSK3AQobTmV0", 
            "TWVzc2FnZUNoYW5nZUFPSVBvbGljaWVzEhoKCGlkRW50aXR5GAEgAigEUghp", 
            "ZEVudGl0eRIoCg9jdXJyZW50cG9saWNpZXMYAiACKA1SD2N1cnJlbnRwb2xp", 
            "Y2llcxIkCg1leGl0R2FtZVdvcmxkGAMgASgIUg1leGl0R2FtZVdvcmxkEiwK", 
            "EWVudGl0eVByb3RvdHlwZUlkGAQgASgEUhFlbnRpdHlQcm90b3R5cGVJZCJF", 
            "CidOZXRNZXNzYWdlRnVsbEluV29ybGRIaWVyYXJjaHlVcGRhdGVFbmQSGgoI", 
            "aWRFbnRpdHkYASACKARSCGlkRW50aXR5IkcKKU5ldE1lc3NhZ2VGdWxsSW5X", 
            "b3JsZEhpZXJhcmNoeVVwZGF0ZUJlZ2luEhoKCGlkRW50aXR5GAEgAigEUghp", 
            "ZEVudGl0eSKMAQoeTmV0TWVzc2FnZUFkbWluQ29tbWFuZFJlc3BvbnNlEhoK", 
            "CHJlc3BvbnNlGAEgAigJUghyZXNwb25zZRIiCgxmaWxlY29udGVudHMYAiAB", 
            "KAlSDGZpbGVjb250ZW50cxIqChBmaWxlcmVsYXRpdmVwYXRoGAMgASgJUhBm", 
            "aWxlcmVsYXRpdmVwYXRoIoUBCh1OZXRNZXNzYWdlQWN0aXZhdGVQb3dlckZh", 
            "aWxlZBIWCgZyZWFzb24YASACKA1SBnJlYXNvbhIqChBwb3dlclByb3RvdHlw", 
            "ZUlkGAIgAigEUhBwb3dlclByb3RvdHlwZUlkEiAKC2F2YXRhckluZGV4GAMg", 
            "AigFUgthdmF0YXJJbmRleCKDAQoVTmV0TWVzc2FnZUNhbmNlbFBvd2VyEhgK", 
            "B2lkQWdlbnQYASACKARSB2lkQWdlbnQSKgoQcG93ZXJQcm90b3R5cGVJZBgC", 
            "IAIoBFIQcG93ZXJQcm90b3R5cGVJZBIkCg1lbmRQb3dlckZsYWdzGAMgAigN", 
            "Ug1lbmRQb3dlckZsYWdzIv0BCidOZXRNZXNzYWdlQ29udGludW91c1Bvd2Vy", 
            "VXBkYXRlVG9DbGllbnQSGgoIaWRBdmF0YXIYASACKARSCGlkQXZhdGFyEioK", 
            "EHBvd2VyUHJvdG90eXBlSWQYAiACKARSEHBvd2VyUHJvdG90eXBlSWQSJgoO", 
            "aWRUYXJnZXRFbnRpdHkYAyABKARSDmlkVGFyZ2V0RW50aXR5EkIKDnRhcmdl", 
            "dFBvc2l0aW9uGAQgASgLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IO", 
            "dGFyZ2V0UG9zaXRpb24SHgoKcmFuZG9tU2VlZBgFIAEoDVIKcmFuZG9tU2Vl", 
            "ZCI7ChdOZXRNZXNzYWdlQWN0aXZhdGVQb3dlchIgCgthcmNoaXZlRGF0YRgB", 
            "IAIoDFILYXJjaGl2ZURhdGEi2AEKGk5ldE1lc3NhZ2VQcmVBY3RpdmF0ZVBv", 
            "d2VyEiIKDGlkVXNlckVudGl0eRgBIAIoBFIMaWRVc2VyRW50aXR5EioKEHBv", 
            "d2VyUHJvdG90eXBlSWQYAiACKARSEHBvd2VyUHJvdG90eXBlSWQSJgoOaWRU", 
            "YXJnZXRFbnRpdHkYAyACKARSDmlkVGFyZ2V0RW50aXR5EkIKDnRhcmdldFBv", 
            "c2l0aW9uGAQgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IOdGFy", 
            "Z2V0UG9zaXRpb24iOQoVTmV0TWVzc2FnZVBvd2VyUmVzdWx0EiAKC2FyY2hp", 
            "dmVEYXRhGAEgAigMUgthcmNoaXZlRGF0YSKnAwoVTmV0TWVzc2FnZVBvd2Vy", 
            "Qm91bmNlEiAKC2lkUG93ZXJVc2VyGAEgAigEUgtpZFBvd2VyVXNlchIiCgxp", 
            "ZExhc3RUYXJnZXQYAiACKARSDGlkTGFzdFRhcmdldBJKChJsYXN0VGFyZ2V0", 
            "UG9zaXRpb24YAyACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUhJs", 
            "YXN0VGFyZ2V0UG9zaXRpb24SIAoLaWROZXdUYXJnZXQYBCACKARSC2lkTmV3", 
            "VGFyZ2V0EioKEHBvd2VyUHJvdG90eXBlSWQYBSACKARSEHBvd2VyUHJvdG90", 
            "eXBlSWQSMAoTdXNlck9yaWdpbmFsQXNzZXRJZBgGIAIoBFITdXNlck9yaWdp", 
            "bmFsQXNzZXRJZBIuChJ1c2VyQ3VycmVudEFzc2V0SWQYByACKARSEnVzZXJD", 
            "dXJyZW50QXNzZXRJZBIoCg9wcm9qZWN0aWxlU3BlZWQYCCACKAJSD3Byb2pl", 
            "Y3RpbGVTcGVlZBIiCgxmeFJhbmRvbVNlZWQYCSACKAVSDGZ4UmFuZG9tU2Vl", 
            "ZCJrCh9OZXRNZXNzYWdlT25QcmVJbnRlcmFjdFBvd2VyRW5kEiYKDmlkVGFy", 
            "Z2V0RW50aXR5GAEgAigEUg5pZFRhcmdldEVudGl0eRIgCgthdmF0YXJJbmRl", 
            "eBgCIAIoBVILYXZhdGFySW5kZXgi/wEKHE5ldE1lc3NhZ2VSZWdpb25Qcmlt", 
            "aXRpdmVCb3gSMgoGY2VudGVyGAEgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVj", 
            "dFBvaW50M1IGY2VudGVyEi4KBHNpemUYAiACKAsyGi5HYXppbGxpb24uTmV0", 
            "U3RydWN0UG9pbnQzUgRzaXplEjEKBWNvbG9yGAMgAigLMhsuR2F6aWxsaW9u", 
            "Lk5ldFN0cnVjdElQb2ludDNSBWNvbG9yEjYKFmxpZmV0aW1lSW5NaWxsaXNl", 
            "Y29uZHMYBCACKARSFmxpZmV0aW1lSW5NaWxsaXNlY29uZHMSEAoDYWRkGAUg", 
            "AigIUgNhZGQivAIKIU5ldE1lc3NhZ2VSZWdpb25QcmltaXRpdmVUcmlhbmds", 
            "ZRIyCgZwb2ludDAYASACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQz", 
            "UgZwb2ludDASMgoGcG9pbnQxGAIgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVj", 
            "dFBvaW50M1IGcG9pbnQxEjIKBnBvaW50MhgDIAIoCzIaLkdhemlsbGlvbi5O", 
            "ZXRTdHJ1Y3RQb2ludDNSBnBvaW50MhIxCgVjb2xvchgEIAIoCzIbLkdhemls", 
            "bGlvbi5OZXRTdHJ1Y3RJUG9pbnQzUgVjb2xvchI2ChZsaWZldGltZUluTWls", 
            "bGlzZWNvbmRzGAUgAigEUhZsaWZldGltZUluTWlsbGlzZWNvbmRzEhAKA2Fk", 
            "ZBgGIAIoCFIDYWRkIuoBCh9OZXRNZXNzYWdlUmVnaW9uUHJpbWl0aXZlU3Bo", 
            "ZXJlEjIKBmNlbnRlchgBIAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2lu", 
            "dDNSBmNlbnRlchIWCgZyYWRpdXMYAiACKAJSBnJhZGl1cxIxCgVjb2xvchgD", 
            "IAIoCzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJUG9pbnQzUgVjb2xvchI2ChZs", 
            "aWZldGltZUluTWlsbGlzZWNvbmRzGAQgAigEUhZsaWZldGltZUluTWlsbGlz", 
            "ZWNvbmRzEhAKA2FkZBgFIAIoCFIDYWRkIuoBCh9OZXRNZXNzYWdlUmVnaW9u", 
            "UHJpbWl0aXZlQ2lyY2xlEjIKBmNlbnRlchgBIAIoCzIaLkdhemlsbGlvbi5O", 
            "ZXRTdHJ1Y3RQb2ludDNSBmNlbnRlchIWCgZyYWRpdXMYAiACKAJSBnJhZGl1", 
            "cxIxCgVjb2xvchgDIAIoCzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJUG9pbnQz", 
            "UgVjb2xvchI2ChZsaWZldGltZUluTWlsbGlzZWNvbmRzGAQgAigEUhZsaWZl", 
            "dGltZUluTWlsbGlzZWNvbmRzEhAKA2FkZBgFIAIoCFIDYWRkIvwBCh1OZXRN", 
            "ZXNzYWdlUmVnaW9uUHJpbWl0aXZlTGluZRIwCgVzdGFydBgBIAIoCzIaLkdh", 
            "emlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSBXN0YXJ0EiwKA2VuZBgCIAIoCzIa", 
            "LkdhemlsbGlvbi5OZXRTdHJ1Y3RQb2ludDNSA2VuZBIxCgVjb2xvchgDIAIo", 
            "CzIbLkdhemlsbGlvbi5OZXRTdHJ1Y3RJUG9pbnQzUgVjb2xvchI2ChZsaWZl", 
            "dGltZUluTWlsbGlzZWNvbmRzGAQgAigEUhZsaWZldGltZUluTWlsbGlzZWNv", 
            "bmRzEhAKA2FkZBgFIAIoCFIDYWRkIqwBChxOZXRNZXNzYWdlTWFya0ZpcnN0", 
            "R2FtZUZyYW1lEjQKFWN1cnJlbnRzZXJ2ZXJnYW1ldGltZRgBIAIoBFIVY3Vy", 
            "cmVudHNlcnZlcmdhbWV0aW1lEjAKE2N1cnJlbnRzZXJ2ZXJnYW1laWQYAiAC", 
            "KARSE2N1cnJlbnRzZXJ2ZXJnYW1laWQSJAoNZ2FtZXN0YXJ0dGltZRgDIAIo", 
            "BFINZ2FtZXN0YXJ0dGltZSIZChdOZXRNZXNzYWdlQmVnaW5FeGl0R2FtZSI3", 
            "ChdOZXRNZXNzYWdlU3lzdGVtTWVzc2FnZRIcCgltZXNzYWdlSWQYASACKAVS", 
            "CW1lc3NhZ2VJZCL1BQofTmV0TWVzc2FnZUFJUGVyZm9ybWFuY2VVSVVwZGF0", 
            "ZRIcCgl0aW1lU2xpY2UYASACKA1SCXRpbWVTbGljZRIuChJudW1BZ2VudHNB", 
            "bGxvY2F0ZWQYAiACKA1SEm51bUFnZW50c0FsbG9jYXRlZBIuChJudW1BZ2Vu", 
            "dHNTaW11bGF0ZWQYAyACKA1SEm51bUFnZW50c1NpbXVsYXRlZBIyChRudW1U", 
            "aGlua3NJblRpbWVTbGljZRgEIAIoDVIUbnVtVGhpbmtzSW5UaW1lU2xpY2US", 
            "QAobbnVtT2N0cmVlUXVlcmllc0luVGltZVNsaWNlGAUgAigNUhtudW1PY3Ry", 
            "ZWVRdWVyaWVzSW5UaW1lU2xpY2USOAoXbnVtTE9TQ2hlY2tzSW5UaW1lU2xp", 
            "Y2UYBiACKA1SF251bUxPU0NoZWNrc0luVGltZVNsaWNlEkgKH251bVZhbGlk", 
            "VGFyZ2V0Q2hlY2tzSW5UaW1lU2xpY2UYByACKA1SH251bVZhbGlkVGFyZ2V0", 
            "Q2hlY2tzSW5UaW1lU2xpY2USRgoebnVtR2FtZUVudGl0eVN3ZWVwc0luVGlt", 
            "ZVNsaWNlGAggAigNUh5udW1HYW1lRW50aXR5U3dlZXBzSW5UaW1lU2xpY2US", 
            "QAobbnVtU2VydmVySGl0Y2hlc0luVGltZVNsaWNlGAkgAigNUhtudW1TZXJ2", 
            "ZXJIaXRjaGVzSW5UaW1lU2xpY2USVAolbnVtT2N0cmVlVmFsaWRUYXJnZXRD", 
            "aGVja3NJblRpbWVTbGljZRgKIAIoDVIlbnVtT2N0cmVlVmFsaWRUYXJnZXRD", 
            "aGVja3NJblRpbWVTbGljZRJMCiFudW1BdmF0YXJPY3RyZWVRdWVyaWVzSW5U", 
            "aW1lU2xpY2UYCyACKA1SIW51bUF2YXRhck9jdHJlZVF1ZXJpZXNJblRpbWVT", 
            "bGljZRIsChFoaXRjaEluZm9TdHJBcnJheRgMIAMoCVIRaGl0Y2hJbmZvU3Ry", 
            "QXJyYXkilwIKGU5ldE1lc3NhZ2VBSURlYnVnVUlVcGRhdGUSIAoLaWRUYXJn", 
            "ZXROUEMYASACKARSC2lkVGFyZ2V0TlBDEiwKEWN1cnJlbnRBY3Rpb25OYW1l", 
            "GAIgAigJUhFjdXJyZW50QWN0aW9uTmFtZRIuChJwcmV2aW91c0FjdGlvbk5h", 
            "bWUYAyACKAlSEnByZXZpb3VzQWN0aW9uTmFtZRIkCg1zZW5zb3J5SW5wdXRz", 
            "GAQgAygJUg1zZW5zb3J5SW5wdXRzEiYKDnByb3BlcnR5U3RyaW5nGAUgAigJ", 
            "Ug5wcm9wZXJ0eVN0cmluZxIsChFwb3dlclJlc3VsdFN0cmluZxgGIAIoCVIR", 
            "cG93ZXJSZXN1bHRTdHJpbmcilwEKIU5ldE1lc3NhZ2VQcm9wZXJ0aWVzRGVi", 
            "dWdVSVVwZGF0ZRImCg5pZFRhcmdldEVudGl0eRgBIAIoBFIOaWRUYXJnZXRF", 
            "bnRpdHkSJgoOcHJvcGVydHlTdHJpbmcYAiACKAlSDnByb3BlcnR5U3RyaW5n", 
            "EiIKDGVudGl0eVN0cmluZxgDIAIoCVIMZW50aXR5U3RyaW5nIncKIU5ldE1l", 
            "c3NhZ2VDb25kaXRpb25zRGVidWdVSVVwZGF0ZRImCg5pZFRhcmdldEVudGl0", 
            "eRgBIAIoBFIOaWRUYXJnZXRFbnRpdHkSKgoQY29uZGl0aW9uc1N0cmluZxgC", 
            "IAIoCVIQY29uZGl0aW9uc1N0cmluZyLJBQodTmV0TWVzc2FnZVBvd2Vyc0Rl", 
            "YnVnVUlVcGRhdGUSJAoNZGVidWdFbnRpdHlJZBgBIAIoBFINZGVidWdFbnRp", 
            "dHlJZBIkCg1hY3RpdmVQb3dlcklkGAIgAigEUg1hY3RpdmVQb3dlcklkEi4K", 
            "EnBlbmRpbmdBY3Rpb25TdGF0ZRgDIAIoBVIScGVuZGluZ0FjdGlvblN0YXRl", 
            "EiYKDnBlbmRpbmdQb3dlcklkGAQgAigEUg5wZW5kaW5nUG93ZXJJZBIoCg9w", 
            "ZW5kaW5nVGFyZ2V0SWQYBSACKARSD3BlbmRpbmdUYXJnZXRJZBJQChVwZW5k", 
            "aW5nVGFyZ2V0UG9zaXRpb24YBiACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0", 
            "UG9pbnQzUhVwZW5kaW5nVGFyZ2V0UG9zaXRpb24SLAoRY29udGludW91c1Bv", 
            "d2VySWQYByACKARSEWNvbnRpbnVvdXNQb3dlcklkEi4KEmNvbnRpbnVvdXNU", 
            "YXJnZXRJZBgIIAIoBFISY29udGludW91c1RhcmdldElkElYKGGNvbnRpbnVv", 
            "dXNUYXJnZXRQb3NpdGlvbhgJIAIoCzIaLkdhemlsbGlvbi5OZXRTdHJ1Y3RQ", 
            "b2ludDNSGGNvbnRpbnVvdXNUYXJnZXRQb3NpdGlvbhJECh1hY3RpdmVQb3dl", 
            "ckxhc3RBY3RpdmF0aW9uVGltZRgKIAIoBFIdYWN0aXZlUG93ZXJMYXN0QWN0", 
            "aXZhdGlvblRpbWUSHgoKaXNJbkNvbWJhdBgLIAIoCFIKaXNJbkNvbWJhdBI4", 
            "ChdzZXJ2ZXJQb3dlclJlc3VsdFN0cmluZxgMIAIoCVIXc2VydmVyUG93ZXJS", 
            "ZXN1bHRTdHJpbmcSMgoUdXNpbmdDb250cm9sbGVySW5wdXQYDSACKAhSFHVz", 
            "aW5nQ29udHJvbGxlcklucHV0IoYBCh5OZXRNZXNzYWdlTWlzc2lvbkRlYnVn", 
            "VUlVcGRhdGUSJgoObWlzc2lvblN0cmluZ3MYASADKAlSDm1pc3Npb25TdHJp", 
            "bmdzEjwKGXJlc2V0VGltZVJlbWFpbmluZ1NlY29uZHMYAiABKA1SGXJlc2V0", 
            "VGltZVJlbWFpbmluZ1NlY29uZHMicwodTmV0TWVzc2FnZURlYnVnRW50aXR5", 
            "UG9zaXRpb24SGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEjYKCHBvc2l0", 
            "aW9uGAIgAigLMhouR2F6aWxsaW9uLk5ldFN0cnVjdFBvaW50M1IIcG9zaXRp", 
            "b24iZAocTmV0TWVzc2FnZVNlcnZlckZyYW1lUHJvZmlsZRImCg5wcm9jZXNz", 
            "aW5nVGltZRgBIAIoDVIOcHJvY2Vzc2luZ1RpbWUSHAoJZnJhbWVUaW1lGAIg", 
            "AigNUglmcmFtZVRpbWUi6gQKFk5ldE1lc3NhZ2VQaW5nUmVzcG9uc2USJAoN", 
            "ZGlzcGxheU91dHB1dBgBIAIoCFINZGlzcGxheU91dHB1dBI0ChVyZXF1ZXN0", 
            "U2VudENsaWVudFRpbWUYAiACKARSFXJlcXVlc3RTZW50Q2xpZW50VGltZRIw", 
            "ChNyZXF1ZXN0U2VudEdhbWVUaW1lGAMgASgEUhNyZXF1ZXN0U2VudEdhbWVU", 
            "aW1lEj4KGnJlcXVlc3ROZXRSZWNlaXZlZEdhbWVUaW1lGAQgASgEUhpyZXF1", 
            "ZXN0TmV0UmVjZWl2ZWRHYW1lVGltZRIqChByZXNwb25zZVNlbmRUaW1lGAUg", 
            "ASgEUhByZXNwb25zZVNlbmRUaW1lEkIKHHJlc3BvbnNlTmV0UmVjZWl2ZUNs", 
            "aWVudFRpbWUYBiABKARSHHJlc3BvbnNlTmV0UmVjZWl2ZUNsaWVudFRpbWUS", 
            "PgoacmVzcG9uc2VOZXRSZWNlaXZlR2FtZVRpbWUYByABKARSGnJlc3BvbnNl", 
            "TmV0UmVjZWl2ZUdhbWVUaW1lEi4KEnNlcnZlclRpY2tmb3JlY2FzdBgIIAEo", 
            "BFISc2VydmVyVGlja2ZvcmVjYXN0ElYKJnJlc3BvbnNlTGF0ZW5jeUJ1ZmZl", 
            "clJlY2VpdmVDbGllbnRUaW1lGAkgASgEUiZyZXNwb25zZUxhdGVuY3lCdWZm", 
            "ZXJSZWNlaXZlQ2xpZW50VGltZRImCg5nYW1lc2VydmVybmFtZRgKIAEoCVIO", 
            "Z2FtZXNlcnZlcm5hbWUSIgoMZnJvbnRlbmRuYW1lGAsgASgJUgxmcm9udGVu", 
            "ZG5hbWUiQgoeTmV0TWVzc2FnZUVudGl0eUVudGVyR2FtZVdvcmxkEiAKC2Fy", 
            "Y2hpdmVEYXRhGAEgAigMUgthcmNoaXZlRGF0YSI2ChxOZXRNZXNzYWdlVGVs", 
            "ZXBvcnRBY2tSZXF1ZXN0EhYKBmFja3NlcRgBIAIoDVIGYWNrc2VxIjMKF05l", 
            "dE1lc3NhZ2VTZXJ2ZXJWZXJzaW9uEhgKB3ZlcnNpb24YASACKAlSB3ZlcnNp", 
            "b24igAEKEk5ldFN0cnVjdEFnZW50U3BlYxIkCg1hZ2VudFByb3RvUmVmGAEg", 
            "AigEUg1hZ2VudFByb3RvUmVmEh4KCmFnZW50TGV2ZWwYAiACKA1SCmFnZW50", 
            "TGV2ZWwSJAoNY3JlZGl0c0Ftb3VudBgDIAIoDVINY3JlZGl0c0Ftb3VudCJe", 
            "ChhOZXRTdHJ1Y3RWZW5kb3JYUFN1bW1hcnkSJgoOdmVuZG9yUHJvdG9SZWYY", 
            "ASACKARSDnZlbmRvclByb3RvUmVmEhoKCHhwQW1vdW50GAIgAigNUgh4cEFt", 
            "b3VudCJgChZOZXRTdHJ1Y3RJdGVtU3BlY1N0YWNrEhQKBWNvdW50GAEgAigN", 
            "UgVjb3VudBIwCgRzcGVjGAIgAigLMhwuR2F6aWxsaW9uLk5ldFN0cnVjdEl0", 
            "ZW1TcGVjUgRzcGVjIvcDChpOZXRTdHJ1Y3RMb290UmVzdWx0U3VtbWFyeRI3", 
            "CgVpdGVtcxgBIAMoCzIhLkdhemlsbGlvbi5OZXRTdHJ1Y3RJdGVtU3BlY1N0", 
            "YWNrUgVpdGVtcxI1CgZhZ2VudHMYAiADKAsyHS5HYXppbGxpb24uTmV0U3Ry", 
            "dWN0QWdlbnRTcGVjUgZhZ2VudHMSGAoHY3JlZGl0cxgDIAMoBVIHY3JlZGl0", 
            "cxIeCgpleHBlcmllbmNlGAQgASgNUgpleHBlcmllbmNlEiAKC3Bvd2VyUG9p", 
            "bnRzGAUgASgNUgtwb3dlclBvaW50cxIgCgtoZWFsdGhCb251cxgGIAEoDVIL", 
            "aGVhbHRoQm9udXMSJgoOZW5kdXJhbmNlQm9udXMYByABKA1SDmVuZHVyYW5j", 
            "ZUJvbnVzEhwKCXJlYWxNb25leRgIIAEoDVIJcmVhbE1vbmV5EiAKC2NvdXBv", 
            "bkNvZGVzGAkgAygDUgtjb3Vwb25Db2RlcxIkCg1jYWxsYmFja05vZGVzGAog", 
            "AygEUg1jYWxsYmFja05vZGVzEhwKCXByb3RvcmVmcxgLIAMoBFIJcHJvdG9y", 
            "ZWZzEj8KCHZlbmRvcnhwGAwgAygLMiMuR2F6aWxsaW9uLk5ldFN0cnVjdFZl", 
            "bmRvclhQU3VtbWFyeVIIdmVuZG9yeHAiegoWTmV0U3RydWN0VmFwb3JpemVk", 
            "SXRlbRIgCgtpdGVtUHJvdG9JZBgBIAEoBFILaXRlbVByb3RvSWQSJAoNcmFy", 
            "aXR5UHJvdG9JZBgCIAEoBFINcmFyaXR5UHJvdG9JZBIYCgdjcmVkaXRzGAMg", 
            "ASgFUgdjcmVkaXRzIoABCh1OZXRNZXNzYWdlVmFwb3JpemVkTG9vdFJlc3Vs", 
            "dBI3CgVpdGVtcxgBIAMoCzIhLkdhemlsbGlvbi5OZXRTdHJ1Y3RWYXBvcml6", 
            "ZWRJdGVtUgVpdGVtcxImCg5zb3VyY2VFbnRpdHlJZBgCIAIoBFIOc291cmNl", 
            "RW50aXR5SWQiSwoTTmV0TWVzc2FnZVNvY2tldEdlbRIeCgpkZXN0SXRlbUlk", 
            "GAEgAigEUgpkZXN0SXRlbUlkEhQKBWdlbUlkGAIgAigEUgVnZW1JZCLmAgoX", 
            "TmV0TWVzc2FnZU1pc3Npb25VcGRhdGUSLgoSbWlzc2lvblByb3RvdHlwZUlk", 
            "GAEgAigEUhJtaXNzaW9uUHJvdG90eXBlSWQSIgoMbWlzc2lvblN0YXRlGAIg", 
            "ASgNUgxtaXNzaW9uU3RhdGUSNgoWbWlzc2lvblN0YXRlRXhwaXJlVGltZRgD", 
            "IAEoBFIWbWlzc2lvblN0YXRlRXhwaXJlVGltZRI/CgdyZXdhcmRzGAQgASgL", 
            "MiUuR2F6aWxsaW9uLk5ldFN0cnVjdExvb3RSZXN1bHRTdW1tYXJ5UgdyZXdh", 
            "cmRzEiIKDHBhcnRpY2lwYW50cxgFIAMoBFIMcGFydGljaXBhbnRzEjIKFHN1", 
            "cHByZXNzTm90aWZpY2F0aW9uGAYgASgIUhRzdXBwcmVzc05vdGlmaWNhdGlv", 
            "bhImCg5zdXNwZW5kZWRTdGF0ZRgHIAEoCFIOc3VzcGVuZGVkU3RhdGUiWAoe", 
            "TmV0U3RydWN0TWlzc2lvbkludGVyYWN0aW9uVGFnEhoKCGVudGl0eUlkGAEg", 
            "AigEUghlbnRpdHlJZBIaCghyZWdpb25JZBgCIAIoBFIIcmVnaW9uSWQiuQQK", 
            "IE5ldE1lc3NhZ2VNaXNzaW9uT2JqZWN0aXZlVXBkYXRlEi4KEm1pc3Npb25Q", 
            "cm90b3R5cGVJZBgBIAIoBFISbWlzc2lvblByb3RvdHlwZUlkEiYKDm9iamVj", 
            "dGl2ZUluZGV4GAIgAigNUg5vYmplY3RpdmVJbmRleBImCg5vYmplY3RpdmVT", 
            "dGF0ZRgDIAEoDVIOb2JqZWN0aXZlU3RhdGUSOgoYb2JqZWN0aXZlU3RhdGVF", 
            "eHBpcmVUaW1lGAQgASgEUhhvYmplY3RpdmVTdGF0ZUV4cGlyZVRpbWUSIgoM", 
            "Y3VycmVudENvdW50GAUgASgNUgxjdXJyZW50Q291bnQSJAoNcmVxdWlyZWRD", 
            "b3VudBgGIAEoDVINcmVxdWlyZWRDb3VudBIqChBmYWlsQ3VycmVudENvdW50", 
            "GAcgASgNUhBmYWlsQ3VycmVudENvdW50EiwKEWZhaWxSZXF1aXJlZENvdW50", 
            "GAggASgNUhFmYWlsUmVxdWlyZWRDb3VudBJZChJpbnRlcmFjdGVkRW50aXRp", 
            "ZXMYCSADKAsyKS5HYXppbGxpb24uTmV0U3RydWN0TWlzc2lvbkludGVyYWN0", 
            "aW9uVGFnUhJpbnRlcmFjdGVkRW50aXRpZXMSMgoUc3VwcHJlc3NOb3RpZmlj", 
            "YXRpb24YCiABKAhSFHN1cHByZXNzTm90aWZpY2F0aW9uEiYKDnN1c3BlbmRl", 
            "ZFN0YXRlGAsgASgIUg5zdXNwZW5kZWRTdGF0ZSKgAgogTmV0TWVzc2FnZU1p", 
            "c3Npb25SZXdhcmRzUmVzcG9uc2USLgoSbWlzc2lvblByb3RvdHlwZUlkGAEg", 
            "AigEUhJtaXNzaW9uUHJvdG90eXBlSWQSJgoOY29uZGl0aW9uSW5kZXgYAiAB", 
            "KA1SDmNvbmRpdGlvbkluZGV4EhoKCGVudGl0eUlkGAMgASgEUghlbnRpdHlJ", 
            "ZBJDCglzaG93SXRlbXMYBCABKAsyJS5HYXppbGxpb24uTmV0U3RydWN0TG9v", 
            "dFJlc3VsdFN1bW1hcnlSCXNob3dJdGVtcxJDCglnaXZlSXRlbXMYBSABKAsy", 
            "JS5HYXppbGxpb24uTmV0U3RydWN0TG9vdFJlc3VsdFN1bW1hcnlSCWdpdmVJ", 
            "dGVtcyJ0Ch5OZXRNZXNzYWdlQ3VycmVudEF2YXRhckNoYW5nZWQSIAoLYXZh", 
            "dGFySW5kZXgYASACKAVSC2F2YXRhckluZGV4EjAKE2xhc3RDdXJyZW50RW50", 
            "aXR5SWQYAiACKARSE2xhc3RDdXJyZW50RW50aXR5SWQiPwobTmV0TWVzc2Fn", 
            "ZU5ld0F2YXRhckFjcXVpcmVkEiAKC3Byb3RvdHlwZUlkGAEgAigEUgtwcm90", 
            "b3R5cGVJZCI/ChtOZXRNZXNzYWdlTmV3VGVhbVVwQWNxdWlyZWQSIAoLcHJv", 
            "dG90eXBlSWQYASACKARSC3Byb3RvdHlwZUlkIlkKFU5ldFN0cnVjdFByZWZl", 
            "dGNoQ2VsbBIWCgZjZWxsSWQYASACKA1SBmNlbGxJZBIoCg9jZWxsUHJvdG90", 
            "eXBlSWQYAiACKARSD2NlbGxQcm90b3R5cGVJZCLCAQoYTmV0TWVzc2FnZVBy", 
            "ZWZldGNoQXNzZXRzEhoKCHByaW9yaXR5GAEgAigNUghwcmlvcml0eRIWCgZh", 
            "c3NldHMYAiADKARSBmFzc2V0cxIeCgpwcm90b3R5cGVzGAMgAygEUgpwcm90", 
            "b3R5cGVzEjYKBWNlbGxzGAQgAygLMiAuR2F6aWxsaW9uLk5ldFN0cnVjdFBy", 
            "ZWZldGNoQ2VsbFIFY2VsbHMSGgoIcmVnaW9uSWQYBSABKARSCHJlZ2lvbklk", 
            "IkYKJE5ldE1lc3NhZ2VQcmVmZXRjaFJlZ2lvbnNGb3JEb3dubG9hZBIeCgpw", 
            "cm90b3R5cGVzGAEgAygEUgpwcm90b3R5cGVzIkwKIE5ldE1lc3NhZ2VRdWVy", 
            "eUlzUmVnaW9uQXZhaWxhYmxlEigKD3JlZ2lvblByb3RvdHlwZRgBIAIoBFIP", 
            "cmVnaW9uUHJvdG90eXBlImoKGk5ldE1lc3NhZ2VTaG93T3ZlcmhlYWRUZXh0", 
            "EhgKB2lkQWdlbnQYASACKARSB2lkQWdlbnQSFgoGaWRUZXh0GAIgAigEUgZp", 
            "ZFRleHQSGgoIZHVyYXRpb24YAyACKAJSCGR1cmF0aW9uIlUKG05ldE1lc3Nh", 
            "Z2VTaG93WFBBd2FyZGVkVGV4dBIYCgdhZ2VudElkGAEgAigEUgdhZ2VudElk", 
            "EhwKCXhwQXdhcmRlZBgCIAIoA1IJeHBBd2FyZGVkIi8KF05ldE1lc3NhZ2VB", 
            "SVRvZ2dsZVN0YXRlEhQKBXN0YXRlGAEgAigIUgVzdGF0ZSIzChtOZXRNZXNz", 
            "YWdlRGFtYWdlVG9nZ2xlU3RhdGUSFAoFc3RhdGUYASACKAhSBXN0YXRlIj8K", 
            "J05ldE1lc3NhZ2VEeW5hbWljQ29tYmF0TGV2ZWxUb2dnbGVTdGF0ZRIUCgVz", 
            "dGF0ZRgBIAIoCFIFc3RhdGUiowEKJU5ldE1lc3NhZ2VNYXRjaFRlYW1Sb3N0", 
            "ZXJOb3RpZmljYXRpb24SKgoQbWV0YUdhbWVFbnRpdHlJZBgBIAIoBFIQbWV0", 
            "YUdhbWVFbnRpdHlJZBIoCg90ZWFtUHJvdG90eXBlSWQYAiACKARSD3RlYW1Q", 
            "cm90b3R5cGVJZBIkCg1wbGF5ZXJEYkd1aWRzGAMgAygEUg1wbGF5ZXJEYkd1", 
            "aWRzIm0KI05ldE1lc3NhZ2VNYXRjaFRlYW1TaXplTm90aWZpY2F0aW9uEioK", 
            "EG1ldGFHYW1lRW50aXR5SWQYASACKARSEG1ldGFHYW1lRW50aXR5SWQSGgoI", 
            "dGVhbVNpemUYAiACKA1SCHRlYW1TaXplIpQBChxOZXRNZXNzYWdlQ2hhdEZy", 
            "b21HYW1lU3lzdGVtEiYKDnNvdXJjZVN0cmluZ0lkGAEgAigEUg5zb3VyY2VT", 
            "dHJpbmdJZBIoCg9tZXNzYWdlU3RyaW5nSWQYAiACKARSD21lc3NhZ2VTdHJp", 
            "bmdJZBIiCgxhcmdTdHJpbmdJZHMYAyADKARSDGFyZ1N0cmluZ0lkcyLWAQoa", 
            "TmV0TWVzc2FnZUNoYXRGcm9tTWV0YUdhbWUSJgoOc291cmNlU3RyaW5nSWQY", 
            "ASACKARSDnNvdXJjZVN0cmluZ0lkEigKD21lc3NhZ2VTdHJpbmdJZBgCIAIo", 
            "BFIPbWVzc2FnZVN0cmluZ0lkEiAKC3BsYXllck5hbWUxGAMgASgJUgtwbGF5", 
            "ZXJOYW1lMRIgCgtwbGF5ZXJOYW1lMhgEIAEoCVILcGxheWVyTmFtZTISIgoM", 
            "YXJnU3RyaW5nSWRzGAUgAygEUgxhcmdTdHJpbmdJZHMipQEKG05ldE1lc3Nh", 
            "Z2VCcm9hZGNhc3RSYXJlSXRlbRIeCgpwbGF5ZXJOYW1lGAEgAigJUgpwbGF5", 
            "ZXJOYW1lEjAKBGl0ZW0YAiACKAsyHC5HYXppbGxpb24uTmV0U3RydWN0SXRl", 
            "bVNwZWNSBGl0ZW0SNAoIcm9vbVR5cGUYAyACKA4yGC5HYXppbGxpb24uQ2hh", 
            "dFJvb21UeXBlc1IIcm9vbVR5cGUiVwoTTmV0TWVzc2FnZUNoYXRFcnJvchJA", 
            "CgxlcnJvck1lc3NhZ2UYASACKA4yHC5HYXppbGxpb24uQ2hhdEVycm9yTWVz", 
            "c2FnZXNSDGVycm9yTWVzc2FnZSKuAgoWTmV0TWVzc2FnZUNhdGFsb2dJdGVt", 
            "cxIrChF0aW1lc3RhbXBfc2Vjb25kcxgBIAEoA1IQdGltZXN0YW1wU2Vjb25k", 
            "cxI1ChZ0aW1lc3RhbXBfbWljcm9zZWNvbmRzGAIgASgDUhV0aW1lc3RhbXBN", 
            "aWNyb3NlY29uZHMSPQoHZW50cmllcxgDIAMoCzIjLkdhemlsbGlvbi5NYXJ2", 
            "ZWxIZXJvZXNDYXRhbG9nRW50cnlSB2VudHJpZXMSNQoEdXJscxgEIAMoCzIh", 
            "LkdhemlsbGlvbi5NSExvY2FsaXplZENhdGFsb2dVcmxzUgR1cmxzEjoKGGNs", 
            "aWVudG11c3Rkb3dubG9hZGltYWdlcxgFIAEoCFIYY2xpZW50bXVzdGRvd25s", 
            "b2FkaW1hZ2VzIlQKFEF3YXJkQ291cG9uRW50cnlEZXNjEhoKCGxvY2FsZUlk", 
            "GAEgAigJUghsb2NhbGVJZBIgCgtkZXNjcmlwdGlvbhgCIAIoCVILZGVzY3Jp", 
            "cHRpb24i8wEKEEF3YXJkQ291cG9uRW50cnkSGgoIY291cG9uSWQYASACKAlS", 
            "CGNvdXBvbklkEhoKCGRpc2NvdW50GAIgAigCUghkaXNjb3VudBIgCgtjb3Vw", 
            "b25TdGF0ZRgDIAIoCVILY291cG9uU3RhdGUSLAoRZXhwaXJhdGlvbkRhdGVV", 
            "dGMYBCACKANSEWV4cGlyYXRpb25EYXRlVXRjEkMKDGRlc2NyaXB0aW9ucxgF", 
            "IAMoCzIfLkdhemlsbGlvbi5Bd2FyZENvdXBvbkVudHJ5RGVzY1IMZGVzY3Jp", 
            "cHRpb25zEhIKBHdzZWMYBiACKANSBHdzZWMiQgoOQXdhcmRJdGVtRW50cnkS", 
            "FAoFc2t1SWQYASACKANSBXNrdUlkEhoKCHF1YW50aXR5GAIgAigDUghxdWFu", 
            "dGl0eSKFAQokTmV0TWVzc2FnZUdldEN1cnJlbmN5QmFsYW5jZVJlc3BvbnNl", 
            "EigKD2N1cnJlbmN5QmFsYW5jZRgBIAIoA1IPY3VycmVuY3lCYWxhbmNlEjMK", 
            "BmNvdXBvbhgCIAEoCzIbLkdhemlsbGlvbi5Bd2FyZENvdXBvbkVudHJ5UgZj", 
            "b3Vwb24i/QIKJE5ldE1lc3NhZ2VCdXlJdGVtRnJvbUNhdGFsb2dSZXNwb25z", 
            "ZRIeCgpkaWRTdWNjZWVkGAEgAigIUgpkaWRTdWNjZWVkEjYKFmN1cnJlbnRD", 
            "dXJyZW5jeUJhbGFuY2UYAiACKANSFmN1cnJlbnRDdXJyZW5jeUJhbGFuY2US", 
            "IgoMZXJyb3JtZXNzYWdlGAMgASgJUgxlcnJvcm1lc3NhZ2USQAoJZXJyb3Jj", 
            "b2RlGAQgAigOMiIuR2F6aWxsaW9uLkJ1eUl0ZW1SZXN1bHRFcnJvckNvZGVz", 
            "UgllcnJvcmNvZGUSFAoFc2t1SWQYBSACKANSBXNrdUlkEiQKDWlzV2ViUHVy", 
            "Y2hhc2UYBiABKAhSDWlzV2ViUHVyY2hhc2USJgoOcHJvdG90b3R5cGVJZHMY", 
            "ByADKARSDnByb3RvdG90eXBlSWRzEjMKBmNvdXBvbhgIIAEoCzIbLkdhemls", 
            "bGlvbi5Bd2FyZENvdXBvbkVudHJ5UgZjb3Vwb24isgIKJ05ldE1lc3NhZ2VC", 
            "dXlHaWZ0Rm9yT3RoZXJQbGF5ZXJSZXNwb25zZRIeCgpkaWRTdWNjZWVkGAEg", 
            "AigIUgpkaWRTdWNjZWVkEjYKFmN1cnJlbnRDdXJyZW5jeUJhbGFuY2UYAiAB", 
            "KANSFmN1cnJlbnRDdXJyZW5jeUJhbGFuY2USIgoMZXJyb3JtZXNzYWdlGAMg", 
            "ASgJUgxlcnJvcm1lc3NhZ2USQAoJZXJyb3Jjb2RlGAQgAigOMiIuR2F6aWxs", 
            "aW9uLkJ1eUl0ZW1SZXN1bHRFcnJvckNvZGVzUgllcnJvcmNvZGUSFAoFc2t1", 
            "aWQYBSABKANSBXNrdWlkEjMKBmNvdXBvbhgGIAEoCzIbLkdhemlsbGlvbi5B", 
            "d2FyZENvdXBvbkVudHJ5UgZjb3Vwb24iswEKJE5ldE1lc3NhZ2VHcmFudEdU", 
            "b1BsYXllck5vdGlmaWNhdGlvbhIeCgpkaWRTdWNjZWVkGAEgAigIUgpkaWRT", 
            "dWNjZWVkEjYKFmN1cnJlbnRDdXJyZW5jeUJhbGFuY2UYAiACKANSFmN1cnJl", 
            "bnRDdXJyZW5jeUJhbGFuY2USMwoGY291cG9uGAMgASgLMhsuR2F6aWxsaW9u", 
            "LkF3YXJkQ291cG9uRW50cnlSBmNvdXBvbiJWCiBOZXRNZXNzYWdlUHVyY2hh", 
            "c2VVbmxvY2tSZXNwb25zZRIyChRwdXJjaGFzZVVubG9ja1Jlc3VsdBgBIAIo", 
            "DVIUcHVyY2hhc2VVbmxvY2tSZXN1bHQiQAoiTmV0TWVzc2FnZUVudGl0eVBy", 
            "ZXZpZXdlck5ld1RhcmdldBIaCghlbnRpdHlJZBgBIAIoBFIIZW50aXR5SWQi", 
            "kgIKI05ldE1lc3NhZ2VSZW1vdGVNaXNzaW9uTm90aWZpY2F0aW9uEiwKEWVu", 
            "dGl0eVByb3RvdHlwZUlkGAEgASgEUhFlbnRpdHlQcm90b3R5cGVJZBIuChJk", 
            "aWFsb2dUZXh0U3RyaW5nSWQYAiACKARSEmRpYWxvZ1RleHRTdHJpbmdJZBIu", 
            "ChJtaXNzaW9uUHJvdG90eXBlSWQYAyACKARSEm1pc3Npb25Qcm90b3R5cGVJ", 
            "ZBIuChJpY29uUGF0aE92ZXJyaWRlSWQYBCABKARSEmljb25QYXRoT3ZlcnJp", 
            "ZGVJZBItChB2b1RyaWdnZXJBc3NldElkGAUgASgEOgEwUhB2b1RyaWdnZXJB", 
            "c3NldElkIrIBCiJOZXRNZXNzYWdlTWV0YUdhbWVJbmZvTm90aWZpY2F0aW9u", 
            "EiwKEWVudGl0eVByb3RvdHlwZUlkGAEgAigEUhFlbnRpdHlQcm90b3R5cGVJ", 
            "ZBIuChJkaWFsb2dUZXh0U3RyaW5nSWQYAiACKARSEmRpYWxvZ1RleHRTdHJp", 
            "bmdJZBIuChJpY29uUGF0aE92ZXJyaWRlSWQYAyACKARSEmljb25QYXRoT3Zl", 
            "cnJpZGVJZCIpCidOZXRNZXNzYWdlQ2xlYXJNZXRhR2FtZUluZm9Ob3RpZmlj", 
            "YXRpb24iTwofTmV0TWVzc2FnZVVJTm90aWZpY2F0aW9uTWVzc2FnZRIsChF1", 
            "aU5vdGlmaWNhdGlvblJlZhgBIAIoBFIRdWlOb3RpZmljYXRpb25SZWYiHQob", 
            "TmV0TWVzc2FnZVNob3dQdlBTY29yZWJvYXJkIv0BChdOZXRNZXNzYWdlU3Rh", 
            "cnRQdlBUaW1lchIcCglzdGFydFRpbWUYASACKA1SCXN0YXJ0VGltZRIYCgdl", 
            "bmRUaW1lGAIgAigNUgdlbmRUaW1lEiYKDmxvd1RpbWVXYXJuaW5nGAMgAigN", 
            "Ug5sb3dUaW1lV2FybmluZxIwChNjcml0aWNhbFRpbWVXYXJuaW5nGAQgAigN", 
            "UhNjcml0aWNhbFRpbWVXYXJuaW5nEh4KCm1ldGFHYW1lSWQYBSACKARSCm1l", 
            "dGFHYW1lSWQSMAoTbGFiZWxPdmVycmlkZVRleHRJZBgGIAIoBFITbGFiZWxP", 
            "dmVycmlkZVRleHRJZCI4ChZOZXRNZXNzYWdlU3RvcFB2UFRpbWVyEh4KCm1l", 
            "dGFHYW1lSWQYASACKARSCm1ldGFHYW1lSWQiewohTmV0TWVzc2FnZVNldERp", 
            "ZmZpY3VsdHlUaHJlc2hvbGRzEioKEHdhcm5pbmdUaHJlc2hvbGQYASACKA1S", 
            "EHdhcm5pbmdUaHJlc2hvbGQSKgoQZmFpbHVyZVRocmVzaG9sZBgCIAIoDVIQ", 
            "ZmFpbHVyZVRocmVzaG9sZCI8Ch5OZXRNZXNzYWdlU2V0VUlUcmFja2VkRW50", 
            "aXR5SWQSGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkIk4KFk5ldE1lc3Nh", 
            "Z2VTZXRUaW1lclRleHQSIAoLdGltZXJUZXh0SWQYASACKARSC3RpbWVyVGV4", 
            "dElkEhIKBGFyZzEYAyABKANSBGFyZzEicQoVTmV0TWVzc2FnZVNldE1vZGVU", 
            "ZXh0Eh4KCm1vZGVUZXh0SWQYASACKARSCm1vZGVUZXh0SWQSGAoHbW9kZVJl", 
            "ZhgCIAIoBFIHbW9kZVJlZhIeCgptZXRhR2FtZUlkGAMgAigEUgptZXRhR2Ft", 
            "ZUlkIjoKFk5ldE1lc3NhZ2VTZXRFeHRyYVRleHQSIAoLZXh0cmFUZXh0SWQY", 
            "ASACKARSC2V4dHJhVGV4dElkIukBChdOZXRNZXNzYWdlQmFubmVyTWVzc2Fn", 
            "ZRIeCgpiYW5uZXJUZXh0GAEgAigEUgpiYW5uZXJUZXh0EhwKCXRleHRTdHls", 
            "ZRgCIAIoBFIJdGV4dFN0eWxlEiIKDHRpbWVUb0xpdmVNUxgDIAIoDVIMdGlt", 
            "ZVRvTGl2ZU1TEiIKDG1lc3NhZ2VTdHlsZRgEIAIoDVIMbWVzc2FnZVN0eWxl", 
            "Eh4KCmRvTm90UXVldWUYBSACKAhSCmRvTm90UXVldWUSKAoPc2hvd0ltbWVk", 
            "aWF0ZWx5GAYgAigIUg9zaG93SW1tZWRpYXRlbHkiRwoVTmV0TWVzc2FnZUhV", 
            "RFR1dG9yaWFsEi4KEmh1ZFR1dG9yaWFsUHJvdG9JZBgBIAIoBFISaHVkVHV0", 
            "b3JpYWxQcm90b0lkIjwKIE5ldE1lc3NhZ2VSZWdpb25BdmF0YXJTd2FwVXBk", 
            "YXRlEhgKB2VuYWJsZWQYASACKAhSB2VuYWJsZWQiQgomTmV0TWVzc2FnZVJl", 
            "Z2lvblJlc3RyaWN0ZWRSb3N0ZXJVcGRhdGUSGAoHZW5hYmxlZBgBIAIoCFIH", 
            "ZW5hYmxlZCJMChpOZXRNZXNzYWdlVGVhbVNlbGVjdERpYWxvZxIuChJwdWJs", 
            "aWNFdmVudFByb3RvSWQYASACKARSEnB1YmxpY0V2ZW50UHJvdG9JZCJ9Ch1O", 
            "ZXRNZXNzYWdlQUlBZ2dyb05vdGlmaWNhdGlvbhIqChBiYW5uZXJNZXNzYWdl", 
            "UmVmGAEgAigEUhBiYW5uZXJNZXNzYWdlUmVmEhQKBWFpUmVmGAIgAigEUgVh", 
            "aVJlZhIaCghwbGF5ZXJJZBgDIAIoBFIIcGxheWVySWQifgokTmV0TWVzc2Fn", 
            "ZUFJVGFyZ2V0Q2hhbmdlTm90aWZpY2F0aW9uEiAKC25ld1RhcmdldGlkGAEg", 
            "AigEUgtuZXdUYXJnZXRpZBIgCgtvbGRUYXJnZXRpZBgCIAIoBFILb2xkVGFy", 
            "Z2V0aWQSEgoEYWlJZBgDIAIoBFIEYWlJZCKQAgobTmV0TWVzc2FnZVN0b3J5", 
            "Tm90aWZpY2F0aW9uEjAKE2Rpc3BsYXlUZXh0U3RyaW5nSWQYASACKARSE2Rp", 
            "c3BsYXlUZXh0U3RyaW5nSWQSPAoZc3BlYWtpbmdFbnRpdHlQcm90b3R5cGVJ", 
            "ZBgCIAEoBFIZc3BlYWtpbmdFbnRpdHlQcm90b3R5cGVJZBIiCgx0aW1lVG9M", 
            "aXZlTVMYAyACKA1SDHRpbWVUb0xpdmVNUxItChB2b1RyaWdnZXJBc3NldElk", 
            "GAQgAigEOgEwUhB2b1RyaWdnZXJBc3NldElkEi4KEm1pc3Npb25Qcm90b3R5", 
            "cGVJZBgFIAEoBFISbWlzc2lvblByb3RvdHlwZUlkIt8DChdOZXRNZXNzYWdl", 
            "U3luY1RpbWVSZXBseRIuChJnYW1lVGltZUNsaWVudFNlbnQYASACKANSEmdh", 
            "bWVUaW1lQ2xpZW50U2VudBI2ChZnYW1lVGltZVNlcnZlclJlY2VpdmVkGAIg", 
            "AigDUhZnYW1lVGltZVNlcnZlclJlY2VpdmVkEi4KEmdhbWVUaW1lU2VydmVy", 
            "U2VudBgDIAIoA1ISZ2FtZVRpbWVTZXJ2ZXJTZW50Ei4KEmRhdGVUaW1lQ2xp", 
            "ZW50U2VudBgEIAIoA1ISZGF0ZVRpbWVDbGllbnRTZW50EjYKFmRhdGVUaW1l", 
            "U2VydmVyUmVjZWl2ZWQYBSACKANSFmRhdGVUaW1lU2VydmVyUmVjZWl2ZWQS", 
            "LgoSZGF0ZVRpbWVTZXJ2ZXJTZW50GAYgAigDUhJkYXRlVGltZVNlcnZlclNl", 
            "bnQSHAoJZGlhbGF0aW9uGAcgAigCUglkaWFsYXRpb24SOgoYZ2FtZXRpbWVE", 
            "aWFsYXRpb25TdGFydGVkGAggAigDUhhnYW1ldGltZURpYWxhdGlvblN0YXJ0", 
            "ZWQSOgoYZGF0ZXRpbWVEaWFsYXRpb25TdGFydGVkGAkgAigDUhhkYXRldGlt", 
            "ZURpYWxhdGlvblN0YXJ0ZWQiewoZTmV0TWVzc2FnZUluaXRpYWxUaW1lU3lu", 
            "YxIuChJnYW1lVGltZVNlcnZlclNlbnQYASACKANSEmdhbWVUaW1lU2VydmVy", 
            "U2VudBIuChJkYXRlVGltZVNlcnZlclNlbnQYAiACKANSEmRhdGVUaW1lU2Vy", 
            "dmVyU2VudCJgCipOZXRNZXNzYWdlU2VsZWN0U3RhcnRpbmdBdmF0YXJGb3JO", 
            "ZXdQbGF5ZXISMgoUc2hvd09wZW5pbmdDaW5lbWF0aWMYASACKAhSFHNob3dP", 
            "cGVuaW5nQ2luZW1hdGljIiAKHk5ldE1lc3NhZ2VTaG93S2lvc2tTdGFydFNj", 
            "cmVlbiJNChdOZXRNZXNzYWdlSW52ZW50b3J5RnVsbBIaCghwbGF5ZXJJRBgB", 
            "IAIoBFIIcGxheWVySUQSFgoGaXRlbUlEGAIgAigEUgZpdGVtSUQiHwodTmV0", 
            "TWVzc2FnZVVubG9hZFBhY2thZ2VzU3RhcnQiHQobTmV0TWVzc2FnZVVubG9h", 
            "ZFBhY2thZ2VzRW5kIlUKGU5ldE1lc3NhZ2VGb3JjZURpc2Nvbm5lY3QSOAoG", 
            "cmVhc29uGAEgAigOMiAuR2F6aWxsaW9uLkZvcmNlRGlzY29ubmVjdFJlYXNv", 
            "blIGcmVhc29uIi8KEU5ldE1lc3NhZ2VMZXZlbFVwEhoKCGVudGl0eUlEGAEg", 
            "AigEUghlbnRpdHlJRCJgChhOZXRNZXNzYWdlT21lZ2FQb2ludEdhaW4SKAoP", 
            "bnVtUG9pbnRzR2FpbmVkGAEgAigNUg9udW1Qb2ludHNHYWluZWQSGgoIYXZh", 
            "dGFySWQYAiACKARSCGF2YXRhcklkImMKF05ldE1lc3NhZ2VWZW5kb3JMZXZl", 
            "bFVwEiwKEXZlbmRvclR5cGVQcm90b0lkGAEgAigEUhF2ZW5kb3JUeXBlUHJv", 
            "dG9JZBIaCgh2ZW5kb3JJRBgCIAIoBFIIdmVuZG9ySUQiRwoXTmV0TWVzc2Fn", 
            "ZVZlbmRvclJlZnJlc2gSLAoRdmVuZG9yVHlwZVByb3RvSWQYASACKARSEXZl", 
            "bmRvclR5cGVQcm90b0lkIhsKGU5ldE1lc3NhZ2VDcmFmdGluZ1N1Y2Nlc3Mi", 
            "QwoZTmV0TWVzc2FnZUNyYWZ0aW5nRmFpbHVyZRImCg5jcmFmdGluZ1Jlc3Vs", 
            "dBgBIAIoDVIOY3JhZnRpbmdSZXN1bHQiXgoaTmV0TWVzc2FnZVBsYXlQb3dl", 
            "clZpc3VhbHMSGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEiQKDXBvd2Vy", 
            "QXNzZXRSZWYYAiACKARSDXBvd2VyQXNzZXRSZWYiTgoaTmV0TWVzc2FnZVdh", 
            "eXBvaW50VW5sb2NrZWQSMAoTd2F5cG9pbnRQcm90b3R5cGVJRBgBIAIoBFIT", 
            "d2F5cG9pbnRQcm90b3R5cGVJRCK1AQocTmV0TWVzc2FnZVJlcGxpY2F0aW9u", 
            "QXJjaGl2ZRIkCg1yZXBsaWNhdGlvbklkGAEgAigEUg1yZXBsaWNhdGlvbklk", 
            "EisKD2FyY2hpdmVEYXRhVHlwZRgCIAEoDToBMFIPYXJjaGl2ZURhdGFUeXBl", 
            "EiAKC2FyY2hpdmVEYXRhGAMgAigMUgthcmNoaXZlRGF0YRIgCgtkZWJ1Z3N0", 
            "cmluZxgEIAEoCVILZGVidWdzdHJpbmciewoVTmV0TWVzc2FnZVNldFByb3Bl", 
            "cnR5EiQKDXJlcGxpY2F0aW9uSWQYASACKARSDXJlcGxpY2F0aW9uSWQSHgoK", 
            "cHJvcGVydHlJZBgCIAIoBFIKcHJvcGVydHlJZBIcCgl2YWx1ZUJpdHMYAyAC", 
            "KARSCXZhbHVlQml0cyJgChhOZXRNZXNzYWdlUmVtb3ZlUHJvcGVydHkSJAoN", 
            "cmVwbGljYXRpb25JZBgBIAIoBFINcmVwbGljYXRpb25JZBIeCgpwcm9wZXJ0", 
            "eUlkGAIgAigEUgpwcm9wZXJ0eUlkInAKIk5ldE1lc3NhZ2VQdlBTY29yZVNj", 
            "b3JlVXBkYXRlRW50cnkSGgoIY2F0ZWdvcnkYASACKA1SCGNhdGVnb3J5EhYK", 
            "Bml2YWx1ZRgCIAEoBVIGaXZhbHVlEhYKBmZ2YWx1ZRgDIAEoAlIGZnZhbHVl", 
            "Is0BCh1OZXRNZXNzYWdlUHZQU2NvcmVQbGF5ZXJOZXdJZBIgCgtwdnBFbnRp", 
            "dHlJZBgBIAIoBFILcHZwRW50aXR5SWQSIgoMcGxheWVyRGJHdWlkGAIgAigE", 
            "UgxwbGF5ZXJEYkd1aWQSHgoKcGxheWVyTmFtZRgDIAIoCVIKcGxheWVyTmFt", 
            "ZRIgCgt0ZWFtUHJvdG9JZBgEIAIoBFILdGVhbVByb3RvSWQSJAoNYXZhdGFy", 
            "UHJvdG9JZBgFIAIoBFINYXZhdGFyUHJvdG9JZCKMAQoiTmV0TWVzc2FnZVB2", 
            "UFNjb3JlUGxheWVyVGVhbUNoYW5nZRIgCgtwdnBFbnRpdHlJZBgBIAIoBFIL", 
            "cHZwRW50aXR5SWQSIgoMcGxheWVyRGJHdWlkGAIgAigEUgxwbGF5ZXJEYkd1", 
            "aWQSIAoLdGVhbVByb3RvSWQYAyACKARSC3RlYW1Qcm90b0lkIq8BCh5OZXRN", 
            "ZXNzYWdlUHZQU2NvcmVQbGF5ZXJVcGRhdGUSIAoLcHZwRW50aXR5SWQYASAC", 
            "KARSC3B2cEVudGl0eUlkEiIKDHBsYXllckRiR3VpZBgCIAIoBFIMcGxheWVy", 
            "RGJHdWlkEkcKB3VwZGF0ZXMYAyADKAsyLS5HYXppbGxpb24uTmV0TWVzc2Fn", 
            "ZVB2UFNjb3JlU2NvcmVVcGRhdGVFbnRyeVIHdXBkYXRlcyI4ChpOZXRNZXNz", 
            "YWdlVHJhbnNpdGlvblVwZGF0ZRIaCghpZEVudGl0eRgBIAIoBFIIaWRFbnRp", 
            "dHkiOAoaTmV0TWVzc2FnZUF2YXRhck5hbWVDaGFuZ2USGgoIaWRFbnRpdHkY", 
            "ASACKARSCGlkRW50aXR5InkKH05ldE1lc3NhZ2VNaXNzaW9uSW50ZXJhY3RS", 
            "ZXBlYXQSJgoOdGFyZ2V0RW50aXR5SWQYASACKARSDnRhcmdldEVudGl0eUlk", 
            "Ei4KEm1pc3Npb25Qcm90b3R5cGVJZBgCIAIoBFISbWlzc2lvblByb3RvdHlw", 
            "ZUlkIiIKIE5ldE1lc3NhZ2VNaXNzaW9uSW50ZXJhY3RSZWxlYXNlIjoKFk5l", 
            "dE1lc3NhZ2VBZGRDb25kaXRpb24SIAoLYXJjaGl2ZURhdGEYASACKAxSC2Fy", 
            "Y2hpdmVEYXRhIkkKGU5ldE1lc3NhZ2VEZWxldGVDb25kaXRpb24SGgoIaWRF", 
            "bnRpdHkYASACKARSCGlkRW50aXR5EhAKA2tleRgCIAIoBFIDa2V5ImEKGU5l", 
            "dE1lc3NhZ2VFbmFibGVDb25kaXRpb24SGgoIaWRFbnRpdHkYASACKARSCGlk", 
            "RW50aXR5EhAKA2tleRgCIAIoBFIDa2V5EhYKBmVuYWJsZRgDIAIoCFIGZW5h", 
            "YmxlIo4BCiJOZXRNZXNzYWdlQ2hhbmdlQ29uZGl0aW9uUGF1c2VUaW1lEhoK", 
            "CGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIQCgNrZXkYAiACKARSA2tleRIc", 
            "CglwYXVzZVRpbWUYAyACKARSCXBhdXNlVGltZRIcCglzdGFydFRpbWUYBCAC", 
            "KARSCXN0YXJ0VGltZSKLAQohTmV0TWVzc2FnZUNoYW5nZUNvbmRpdGlvbkR1", 
            "cmF0aW9uEhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRIQCgNrZXkYAiAC", 
            "KARSA2tleRIaCghkdXJhdGlvbhgDIAIoA1IIZHVyYXRpb24SHAoJc3RhcnRU", 
            "aW1lGAQgAigEUglzdGFydFRpbWUiuwEKK05ldE1lc3NhZ2VBYmlsaXR5U2xv", 
            "dFRvQWJpbGl0eUJhckZyb21TZXJ2ZXISGgoIYXZhdGFySWQYASACKARSCGF2", 
            "YXRhcklkEiYKDnByb3RvdHlwZVJlZklkGAIgAigEUg5wcm90b3R5cGVSZWZJ", 
            "ZBIeCgpzbG90TnVtYmVyGAMgAigNUgpzbG90TnVtYmVyEigKD2tleU1hcHBp", 
            "bmdJbmRleBgEIAIoDVIPa2V5TWFwcGluZ0luZGV4IpcBCi9OZXRNZXNzYWdl", 
            "QWJpbGl0eVVuc2xvdEZyb21BYmlsaXR5QmFyRnJvbVNlcnZlchIaCghhdmF0", 
            "YXJJZBgBIAIoBFIIYXZhdGFySWQSKAoPa2V5TWFwcGluZ0luZGV4GAIgAigN", 
            "Ug9rZXlNYXBwaW5nSW5kZXgSHgoKc2xvdE51bWJlchgDIAIoDVIKc2xvdE51", 
            "bWJlciKNAQorTmV0TWVzc2FnZUFiaWxpdHlTd2FwSW5BYmlsaXR5QmFyRnJv", 
            "bVNlcnZlchIaCghhdmF0YXJJZBgBIAIoBFIIYXZhdGFySWQSIAoLc2xvdE51", 
            "bWJlckEYAiACKA1SC3Nsb3ROdW1iZXJBEiAKC3Nsb3ROdW1iZXJCGAMgAigN", 
            "UgtzbG90TnVtYmVyQiLmAQogTmV0TWVzc2FnZUFzc2lnbkhvdGtleUZyb21T", 
            "ZXJ2ZXISGgoIYXZhdGFySWQYASACKARSCGF2YXRhcklkEiYKDnByb3RvdHlw", 
            "ZVJlZklkGAIgAigEUg5wcm90b3R5cGVSZWZJZBIoCg9rZXlNYXBwaW5nSW5k", 
            "ZXgYAyACKA1SD2tleU1hcHBpbmdJbmRleBIeCgpzbG90TnVtYmVyGAQgAigN", 
            "UgpzbG90TnVtYmVyEjQKFWRlc3RpbmF0aW9uU2xvdE51bWJlchgFIAIoDVIV", 
            "ZGVzdGluYXRpb25TbG90TnVtYmVyIooBCiJOZXRNZXNzYWdlVW5hc3NpZ25I", 
            "b3RrZXlGcm9tU2VydmVyEhoKCGF2YXRhcklkGAEgAigEUghhdmF0YXJJZBIo", 
            "Cg9rZXlNYXBwaW5nSW5kZXgYAiACKA1SD2tleU1hcHBpbmdJbmRleBIeCgpz", 
            "bG90TnVtYmVyGAMgAigNUgpzbG90TnVtYmVyIpICCiROZXRNZXNzYWdlUG93", 
            "ZXJDb2xsZWN0aW9uQXNzaWduUG93ZXISGgoIZW50aXR5SWQYASACKARSCGVu", 
            "dGl0eUlkEiIKDHBvd2VyUHJvdG9JZBgCIAIoBFIMcG93ZXJQcm90b0lkEhwK", 
            "CXBvd2VyUmFuaxgDIAIoBVIJcG93ZXJSYW5rEiYKDmNoYXJhY3RlckxldmVs", 
            "GAQgAigFUg5jaGFyYWN0ZXJMZXZlbBIgCgtjb21iYXRMZXZlbBgFIAIoBVIL", 
            "Y29tYmF0TGV2ZWwSHAoJaXRlbUxldmVsGAYgAigFUglpdGVtTGV2ZWwSJAoN", 
            "aXRlbVZhcmlhdGlvbhgHIAIoAlINaXRlbVZhcmlhdGlvbiJoCh9OZXRNZXNz", 
            "YWdlQXNzaWduUG93ZXJDb2xsZWN0aW9uEkUKBXBvd2VyGAEgAygLMi8uR2F6", 
            "aWxsaW9uLk5ldE1lc3NhZ2VQb3dlckNvbGxlY3Rpb25Bc3NpZ25Qb3dlclIF", 
            "cG93ZXIiaAomTmV0TWVzc2FnZVBvd2VyQ29sbGVjdGlvblVuYXNzaWduUG93", 
            "ZXISGgoIZW50aXR5SWQYASACKARSCGVudGl0eUlkEiIKDHBvd2VyUHJvdG9J", 
            "ZBgCIAIoBFIMcG93ZXJQcm90b0lkIo0CCh9OZXRNZXNzYWdlVXBkYXRlUG93", 
            "ZXJJbmRleFByb3BzEhoKCGVudGl0eUlkGAEgAigEUghlbnRpdHlJZBIiCgxw", 
            "b3dlclByb3RvSWQYAiACKARSDHBvd2VyUHJvdG9JZBIcCglwb3dlclJhbmsY", 
            "AyACKAVSCXBvd2VyUmFuaxImCg5jaGFyYWN0ZXJMZXZlbBgEIAIoBVIOY2hh", 
            "cmFjdGVyTGV2ZWwSIAoLY29tYmF0TGV2ZWwYBSACKAVSC2NvbWJhdExldmVs", 
            "EhwKCWl0ZW1MZXZlbBgGIAIoBVIJaXRlbUxldmVsEiQKDWl0ZW1WYXJpYXRp", 
            "b24YByACKAJSDWl0ZW1WYXJpYXRpb24iOQobTmV0TWVzc2FnZU9uV2F5cG9p", 
            "bnRVcGRhdGVkEhoKCGlkUGxheWVyGAEgAigEUghpZFBsYXllciJNCidOZXRN", 
            "ZXNzYWdlSW50ZXJuYWxSZXBvcnRQbGF5ZXJMb2FkRXJyb3ISIgoMc2VydmVy", 
            "UmVwb3J0GAEgAigJUgxzZXJ2ZXJSZXBvcnQidgoSTWVzc2FnZVJlcG9ydEVu", 
            "dHJ5EiAKC21lc3NhZ2VOYW1lGAEgAigJUgttZXNzYWdlTmFtZRIeCgp0b3Rh", 
            "bENvdW50GAIgAigEUgp0b3RhbENvdW50Eh4KCnRvdGFsQnl0ZXMYAyACKARS", 
            "CnRvdGFsQnl0ZXMioAEKF05ldE1lc3NhZ2VNZXNzYWdlUmVwb3J0EjcKB3Jl", 
            "cG9ydHMYASADKAsyHS5HYXppbGxpb24uTWVzc2FnZVJlcG9ydEVudHJ5Ugdy", 
            "ZXBvcnRzEiIKDHJlcG9ydFNvdXJjZRgCIAIoDVIMcmVwb3J0U291cmNlEigK", 
            "D3JlcG9ydERpcmVjdGlvbhgDIAIoDVIPcmVwb3J0RGlyZWN0aW9uIjsKF05l", 
            "dE1lc3NhZ2VVcGRhdGVNaW5pTWFwEiAKC2FyY2hpdmVEYXRhGAEgAigMUgth", 
            "cmNoaXZlRGF0YSLCAQokTmV0TWVzc2FnZU1vdmVUb0FsdGVybmF0ZUxhbmRp", 
            "bmdTcG90EhoKCGlkRW50aXR5GAEgAigEUghpZEVudGl0eRJECg9sYW5kaW5n", 
            "UG9zaXRpb24YAiACKAsyGi5HYXppbGxpb24uTmV0U3RydWN0UG9pbnQzUg9s", 
            "YW5kaW5nUG9zaXRpb24SOAoXbGFuZGluZ1Bvd2VycHJvdG90eXBlSWQYAyAC", 
            "KARSF2xhbmRpbmdQb3dlcnByb3RvdHlwZUlkIjwKGE5ldE1lc3NhZ2VDb25z", 
            "b2xlTWVzc2FnZRIgCgttZXNzYWdlVGV4dBgBIAIoCVILbWVzc2FnZVRleHQi", 
            "gAEKJE5ldE1lc3NhZ2VBdmF0YXJPbktpbGxlZEluZm9PdmVycmlkZRIaCghy", 
            "ZWdpb25JZBgBIAIoBFIIcmVnaW9uSWQSPAoZYXZhdGFyT25LaWxsZWRJbmZv", 
            "UHJvdG9JZBgCIAIoBFIZYXZhdGFyT25LaWxsZWRJbmZvUHJvdG9JZCIzChVO", 
            "ZXRNZXNzYWdlT25SZXN1cnJlY3QSGgoIdGFyZ2V0SWQYASACKARSCHRhcmdl", 
            "dElkImAKHE5ldE1lc3NhZ2VPblJlc3VycmVjdFJlcXVlc3QSGgoIdGFyZ2V0", 
            "SWQYASACKARSCHRhcmdldElkEiQKDXJlc3VycmVjdG9ySWQYAiACKARSDXJl", 
            "c3VycmVjdG9ySWQiOgocTmV0TWVzc2FnZU9uUmVzdXJyZWN0RGVjbGluZRIa", 
            "Cgh0YXJnZXRJZBgBIAIoBFIIdGFyZ2V0SWQiHwodTmV0TWVzc2FnZVJlbG9h", 
            "ZFBhY2thZ2VzU3RhcnQiQQoZTmV0TWVzc2FnZVBsYXlTdG9yeUJhbnRlchIk", 
            "Cg1iYW50ZXJBc3NldElkGAEgAigEUg1iYW50ZXJBc3NldElkIkoKGk5ldE1l", 
            "c3NhZ2VQbGF5VUlTb3VuZFRoZW1lEiwKEXNvdW5kVGhlbWVBc3NldElkGAEg", 
            "AigEUhFzb3VuZFRoZW1lQXNzZXRJZCJNChdOZXRNZXNzYWdlUGxheUtpc21l", 
            "dFNlcRIyChRraXNtZXRTZXFQcm90b3R5cGVJZBgBIAIoBFIUa2lzbWV0U2Vx", 
            "UHJvdG90eXBlSWQiIQofTmV0TWVzc2FnZUdyYWNlZnVsRGlzY29ubmVjdEFj", 
            "ayKRAQoaTmV0TWVzc2FnZUxpdmVUdW5pbmdVcGRhdGUScwoadHVuaW5nVHlw", 
            "ZUtleVZhbHVlU2V0dGluZ3MYASADKAsyMy5HYXppbGxpb24uTmV0U3RydWN0", 
            "TGl2ZVR1bmluZ1NldHRpbmdQcm90b0VudW1WYWx1ZVIadHVuaW5nVHlwZUtl", 
            "eVZhbHVlU2V0dGluZ3Mi0QEKIU5ldE1lc3NhZ2VVcGRhdGVTaXR1YXRpb25h", 
            "bFRhcmdldBIiCgxwb3dlck93bmVySWQYASACKARSDHBvd2VyT3duZXJJZBI4", 
            "ChdzaXR1YXRpb25hbFBvd2VyUHJvdG9JZBgCIAIoBFIXc2l0dWF0aW9uYWxQ", 
            "b3dlclByb3RvSWQSMAoTc2l0dWF0aW9uYWxUYXJnZXRJZBgDIAIoBFITc2l0", 
            "dWF0aW9uYWxUYXJnZXRJZBIcCglhZGRUYXJnZXQYBCACKAhSCWFkZFRhcmdl", 
            "dCIfCh1OZXRNZXNzYWdlQ29uZmlybVN0YXJ0TmV3R2FtZSIdChtOZXRNZXNz", 
            "YWdlT25lVGltZVNuYXBDYW1lcmEi/QEKJk5ldE1lc3NhZ2VNb2RpZnlDb21t", 
            "dW5pdHlNZW1iZXJGYWlsdXJlEi4KEm1lbWJlclRvTW9kaWZ5TmFtZRgBIAIo", 
            "CVISbWVtYmVyVG9Nb2RpZnlOYW1lEkcKC2ZhaWx1cmVDb2RlGAIgAigOMiUu", 
            "R2F6aWxsaW9uLkNvbW11bml0eU1vZGlmeUZhaWx1cmVDb2RlUgtmYWlsdXJl", 
            "Q29kZRIaCghjaXJjbGVJZBgDIAIoBFIIY2lyY2xlSWQSPgoJb3BlcmF0aW9u", 
            "GAQgAigOMiAuR2F6aWxsaW9uLk1vZGlmeUNpcmNsZU9wZXJhdGlvblIJb3Bl", 
            "cmF0aW9uIrYBCh9OZXRNZXNzYWdlTW9kaWZ5Q29tbXVuaXR5TWVtYmVyEkEK", 
            "CWJyb2FkY2FzdBgBIAIoCzIjLkdhemlsbGlvbi5Db21tdW5pdHlNZW1iZXJC", 
            "cm9hZGNhc3RSCWJyb2FkY2FzdBIeCgpwbGF5ZXJOYW1lGAIgASgJUgpwbGF5", 
            "ZXJOYW1lEjAKE3N5c3RlbUNpcmNsZXNCaXRTZXQYAyABKARSE3N5c3RlbUNp", 
            "cmNsZXNCaXRTZXQiVgogTmV0TWVzc2FnZVJlY2VpdmVDb21tdW5pdHlOb3Rp", 
            "ZnkSMgoGbm90aWZ5GAEgAigLMhouR2F6aWxsaW9uLkNvbW11bml0eU5vdGlm", 
            "eVIGbm90aWZ5IrABChxOZXRNZXNzYWdlSXRlbUJpbmRpbmdDaGFuZ2VkEhYK", 
            "Bml0ZW1JZBgBIAIoBFIGaXRlbUlkEiIKDGFjY291bnRCb3VuZBgCIAIoCFIM", 
            "YWNjb3VudEJvdW5kEioKEGNoYXJhY3RlclByb3RvSWQYAyACKARSEGNoYXJh", 
            "Y3RlclByb3RvSWQSKAoPdHJhZGVSZXN0cmljdGVkGAQgASgIUg90cmFkZVJl", 
            "c3RyaWN0ZWQiOgoeTmV0TWVzc2FnZUl0ZW1zSGVsZEZvclJlY292ZXJ5EhgK", 
            "B2l0ZW1JZHMYASADKARSB2l0ZW1JZHMiMQoXTmV0TWVzc2FnZUl0ZW1SZWNv", 
            "dmVyZWQSFgoGaXRlbUlkGAEgAigEUgZpdGVtSWQihQEKKE5ldE1lc3NhZ2VT", 
            "d2l0Y2hUb1BlbmRpbmdOZXdBdmF0YXJGYWlsZWQSGgoIdGFyZ2V0SWQYASAC", 
            "KARSCHRhcmdldElkEj0KBnJlYXNvbhgCIAIoDjIlLkdhemlsbGlvbi5Td2l0", 
            "Y2hUb0F2YXRhckZhaWxlZFJlYXNvblIGcmVhc29uIj8KIU5ldE1lc3NhZ2VD", 
            "b29wU3RhcnRFbnRyYW5jZUZhaWxlZBIaCgh0YXJnZXRJZBgBIAIoBFIIdGFy", 
            "Z2V0SWQiYAoeTmV0TWVzc2FnZUd1aWxkTWVzc2FnZVRvQ2xpZW50Ej4KCG1l", 
            "c3NhZ2VzGAEgAigLMiIuR2F6aWxsaW9uLkd1aWxkTWVzc2FnZVNldFRvQ2xp", 
            "ZW50UghtZXNzYWdlcyLvAQoZTmV0TWVzc2FnZUVudGl0eUd1aWxkSW5mbxIa", 
            "CghlbnRpdHlJZBgBIAIoBFIIZW50aXR5SWQSGAoHZ3VpbGRJZBgCIAIoBFIH", 
            "Z3VpbGRJZBIcCglndWlsZE5hbWUYAyACKAlSCWd1aWxkTmFtZRJECg9ndWls", 
            "ZE1lbWJlcnNoaXAYBCACKA4yGi5HYXppbGxpb24uR3VpbGRNZW1iZXJzaGlw", 
            "Ug9ndWlsZE1lbWJlcnNoaXASOAoXZGVidWdFbnRpdHlTZXJ2ZXJTdHJpbmcY", 
            "BSABKAlSF2RlYnVnRW50aXR5U2VydmVyU3RyaW5nIpkBChROZXRNZXNzYWdl", 
            "TGVhdmVHdWlsZBIYCgdndWlsZElkGAEgAigEUgdndWlsZElkEjMKBnJlYXNv", 
            "bhgCIAIoDjIbLkdhemlsbGlvbi5HdWlsZExlYXZlUmVhc29uUgZyZWFzb24S", 
            "MgoUaW5pdGlhdGluZ1BsYXllck5hbWUYAyACKAlSFGluaXRpYXRpbmdQbGF5", 
            "ZXJOYW1lIk8KHE5ldE1lc3NhZ2VHdWlsZFN5c3RlbU1lc3NhZ2USLwoEY29k", 
            "ZRgBIAIoDjIbLkdhemlsbGlvbi5HdWlsZE1lc3NhZ2VDb2RlUgRjb2RlIkwK", 
            "IE5ldE1lc3NhZ2VSZWdpb25EaWZmaWN1bHR5Q2hhbmdlEigKD2RpZmZpY3Vs", 
            "dHlJbmRleBgBIAIoBFIPZGlmZmljdWx0eUluZGV4Io4BChxOZXRNZXNzYWdl", 
            "TWV0YUdhbWVXYXZlVXBkYXRlEioKEGN1cnJlbnRXYXZlQ291bnQYASACKARS", 
            "EGN1cnJlbnRXYXZlQ291bnQSIgoMbWF4V2F2ZUNvdW50GAIgAigEUgxtYXhX", 
            "YXZlQ291bnQSHgoKbWV0YUdhbWVJZBgDIAIoBFIKbWV0YUdhbWVJZCKgAQoi", 
            "TmV0TWVzc2FnZVB2RUluc3RhbmNlQ3J5c3RhbFVwZGF0ZRIwChNjdXJyZW50", 
            "Q3J5c3RhbENvdW50GAEgAigEUhNjdXJyZW50Q3J5c3RhbENvdW50EigKD21h", 
            "eENyeXN0YWxDb3VudBgCIAIoBFIPbWF4Q3J5c3RhbENvdW50Eh4KCm1ldGFH", 
            "YW1lSWQYAyACKARSCm1ldGFHYW1lSWQicAogTmV0TWVzc2FnZVB2RUluc3Rh", 
            "bmNlRGVhdGhVcGRhdGUSLAoRY3VycmVudERlYXRoQ291bnQYASACKARSEWN1", 
            "cnJlbnREZWF0aENvdW50Eh4KCm1ldGFHYW1lSWQYAiACKARSCm1ldGFHYW1l", 
            "SWQieAomTmV0TWVzc2FnZVB2RUluc3RhbmNlUmVnaW9uU2NvcmVVcGRhdGUS", 
            "LgoSY3VycmVudFJlZ2lvblNjb3JlGAEgAigEUhJjdXJyZW50UmVnaW9uU2Nv", 
            "cmUSHgoKbWV0YUdhbWVJZBgCIAIoBFIKbWV0YUdhbWVJZCLGAQoYTmV0TWVz", 
            "c2FnZU1ldGFHYW1lQmFubmVyEigKD21lc3NhZ2VTdHJpbmdJZBgBIAIoBFIP", 
            "bWVzc2FnZVN0cmluZ0lkEiAKC3BsYXllck5hbWUxGAIgASgJUgtwbGF5ZXJO", 
            "YW1lMRIgCgtwbGF5ZXJOYW1lMhgDIAEoCVILcGxheWVyTmFtZTISIgoMYXJn", 
            "U3RyaW5nSWRzGAQgAygEUgxhcmdTdHJpbmdJZHMSGAoHaW50QXJncxgFIAMo", 
            "A1IHaW50QXJncyKOAQocTmV0TWVzc2FnZVBvc3REaWFsb2dUb0NsaWVudBIa", 
            "CghTZXJ2ZXJJZBgBIAIoBFIIU2VydmVySWQSHgoKcGxheWVyR3VpZBgCIAIo", 
            "BFIKcGxheWVyR3VpZBIyCgZkaWFsb2cYAyACKAsyGi5HYXppbGxpb24uTmV0", 
            "U3RydWN0RGlhbG9nUgZkaWFsb2ciXgogTmV0TWVzc2FnZVJlbW92ZURpYWxv", 
            "Z0Zyb21DbGllbnQSGgoIc2VydmVySWQYASACKARSCHNlcnZlcklkEh4KCnBs", 
            "YXllckd1aWQYAiACKARSCnBsYXllckd1aWQiSQolTmV0TWVzc2FnZUNhbmNl", 
            "bFBlbmRpbmdBY3Rpb25Ub0NsaWVudBIgCgthdmF0YXJJbmRleBgBIAIoBVIL", 
            "YXZhdGFySW5kZXgisAEKH05ldE1lc3NhZ2VSZWN2QWtFdmVudEZyb21FbnRp", 
            "dHkSHAoJYWtFdmVudElkGAEgAigNUglha0V2ZW50SWQSGgoIZW50aXR5SWQY", 
            "AiACKARSCGVudGl0eUlkEhIKBGlzVk8YAyACKAhSBGlzVk8SHAoJZXZlbnRU", 
            "eXBlGAQgAigNUglldmVudFR5cGUSIQoKY29vbGRvd25NUxgFIAEoDToBMFIK", 
            "Y29vbGRvd25NUyI/ChlOZXRNZXNzYWdlU2hvd1R1dG9yaWFsVGlwEiIKDHRp", 
            "cERhdGFSZWZJZBgBIAIoBFIMdGlwRGF0YVJlZklkIqQCCiBOZXRNZXNzYWdl", 
            "TWF0Y2hRdWV1ZVVwZGF0ZUNsaWVudBIeCgpwbGF5ZXJHdWlkGAEgAigEUgpw", 
            "bGF5ZXJHdWlkEiQKDXJlZ2lvblByb3RvSWQYAiACKARSDXJlZ2lvblByb3Rv", 
            "SWQSMgoUcmVnaW9uUmVxdWVzdEdyb3VwSWQYAyACKARSFHJlZ2lvblJlcXVl", 
            "c3RHcm91cElkEh4KCnBsYXllck5hbWUYBCABKAlSCnBsYXllck5hbWUSPgoG", 
            "c3RhdHVzGAUgAigOMiYuR2F6aWxsaW9uLlJlZ2lvblJlcXVlc3RRdWV1ZVVw", 
            "ZGF0ZVZhclIGc3RhdHVzEiYKDnBsYXllcnNJblF1ZXVlGAYgASgNUg5wbGF5", 
            "ZXJzSW5RdWV1ZSJVChdHbG9iYWxFdmVudENyaXRlcmlhRGF0YRIeCgpjcml0", 
            "ZXJpYUlkGAEgAigEUgpjcml0ZXJpYUlkEhoKCHByb2dyZXNzGAIgAigCUghw", 
            "cm9ncmVzcyKxAQofTmV0TWVzc2FnZUdsb2JhbEV2ZW50RGF0YVVwZGF0ZRIY", 
            "CgdldmVudElkGAEgAigEUgdldmVudElkEiQKDXRvdGFsUHJvZ3Jlc3MYAiAC", 
            "KAJSDXRvdGFsUHJvZ3Jlc3MSTgoQY3JpdGVyaWFQcm9ncmVzcxgDIAMoCzIi", 
            "LkdhemlsbGlvbi5HbG9iYWxFdmVudENyaXRlcmlhRGF0YVIQY3JpdGVyaWFQ", 
            "cm9ncmVzcyKSAQomTmV0TWVzc2FnZUdsb2JhbEV2ZW50TGVhZGVyYm9hcmRV", 
            "cGRhdGUSGAoHZXZlbnRJZBgBIAIoBFIHZXZlbnRJZBIsChFsZWFkZXJib2Fy", 
            "ZExlbmd0aBgCIAIoDVIRbGVhZGVyYm9hcmRMZW5ndGgSIAoLcGxheWVyTmFt", 
            "ZXMYAyADKAlSC3BsYXllck5hbWVzIlEKFU5ldE1lc3NhZ2VPcGVuVUlQYW5l", 
            "bBIcCglwYW5lbE5hbWUYASACKAlSCXBhbmVsTmFtZRIaCgh0YWJJbmRleBgC", 
            "IAIoDVIIdGFiSW5kZXgiWAogTmV0TWVzc2FnZVBsYXllck93bnNJdGVtUmVz", 
            "cG9uc2USIAoLaXRlbVByb3RvSWQYASACKARSC2l0ZW1Qcm90b0lkEhIKBG93", 
            "bnMYAiACKAhSBG93bnMieQovTmV0TWVzc2FnZVNob3dTaGFyZUxlZ2VuZGFy", 
            "eU1pc3Npb25Ob3RpZmljYXRpb24SHgoKcGxheWVyTmFtZRgBIAIoCVIKcGxh", 
            "eWVyTmFtZRImCg5taXNzaW9uRGF0YVJlZhgCIAIoBFIObWlzc2lvbkRhdGFS", 
            "ZWYiswEKJU5ldE1lc3NhZ2VTaGFyZUxlZ2VuZGFyeU1pc3Npb25SZXN1bHQS", 
            "HgoKcGxheWVyTmFtZRgBIAIoCVIKcGxheWVyTmFtZRImCg5taXNzaW9uRGF0", 
            "YVJlZhgCIAIoBFIObWlzc2lvbkRhdGFSZWYSQgoGcmVzdWx0GAMgAigOMiou", 
            "R2F6aWxsaW9uLkxlZ2VuZGFyeU1pc3Npb25TaGFyZVJlc3VsdFR5cGVSBnJl", 
            "c3VsdCKKAQoaTmV0TWVzc2FnZVVJU3luY0RhdGFVcGRhdGUSLAoRdWlTeW5j", 
            "RGF0YVByb3RvSWQYASACKARSEXVpU3luY0RhdGFQcm90b0lkEiYKDmNvbnRl", 
            "eHRQcm90b0lkGAIgAigEUg5jb250ZXh0UHJvdG9JZBIWCgZidWZmZXIYAyAC", 
            "KAxSBmJ1ZmZlciKHAgobTmV0TWVzc2FnZVBsYXllclRyYWRlU3RhdHVzEkAK", 
            "CnN0YXR1c0NvZGUYASACKA4yIC5HYXppbGxpb24uUGxheWVyVHJhZGVTdGF0", 
            "dXNDb2RlUgpzdGF0dXNDb2RlEiwKEXBhcnRuZXJQbGF5ZXJOYW1lGAIgAigJ", 
            "UhFwYXJ0bmVyUGxheWVyTmFtZRIgCgtjb25maXJtRmxhZxgDIAIoCFILY29u", 
            "ZmlybUZsYWcSLgoScGFydG5lckNvbmZpcm1GbGFnGAQgAigIUhJwYXJ0bmVy", 
            "Q29uZmlybUZsYWcSJgoOc2VxdWVuY2VOdW1iZXIYBSACKA1SDnNlcXVlbmNl", 
            "TnVtYmVyInIKGk5ldE1lc3NhZ2VVSVN5bmNEYXRhUmVtb3ZlEiwKEXVpU3lu", 
            "Y0RhdGFQcm90b0lkGAEgAigEUhF1aVN5bmNEYXRhUHJvdG9JZBImCg5jb250", 
            "ZXh0UHJvdG9JZBgCIAIoBFIOY29udGV4dFByb3RvSWQiqwcKF0FjaGlldmVt", 
            "ZW50RGF0YWJhc2VEdW1wEkoKIGxvY2FsaXplZEFjaGlldmVtZW50U3RyaW5n", 
            "QnVmZmVyGAEgAigMUiBsb2NhbGl6ZWRBY2hpZXZlbWVudFN0cmluZ0J1ZmZl", 
            "chJeChBhY2hpZXZlbWVudEluZm9zGAIgAygLMjIuR2F6aWxsaW9uLkFjaGll", 
            "dmVtZW50RGF0YWJhc2VEdW1wLkFjaGlldmVtZW50SW5mb1IQYWNoaWV2ZW1l", 
            "bnRJbmZvcxI8ChlhY2hpZXZlbWVudE5ld1RocmVzaG9sZFVTGAMgAigEUhlh", 
            "Y2hpZXZlbWVudE5ld1RocmVzaG9sZFVTGqUFCg9BY2hpZXZlbWVudEluZm8S", 
            "DgoCaWQYASACKA1SAmlkEhgKB2VuYWJsZWQYAiACKAhSB2VuYWJsZWQSGgoI", 
            "cGFyZW50SWQYAyACKA1SCHBhcmVudElkEhIKBG5hbWUYBCACKARSBG5hbWUS", 
            "JAoNaW5Qcm9ncmVzc1N0chgFIAIoBFINaW5Qcm9ncmVzc1N0chIiCgxjb21w", 
            "bGV0ZWRTdHIYBiACKARSDGNvbXBsZXRlZFN0chIcCglyZXdhcmRTdHIYByAC", 
            "KARSCXJld2FyZFN0chIoCg9pY29uUGF0aEFzc2V0SWQYCCACKARSD2ljb25Q", 
            "YXRoQXNzZXRJZBIUCgVzY29yZRgJIAIoDVIFc2NvcmUSIAoLY2F0ZWdvcnlT", 
            "dHIYCiACKARSC2NhdGVnb3J5U3RyEiYKDnN1YkNhdGVnb3J5U3RyGAsgAigE", 
            "Ug5zdWJDYXRlZ29yeVN0chIiCgxkaXNwbGF5T3JkZXIYDCACKAJSDGRpc3Bs", 
            "YXlPcmRlchIiCgx2aXNpYmxlU3RhdGUYDSACKA1SDHZpc2libGVTdGF0ZRIm", 
            "Cg5ldmFsdWF0aW9uVHlwZRgOIAIoDVIOZXZhbHVhdGlvblR5cGUSHAoJZXZl", 
            "bnR0eXBlGA8gAigNUglldmVudHR5cGUSHAoJdGhyZXNob2xkGBAgAigNUgl0", 
            "aHJlc2hvbGQSNgoWZGVwZW5kZW50QWNoaWV2ZW1lbnRJZBgRIAIoDVIWZGVw", 
            "ZW5kZW50QWNoaWV2ZW1lbnRJZBI4Chd1aVByb2dyZXNzRGlzcGxheU9wdGlv", 
            "bhgSIAIoDVIXdWlQcm9ncmVzc0Rpc3BsYXlPcHRpb24SKAoPcHVibGlzaGVk", 
            "RGF0ZVVTGBMgAigEUg9wdWJsaXNoZWREYXRlVVMicQohTmV0TWVzc2FnZUFj", 
            "aGlldmVtZW50RGF0YWJhc2VEdW1wEkwKIWNvbXByZXNzZWRBY2hpZXZlbWVu", 
            "dERhdGFiYXNlRHVtcBgBIAIoDFIhY29tcHJlc3NlZEFjaGlldmVtZW50RGF0", 
            "YWJhc2VEdW1wIo4CCiBOZXRNZXNzYWdlQWNoaWV2ZW1lbnRTdGF0ZVVwZGF0", 
            "ZRJqChFhY2hpZXZlbWVudFN0YXRlcxgBIAMoCzI8LkdhemlsbGlvbi5OZXRN", 
            "ZXNzYWdlQWNoaWV2ZW1lbnRTdGF0ZVVwZGF0ZS5BY2hpZXZlbWVudFN0YXRl", 
            "UhFhY2hpZXZlbWVudFN0YXRlcxIeCgpzaG93cG9wdXBzGAIgAigIUgpzaG93", 
            "cG9wdXBzGl4KEEFjaGlldmVtZW50U3RhdGUSDgoCaWQYASACKA1SAmlkEhQK", 
            "BWNvdW50GAIgAigNUgVjb3VudBIkCg1jb21wbGV0ZWRkYXRlGAMgAigEUg1j", 
            "b21wbGV0ZWRkYXRlIpcBCh5OZXRNZXNzYWdlUGFydHlLaWNrR3JhY2VQZXJp", 
            "b2QSNgoWZXhwaXJlVGltZU1pY3Jvc2Vjb25kcxgBIAIoBFIWZXhwaXJlVGlt", 
            "ZU1pY3Jvc2Vjb25kcxI9CgtsZWF2ZVJlYXNvbhgCIAIoDjIbLkdhemlsbGlv", 
            "bi5Hcm91cExlYXZlUmVhc29uUgtsZWF2ZVJlYXNvbiJ6ChZOZXRNZXNzYWdl", 
            "UmVjZWl2ZWRHaWZ0EhQKBXNrdUlkGAEgAigEUgVza3VJZBIYCgd0cmFuc0lk", 
            "GAIgAigEUgd0cmFuc0lkEhYKBnNlbmRlchgDIAIoCVIGc2VuZGVyEhgKB21l", 
            "c3NhZ2UYBCABKAlSB21lc3NhZ2UiXQorTmV0TWVzc2FnZUFjaGlldmVtZW50", 
            "Q29tcGxldGVkQnlQYXJ0eU1lbWJlchIOCgJpZBgBIAIoDVICaWQSHgoKcGxh", 
            "eWVyTmFtZRgCIAIoCVIKcGxheWVyTmFtZSI0ChhOZXRNZXNzYWdlVmVyaWZ5", 
            "T25DbGllbnQSGAoHbWVzc2FnZRgBIAIoCVIHbWVzc2FnZSJlCiNOZXRNZXNz", 
            "YWdlQ3JlYXRlQW5kT3BlbkZpbGVPbkNsaWVudBIiCgxyZWxhdGl2ZVBhdGgY", 
            "ASACKAlSDHJlbGF0aXZlUGF0aBIaCghjb250ZW50cxgCIAIoCVIIY29udGVu", 
            "dHMiRwoZTmV0TWVzc2FnZUludmVudG9yeUxvYWRlZBIqChBpbnZlbnRvcnlQ", 
            "cm90b0lkGAEgAigEUhBpbnZlbnRvcnlQcm90b0lkIlkKIU5ldE1lc3NhZ2VM", 
            "ZWFkZXJib2FyZFJlcG9ydENsaWVudBI0CgZyZXBvcnQYASACKAsyHC5HYXpp", 
            "bGxpb24uTGVhZGVyYm9hcmRSZXBvcnRSBnJlcG9ydCJYCihOZXRNZXNzYWdl", 
            "TGVhZGVyYm9hcmRDaGVhdFJlc3BvbnNlQ2xpZW50EiwKEWNoZWF0UmVzcG9u", 
            "c2VUZXh0GAEgAigJUhFjaGVhdFJlc3BvbnNlVGV4dCJ/CiNMZWFkZXJib2Fy", 
            "ZEFyY2hpdmVkSW5zdGFuY2VMaXN0RGF0YRIkCg1sZWFkZXJib2FyZElkGAEg", 
            "AigEUg1sZWFkZXJib2FyZElkEjIKFGFyY2hpdmVkSW5zdGFuY2VMaXN0GAIg", 
            "AygEUhRhcmNoaXZlZEluc3RhbmNlTGlzdCLpAQoTTGVhZGVyYm9hcmRJbml0", 
            "RGF0YRIkCg1sZWFkZXJib2FyZElkGAEgAigEUg1sZWFkZXJib2FyZElkElQK", 
            "E2N1cnJlbnRJbnN0YW5jZURhdGEYAiABKAsyIi5HYXppbGxpb24uTGVhZGVy", 
            "Ym9hcmRJbnN0YW5jZURhdGFSE2N1cnJlbnRJbnN0YW5jZURhdGESVgoUYXJj", 
            "aGl2ZWRJbnN0YW5jZUxpc3QYAyADKAsyIi5HYXppbGxpb24uTGVhZGVyYm9h", 
            "cmRJbnN0YW5jZURhdGFSFGFyY2hpdmVkSW5zdGFuY2VMaXN0IocBCjFOZXRN", 
            "ZXNzYWdlTGVhZGVyYm9hcmRBcmNoaXZlZEluc3RhbmNlTGlzdFJlc3BvbnNl", 
            "ElIKDGluc3RhbmNlTGlzdBgBIAMoCzIuLkdhemlsbGlvbi5MZWFkZXJib2Fy", 
            "ZEFyY2hpdmVkSW5zdGFuY2VMaXN0RGF0YVIMaW5zdGFuY2VMaXN0IooBCi5O", 
            "ZXRNZXNzYWdlTGVhZGVyYm9hcmRJbml0aWFsaXplUmVxdWVzdFJlc3BvbnNl", 
            "ElgKF2xlYWRlcmJvYXJkSW5pdERhdGFMaXN0GAEgAygLMh4uR2F6aWxsaW9u", 
            "LkxlYWRlcmJvYXJkSW5pdERhdGFSF2xlYWRlcmJvYXJkSW5pdERhdGFMaXN0", 
            "Ip8CCiBOZXRNZXNzYWdlTGVhZGVyYm9hcmRTdGF0ZUNoYW5nZRIkCg1sZWFk", 
            "ZXJib2FyZElkGAEgAigEUg1sZWFkZXJib2FyZElkEh4KCmluc3RhbmNlSWQY", 
            "AiACKARSCmluc3RhbmNlSWQSNwoIbmV3U3RhdGUYAyACKA4yGy5HYXppbGxp", 
            "b24uTGVhZGVyYm9hcmRTdGF0ZVIIbmV3U3RhdGUSMAoTYWN0aXZhdGlvblRp", 
            "bWVzdGFtcBgEIAIoA1ITYWN0aXZhdGlvblRpbWVzdGFtcBIwChNleHBpcmF0", 
            "aW9uVGltZXN0YW1wGAUgAigDUhNleHBpcmF0aW9uVGltZXN0YW1wEhgKB3Zp", 
            "c2libGUYBiACKAhSB3Zpc2libGUiqwEKHU5ldE1lc3NhZ2VMZWFkZXJib2Fy", 
            "ZFJld2FyZGVkEiQKDWxlYWRlcmJvYXJkSWQYASACKARSDWxlYWRlcmJvYXJk", 
            "SWQSMAoTbGVhZGVyYm9hcmRJbnN0YW5jZRgCIAIoBFITbGVhZGVyYm9hcmRJ", 
            "bnN0YW5jZRIeCgpyZXdhcmRHdWlkGAMgAigEUgpyZXdhcmRHdWlkEhIKBHJh", 
            "bmsYBCACKARSBHJhbmsimQEKG05ldE1lc3NhZ2VHaWZ0SGlzdG9yeVJlc3Vs", 
            "dBI4CgRzZW50GAEgAygLMiQuR2F6aWxsaW9uLkdpZnRIaXN0b3J5Rm9yUGxh", 
            "eWVyRW50cnlSBHNlbnQSQAoIcmVjZWl2ZWQYAiADKAsyJC5HYXppbGxpb24u", 
            "R2lmdEhpc3RvcnlGb3JQbGF5ZXJFbnRyeVIIcmVjZWl2ZWQiLgoWTmV0TWVz", 
            "c2FnZVN0b3JlVG9vQnVzeRIUCgVza3VJZBgBIAEoBFIFc2t1SWQiPAocTmV0", 
            "TWVzc2FnZVNldERlYnVnZ2luZ0NsaWVudBIcCglkZWJ1Z2dpbmcYASACKAhS", 
            "CWRlYnVnZ2luZyIaChhOZXRNZXNzYWdlTG9jYWxDb29wU3RhcnQiGAoWTmV0", 
            "TWVzc2FnZUxvY2FsQ29vcEVuZCKpAQoVTmV0TWVzc2FnZUF3YXJkVXBkYXRl", 
            "EhwKCWF3YXJkVHlwZRgBIAIoCVIJYXdhcmRUeXBlEjsKCmNvdXBvbkRhdGEY", 
            "AiABKAsyGy5HYXppbGxpb24uQXdhcmRDb3Vwb25FbnRyeVIKY291cG9uRGF0", 
            "YRI1CghpdGVtRGF0YRgDIAEoCzIZLkdhemlsbGlvbi5Bd2FyZEl0ZW1FbnRy", 
            "eVIIaXRlbURhdGEiJgokTmV0TWVzc2FnZURpc3BsYXlDb3Vwb25Ob3RpZmlj", 
            "YXRpb25zIm0KIU5ldE1lc3NhZ2VQdWJsaWNFdmVudFRlYW1Bc3NpZ25lZBIY", 
            "CgdzdWNjZXNzGAEgAigIUgdzdWNjZXNzEi4KEnB1YmxpY0V2ZW50UHJvdG9J", 
            "ZBgCIAIoBFIScHVibGljRXZlbnRQcm90b0lkIkEKJU5ldE1lc3NhZ2VSb3V0", 
            "ZWRDbGllbnRNZXNzYWdlUmVzcG9uc2USGAoHcGF5bG9hZBgBIAIoDFIHcGF5", 
            "bG9hZCKNAQojTmV0TWVzc2FnZUdpZnRpbmdSZXN0cmljdGlvbnNVcGRhdGUS", 
            "JAoNZW1haWxWZXJpZmllZBgBIAIoCFINZW1haWxWZXJpZmllZBJAChthY2Nv", 
            "dW50Q3JlYXRpb25UaW1lc3RhbXBVdGMYAiACKANSG2FjY291bnRDcmVhdGlv", 
            "blRpbWVzdGFtcFV0YyrMAQoVRm9yY2VEaXNjb25uZWN0UmVhc29uEg0KCWVG", 
            "RFJfTm9uZRAAEhkKFWVGRFJfRm9yY2VkRGlzY29ubmVjdBABEh4KGmVGRFJf", 
            "RXJyb3JMb2FkaW5nQ2hhcmFjdGVyEAISGQoVZUZEUl9DaGVja3BvaW50RmFp", 
            "bGVkEAMSHQoZZUZEUl9VbmFibGVUb0NyZWF0ZVJlZ2lvbhAEEhoKFmVGRFJf", 
            "RnVsZmlsbG1lbnRGYWlsZWQQBRITCg9lRkRSX1BTTkZhaWx1cmUQBipIChpD", 
            "b21tdW5pdHlNb2RpZnlGYWlsdXJlQ29kZRIRCg1lQ01GQ19UaW1lb3V0EAES", 
            "FwoTZUNNRkNfVW5rbm93blBsYXllchACKssBChpTd2l0Y2hUb0F2YXRhckZh", 
            "aWxlZFJlYXNvbhIRCg1lU0FGUl9Vbmtub3duEAASGQoVZVNBRlJfSW52YWxp", 
            "ZExvY2F0aW9uEAESHwobZVNBRlJfUmVnaW9uUmVzdHJpY3Rpb25FdmFsEAIS", 
            "FwoTZVNBRlJfSW52YWxpZFJlZ2lvbhADEiUKIWVTQUZSX1N3YXBJblBvd2Vy", 
            "RmFpbGVkVG9BY3RpdmF0ZRAEEh4KGmVTQUZSX1JlZ2lvblJlc3RyaWN0aW9u", 
            "S3dkEAUqMgoQR3VpbGRMZWF2ZVJlYXNvbhINCgllR0xSX0xlZnQQARIPCgtl", 
            "R0xSX0tpY2tlZBACKtcCChBHdWlsZE1lc3NhZ2VDb2RlEg0KCWVHTUNfTm9u", 
            "ZRABEhcKE2VHTUNfR3VpbGROYW1lRGlydHkQAhIVChFlR01DX1NlcnZpY2Vz", 
            "RG93bhADEiMKH2VHTUNfR3VpbGROYW1lSW52YWxpZENoYXJhY3RlcnMQBBIa", 
            "ChZlR01DX0d1aWxkTmFtZVRvb1Nob3J0EAUSGQoVZUdNQ19HdWlsZE5hbWVU", 
            "b29Mb25nEAYSGwoXZUdNQ19HdWlsZE5hbWVJZGVudGljYWwQBxIYChRlR01D", 
            "X0d1aWxkTm90SW5HdWlsZBAIEhUKEWVHTUNfR3VpbGRzTG9ja2VkEAkSIwof", 
            "ZUdNQ19HdWlsZE1vdGRJbnZhbGlkQ2hhcmFjdGVycxAKEhoKFmVHTUNfR3Vp", 
            "bGRNb3RkVG9vU2hvcnQQCxIZChVlR01DX0d1aWxkTW90ZFRvb0xvbmcQDCqn", 
            "AgoVUGxheWVyVHJhZGVTdGF0dXNDb2RlEg4KCmVQVFNDX05vbmUQABIYChRl", 
            "UFRTQ19TZW50SW52aXRhdGlvbhABEhwKGGVQVFNDX1JlY2VpdmVkSW52aXRh", 
            "dGlvbhACEhkKFWVQVFNDX1RyYWRlSW5Qcm9ncmVzcxADEhIKDmVQVFNDX0Rp", 
            "c2FibGVkEAQSGAoUZVBUU0NfSW52YWxpZFBhcnRuZXIQBRIXChNlUFRTQ19Q", 
            "YXJ0bmVySXNCdXN5EAYSGgoWZVBUU0NfUGFydG5lcklzSWdub3JlZBAHEhMK", 
            "D2VQVFNDX0NhbmNlbGxlZBAIEhoKFmVQVFNDX1BhcnRuZXJDYW5jZWxsZWQQ", 
          "CRIXChNlUFRTQ19UcmFkZUV4ZWN1dGVkEAo="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn, global::Gazillion.NetMessageReadyAndLoggedIn.Builder>(internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor,
                new string[] { "ReportDefectConfig", });
        internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__Descriptor = internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor.NestedTypes[0];
        internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig, global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.Builder>(internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__Descriptor,
                new string[] { "Host", "Url", "Port", });
        internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyAndLoadedOnGameServer, global::Gazillion.NetMessageReadyAndLoadedOnGameServer.Builder>(internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReadyForTimeSync, global::Gazillion.NetMessageReadyForTimeSync.Builder>(internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetStructGameOptions__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gazillion_NetStructGameOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructGameOptions, global::Gazillion.NetStructGameOptions.Builder>(internal__static_Gazillion_NetStructGameOptions__Descriptor,
                new string[] { "TeamUpSystemEnabled", "AchievementsEnabled", "OmegaMissionsEnabled", "VeteranRewardsEnabled", "MultiSpecRewardsEnabled", "GiftingEnabled", "CharacterSelectV2Enabled", "CommunityNewsV2Enabled", "LeaderboardsEnabled", "DynamicCombatLevelEnabled", "NewPlayerExperienceEnabled", "ServerTimeOffsetUTC", "UseServerTimeOffset", "MissionTrackerV2Enabled", "GiftingAccountAgeInDaysRequired", "GiftingAvatarLevelRequired", "GiftingLoginCountRequired", "ChatBanVoteAccountAgeInDaysRequired", "ChatBanVoteAvatarLevelRequired", "ChatBanVoteLoginCountRequired", });
        internal__static_Gazillion_NetMessageLocalPlayer__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalPlayer, global::Gazillion.NetMessageLocalPlayer.Builder>(internal__static_Gazillion_NetMessageLocalPlayer__Descriptor,
                new string[] { "LocalPlayerEntityId", "GameOptions", });
        internal__static_Gazillion_NetMessageEntityCreate__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityCreate, global::Gazillion.NetMessageEntityCreate.Builder>(internal__static_Gazillion_NetMessageEntityCreate__Descriptor,
                new string[] { "BaseData", "ArchiveData", });
        internal__static_Gazillion_NetMessageEntityDestroy__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityDestroy, global::Gazillion.NetMessageEntityDestroy.Builder>(internal__static_Gazillion_NetMessageEntityDestroy__Descriptor,
                new string[] { "IdEntity", "PrototypeId", "CellId", "AreaId", "RegionId", "Position", "OwnerEntityId", "OwnerPrototypeId", "EntityServerString", });
        internal__static_Gazillion_NetMessageEntityTracked__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Gazillion_NetMessageEntityTracked__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityTracked, global::Gazillion.NetMessageEntityTracked.Builder>(internal__static_Gazillion_NetMessageEntityTracked__Descriptor,
                new string[] { "IdEntity", "TrackingProtoId", "Flags", });
        internal__static_Gazillion_NetMessageEntitySelectorAction__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Gazillion_NetMessageEntitySelectorAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntitySelectorAction, global::Gazillion.NetMessageEntitySelectorAction.Builder>(internal__static_Gazillion_NetMessageEntitySelectorAction__Descriptor,
                new string[] { "IdEntity", "IdTarget", "EntitySelectorActionEventType", "CanSend", });
        internal__static_Gazillion_NetMessageInventoryMove__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryMove, global::Gazillion.NetMessageInventoryMove.Builder>(internal__static_Gazillion_NetMessageInventoryMove__Descriptor,
                new string[] { "EntityId", "InvLocContainerEntityId", "InvLocInventoryPrototypeId", "InvLocSlot", "RequiredNoOwnerOnClient", "EntityDataId", "DestOwnerDataId", });
        internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryUnlock, global::Gazillion.NetMessageInventoryUnlock.Builder>(internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor,
                new string[] { "InvProtoId", });
        internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePermaBuffUnlock, global::Gazillion.NetMessagePermaBuffUnlock.Builder>(internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor,
                new string[] { "PermaBuffProtoId", });
        internal__static_Gazillion_NetMessageEntityKill__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityKill, global::Gazillion.NetMessageEntityKill.Builder>(internal__static_Gazillion_NetMessageEntityKill__Descriptor,
                new string[] { "IdEntity", "IdKillerEntity", "KillFlags", });
        internal__static_Gazillion_NetMessageFullscreenMovieSync__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Gazillion_NetMessageFullscreenMovieSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullscreenMovieSync, global::Gazillion.NetMessageFullscreenMovieSync.Builder>(internal__static_Gazillion_NetMessageFullscreenMovieSync__Descriptor,
                new string[] { "SyncRequestId", "MovieProtoId", });
        internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueFullscreenMovie, global::Gazillion.NetMessageQueueFullscreenMovie.Builder>(internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor,
                new string[] { "MoviePrototypeId", });
        internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueueLoadingScreen, global::Gazillion.NetMessageQueueLoadingScreen.Builder>(internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor,
                new string[] { "RegionPrototypeId", "LoadingScreenPrototypeId", });
        internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDequeueLoadingScreen, global::Gazillion.NetMessageDequeueLoadingScreen.Builder>(internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageRegionChange__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionChange, global::Gazillion.NetMessageRegionChange.Builder>(internal__static_Gazillion_NetMessageRegionChange__Descriptor,
                new string[] { "RegionId", "ServerGameId", "ClearingAllInterest", "Entitiestodestroy", "RegionPrototypeId", "RegionRandomSeed", "ArchiveData", "RegionMin", "RegionMax", "CreateRegionParams", });
        internal__static_Gazillion_NetMessageEntityPosition__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPosition, global::Gazillion.NetMessageEntityPosition.Builder>(internal__static_Gazillion_NetMessageEntityPosition__Descriptor,
                new string[] { "IdEntity", "Flags", "Position", "Orientation", "CellId", "AreaId", "EntityPrototypeId", });
        internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocomotionStateUpdate, global::Gazillion.NetMessageLocomotionStateUpdate.Builder>(internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageLootRollFailed__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Gazillion_NetMessageLootRollFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLootRollFailed, global::Gazillion.NetMessageLootRollFailed.Builder>(internal__static_Gazillion_NetMessageLootRollFailed__Descriptor,
                new string[] { "LootTableProtoId", });
        internal__static_Gazillion_NetMessageInterestPolicies__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInterestPolicies, global::Gazillion.NetMessageInterestPolicies.Builder>(internal__static_Gazillion_NetMessageInterestPolicies__Descriptor,
                new string[] { "IdEntity", "NewPolicies", "PrevPolicies", "EntityDataId", });
        internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor = Descriptor.MessageTypes[22];
        internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnableToChangeRegion, global::Gazillion.NetMessageUnableToChangeRegion.Builder>(internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor,
                new string[] { "ChangeFailed", });
        internal__static_Gazillion_NetStructAreaConnection__Descriptor = Descriptor.MessageTypes[23];
        internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAreaConnection, global::Gazillion.NetStructAreaConnection.Builder>(internal__static_Gazillion_NetStructAreaConnection__Descriptor,
                new string[] { "AreaId", "ConnectPoint", });
        internal__static_Gazillion_NetMessageAddArea__Descriptor = Descriptor.MessageTypes[24];
        internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddArea, global::Gazillion.NetMessageAddArea.Builder>(internal__static_Gazillion_NetMessageAddArea__Descriptor,
                new string[] { "AreaId", "AreaPrototypeId", "AreaOrigin", "IsStartArea", });
        internal__static_Gazillion_NetMessageRemoveArea__Descriptor = Descriptor.MessageTypes[25];
        internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveArea, global::Gazillion.NetMessageRemoveArea.Builder>(internal__static_Gazillion_NetMessageRemoveArea__Descriptor,
                new string[] { "AreaId", });
        internal__static_Gazillion_NetStructReservedSpawn__Descriptor = Descriptor.MessageTypes[26];
        internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructReservedSpawn, global::Gazillion.NetStructReservedSpawn.Builder>(internal__static_Gazillion_NetStructReservedSpawn__Descriptor,
                new string[] { "Asset", "Id", "UseMarkerOrientation", });
        internal__static_Gazillion_NetMessageCellCreate__Descriptor = Descriptor.MessageTypes[27];
        internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellCreate, global::Gazillion.NetMessageCellCreate.Builder>(internal__static_Gazillion_NetMessageCellCreate__Descriptor,
                new string[] { "AreaId", "CellId", "CellPrototypeId", "PositionInArea", "CellRandomSeed", "Encounters", "Bufferwidth", "OverrideLocationName", });
        internal__static_Gazillion_NetMessageCellDestroy__Descriptor = Descriptor.MessageTypes[28];
        internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCellDestroy, global::Gazillion.NetMessageCellDestroy.Builder>(internal__static_Gazillion_NetMessageCellDestroy__Descriptor,
                new string[] { "AreaId", "CellId", });
        internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor = Descriptor.MessageTypes[29];
        internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnvironmentUpdate, global::Gazillion.NetMessageEnvironmentUpdate.Builder>(internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor,
                new string[] { "Flags", });
        internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor = Descriptor.MessageTypes[30];
        internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugSpawnMapVisualization, global::Gazillion.NetMessageDebugSpawnMapVisualization.Builder>(internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor,
                new string[] { "Visualize", "Areaid", "Boundsx", "Boundsy", "Mapdata", });
        internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor = Descriptor.MessageTypes[31];
        internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeAOIPolicies, global::Gazillion.NetMessageChangeAOIPolicies.Builder>(internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor,
                new string[] { "IdEntity", "Currentpolicies", "ExitGameWorld", "EntityPrototypeId", });
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor = Descriptor.MessageTypes[32];
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd, global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Builder>(internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor = Descriptor.MessageTypes[33];
        internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin, global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Builder>(internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor = Descriptor.MessageTypes[34];
        internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAdminCommandResponse, global::Gazillion.NetMessageAdminCommandResponse.Builder>(internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor,
                new string[] { "Response", "Filecontents", "Filerelativepath", });
        internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor = Descriptor.MessageTypes[35];
        internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePowerFailed, global::Gazillion.NetMessageActivatePowerFailed.Builder>(internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor,
                new string[] { "Reason", "PowerPrototypeId", "AvatarIndex", });
        internal__static_Gazillion_NetMessageCancelPower__Descriptor = Descriptor.MessageTypes[36];
        internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPower, global::Gazillion.NetMessageCancelPower.Builder>(internal__static_Gazillion_NetMessageCancelPower__Descriptor,
                new string[] { "IdAgent", "PowerPrototypeId", "EndPowerFlags", });
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor = Descriptor.MessageTypes[37];
        internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageContinuousPowerUpdateToClient, global::Gazillion.NetMessageContinuousPowerUpdateToClient.Builder>(internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor,
                new string[] { "IdAvatar", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", "RandomSeed", });
        internal__static_Gazillion_NetMessageActivatePower__Descriptor = Descriptor.MessageTypes[38];
        internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageActivatePower, global::Gazillion.NetMessageActivatePower.Builder>(internal__static_Gazillion_NetMessageActivatePower__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessagePreActivatePower__Descriptor = Descriptor.MessageTypes[39];
        internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePreActivatePower, global::Gazillion.NetMessagePreActivatePower.Builder>(internal__static_Gazillion_NetMessagePreActivatePower__Descriptor,
                new string[] { "IdUserEntity", "PowerPrototypeId", "IdTargetEntity", "TargetPosition", });
        internal__static_Gazillion_NetMessagePowerResult__Descriptor = Descriptor.MessageTypes[40];
        internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerResult, global::Gazillion.NetMessagePowerResult.Builder>(internal__static_Gazillion_NetMessagePowerResult__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessagePowerBounce__Descriptor = Descriptor.MessageTypes[41];
        internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerBounce, global::Gazillion.NetMessagePowerBounce.Builder>(internal__static_Gazillion_NetMessagePowerBounce__Descriptor,
                new string[] { "IdPowerUser", "IdLastTarget", "LastTargetPosition", "IdNewTarget", "PowerPrototypeId", "UserOriginalAssetId", "UserCurrentAssetId", "ProjectileSpeed", "FxRandomSeed", });
        internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor = Descriptor.MessageTypes[42];
        internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnPreInteractPowerEnd, global::Gazillion.NetMessageOnPreInteractPowerEnd.Builder>(internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor,
                new string[] { "IdTargetEntity", "AvatarIndex", });
        internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor = Descriptor.MessageTypes[43];
        internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveBox, global::Gazillion.NetMessageRegionPrimitiveBox.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor,
                new string[] { "Center", "Size", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor = Descriptor.MessageTypes[44];
        internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveTriangle, global::Gazillion.NetMessageRegionPrimitiveTriangle.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor,
                new string[] { "Point0", "Point1", "Point2", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor = Descriptor.MessageTypes[45];
        internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveSphere, global::Gazillion.NetMessageRegionPrimitiveSphere.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor,
                new string[] { "Center", "Radius", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveCircle__Descriptor = Descriptor.MessageTypes[46];
        internal__static_Gazillion_NetMessageRegionPrimitiveCircle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveCircle, global::Gazillion.NetMessageRegionPrimitiveCircle.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveCircle__Descriptor,
                new string[] { "Center", "Radius", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor = Descriptor.MessageTypes[47];
        internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionPrimitiveLine, global::Gazillion.NetMessageRegionPrimitiveLine.Builder>(internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor,
                new string[] { "Start", "End", "Color", "LifetimeInMilliseconds", "Add", });
        internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor = Descriptor.MessageTypes[48];
        internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMarkFirstGameFrame, global::Gazillion.NetMessageMarkFirstGameFrame.Builder>(internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor,
                new string[] { "Currentservergametime", "Currentservergameid", "Gamestarttime", });
        internal__static_Gazillion_NetMessageBeginExitGame__Descriptor = Descriptor.MessageTypes[49];
        internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBeginExitGame, global::Gazillion.NetMessageBeginExitGame.Builder>(internal__static_Gazillion_NetMessageBeginExitGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageSystemMessage__Descriptor = Descriptor.MessageTypes[50];
        internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSystemMessage, global::Gazillion.NetMessageSystemMessage.Builder>(internal__static_Gazillion_NetMessageSystemMessage__Descriptor,
                new string[] { "MessageId", });
        internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__Descriptor = Descriptor.MessageTypes[51];
        internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIPerformanceUIUpdate, global::Gazillion.NetMessageAIPerformanceUIUpdate.Builder>(internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__Descriptor,
                new string[] { "TimeSlice", "NumAgentsAllocated", "NumAgentsSimulated", "NumThinksInTimeSlice", "NumOctreeQueriesInTimeSlice", "NumLOSChecksInTimeSlice", "NumValidTargetChecksInTimeSlice", "NumGameEntitySweepsInTimeSlice", "NumServerHitchesInTimeSlice", "NumOctreeValidTargetChecksInTimeSlice", "NumAvatarOctreeQueriesInTimeSlice", "HitchInfoStrArray", });
        internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor = Descriptor.MessageTypes[52];
        internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIDebugUIUpdate, global::Gazillion.NetMessageAIDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor,
                new string[] { "IdTargetNPC", "CurrentActionName", "PreviousActionName", "SensoryInputs", "PropertyString", "PowerResultString", });
        internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor = Descriptor.MessageTypes[53];
        internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePropertiesDebugUIUpdate, global::Gazillion.NetMessagePropertiesDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor,
                new string[] { "IdTargetEntity", "PropertyString", "EntityString", });
        internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor = Descriptor.MessageTypes[54];
        internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConditionsDebugUIUpdate, global::Gazillion.NetMessageConditionsDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor,
                new string[] { "IdTargetEntity", "ConditionsString", });
        internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor = Descriptor.MessageTypes[55];
        internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowersDebugUIUpdate, global::Gazillion.NetMessagePowersDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor,
                new string[] { "DebugEntityId", "ActivePowerId", "PendingActionState", "PendingPowerId", "PendingTargetId", "PendingTargetPosition", "ContinuousPowerId", "ContinuousTargetId", "ContinuousTargetPosition", "ActivePowerLastActivationTime", "IsInCombat", "ServerPowerResultString", "UsingControllerInput", });
        internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor = Descriptor.MessageTypes[56];
        internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionDebugUIUpdate, global::Gazillion.NetMessageMissionDebugUIUpdate.Builder>(internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor,
                new string[] { "MissionStrings", "ResetTimeRemainingSeconds", });
        internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor = Descriptor.MessageTypes[57];
        internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDebugEntityPosition, global::Gazillion.NetMessageDebugEntityPosition.Builder>(internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor,
                new string[] { "EntityId", "Position", });
        internal__static_Gazillion_NetMessageServerFrameProfile__Descriptor = Descriptor.MessageTypes[58];
        internal__static_Gazillion_NetMessageServerFrameProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerFrameProfile, global::Gazillion.NetMessageServerFrameProfile.Builder>(internal__static_Gazillion_NetMessageServerFrameProfile__Descriptor,
                new string[] { "ProcessingTime", "FrameTime", });
        internal__static_Gazillion_NetMessagePingResponse__Descriptor = Descriptor.MessageTypes[59];
        internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePingResponse, global::Gazillion.NetMessagePingResponse.Builder>(internal__static_Gazillion_NetMessagePingResponse__Descriptor,
                new string[] { "DisplayOutput", "RequestSentClientTime", "RequestSentGameTime", "RequestNetReceivedGameTime", "ResponseSendTime", "ResponseNetReceiveClientTime", "ResponseNetReceiveGameTime", "ServerTickforecast", "ResponseLatencyBufferReceiveClientTime", "Gameservername", "Frontendname", });
        internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor = Descriptor.MessageTypes[60];
        internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityEnterGameWorld, global::Gazillion.NetMessageEntityEnterGameWorld.Builder>(internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor = Descriptor.MessageTypes[61];
        internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeleportAckRequest, global::Gazillion.NetMessageTeleportAckRequest.Builder>(internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor,
                new string[] { "Ackseq", });
        internal__static_Gazillion_NetMessageServerVersion__Descriptor = Descriptor.MessageTypes[62];
        internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageServerVersion, global::Gazillion.NetMessageServerVersion.Builder>(internal__static_Gazillion_NetMessageServerVersion__Descriptor,
                new string[] { "Version", });
        internal__static_Gazillion_NetStructAgentSpec__Descriptor = Descriptor.MessageTypes[63];
        internal__static_Gazillion_NetStructAgentSpec__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructAgentSpec, global::Gazillion.NetStructAgentSpec.Builder>(internal__static_Gazillion_NetStructAgentSpec__Descriptor,
                new string[] { "AgentProtoRef", "AgentLevel", "CreditsAmount", });
        internal__static_Gazillion_NetStructVendorXPSummary__Descriptor = Descriptor.MessageTypes[64];
        internal__static_Gazillion_NetStructVendorXPSummary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructVendorXPSummary, global::Gazillion.NetStructVendorXPSummary.Builder>(internal__static_Gazillion_NetStructVendorXPSummary__Descriptor,
                new string[] { "VendorProtoRef", "XpAmount", });
        internal__static_Gazillion_NetStructItemSpecStack__Descriptor = Descriptor.MessageTypes[65];
        internal__static_Gazillion_NetStructItemSpecStack__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructItemSpecStack, global::Gazillion.NetStructItemSpecStack.Builder>(internal__static_Gazillion_NetStructItemSpecStack__Descriptor,
                new string[] { "Count", "Spec", });
        internal__static_Gazillion_NetStructLootResultSummary__Descriptor = Descriptor.MessageTypes[66];
        internal__static_Gazillion_NetStructLootResultSummary__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructLootResultSummary, global::Gazillion.NetStructLootResultSummary.Builder>(internal__static_Gazillion_NetStructLootResultSummary__Descriptor,
                new string[] { "Items", "Agents", "Credits", "Experience", "PowerPoints", "HealthBonus", "EnduranceBonus", "RealMoney", "CouponCodes", "CallbackNodes", "Protorefs", "Vendorxp", });
        internal__static_Gazillion_NetStructVaporizedItem__Descriptor = Descriptor.MessageTypes[67];
        internal__static_Gazillion_NetStructVaporizedItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructVaporizedItem, global::Gazillion.NetStructVaporizedItem.Builder>(internal__static_Gazillion_NetStructVaporizedItem__Descriptor,
                new string[] { "ItemProtoId", "RarityProtoId", "Credits", });
        internal__static_Gazillion_NetMessageVaporizedLootResult__Descriptor = Descriptor.MessageTypes[68];
        internal__static_Gazillion_NetMessageVaporizedLootResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVaporizedLootResult, global::Gazillion.NetMessageVaporizedLootResult.Builder>(internal__static_Gazillion_NetMessageVaporizedLootResult__Descriptor,
                new string[] { "Items", "SourceEntityId", });
        internal__static_Gazillion_NetMessageSocketGem__Descriptor = Descriptor.MessageTypes[69];
        internal__static_Gazillion_NetMessageSocketGem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSocketGem, global::Gazillion.NetMessageSocketGem.Builder>(internal__static_Gazillion_NetMessageSocketGem__Descriptor,
                new string[] { "DestItemId", "GemId", });
        internal__static_Gazillion_NetMessageMissionUpdate__Descriptor = Descriptor.MessageTypes[70];
        internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionUpdate, global::Gazillion.NetMessageMissionUpdate.Builder>(internal__static_Gazillion_NetMessageMissionUpdate__Descriptor,
                new string[] { "MissionPrototypeId", "MissionState", "MissionStateExpireTime", "Rewards", "Participants", "SuppressNotification", "SuspendedState", });
        internal__static_Gazillion_NetStructMissionInteractionTag__Descriptor = Descriptor.MessageTypes[71];
        internal__static_Gazillion_NetStructMissionInteractionTag__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructMissionInteractionTag, global::Gazillion.NetStructMissionInteractionTag.Builder>(internal__static_Gazillion_NetStructMissionInteractionTag__Descriptor,
                new string[] { "EntityId", "RegionId", });
        internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor = Descriptor.MessageTypes[72];
        internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionObjectiveUpdate, global::Gazillion.NetMessageMissionObjectiveUpdate.Builder>(internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor,
                new string[] { "MissionPrototypeId", "ObjectiveIndex", "ObjectiveState", "ObjectiveStateExpireTime", "CurrentCount", "RequiredCount", "FailCurrentCount", "FailRequiredCount", "InteractedEntities", "SuppressNotification", "SuspendedState", });
        internal__static_Gazillion_NetMessageMissionRewardsResponse__Descriptor = Descriptor.MessageTypes[73];
        internal__static_Gazillion_NetMessageMissionRewardsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionRewardsResponse, global::Gazillion.NetMessageMissionRewardsResponse.Builder>(internal__static_Gazillion_NetMessageMissionRewardsResponse__Descriptor,
                new string[] { "MissionPrototypeId", "ConditionIndex", "EntityId", "ShowItems", "GiveItems", });
        internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor = Descriptor.MessageTypes[74];
        internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCurrentAvatarChanged, global::Gazillion.NetMessageCurrentAvatarChanged.Builder>(internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor,
                new string[] { "AvatarIndex", "LastCurrentEntityId", });
        internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor = Descriptor.MessageTypes[75];
        internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewAvatarAcquired, global::Gazillion.NetMessageNewAvatarAcquired.Builder>(internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor,
                new string[] { "PrototypeId", });
        internal__static_Gazillion_NetMessageNewTeamUpAcquired__Descriptor = Descriptor.MessageTypes[76];
        internal__static_Gazillion_NetMessageNewTeamUpAcquired__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageNewTeamUpAcquired, global::Gazillion.NetMessageNewTeamUpAcquired.Builder>(internal__static_Gazillion_NetMessageNewTeamUpAcquired__Descriptor,
                new string[] { "PrototypeId", });
        internal__static_Gazillion_NetStructPrefetchCell__Descriptor = Descriptor.MessageTypes[77];
        internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetStructPrefetchCell, global::Gazillion.NetStructPrefetchCell.Builder>(internal__static_Gazillion_NetStructPrefetchCell__Descriptor,
                new string[] { "CellId", "CellPrototypeId", });
        internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor = Descriptor.MessageTypes[78];
        internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchAssets, global::Gazillion.NetMessagePrefetchAssets.Builder>(internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor,
                new string[] { "Priority", "Assets", "Prototypes", "Cells", "RegionId", });
        internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor = Descriptor.MessageTypes[79];
        internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePrefetchRegionsForDownload, global::Gazillion.NetMessagePrefetchRegionsForDownload.Builder>(internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor,
                new string[] { "Prototypes", });
        internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor = Descriptor.MessageTypes[80];
        internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageQueryIsRegionAvailable, global::Gazillion.NetMessageQueryIsRegionAvailable.Builder>(internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor,
                new string[] { "RegionPrototype", });
        internal__static_Gazillion_NetMessageShowOverheadText__Descriptor = Descriptor.MessageTypes[81];
        internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowOverheadText, global::Gazillion.NetMessageShowOverheadText.Builder>(internal__static_Gazillion_NetMessageShowOverheadText__Descriptor,
                new string[] { "IdAgent", "IdText", "Duration", });
        internal__static_Gazillion_NetMessageShowXPAwardedText__Descriptor = Descriptor.MessageTypes[82];
        internal__static_Gazillion_NetMessageShowXPAwardedText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowXPAwardedText, global::Gazillion.NetMessageShowXPAwardedText.Builder>(internal__static_Gazillion_NetMessageShowXPAwardedText__Descriptor,
                new string[] { "AgentId", "XpAwarded", });
        internal__static_Gazillion_NetMessageAIToggleState__Descriptor = Descriptor.MessageTypes[83];
        internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIToggleState, global::Gazillion.NetMessageAIToggleState.Builder>(internal__static_Gazillion_NetMessageAIToggleState__Descriptor,
                new string[] { "State", });
        internal__static_Gazillion_NetMessageDamageToggleState__Descriptor = Descriptor.MessageTypes[84];
        internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDamageToggleState, global::Gazillion.NetMessageDamageToggleState.Builder>(internal__static_Gazillion_NetMessageDamageToggleState__Descriptor,
                new string[] { "State", });
        internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__Descriptor = Descriptor.MessageTypes[85];
        internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDynamicCombatLevelToggleState, global::Gazillion.NetMessageDynamicCombatLevelToggleState.Builder>(internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__Descriptor,
                new string[] { "State", });
        internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor = Descriptor.MessageTypes[86];
        internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamRosterNotification, global::Gazillion.NetMessageMatchTeamRosterNotification.Builder>(internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor,
                new string[] { "MetaGameEntityId", "TeamPrototypeId", "PlayerDbGuids", });
        internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor = Descriptor.MessageTypes[87];
        internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchTeamSizeNotification, global::Gazillion.NetMessageMatchTeamSizeNotification.Builder>(internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor,
                new string[] { "MetaGameEntityId", "TeamSize", });
        internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor = Descriptor.MessageTypes[88];
        internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromGameSystem, global::Gazillion.NetMessageChatFromGameSystem.Builder>(internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor,
                new string[] { "SourceStringId", "MessageStringId", "ArgStringIds", });
        internal__static_Gazillion_NetMessageChatFromMetaGame__Descriptor = Descriptor.MessageTypes[89];
        internal__static_Gazillion_NetMessageChatFromMetaGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatFromMetaGame, global::Gazillion.NetMessageChatFromMetaGame.Builder>(internal__static_Gazillion_NetMessageChatFromMetaGame__Descriptor,
                new string[] { "SourceStringId", "MessageStringId", "PlayerName1", "PlayerName2", "ArgStringIds", });
        internal__static_Gazillion_NetMessageBroadcastRareItem__Descriptor = Descriptor.MessageTypes[90];
        internal__static_Gazillion_NetMessageBroadcastRareItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBroadcastRareItem, global::Gazillion.NetMessageBroadcastRareItem.Builder>(internal__static_Gazillion_NetMessageBroadcastRareItem__Descriptor,
                new string[] { "PlayerName", "Item", "RoomType", });
        internal__static_Gazillion_NetMessageChatError__Descriptor = Descriptor.MessageTypes[91];
        internal__static_Gazillion_NetMessageChatError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChatError, global::Gazillion.NetMessageChatError.Builder>(internal__static_Gazillion_NetMessageChatError__Descriptor,
                new string[] { "ErrorMessage", });
        internal__static_Gazillion_NetMessageCatalogItems__Descriptor = Descriptor.MessageTypes[92];
        internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCatalogItems, global::Gazillion.NetMessageCatalogItems.Builder>(internal__static_Gazillion_NetMessageCatalogItems__Descriptor,
                new string[] { "TimestampSeconds", "TimestampMicroseconds", "Entries", "Urls", "Clientmustdownloadimages", });
        internal__static_Gazillion_AwardCouponEntryDesc__Descriptor = Descriptor.MessageTypes[93];
        internal__static_Gazillion_AwardCouponEntryDesc__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardCouponEntryDesc, global::Gazillion.AwardCouponEntryDesc.Builder>(internal__static_Gazillion_AwardCouponEntryDesc__Descriptor,
                new string[] { "LocaleId", "Description", });
        internal__static_Gazillion_AwardCouponEntry__Descriptor = Descriptor.MessageTypes[94];
        internal__static_Gazillion_AwardCouponEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardCouponEntry, global::Gazillion.AwardCouponEntry.Builder>(internal__static_Gazillion_AwardCouponEntry__Descriptor,
                new string[] { "CouponId", "Discount", "CouponState", "ExpirationDateUtc", "Descriptions", "Wsec", });
        internal__static_Gazillion_AwardItemEntry__Descriptor = Descriptor.MessageTypes[95];
        internal__static_Gazillion_AwardItemEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.AwardItemEntry, global::Gazillion.AwardItemEntry.Builder>(internal__static_Gazillion_AwardItemEntry__Descriptor,
                new string[] { "SkuId", "Quantity", });
        internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor = Descriptor.MessageTypes[96];
        internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGetCurrencyBalanceResponse, global::Gazillion.NetMessageGetCurrencyBalanceResponse.Builder>(internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor,
                new string[] { "CurrencyBalance", "Coupon", });
        internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor = Descriptor.MessageTypes[97];
        internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyItemFromCatalogResponse, global::Gazillion.NetMessageBuyItemFromCatalogResponse.Builder>(internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor,
                new string[] { "DidSucceed", "CurrentCurrencyBalance", "Errormessage", "Errorcode", "SkuId", "IsWebPurchase", "ProtototypeIds", "Coupon", });
        internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__Descriptor = Descriptor.MessageTypes[98];
        internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse, global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse.Builder>(internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__Descriptor,
                new string[] { "DidSucceed", "CurrentCurrencyBalance", "Errormessage", "Errorcode", "Skuid", "Coupon", });
        internal__static_Gazillion_NetMessageGrantGToPlayerNotification__Descriptor = Descriptor.MessageTypes[99];
        internal__static_Gazillion_NetMessageGrantGToPlayerNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGrantGToPlayerNotification, global::Gazillion.NetMessageGrantGToPlayerNotification.Builder>(internal__static_Gazillion_NetMessageGrantGToPlayerNotification__Descriptor,
                new string[] { "DidSucceed", "CurrentCurrencyBalance", "Coupon", });
        internal__static_Gazillion_NetMessagePurchaseUnlockResponse__Descriptor = Descriptor.MessageTypes[100];
        internal__static_Gazillion_NetMessagePurchaseUnlockResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePurchaseUnlockResponse, global::Gazillion.NetMessagePurchaseUnlockResponse.Builder>(internal__static_Gazillion_NetMessagePurchaseUnlockResponse__Descriptor,
                new string[] { "PurchaseUnlockResult", });
        internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor = Descriptor.MessageTypes[101];
        internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityPreviewerNewTarget, global::Gazillion.NetMessageEntityPreviewerNewTarget.Builder>(internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor,
                new string[] { "EntityId", });
        internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor = Descriptor.MessageTypes[102];
        internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoteMissionNotification, global::Gazillion.NetMessageRemoteMissionNotification.Builder>(internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor,
                new string[] { "EntityPrototypeId", "DialogTextStringId", "MissionPrototypeId", "IconPathOverrideId", "VoTriggerAssetId", });
        internal__static_Gazillion_NetMessageMetaGameInfoNotification__Descriptor = Descriptor.MessageTypes[103];
        internal__static_Gazillion_NetMessageMetaGameInfoNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameInfoNotification, global::Gazillion.NetMessageMetaGameInfoNotification.Builder>(internal__static_Gazillion_NetMessageMetaGameInfoNotification__Descriptor,
                new string[] { "EntityPrototypeId", "DialogTextStringId", "IconPathOverrideId", });
        internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__Descriptor = Descriptor.MessageTypes[104];
        internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageClearMetaGameInfoNotification, global::Gazillion.NetMessageClearMetaGameInfoNotification.Builder>(internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor = Descriptor.MessageTypes[105];
        internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUINotificationMessage, global::Gazillion.NetMessageUINotificationMessage.Builder>(internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor,
                new string[] { "UiNotificationRef", });
        internal__static_Gazillion_NetMessageShowPvPScoreboard__Descriptor = Descriptor.MessageTypes[106];
        internal__static_Gazillion_NetMessageShowPvPScoreboard__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowPvPScoreboard, global::Gazillion.NetMessageShowPvPScoreboard.Builder>(internal__static_Gazillion_NetMessageShowPvPScoreboard__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor = Descriptor.MessageTypes[107];
        internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStartPvPTimer, global::Gazillion.NetMessageStartPvPTimer.Builder>(internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor,
                new string[] { "StartTime", "EndTime", "LowTimeWarning", "CriticalTimeWarning", "MetaGameId", "LabelOverrideTextId", });
        internal__static_Gazillion_NetMessageStopPvPTimer__Descriptor = Descriptor.MessageTypes[108];
        internal__static_Gazillion_NetMessageStopPvPTimer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStopPvPTimer, global::Gazillion.NetMessageStopPvPTimer.Builder>(internal__static_Gazillion_NetMessageStopPvPTimer__Descriptor,
                new string[] { "MetaGameId", });
        internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor = Descriptor.MessageTypes[109];
        internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDifficultyThresholds, global::Gazillion.NetMessageSetDifficultyThresholds.Builder>(internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor,
                new string[] { "WarningThreshold", "FailureThreshold", });
        internal__static_Gazillion_NetMessageSetUITrackedEntityId__Descriptor = Descriptor.MessageTypes[110];
        internal__static_Gazillion_NetMessageSetUITrackedEntityId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetUITrackedEntityId, global::Gazillion.NetMessageSetUITrackedEntityId.Builder>(internal__static_Gazillion_NetMessageSetUITrackedEntityId__Descriptor,
                new string[] { "EntityId", });
        internal__static_Gazillion_NetMessageSetTimerText__Descriptor = Descriptor.MessageTypes[111];
        internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetTimerText, global::Gazillion.NetMessageSetTimerText.Builder>(internal__static_Gazillion_NetMessageSetTimerText__Descriptor,
                new string[] { "TimerTextId", "Arg1", });
        internal__static_Gazillion_NetMessageSetModeText__Descriptor = Descriptor.MessageTypes[112];
        internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetModeText, global::Gazillion.NetMessageSetModeText.Builder>(internal__static_Gazillion_NetMessageSetModeText__Descriptor,
                new string[] { "ModeTextId", "ModeRef", "MetaGameId", });
        internal__static_Gazillion_NetMessageSetExtraText__Descriptor = Descriptor.MessageTypes[113];
        internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetExtraText, global::Gazillion.NetMessageSetExtraText.Builder>(internal__static_Gazillion_NetMessageSetExtraText__Descriptor,
                new string[] { "ExtraTextId", });
        internal__static_Gazillion_NetMessageBannerMessage__Descriptor = Descriptor.MessageTypes[114];
        internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageBannerMessage, global::Gazillion.NetMessageBannerMessage.Builder>(internal__static_Gazillion_NetMessageBannerMessage__Descriptor,
                new string[] { "BannerText", "TextStyle", "TimeToLiveMS", "MessageStyle", "DoNotQueue", "ShowImmediately", });
        internal__static_Gazillion_NetMessageHUDTutorial__Descriptor = Descriptor.MessageTypes[115];
        internal__static_Gazillion_NetMessageHUDTutorial__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageHUDTutorial, global::Gazillion.NetMessageHUDTutorial.Builder>(internal__static_Gazillion_NetMessageHUDTutorial__Descriptor,
                new string[] { "HudTutorialProtoId", });
        internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__Descriptor = Descriptor.MessageTypes[116];
        internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionAvatarSwapUpdate, global::Gazillion.NetMessageRegionAvatarSwapUpdate.Builder>(internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__Descriptor,
                new string[] { "Enabled", });
        internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__Descriptor = Descriptor.MessageTypes[117];
        internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionRestrictedRosterUpdate, global::Gazillion.NetMessageRegionRestrictedRosterUpdate.Builder>(internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__Descriptor,
                new string[] { "Enabled", });
        internal__static_Gazillion_NetMessageTeamSelectDialog__Descriptor = Descriptor.MessageTypes[118];
        internal__static_Gazillion_NetMessageTeamSelectDialog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTeamSelectDialog, global::Gazillion.NetMessageTeamSelectDialog.Builder>(internal__static_Gazillion_NetMessageTeamSelectDialog__Descriptor,
                new string[] { "PublicEventProtoId", });
        internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor = Descriptor.MessageTypes[119];
        internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAIAggroNotification, global::Gazillion.NetMessageAIAggroNotification.Builder>(internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor,
                new string[] { "BannerMessageRef", "AiRef", "PlayerId", });
        internal__static_Gazillion_NetMessageAITargetChangeNotification__Descriptor = Descriptor.MessageTypes[120];
        internal__static_Gazillion_NetMessageAITargetChangeNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAITargetChangeNotification, global::Gazillion.NetMessageAITargetChangeNotification.Builder>(internal__static_Gazillion_NetMessageAITargetChangeNotification__Descriptor,
                new string[] { "NewTargetid", "OldTargetid", "AiId", });
        internal__static_Gazillion_NetMessageStoryNotification__Descriptor = Descriptor.MessageTypes[121];
        internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoryNotification, global::Gazillion.NetMessageStoryNotification.Builder>(internal__static_Gazillion_NetMessageStoryNotification__Descriptor,
                new string[] { "DisplayTextStringId", "SpeakingEntityPrototypeId", "TimeToLiveMS", "VoTriggerAssetId", "MissionPrototypeId", });
        internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor = Descriptor.MessageTypes[122];
        internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSyncTimeReply, global::Gazillion.NetMessageSyncTimeReply.Builder>(internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor,
                new string[] { "GameTimeClientSent", "GameTimeServerReceived", "GameTimeServerSent", "DateTimeClientSent", "DateTimeServerReceived", "DateTimeServerSent", "Dialation", "GametimeDialationStarted", "DatetimeDialationStarted", });
        internal__static_Gazillion_NetMessageInitialTimeSync__Descriptor = Descriptor.MessageTypes[123];
        internal__static_Gazillion_NetMessageInitialTimeSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInitialTimeSync, global::Gazillion.NetMessageInitialTimeSync.Builder>(internal__static_Gazillion_NetMessageInitialTimeSync__Descriptor,
                new string[] { "GameTimeServerSent", "DateTimeServerSent", });
        internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor = Descriptor.MessageTypes[124];
        internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer, global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Builder>(internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor,
                new string[] { "ShowOpeningCinematic", });
        internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor = Descriptor.MessageTypes[125];
        internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowKioskStartScreen, global::Gazillion.NetMessageShowKioskStartScreen.Builder>(internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageInventoryFull__Descriptor = Descriptor.MessageTypes[126];
        internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryFull, global::Gazillion.NetMessageInventoryFull.Builder>(internal__static_Gazillion_NetMessageInventoryFull__Descriptor,
                new string[] { "PlayerID", "ItemID", });
        internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor = Descriptor.MessageTypes[127];
        internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesStart, global::Gazillion.NetMessageUnloadPackagesStart.Builder>(internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor = Descriptor.MessageTypes[128];
        internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnloadPackagesEnd, global::Gazillion.NetMessageUnloadPackagesEnd.Builder>(internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageForceDisconnect__Descriptor = Descriptor.MessageTypes[129];
        internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageForceDisconnect, global::Gazillion.NetMessageForceDisconnect.Builder>(internal__static_Gazillion_NetMessageForceDisconnect__Descriptor,
                new string[] { "Reason", });
        internal__static_Gazillion_NetMessageLevelUp__Descriptor = Descriptor.MessageTypes[130];
        internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLevelUp, global::Gazillion.NetMessageLevelUp.Builder>(internal__static_Gazillion_NetMessageLevelUp__Descriptor,
                new string[] { "EntityID", });
        internal__static_Gazillion_NetMessageOmegaPointGain__Descriptor = Descriptor.MessageTypes[131];
        internal__static_Gazillion_NetMessageOmegaPointGain__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOmegaPointGain, global::Gazillion.NetMessageOmegaPointGain.Builder>(internal__static_Gazillion_NetMessageOmegaPointGain__Descriptor,
                new string[] { "NumPointsGained", "AvatarId", });
        internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor = Descriptor.MessageTypes[132];
        internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorLevelUp, global::Gazillion.NetMessageVendorLevelUp.Builder>(internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor,
                new string[] { "VendorTypeProtoId", "VendorID", });
        internal__static_Gazillion_NetMessageVendorRefresh__Descriptor = Descriptor.MessageTypes[133];
        internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVendorRefresh, global::Gazillion.NetMessageVendorRefresh.Builder>(internal__static_Gazillion_NetMessageVendorRefresh__Descriptor,
                new string[] { "VendorTypeProtoId", });
        internal__static_Gazillion_NetMessageCraftingSuccess__Descriptor = Descriptor.MessageTypes[134];
        internal__static_Gazillion_NetMessageCraftingSuccess__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingSuccess, global::Gazillion.NetMessageCraftingSuccess.Builder>(internal__static_Gazillion_NetMessageCraftingSuccess__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageCraftingFailure__Descriptor = Descriptor.MessageTypes[135];
        internal__static_Gazillion_NetMessageCraftingFailure__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCraftingFailure, global::Gazillion.NetMessageCraftingFailure.Builder>(internal__static_Gazillion_NetMessageCraftingFailure__Descriptor,
                new string[] { "CraftingResult", });
        internal__static_Gazillion_NetMessagePlayPowerVisuals__Descriptor = Descriptor.MessageTypes[136];
        internal__static_Gazillion_NetMessagePlayPowerVisuals__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayPowerVisuals, global::Gazillion.NetMessagePlayPowerVisuals.Builder>(internal__static_Gazillion_NetMessagePlayPowerVisuals__Descriptor,
                new string[] { "EntityId", "PowerAssetRef", });
        internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor = Descriptor.MessageTypes[137];
        internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageWaypointUnlocked, global::Gazillion.NetMessageWaypointUnlocked.Builder>(internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor,
                new string[] { "WaypointPrototypeID", });
        internal__static_Gazillion_NetMessageReplicationArchive__Descriptor = Descriptor.MessageTypes[138];
        internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReplicationArchive, global::Gazillion.NetMessageReplicationArchive.Builder>(internal__static_Gazillion_NetMessageReplicationArchive__Descriptor,
                new string[] { "ReplicationId", "ArchiveDataType", "ArchiveData", "Debugstring", });
        internal__static_Gazillion_NetMessageSetProperty__Descriptor = Descriptor.MessageTypes[139];
        internal__static_Gazillion_NetMessageSetProperty__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetProperty, global::Gazillion.NetMessageSetProperty.Builder>(internal__static_Gazillion_NetMessageSetProperty__Descriptor,
                new string[] { "ReplicationId", "PropertyId", "ValueBits", });
        internal__static_Gazillion_NetMessageRemoveProperty__Descriptor = Descriptor.MessageTypes[140];
        internal__static_Gazillion_NetMessageRemoveProperty__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveProperty, global::Gazillion.NetMessageRemoveProperty.Builder>(internal__static_Gazillion_NetMessageRemoveProperty__Descriptor,
                new string[] { "ReplicationId", "PropertyId", });
        internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor = Descriptor.MessageTypes[141];
        internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder>(internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor,
                new string[] { "Category", "Ivalue", "Fvalue", });
        internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor = Descriptor.MessageTypes[142];
        internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerNewId, global::Gazillion.NetMessagePvPScorePlayerNewId.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "PlayerName", "TeamProtoId", "AvatarProtoId", });
        internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor = Descriptor.MessageTypes[143];
        internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerTeamChange, global::Gazillion.NetMessagePvPScorePlayerTeamChange.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "TeamProtoId", });
        internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor = Descriptor.MessageTypes[144];
        internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvPScorePlayerUpdate, global::Gazillion.NetMessagePvPScorePlayerUpdate.Builder>(internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor,
                new string[] { "PvpEntityId", "PlayerDbGuid", "Updates", });
        internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor = Descriptor.MessageTypes[145];
        internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageTransitionUpdate, global::Gazillion.NetMessageTransitionUpdate.Builder>(internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor = Descriptor.MessageTypes[146];
        internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarNameChange, global::Gazillion.NetMessageAvatarNameChange.Builder>(internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor,
                new string[] { "IdEntity", });
        internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor = Descriptor.MessageTypes[147];
        internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRepeat, global::Gazillion.NetMessageMissionInteractRepeat.Builder>(internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor,
                new string[] { "TargetEntityId", "MissionPrototypeId", });
        internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor = Descriptor.MessageTypes[148];
        internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMissionInteractRelease, global::Gazillion.NetMessageMissionInteractRelease.Builder>(internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageAddCondition__Descriptor = Descriptor.MessageTypes[149];
        internal__static_Gazillion_NetMessageAddCondition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAddCondition, global::Gazillion.NetMessageAddCondition.Builder>(internal__static_Gazillion_NetMessageAddCondition__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageDeleteCondition__Descriptor = Descriptor.MessageTypes[150];
        internal__static_Gazillion_NetMessageDeleteCondition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDeleteCondition, global::Gazillion.NetMessageDeleteCondition.Builder>(internal__static_Gazillion_NetMessageDeleteCondition__Descriptor,
                new string[] { "IdEntity", "Key", });
        internal__static_Gazillion_NetMessageEnableCondition__Descriptor = Descriptor.MessageTypes[151];
        internal__static_Gazillion_NetMessageEnableCondition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEnableCondition, global::Gazillion.NetMessageEnableCondition.Builder>(internal__static_Gazillion_NetMessageEnableCondition__Descriptor,
                new string[] { "IdEntity", "Key", "Enable", });
        internal__static_Gazillion_NetMessageChangeConditionPauseTime__Descriptor = Descriptor.MessageTypes[152];
        internal__static_Gazillion_NetMessageChangeConditionPauseTime__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeConditionPauseTime, global::Gazillion.NetMessageChangeConditionPauseTime.Builder>(internal__static_Gazillion_NetMessageChangeConditionPauseTime__Descriptor,
                new string[] { "IdEntity", "Key", "PauseTime", "StartTime", });
        internal__static_Gazillion_NetMessageChangeConditionDuration__Descriptor = Descriptor.MessageTypes[153];
        internal__static_Gazillion_NetMessageChangeConditionDuration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageChangeConditionDuration, global::Gazillion.NetMessageChangeConditionDuration.Builder>(internal__static_Gazillion_NetMessageChangeConditionDuration__Descriptor,
                new string[] { "IdEntity", "Key", "Duration", "StartTime", });
        internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__Descriptor = Descriptor.MessageTypes[154];
        internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer, global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer.Builder>(internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "SlotNumber", "KeyMappingIndex", });
        internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__Descriptor = Descriptor.MessageTypes[155];
        internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer, global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer.Builder>(internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__Descriptor,
                new string[] { "AvatarId", "KeyMappingIndex", "SlotNumber", });
        internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__Descriptor = Descriptor.MessageTypes[156];
        internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer, global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer.Builder>(internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__Descriptor,
                new string[] { "AvatarId", "SlotNumberA", "SlotNumberB", });
        internal__static_Gazillion_NetMessageAssignHotkeyFromServer__Descriptor = Descriptor.MessageTypes[157];
        internal__static_Gazillion_NetMessageAssignHotkeyFromServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignHotkeyFromServer, global::Gazillion.NetMessageAssignHotkeyFromServer.Builder>(internal__static_Gazillion_NetMessageAssignHotkeyFromServer__Descriptor,
                new string[] { "AvatarId", "PrototypeRefId", "KeyMappingIndex", "SlotNumber", "DestinationSlotNumber", });
        internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__Descriptor = Descriptor.MessageTypes[158];
        internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUnassignHotkeyFromServer, global::Gazillion.NetMessageUnassignHotkeyFromServer.Builder>(internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__Descriptor,
                new string[] { "AvatarId", "KeyMappingIndex", "SlotNumber", });
        internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor = Descriptor.MessageTypes[159];
        internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionAssignPower, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder>(internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor,
                new string[] { "EntityId", "PowerProtoId", "PowerRank", "CharacterLevel", "CombatLevel", "ItemLevel", "ItemVariation", });
        internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor = Descriptor.MessageTypes[160];
        internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAssignPowerCollection, global::Gazillion.NetMessageAssignPowerCollection.Builder>(internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor,
                new string[] { "Power", });
        internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor = Descriptor.MessageTypes[161];
        internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePowerCollectionUnassignPower, global::Gazillion.NetMessagePowerCollectionUnassignPower.Builder>(internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor,
                new string[] { "EntityId", "PowerProtoId", });
        internal__static_Gazillion_NetMessageUpdatePowerIndexProps__Descriptor = Descriptor.MessageTypes[162];
        internal__static_Gazillion_NetMessageUpdatePowerIndexProps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdatePowerIndexProps, global::Gazillion.NetMessageUpdatePowerIndexProps.Builder>(internal__static_Gazillion_NetMessageUpdatePowerIndexProps__Descriptor,
                new string[] { "EntityId", "PowerProtoId", "PowerRank", "CharacterLevel", "CombatLevel", "ItemLevel", "ItemVariation", });
        internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor = Descriptor.MessageTypes[163];
        internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnWaypointUpdated, global::Gazillion.NetMessageOnWaypointUpdated.Builder>(internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor,
                new string[] { "IdPlayer", });
        internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor = Descriptor.MessageTypes[164];
        internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInternalReportPlayerLoadError, global::Gazillion.NetMessageInternalReportPlayerLoadError.Builder>(internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor,
                new string[] { "ServerReport", });
        internal__static_Gazillion_MessageReportEntry__Descriptor = Descriptor.MessageTypes[165];
        internal__static_Gazillion_MessageReportEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.MessageReportEntry, global::Gazillion.MessageReportEntry.Builder>(internal__static_Gazillion_MessageReportEntry__Descriptor,
                new string[] { "MessageName", "TotalCount", "TotalBytes", });
        internal__static_Gazillion_NetMessageMessageReport__Descriptor = Descriptor.MessageTypes[166];
        internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMessageReport, global::Gazillion.NetMessageMessageReport.Builder>(internal__static_Gazillion_NetMessageMessageReport__Descriptor,
                new string[] { "Reports", "ReportSource", "ReportDirection", });
        internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor = Descriptor.MessageTypes[167];
        internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateMiniMap, global::Gazillion.NetMessageUpdateMiniMap.Builder>(internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor,
                new string[] { "ArchiveData", });
        internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor = Descriptor.MessageTypes[168];
        internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMoveToAlternateLandingSpot, global::Gazillion.NetMessageMoveToAlternateLandingSpot.Builder>(internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor,
                new string[] { "IdEntity", "LandingPosition", "LandingPowerprototypeId", });
        internal__static_Gazillion_NetMessageConsoleMessage__Descriptor = Descriptor.MessageTypes[169];
        internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConsoleMessage, global::Gazillion.NetMessageConsoleMessage.Builder>(internal__static_Gazillion_NetMessageConsoleMessage__Descriptor,
                new string[] { "MessageText", });
        internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor = Descriptor.MessageTypes[170];
        internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAvatarOnKilledInfoOverride, global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Builder>(internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor,
                new string[] { "RegionId", "AvatarOnKilledInfoProtoId", });
        internal__static_Gazillion_NetMessageOnResurrect__Descriptor = Descriptor.MessageTypes[171];
        internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrect, global::Gazillion.NetMessageOnResurrect.Builder>(internal__static_Gazillion_NetMessageOnResurrect__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor = Descriptor.MessageTypes[172];
        internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectRequest, global::Gazillion.NetMessageOnResurrectRequest.Builder>(internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor,
                new string[] { "TargetId", "ResurrectorId", });
        internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor = Descriptor.MessageTypes[173];
        internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOnResurrectDecline, global::Gazillion.NetMessageOnResurrectDecline.Builder>(internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor = Descriptor.MessageTypes[174];
        internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReloadPackagesStart, global::Gazillion.NetMessageReloadPackagesStart.Builder>(internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor = Descriptor.MessageTypes[175];
        internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayStoryBanter, global::Gazillion.NetMessagePlayStoryBanter.Builder>(internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor,
                new string[] { "BanterAssetId", });
        internal__static_Gazillion_NetMessagePlayUISoundTheme__Descriptor = Descriptor.MessageTypes[176];
        internal__static_Gazillion_NetMessagePlayUISoundTheme__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayUISoundTheme, global::Gazillion.NetMessagePlayUISoundTheme.Builder>(internal__static_Gazillion_NetMessagePlayUISoundTheme__Descriptor,
                new string[] { "SoundThemeAssetId", });
        internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor = Descriptor.MessageTypes[177];
        internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayKismetSeq, global::Gazillion.NetMessagePlayKismetSeq.Builder>(internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor,
                new string[] { "KismetSeqPrototypeId", });
        internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor = Descriptor.MessageTypes[178];
        internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGracefulDisconnectAck, global::Gazillion.NetMessageGracefulDisconnectAck.Builder>(internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor = Descriptor.MessageTypes[179];
        internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLiveTuningUpdate, global::Gazillion.NetMessageLiveTuningUpdate.Builder>(internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor,
                new string[] { "TuningTypeKeyValueSettings", });
        internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor = Descriptor.MessageTypes[180];
        internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUpdateSituationalTarget, global::Gazillion.NetMessageUpdateSituationalTarget.Builder>(internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor,
                new string[] { "PowerOwnerId", "SituationalPowerProtoId", "SituationalTargetId", "AddTarget", });
        internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor = Descriptor.MessageTypes[181];
        internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageConfirmStartNewGame, global::Gazillion.NetMessageConfirmStartNewGame.Builder>(internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageOneTimeSnapCamera__Descriptor = Descriptor.MessageTypes[182];
        internal__static_Gazillion_NetMessageOneTimeSnapCamera__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOneTimeSnapCamera, global::Gazillion.NetMessageOneTimeSnapCamera.Builder>(internal__static_Gazillion_NetMessageOneTimeSnapCamera__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor = Descriptor.MessageTypes[183];
        internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMemberFailure, global::Gazillion.NetMessageModifyCommunityMemberFailure.Builder>(internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor,
                new string[] { "MemberToModifyName", "FailureCode", "CircleId", "Operation", });
        internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor = Descriptor.MessageTypes[184];
        internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageModifyCommunityMember, global::Gazillion.NetMessageModifyCommunityMember.Builder>(internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor,
                new string[] { "Broadcast", "PlayerName", "SystemCirclesBitSet", });
        internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor = Descriptor.MessageTypes[185];
        internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceiveCommunityNotify, global::Gazillion.NetMessageReceiveCommunityNotify.Builder>(internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor,
                new string[] { "Notify", });
        internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor = Descriptor.MessageTypes[186];
        internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemBindingChanged, global::Gazillion.NetMessageItemBindingChanged.Builder>(internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor,
                new string[] { "ItemId", "AccountBound", "CharacterProtoId", "TradeRestricted", });
        internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor = Descriptor.MessageTypes[187];
        internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemsHeldForRecovery, global::Gazillion.NetMessageItemsHeldForRecovery.Builder>(internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor,
                new string[] { "ItemIds", });
        internal__static_Gazillion_NetMessageItemRecovered__Descriptor = Descriptor.MessageTypes[188];
        internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageItemRecovered, global::Gazillion.NetMessageItemRecovered.Builder>(internal__static_Gazillion_NetMessageItemRecovered__Descriptor,
                new string[] { "ItemId", });
        internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor = Descriptor.MessageTypes[189];
        internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed, global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Builder>(internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor,
                new string[] { "TargetId", "Reason", });
        internal__static_Gazillion_NetMessageCoopStartEntranceFailed__Descriptor = Descriptor.MessageTypes[190];
        internal__static_Gazillion_NetMessageCoopStartEntranceFailed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCoopStartEntranceFailed, global::Gazillion.NetMessageCoopStartEntranceFailed.Builder>(internal__static_Gazillion_NetMessageCoopStartEntranceFailed__Descriptor,
                new string[] { "TargetId", });
        internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor = Descriptor.MessageTypes[191];
        internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildMessageToClient, global::Gazillion.NetMessageGuildMessageToClient.Builder>(internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor,
                new string[] { "Messages", });
        internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor = Descriptor.MessageTypes[192];
        internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageEntityGuildInfo, global::Gazillion.NetMessageEntityGuildInfo.Builder>(internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor,
                new string[] { "EntityId", "GuildId", "GuildName", "GuildMembership", "DebugEntityServerString", });
        internal__static_Gazillion_NetMessageLeaveGuild__Descriptor = Descriptor.MessageTypes[193];
        internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaveGuild, global::Gazillion.NetMessageLeaveGuild.Builder>(internal__static_Gazillion_NetMessageLeaveGuild__Descriptor,
                new string[] { "GuildId", "Reason", "InitiatingPlayerName", });
        internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor = Descriptor.MessageTypes[194];
        internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGuildSystemMessage, global::Gazillion.NetMessageGuildSystemMessage.Builder>(internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor,
                new string[] { "Code", });
        internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor = Descriptor.MessageTypes[195];
        internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRegionDifficultyChange, global::Gazillion.NetMessageRegionDifficultyChange.Builder>(internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor,
                new string[] { "DifficultyIndex", });
        internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor = Descriptor.MessageTypes[196];
        internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameWaveUpdate, global::Gazillion.NetMessageMetaGameWaveUpdate.Builder>(internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor,
                new string[] { "CurrentWaveCount", "MaxWaveCount", "MetaGameId", });
        internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor = Descriptor.MessageTypes[197];
        internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceCrystalUpdate, global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Builder>(internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor,
                new string[] { "CurrentCrystalCount", "MaxCrystalCount", "MetaGameId", });
        internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor = Descriptor.MessageTypes[198];
        internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceDeathUpdate, global::Gazillion.NetMessagePvEInstanceDeathUpdate.Builder>(internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor,
                new string[] { "CurrentDeathCount", "MetaGameId", });
        internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__Descriptor = Descriptor.MessageTypes[199];
        internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate, global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate.Builder>(internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__Descriptor,
                new string[] { "CurrentRegionScore", "MetaGameId", });
        internal__static_Gazillion_NetMessageMetaGameBanner__Descriptor = Descriptor.MessageTypes[200];
        internal__static_Gazillion_NetMessageMetaGameBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMetaGameBanner, global::Gazillion.NetMessageMetaGameBanner.Builder>(internal__static_Gazillion_NetMessageMetaGameBanner__Descriptor,
                new string[] { "MessageStringId", "PlayerName1", "PlayerName2", "ArgStringIds", "IntArgs", });
        internal__static_Gazillion_NetMessagePostDialogToClient__Descriptor = Descriptor.MessageTypes[201];
        internal__static_Gazillion_NetMessagePostDialogToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePostDialogToClient, global::Gazillion.NetMessagePostDialogToClient.Builder>(internal__static_Gazillion_NetMessagePostDialogToClient__Descriptor,
                new string[] { "ServerId", "PlayerGuid", "Dialog", });
        internal__static_Gazillion_NetMessageRemoveDialogFromClient__Descriptor = Descriptor.MessageTypes[202];
        internal__static_Gazillion_NetMessageRemoveDialogFromClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRemoveDialogFromClient, global::Gazillion.NetMessageRemoveDialogFromClient.Builder>(internal__static_Gazillion_NetMessageRemoveDialogFromClient__Descriptor,
                new string[] { "ServerId", "PlayerGuid", });
        internal__static_Gazillion_NetMessageCancelPendingActionToClient__Descriptor = Descriptor.MessageTypes[203];
        internal__static_Gazillion_NetMessageCancelPendingActionToClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCancelPendingActionToClient, global::Gazillion.NetMessageCancelPendingActionToClient.Builder>(internal__static_Gazillion_NetMessageCancelPendingActionToClient__Descriptor,
                new string[] { "AvatarIndex", });
        internal__static_Gazillion_NetMessageRecvAkEventFromEntity__Descriptor = Descriptor.MessageTypes[204];
        internal__static_Gazillion_NetMessageRecvAkEventFromEntity__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRecvAkEventFromEntity, global::Gazillion.NetMessageRecvAkEventFromEntity.Builder>(internal__static_Gazillion_NetMessageRecvAkEventFromEntity__Descriptor,
                new string[] { "AkEventId", "EntityId", "IsVO", "EventType", "CooldownMS", });
        internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor = Descriptor.MessageTypes[205];
        internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowTutorialTip, global::Gazillion.NetMessageShowTutorialTip.Builder>(internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor,
                new string[] { "TipDataRefId", });
        internal__static_Gazillion_NetMessageMatchQueueUpdateClient__Descriptor = Descriptor.MessageTypes[206];
        internal__static_Gazillion_NetMessageMatchQueueUpdateClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageMatchQueueUpdateClient, global::Gazillion.NetMessageMatchQueueUpdateClient.Builder>(internal__static_Gazillion_NetMessageMatchQueueUpdateClient__Descriptor,
                new string[] { "PlayerGuid", "RegionProtoId", "RegionRequestGroupId", "PlayerName", "Status", "PlayersInQueue", });
        internal__static_Gazillion_GlobalEventCriteriaData__Descriptor = Descriptor.MessageTypes[207];
        internal__static_Gazillion_GlobalEventCriteriaData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.GlobalEventCriteriaData, global::Gazillion.GlobalEventCriteriaData.Builder>(internal__static_Gazillion_GlobalEventCriteriaData__Descriptor,
                new string[] { "CriteriaId", "Progress", });
        internal__static_Gazillion_NetMessageGlobalEventDataUpdate__Descriptor = Descriptor.MessageTypes[208];
        internal__static_Gazillion_NetMessageGlobalEventDataUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGlobalEventDataUpdate, global::Gazillion.NetMessageGlobalEventDataUpdate.Builder>(internal__static_Gazillion_NetMessageGlobalEventDataUpdate__Descriptor,
                new string[] { "EventId", "TotalProgress", "CriteriaProgress", });
        internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__Descriptor = Descriptor.MessageTypes[209];
        internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGlobalEventLeaderboardUpdate, global::Gazillion.NetMessageGlobalEventLeaderboardUpdate.Builder>(internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__Descriptor,
                new string[] { "EventId", "LeaderboardLength", "PlayerNames", });
        internal__static_Gazillion_NetMessageOpenUIPanel__Descriptor = Descriptor.MessageTypes[210];
        internal__static_Gazillion_NetMessageOpenUIPanel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageOpenUIPanel, global::Gazillion.NetMessageOpenUIPanel.Builder>(internal__static_Gazillion_NetMessageOpenUIPanel__Descriptor,
                new string[] { "PanelName", "TabIndex", });
        internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__Descriptor = Descriptor.MessageTypes[211];
        internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerOwnsItemResponse, global::Gazillion.NetMessagePlayerOwnsItemResponse.Builder>(internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__Descriptor,
                new string[] { "ItemProtoId", "Owns", });
        internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__Descriptor = Descriptor.MessageTypes[212];
        internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShowShareLegendaryMissionNotification, global::Gazillion.NetMessageShowShareLegendaryMissionNotification.Builder>(internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__Descriptor,
                new string[] { "PlayerName", "MissionDataRef", });
        internal__static_Gazillion_NetMessageShareLegendaryMissionResult__Descriptor = Descriptor.MessageTypes[213];
        internal__static_Gazillion_NetMessageShareLegendaryMissionResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageShareLegendaryMissionResult, global::Gazillion.NetMessageShareLegendaryMissionResult.Builder>(internal__static_Gazillion_NetMessageShareLegendaryMissionResult__Descriptor,
                new string[] { "PlayerName", "MissionDataRef", "Result", });
        internal__static_Gazillion_NetMessageUISyncDataUpdate__Descriptor = Descriptor.MessageTypes[214];
        internal__static_Gazillion_NetMessageUISyncDataUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISyncDataUpdate, global::Gazillion.NetMessageUISyncDataUpdate.Builder>(internal__static_Gazillion_NetMessageUISyncDataUpdate__Descriptor,
                new string[] { "UiSyncDataProtoId", "ContextProtoId", "Buffer", });
        internal__static_Gazillion_NetMessagePlayerTradeStatus__Descriptor = Descriptor.MessageTypes[215];
        internal__static_Gazillion_NetMessagePlayerTradeStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePlayerTradeStatus, global::Gazillion.NetMessagePlayerTradeStatus.Builder>(internal__static_Gazillion_NetMessagePlayerTradeStatus__Descriptor,
                new string[] { "StatusCode", "PartnerPlayerName", "ConfirmFlag", "PartnerConfirmFlag", "SequenceNumber", });
        internal__static_Gazillion_NetMessageUISyncDataRemove__Descriptor = Descriptor.MessageTypes[216];
        internal__static_Gazillion_NetMessageUISyncDataRemove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageUISyncDataRemove, global::Gazillion.NetMessageUISyncDataRemove.Builder>(internal__static_Gazillion_NetMessageUISyncDataRemove__Descriptor,
                new string[] { "UiSyncDataProtoId", "ContextProtoId", });
        internal__static_Gazillion_AchievementDatabaseDump__Descriptor = Descriptor.MessageTypes[217];
        internal__static_Gazillion_AchievementDatabaseDump__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.AchievementDatabaseDump, global::Gazillion.AchievementDatabaseDump.Builder>(internal__static_Gazillion_AchievementDatabaseDump__Descriptor,
                new string[] { "LocalizedAchievementStringBuffer", "AchievementInfos", "AchievementNewThresholdUS", });
        internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__Descriptor = internal__static_Gazillion_AchievementDatabaseDump__Descriptor.NestedTypes[0];
        internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo, global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.Builder>(internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__Descriptor,
                new string[] { "Id", "Enabled", "ParentId", "Name", "InProgressStr", "CompletedStr", "RewardStr", "IconPathAssetId", "Score", "CategoryStr", "SubCategoryStr", "DisplayOrder", "VisibleState", "EvaluationType", "Eventtype", "Threshold", "DependentAchievementId", "UiProgressDisplayOption", "PublishedDateUS", });
        internal__static_Gazillion_NetMessageAchievementDatabaseDump__Descriptor = Descriptor.MessageTypes[218];
        internal__static_Gazillion_NetMessageAchievementDatabaseDump__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementDatabaseDump, global::Gazillion.NetMessageAchievementDatabaseDump.Builder>(internal__static_Gazillion_NetMessageAchievementDatabaseDump__Descriptor,
                new string[] { "CompressedAchievementDatabaseDump", });
        internal__static_Gazillion_NetMessageAchievementStateUpdate__Descriptor = Descriptor.MessageTypes[219];
        internal__static_Gazillion_NetMessageAchievementStateUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementStateUpdate, global::Gazillion.NetMessageAchievementStateUpdate.Builder>(internal__static_Gazillion_NetMessageAchievementStateUpdate__Descriptor,
                new string[] { "AchievementStates", "Showpopups", });
        internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__Descriptor = internal__static_Gazillion_NetMessageAchievementStateUpdate__Descriptor.NestedTypes[0];
        internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState, global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.Builder>(internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__Descriptor,
                new string[] { "Id", "Count", "Completeddate", });
        internal__static_Gazillion_NetMessagePartyKickGracePeriod__Descriptor = Descriptor.MessageTypes[220];
        internal__static_Gazillion_NetMessagePartyKickGracePeriod__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePartyKickGracePeriod, global::Gazillion.NetMessagePartyKickGracePeriod.Builder>(internal__static_Gazillion_NetMessagePartyKickGracePeriod__Descriptor,
                new string[] { "ExpireTimeMicroseconds", "LeaveReason", });
        internal__static_Gazillion_NetMessageReceivedGift__Descriptor = Descriptor.MessageTypes[221];
        internal__static_Gazillion_NetMessageReceivedGift__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageReceivedGift, global::Gazillion.NetMessageReceivedGift.Builder>(internal__static_Gazillion_NetMessageReceivedGift__Descriptor,
                new string[] { "SkuId", "TransId", "Sender", "Message", });
        internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__Descriptor = Descriptor.MessageTypes[222];
        internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAchievementCompletedByPartyMember, global::Gazillion.NetMessageAchievementCompletedByPartyMember.Builder>(internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__Descriptor,
                new string[] { "Id", "PlayerName", });
        internal__static_Gazillion_NetMessageVerifyOnClient__Descriptor = Descriptor.MessageTypes[223];
        internal__static_Gazillion_NetMessageVerifyOnClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageVerifyOnClient, global::Gazillion.NetMessageVerifyOnClient.Builder>(internal__static_Gazillion_NetMessageVerifyOnClient__Descriptor,
                new string[] { "Message", });
        internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__Descriptor = Descriptor.MessageTypes[224];
        internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageCreateAndOpenFileOnClient, global::Gazillion.NetMessageCreateAndOpenFileOnClient.Builder>(internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__Descriptor,
                new string[] { "RelativePath", "Contents", });
        internal__static_Gazillion_NetMessageInventoryLoaded__Descriptor = Descriptor.MessageTypes[225];
        internal__static_Gazillion_NetMessageInventoryLoaded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageInventoryLoaded, global::Gazillion.NetMessageInventoryLoaded.Builder>(internal__static_Gazillion_NetMessageInventoryLoaded__Descriptor,
                new string[] { "InventoryProtoId", });
        internal__static_Gazillion_NetMessageLeaderboardReportClient__Descriptor = Descriptor.MessageTypes[226];
        internal__static_Gazillion_NetMessageLeaderboardReportClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardReportClient, global::Gazillion.NetMessageLeaderboardReportClient.Builder>(internal__static_Gazillion_NetMessageLeaderboardReportClient__Descriptor,
                new string[] { "Report", });
        internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__Descriptor = Descriptor.MessageTypes[227];
        internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardCheatResponseClient, global::Gazillion.NetMessageLeaderboardCheatResponseClient.Builder>(internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__Descriptor,
                new string[] { "CheatResponseText", });
        internal__static_Gazillion_LeaderboardArchivedInstanceListData__Descriptor = Descriptor.MessageTypes[228];
        internal__static_Gazillion_LeaderboardArchivedInstanceListData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.LeaderboardArchivedInstanceListData, global::Gazillion.LeaderboardArchivedInstanceListData.Builder>(internal__static_Gazillion_LeaderboardArchivedInstanceListData__Descriptor,
                new string[] { "LeaderboardId", "ArchivedInstanceList", });
        internal__static_Gazillion_LeaderboardInitData__Descriptor = Descriptor.MessageTypes[229];
        internal__static_Gazillion_LeaderboardInitData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.LeaderboardInitData, global::Gazillion.LeaderboardInitData.Builder>(internal__static_Gazillion_LeaderboardInitData__Descriptor,
                new string[] { "LeaderboardId", "CurrentInstanceData", "ArchivedInstanceList", });
        internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__Descriptor = Descriptor.MessageTypes[230];
        internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse, global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse.Builder>(internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__Descriptor,
                new string[] { "InstanceList", });
        internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__Descriptor = Descriptor.MessageTypes[231];
        internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardInitializeRequestResponse, global::Gazillion.NetMessageLeaderboardInitializeRequestResponse.Builder>(internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__Descriptor,
                new string[] { "LeaderboardInitDataList", });
        internal__static_Gazillion_NetMessageLeaderboardStateChange__Descriptor = Descriptor.MessageTypes[232];
        internal__static_Gazillion_NetMessageLeaderboardStateChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardStateChange, global::Gazillion.NetMessageLeaderboardStateChange.Builder>(internal__static_Gazillion_NetMessageLeaderboardStateChange__Descriptor,
                new string[] { "LeaderboardId", "InstanceId", "NewState", "ActivationTimestamp", "ExpirationTimestamp", "Visible", });
        internal__static_Gazillion_NetMessageLeaderboardRewarded__Descriptor = Descriptor.MessageTypes[233];
        internal__static_Gazillion_NetMessageLeaderboardRewarded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLeaderboardRewarded, global::Gazillion.NetMessageLeaderboardRewarded.Builder>(internal__static_Gazillion_NetMessageLeaderboardRewarded__Descriptor,
                new string[] { "LeaderboardId", "LeaderboardInstance", "RewardGuid", "Rank", });
        internal__static_Gazillion_NetMessageGiftHistoryResult__Descriptor = Descriptor.MessageTypes[234];
        internal__static_Gazillion_NetMessageGiftHistoryResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGiftHistoryResult, global::Gazillion.NetMessageGiftHistoryResult.Builder>(internal__static_Gazillion_NetMessageGiftHistoryResult__Descriptor,
                new string[] { "Sent", "Received", });
        internal__static_Gazillion_NetMessageStoreTooBusy__Descriptor = Descriptor.MessageTypes[235];
        internal__static_Gazillion_NetMessageStoreTooBusy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageStoreTooBusy, global::Gazillion.NetMessageStoreTooBusy.Builder>(internal__static_Gazillion_NetMessageStoreTooBusy__Descriptor,
                new string[] { "SkuId", });
        internal__static_Gazillion_NetMessageSetDebuggingClient__Descriptor = Descriptor.MessageTypes[236];
        internal__static_Gazillion_NetMessageSetDebuggingClient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageSetDebuggingClient, global::Gazillion.NetMessageSetDebuggingClient.Builder>(internal__static_Gazillion_NetMessageSetDebuggingClient__Descriptor,
                new string[] { "Debugging", });
        internal__static_Gazillion_NetMessageLocalCoopStart__Descriptor = Descriptor.MessageTypes[237];
        internal__static_Gazillion_NetMessageLocalCoopStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalCoopStart, global::Gazillion.NetMessageLocalCoopStart.Builder>(internal__static_Gazillion_NetMessageLocalCoopStart__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageLocalCoopEnd__Descriptor = Descriptor.MessageTypes[238];
        internal__static_Gazillion_NetMessageLocalCoopEnd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageLocalCoopEnd, global::Gazillion.NetMessageLocalCoopEnd.Builder>(internal__static_Gazillion_NetMessageLocalCoopEnd__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessageAwardUpdate__Descriptor = Descriptor.MessageTypes[239];
        internal__static_Gazillion_NetMessageAwardUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageAwardUpdate, global::Gazillion.NetMessageAwardUpdate.Builder>(internal__static_Gazillion_NetMessageAwardUpdate__Descriptor,
                new string[] { "AwardType", "CouponData", "ItemData", });
        internal__static_Gazillion_NetMessageDisplayCouponNotifications__Descriptor = Descriptor.MessageTypes[240];
        internal__static_Gazillion_NetMessageDisplayCouponNotifications__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageDisplayCouponNotifications, global::Gazillion.NetMessageDisplayCouponNotifications.Builder>(internal__static_Gazillion_NetMessageDisplayCouponNotifications__Descriptor,
                new string[] { });
        internal__static_Gazillion_NetMessagePublicEventTeamAssigned__Descriptor = Descriptor.MessageTypes[241];
        internal__static_Gazillion_NetMessagePublicEventTeamAssigned__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessagePublicEventTeamAssigned, global::Gazillion.NetMessagePublicEventTeamAssigned.Builder>(internal__static_Gazillion_NetMessagePublicEventTeamAssigned__Descriptor,
                new string[] { "Success", "PublicEventProtoId", });
        internal__static_Gazillion_NetMessageRoutedClientMessageResponse__Descriptor = Descriptor.MessageTypes[242];
        internal__static_Gazillion_NetMessageRoutedClientMessageResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageRoutedClientMessageResponse, global::Gazillion.NetMessageRoutedClientMessageResponse.Builder>(internal__static_Gazillion_NetMessageRoutedClientMessageResponse__Descriptor,
                new string[] { "Payload", });
        internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__Descriptor = Descriptor.MessageTypes[243];
        internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gazillion.NetMessageGiftingRestrictionsUpdate, global::Gazillion.NetMessageGiftingRestrictionsUpdate.Builder>(internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__Descriptor,
                new string[] { "EmailVerified", "AccountCreationTimestampUtc", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Gazillion.GazillionCommon.RegisterAllExtensions(registry);
        global::Gazillion.CommonMessages.RegisterAllExtensions(registry);
        global::Gazillion.ChatCommon.RegisterAllExtensions(registry);
        global::Gazillion.MatchCommon.RegisterAllExtensions(registry);
        global::Gazillion.BillingCommon.RegisterAllExtensions(registry);
        global::Gazillion.Guild.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Gazillion.GazillionCommon.Descriptor, 
          global::Gazillion.CommonMessages.Descriptor, 
          global::Gazillion.ChatCommon.Descriptor, 
          global::Gazillion.MatchCommon.Descriptor, 
          global::Gazillion.BillingCommon.Descriptor, 
          global::Gazillion.Guild.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ForceDisconnectReason {
    eFDR_None = 0,
    eFDR_ForcedDisconnect = 1,
    eFDR_ErrorLoadingCharacter = 2,
    eFDR_CheckpointFailed = 3,
    eFDR_UnableToCreateRegion = 4,
    eFDR_FulfillmentFailed = 5,
    eFDR_PSNFailure = 6,
  }
  
  public enum CommunityModifyFailureCode {
    eCMFC_Timeout = 1,
    eCMFC_UnknownPlayer = 2,
  }
  
  public enum SwitchToAvatarFailedReason {
    eSAFR_Unknown = 0,
    eSAFR_InvalidLocation = 1,
    eSAFR_RegionRestrictionEval = 2,
    eSAFR_InvalidRegion = 3,
    eSAFR_SwapInPowerFailedToActivate = 4,
    eSAFR_RegionRestrictionKwd = 5,
  }
  
  public enum GuildLeaveReason {
    eGLR_Left = 1,
    eGLR_Kicked = 2,
  }
  
  public enum GuildMessageCode {
    eGMC_None = 1,
    eGMC_GuildNameDirty = 2,
    eGMC_ServicesDown = 3,
    eGMC_GuildNameInvalidCharacters = 4,
    eGMC_GuildNameTooShort = 5,
    eGMC_GuildNameTooLong = 6,
    eGMC_GuildNameIdentical = 7,
    eGMC_GuildNotInGuild = 8,
    eGMC_GuildsLocked = 9,
    eGMC_GuildMotdInvalidCharacters = 10,
    eGMC_GuildMotdTooShort = 11,
    eGMC_GuildMotdTooLong = 12,
  }
  
  public enum PlayerTradeStatusCode {
    ePTSC_None = 0,
    ePTSC_SentInvitation = 1,
    ePTSC_ReceivedInvitation = 2,
    ePTSC_TradeInProgress = 3,
    ePTSC_Disabled = 4,
    ePTSC_InvalidPartner = 5,
    ePTSC_PartnerIsBusy = 6,
    ePTSC_PartnerIsIgnored = 7,
    ePTSC_Cancelled = 8,
    ePTSC_PartnerCancelled = 9,
    ePTSC_TradeExecuted = 10,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyAndLoggedIn : pb::GeneratedMessage<NetMessageReadyAndLoggedIn, NetMessageReadyAndLoggedIn.Builder> {
    private NetMessageReadyAndLoggedIn() { }
    private static readonly NetMessageReadyAndLoggedIn defaultInstance = new NetMessageReadyAndLoggedIn().MakeReadOnly();
    private static readonly string[] _netMessageReadyAndLoggedInFieldNames = new string[] { "reportDefectConfig" };
    private static readonly uint[] _netMessageReadyAndLoggedInFieldTags = new uint[] { 10 };
    public static NetMessageReadyAndLoggedIn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyAndLoggedIn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyAndLoggedIn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyAndLoggedIn, NetMessageReadyAndLoggedIn.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ReportDefectConfig : pb::GeneratedMessage<ReportDefectConfig, ReportDefectConfig.Builder> {
        private ReportDefectConfig() { }
        private static readonly ReportDefectConfig defaultInstance = new ReportDefectConfig().MakeReadOnly();
        private static readonly string[] _reportDefectConfigFieldNames = new string[] { "host", "port", "url" };
        private static readonly uint[] _reportDefectConfigFieldTags = new uint[] { 10, 24, 18 };
        public static ReportDefectConfig DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ReportDefectConfig DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ReportDefectConfig ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ReportDefectConfig, ReportDefectConfig.Builder> InternalFieldAccessors {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoggedIn_ReportDefectConfig__FieldAccessorTable; }
        }
        
        public const int HostFieldNumber = 1;
        private bool hasHost;
        private string host_ = "";
        public bool HasHost {
          get { return hasHost; }
        }
        public string Host {
          get { return host_; }
        }
        
        public const int UrlFieldNumber = 2;
        private bool hasUrl;
        private string url_ = "";
        public bool HasUrl {
          get { return hasUrl; }
        }
        public string Url {
          get { return url_; }
        }
        
        public const int PortFieldNumber = 3;
        private bool hasPort;
        private uint port_;
        public bool HasPort {
          get { return hasPort; }
        }
        public uint Port {
          get { return port_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasHost) return false;
            if (!hasUrl) return false;
            if (!hasPort) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _reportDefectConfigFieldNames;
          if (hasHost) {
            output.WriteString(1, field_names[0], Host);
          }
          if (hasUrl) {
            output.WriteString(2, field_names[2], Url);
          }
          if (hasPort) {
            output.WriteUInt32(3, field_names[1], Port);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasHost) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Host);
          }
          if (hasUrl) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Url);
          }
          if (hasPort) {
            size += pb::CodedOutputStream.ComputeUInt32Size(3, Port);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ReportDefectConfig ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ReportDefectConfig ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ReportDefectConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReportDefectConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ReportDefectConfig MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ReportDefectConfig prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ReportDefectConfig, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ReportDefectConfig cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ReportDefectConfig result;
          
          private ReportDefectConfig PrepareBuilder() {
            if (resultIsReadOnly) {
              ReportDefectConfig original = result;
              result = new ReportDefectConfig();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ReportDefectConfig MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.Descriptor; }
          }
          
          public override ReportDefectConfig DefaultInstanceForType {
            get { return global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.DefaultInstance; }
          }
          
          public override ReportDefectConfig BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ReportDefectConfig) {
              return MergeFrom((ReportDefectConfig) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ReportDefectConfig other) {
            if (other == global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasHost) {
              Host = other.Host;
            }
            if (other.HasUrl) {
              Url = other.Url;
            }
            if (other.HasPort) {
              Port = other.Port;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_reportDefectConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _reportDefectConfigFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasHost = input.ReadString(ref result.host_);
                  break;
                }
                case 18: {
                  result.hasUrl = input.ReadString(ref result.url_);
                  break;
                }
                case 24: {
                  result.hasPort = input.ReadUInt32(ref result.port_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasHost {
            get { return result.hasHost; }
          }
          public string Host {
            get { return result.Host; }
            set { SetHost(value); }
          }
          public Builder SetHost(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHost = true;
            result.host_ = value;
            return this;
          }
          public Builder ClearHost() {
            PrepareBuilder();
            result.hasHost = false;
            result.host_ = "";
            return this;
          }
          
          public bool HasUrl {
            get { return result.hasUrl; }
          }
          public string Url {
            get { return result.Url; }
            set { SetUrl(value); }
          }
          public Builder SetUrl(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUrl = true;
            result.url_ = value;
            return this;
          }
          public Builder ClearUrl() {
            PrepareBuilder();
            result.hasUrl = false;
            result.url_ = "";
            return this;
          }
          
          public bool HasPort {
            get { return result.hasPort; }
          }
          public uint Port {
            get { return result.Port; }
            set { SetPort(value); }
          }
          public Builder SetPort(uint value) {
            PrepareBuilder();
            result.hasPort = true;
            result.port_ = value;
            return this;
          }
          public Builder ClearPort() {
            PrepareBuilder();
            result.hasPort = false;
            result.port_ = 0;
            return this;
          }
        }
        static ReportDefectConfig() {
          object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int ReportDefectConfigFieldNumber = 1;
    private bool hasReportDefectConfig;
    private global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig reportDefectConfig_;
    public bool HasReportDefectConfig {
      get { return hasReportDefectConfig; }
    }
    public global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig ReportDefectConfig {
      get { return reportDefectConfig_ ?? global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasReportDefectConfig) {
          if (!ReportDefectConfig.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyAndLoggedInFieldNames;
      if (hasReportDefectConfig) {
        output.WriteMessage(1, field_names[0], ReportDefectConfig);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReportDefectConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ReportDefectConfig);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoggedIn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyAndLoggedIn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyAndLoggedIn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyAndLoggedIn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyAndLoggedIn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyAndLoggedIn result;
      
      private NetMessageReadyAndLoggedIn PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyAndLoggedIn original = result;
          result = new NetMessageReadyAndLoggedIn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyAndLoggedIn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyAndLoggedIn.Descriptor; }
      }
      
      public override NetMessageReadyAndLoggedIn DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyAndLoggedIn.DefaultInstance; }
      }
      
      public override NetMessageReadyAndLoggedIn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyAndLoggedIn) {
          return MergeFrom((NetMessageReadyAndLoggedIn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyAndLoggedIn other) {
        if (other == global::Gazillion.NetMessageReadyAndLoggedIn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReportDefectConfig) {
          MergeReportDefectConfig(other.ReportDefectConfig);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyAndLoggedInFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyAndLoggedInFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.Builder subBuilder = global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.CreateBuilder();
              if (result.hasReportDefectConfig) {
                subBuilder.MergeFrom(ReportDefectConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReportDefectConfig = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReportDefectConfig {
       get { return result.hasReportDefectConfig; }
      }
      public global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig ReportDefectConfig {
        get { return result.ReportDefectConfig; }
        set { SetReportDefectConfig(value); }
      }
      public Builder SetReportDefectConfig(global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReportDefectConfig = true;
        result.reportDefectConfig_ = value;
        return this;
      }
      public Builder SetReportDefectConfig(global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReportDefectConfig = true;
        result.reportDefectConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReportDefectConfig(global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReportDefectConfig &&
            result.reportDefectConfig_ != global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.DefaultInstance) {
            result.reportDefectConfig_ = global::Gazillion.NetMessageReadyAndLoggedIn.Types.ReportDefectConfig.CreateBuilder(result.reportDefectConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.reportDefectConfig_ = value;
        }
        result.hasReportDefectConfig = true;
        return this;
      }
      public Builder ClearReportDefectConfig() {
        PrepareBuilder();
        result.hasReportDefectConfig = false;
        result.reportDefectConfig_ = null;
        return this;
      }
    }
    static NetMessageReadyAndLoggedIn() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyAndLoadedOnGameServer : pb::GeneratedMessage<NetMessageReadyAndLoadedOnGameServer, NetMessageReadyAndLoadedOnGameServer.Builder> {
    private NetMessageReadyAndLoadedOnGameServer() { }
    private static readonly NetMessageReadyAndLoadedOnGameServer defaultInstance = new NetMessageReadyAndLoadedOnGameServer().MakeReadOnly();
    private static readonly string[] _netMessageReadyAndLoadedOnGameServerFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReadyAndLoadedOnGameServerFieldTags = new uint[] {  };
    public static NetMessageReadyAndLoadedOnGameServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyAndLoadedOnGameServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyAndLoadedOnGameServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyAndLoadedOnGameServer, NetMessageReadyAndLoadedOnGameServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyAndLoadedOnGameServer__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyAndLoadedOnGameServerFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyAndLoadedOnGameServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyAndLoadedOnGameServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyAndLoadedOnGameServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyAndLoadedOnGameServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyAndLoadedOnGameServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyAndLoadedOnGameServer result;
      
      private NetMessageReadyAndLoadedOnGameServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyAndLoadedOnGameServer original = result;
          result = new NetMessageReadyAndLoadedOnGameServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyAndLoadedOnGameServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyAndLoadedOnGameServer.Descriptor; }
      }
      
      public override NetMessageReadyAndLoadedOnGameServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyAndLoadedOnGameServer.DefaultInstance; }
      }
      
      public override NetMessageReadyAndLoadedOnGameServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyAndLoadedOnGameServer) {
          return MergeFrom((NetMessageReadyAndLoadedOnGameServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyAndLoadedOnGameServer other) {
        if (other == global::Gazillion.NetMessageReadyAndLoadedOnGameServer.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyAndLoadedOnGameServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyAndLoadedOnGameServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReadyAndLoadedOnGameServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReadyForTimeSync : pb::GeneratedMessage<NetMessageReadyForTimeSync, NetMessageReadyForTimeSync.Builder> {
    private NetMessageReadyForTimeSync() { }
    private static readonly NetMessageReadyForTimeSync defaultInstance = new NetMessageReadyForTimeSync().MakeReadOnly();
    private static readonly string[] _netMessageReadyForTimeSyncFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReadyForTimeSyncFieldTags = new uint[] {  };
    public static NetMessageReadyForTimeSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReadyForTimeSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReadyForTimeSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyForTimeSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReadyForTimeSync, NetMessageReadyForTimeSync.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReadyForTimeSync__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReadyForTimeSyncFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReadyForTimeSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReadyForTimeSync MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReadyForTimeSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReadyForTimeSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReadyForTimeSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReadyForTimeSync result;
      
      private NetMessageReadyForTimeSync PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReadyForTimeSync original = result;
          result = new NetMessageReadyForTimeSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReadyForTimeSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReadyForTimeSync.Descriptor; }
      }
      
      public override NetMessageReadyForTimeSync DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReadyForTimeSync.DefaultInstance; }
      }
      
      public override NetMessageReadyForTimeSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReadyForTimeSync) {
          return MergeFrom((NetMessageReadyForTimeSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReadyForTimeSync other) {
        if (other == global::Gazillion.NetMessageReadyForTimeSync.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReadyForTimeSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReadyForTimeSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReadyForTimeSync() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructGameOptions : pb::GeneratedMessage<NetStructGameOptions, NetStructGameOptions.Builder> {
    private NetStructGameOptions() { }
    private static readonly NetStructGameOptions defaultInstance = new NetStructGameOptions().MakeReadOnly();
    private static readonly string[] _netStructGameOptionsFieldNames = new string[] { "achievementsEnabled", "characterSelectV2Enabled", "chatBanVoteAccountAgeInDaysRequired", "chatBanVoteAvatarLevelRequired", "chatBanVoteLoginCountRequired", "communityNewsV2Enabled", "dynamicCombatLevelEnabled", "giftingAccountAgeInDaysRequired", "giftingAvatarLevelRequired", "giftingEnabled", "giftingLoginCountRequired", "leaderboardsEnabled", "missionTrackerV2Enabled", "multiSpecRewardsEnabled", "newPlayerExperienceEnabled", "omegaMissionsEnabled", "serverTimeOffsetUTC", "teamUpSystemEnabled", "useServerTimeOffset", "veteranRewardsEnabled" };
    private static readonly uint[] _netStructGameOptionsFieldTags = new uint[] { 24, 64, 160, 168, 176, 72, 88, 128, 136, 56, 144, 80, 120, 48, 96, 32, 104, 8, 112, 40 };
    public static NetStructGameOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructGameOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructGameOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructGameOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructGameOptions, NetStructGameOptions.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructGameOptions__FieldAccessorTable; }
    }
    
    public const int TeamUpSystemEnabledFieldNumber = 1;
    private bool hasTeamUpSystemEnabled;
    private bool teamUpSystemEnabled_;
    public bool HasTeamUpSystemEnabled {
      get { return hasTeamUpSystemEnabled; }
    }
    public bool TeamUpSystemEnabled {
      get { return teamUpSystemEnabled_; }
    }
    
    public const int AchievementsEnabledFieldNumber = 3;
    private bool hasAchievementsEnabled;
    private bool achievementsEnabled_;
    public bool HasAchievementsEnabled {
      get { return hasAchievementsEnabled; }
    }
    public bool AchievementsEnabled {
      get { return achievementsEnabled_; }
    }
    
    public const int OmegaMissionsEnabledFieldNumber = 4;
    private bool hasOmegaMissionsEnabled;
    private bool omegaMissionsEnabled_;
    public bool HasOmegaMissionsEnabled {
      get { return hasOmegaMissionsEnabled; }
    }
    public bool OmegaMissionsEnabled {
      get { return omegaMissionsEnabled_; }
    }
    
    public const int VeteranRewardsEnabledFieldNumber = 5;
    private bool hasVeteranRewardsEnabled;
    private bool veteranRewardsEnabled_;
    public bool HasVeteranRewardsEnabled {
      get { return hasVeteranRewardsEnabled; }
    }
    public bool VeteranRewardsEnabled {
      get { return veteranRewardsEnabled_; }
    }
    
    public const int MultiSpecRewardsEnabledFieldNumber = 6;
    private bool hasMultiSpecRewardsEnabled;
    private bool multiSpecRewardsEnabled_;
    public bool HasMultiSpecRewardsEnabled {
      get { return hasMultiSpecRewardsEnabled; }
    }
    public bool MultiSpecRewardsEnabled {
      get { return multiSpecRewardsEnabled_; }
    }
    
    public const int GiftingEnabledFieldNumber = 7;
    private bool hasGiftingEnabled;
    private bool giftingEnabled_;
    public bool HasGiftingEnabled {
      get { return hasGiftingEnabled; }
    }
    public bool GiftingEnabled {
      get { return giftingEnabled_; }
    }
    
    public const int CharacterSelectV2EnabledFieldNumber = 8;
    private bool hasCharacterSelectV2Enabled;
    private bool characterSelectV2Enabled_;
    public bool HasCharacterSelectV2Enabled {
      get { return hasCharacterSelectV2Enabled; }
    }
    public bool CharacterSelectV2Enabled {
      get { return characterSelectV2Enabled_; }
    }
    
    public const int CommunityNewsV2EnabledFieldNumber = 9;
    private bool hasCommunityNewsV2Enabled;
    private bool communityNewsV2Enabled_;
    public bool HasCommunityNewsV2Enabled {
      get { return hasCommunityNewsV2Enabled; }
    }
    public bool CommunityNewsV2Enabled {
      get { return communityNewsV2Enabled_; }
    }
    
    public const int LeaderboardsEnabledFieldNumber = 10;
    private bool hasLeaderboardsEnabled;
    private bool leaderboardsEnabled_;
    public bool HasLeaderboardsEnabled {
      get { return hasLeaderboardsEnabled; }
    }
    public bool LeaderboardsEnabled {
      get { return leaderboardsEnabled_; }
    }
    
    public const int DynamicCombatLevelEnabledFieldNumber = 11;
    private bool hasDynamicCombatLevelEnabled;
    private bool dynamicCombatLevelEnabled_;
    public bool HasDynamicCombatLevelEnabled {
      get { return hasDynamicCombatLevelEnabled; }
    }
    public bool DynamicCombatLevelEnabled {
      get { return dynamicCombatLevelEnabled_; }
    }
    
    public const int NewPlayerExperienceEnabledFieldNumber = 12;
    private bool hasNewPlayerExperienceEnabled;
    private bool newPlayerExperienceEnabled_;
    public bool HasNewPlayerExperienceEnabled {
      get { return hasNewPlayerExperienceEnabled; }
    }
    public bool NewPlayerExperienceEnabled {
      get { return newPlayerExperienceEnabled_; }
    }
    
    public const int ServerTimeOffsetUTCFieldNumber = 13;
    private bool hasServerTimeOffsetUTC;
    private int serverTimeOffsetUTC_;
    public bool HasServerTimeOffsetUTC {
      get { return hasServerTimeOffsetUTC; }
    }
    public int ServerTimeOffsetUTC {
      get { return serverTimeOffsetUTC_; }
    }
    
    public const int UseServerTimeOffsetFieldNumber = 14;
    private bool hasUseServerTimeOffset;
    private bool useServerTimeOffset_;
    public bool HasUseServerTimeOffset {
      get { return hasUseServerTimeOffset; }
    }
    public bool UseServerTimeOffset {
      get { return useServerTimeOffset_; }
    }
    
    public const int MissionTrackerV2EnabledFieldNumber = 15;
    private bool hasMissionTrackerV2Enabled;
    private bool missionTrackerV2Enabled_;
    public bool HasMissionTrackerV2Enabled {
      get { return hasMissionTrackerV2Enabled; }
    }
    public bool MissionTrackerV2Enabled {
      get { return missionTrackerV2Enabled_; }
    }
    
    public const int GiftingAccountAgeInDaysRequiredFieldNumber = 16;
    private bool hasGiftingAccountAgeInDaysRequired;
    private int giftingAccountAgeInDaysRequired_;
    public bool HasGiftingAccountAgeInDaysRequired {
      get { return hasGiftingAccountAgeInDaysRequired; }
    }
    public int GiftingAccountAgeInDaysRequired {
      get { return giftingAccountAgeInDaysRequired_; }
    }
    
    public const int GiftingAvatarLevelRequiredFieldNumber = 17;
    private bool hasGiftingAvatarLevelRequired;
    private int giftingAvatarLevelRequired_;
    public bool HasGiftingAvatarLevelRequired {
      get { return hasGiftingAvatarLevelRequired; }
    }
    public int GiftingAvatarLevelRequired {
      get { return giftingAvatarLevelRequired_; }
    }
    
    public const int GiftingLoginCountRequiredFieldNumber = 18;
    private bool hasGiftingLoginCountRequired;
    private int giftingLoginCountRequired_;
    public bool HasGiftingLoginCountRequired {
      get { return hasGiftingLoginCountRequired; }
    }
    public int GiftingLoginCountRequired {
      get { return giftingLoginCountRequired_; }
    }
    
    public const int ChatBanVoteAccountAgeInDaysRequiredFieldNumber = 20;
    private bool hasChatBanVoteAccountAgeInDaysRequired;
    private int chatBanVoteAccountAgeInDaysRequired_;
    public bool HasChatBanVoteAccountAgeInDaysRequired {
      get { return hasChatBanVoteAccountAgeInDaysRequired; }
    }
    public int ChatBanVoteAccountAgeInDaysRequired {
      get { return chatBanVoteAccountAgeInDaysRequired_; }
    }
    
    public const int ChatBanVoteAvatarLevelRequiredFieldNumber = 21;
    private bool hasChatBanVoteAvatarLevelRequired;
    private int chatBanVoteAvatarLevelRequired_;
    public bool HasChatBanVoteAvatarLevelRequired {
      get { return hasChatBanVoteAvatarLevelRequired; }
    }
    public int ChatBanVoteAvatarLevelRequired {
      get { return chatBanVoteAvatarLevelRequired_; }
    }
    
    public const int ChatBanVoteLoginCountRequiredFieldNumber = 22;
    private bool hasChatBanVoteLoginCountRequired;
    private int chatBanVoteLoginCountRequired_;
    public bool HasChatBanVoteLoginCountRequired {
      get { return hasChatBanVoteLoginCountRequired; }
    }
    public int ChatBanVoteLoginCountRequired {
      get { return chatBanVoteLoginCountRequired_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTeamUpSystemEnabled) return false;
        if (!hasAchievementsEnabled) return false;
        if (!hasOmegaMissionsEnabled) return false;
        if (!hasVeteranRewardsEnabled) return false;
        if (!hasMultiSpecRewardsEnabled) return false;
        if (!hasGiftingEnabled) return false;
        if (!hasCharacterSelectV2Enabled) return false;
        if (!hasCommunityNewsV2Enabled) return false;
        if (!hasLeaderboardsEnabled) return false;
        if (!hasDynamicCombatLevelEnabled) return false;
        if (!hasNewPlayerExperienceEnabled) return false;
        if (!hasServerTimeOffsetUTC) return false;
        if (!hasUseServerTimeOffset) return false;
        if (!hasMissionTrackerV2Enabled) return false;
        if (!hasGiftingAccountAgeInDaysRequired) return false;
        if (!hasGiftingAvatarLevelRequired) return false;
        if (!hasGiftingLoginCountRequired) return false;
        if (!hasChatBanVoteAccountAgeInDaysRequired) return false;
        if (!hasChatBanVoteAvatarLevelRequired) return false;
        if (!hasChatBanVoteLoginCountRequired) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructGameOptionsFieldNames;
      if (hasTeamUpSystemEnabled) {
        output.WriteBool(1, field_names[17], TeamUpSystemEnabled);
      }
      if (hasAchievementsEnabled) {
        output.WriteBool(3, field_names[0], AchievementsEnabled);
      }
      if (hasOmegaMissionsEnabled) {
        output.WriteBool(4, field_names[15], OmegaMissionsEnabled);
      }
      if (hasVeteranRewardsEnabled) {
        output.WriteBool(5, field_names[19], VeteranRewardsEnabled);
      }
      if (hasMultiSpecRewardsEnabled) {
        output.WriteBool(6, field_names[13], MultiSpecRewardsEnabled);
      }
      if (hasGiftingEnabled) {
        output.WriteBool(7, field_names[9], GiftingEnabled);
      }
      if (hasCharacterSelectV2Enabled) {
        output.WriteBool(8, field_names[1], CharacterSelectV2Enabled);
      }
      if (hasCommunityNewsV2Enabled) {
        output.WriteBool(9, field_names[5], CommunityNewsV2Enabled);
      }
      if (hasLeaderboardsEnabled) {
        output.WriteBool(10, field_names[11], LeaderboardsEnabled);
      }
      if (hasDynamicCombatLevelEnabled) {
        output.WriteBool(11, field_names[6], DynamicCombatLevelEnabled);
      }
      if (hasNewPlayerExperienceEnabled) {
        output.WriteBool(12, field_names[14], NewPlayerExperienceEnabled);
      }
      if (hasServerTimeOffsetUTC) {
        output.WriteInt32(13, field_names[16], ServerTimeOffsetUTC);
      }
      if (hasUseServerTimeOffset) {
        output.WriteBool(14, field_names[18], UseServerTimeOffset);
      }
      if (hasMissionTrackerV2Enabled) {
        output.WriteBool(15, field_names[12], MissionTrackerV2Enabled);
      }
      if (hasGiftingAccountAgeInDaysRequired) {
        output.WriteInt32(16, field_names[7], GiftingAccountAgeInDaysRequired);
      }
      if (hasGiftingAvatarLevelRequired) {
        output.WriteInt32(17, field_names[8], GiftingAvatarLevelRequired);
      }
      if (hasGiftingLoginCountRequired) {
        output.WriteInt32(18, field_names[10], GiftingLoginCountRequired);
      }
      if (hasChatBanVoteAccountAgeInDaysRequired) {
        output.WriteInt32(20, field_names[2], ChatBanVoteAccountAgeInDaysRequired);
      }
      if (hasChatBanVoteAvatarLevelRequired) {
        output.WriteInt32(21, field_names[3], ChatBanVoteAvatarLevelRequired);
      }
      if (hasChatBanVoteLoginCountRequired) {
        output.WriteInt32(22, field_names[4], ChatBanVoteLoginCountRequired);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamUpSystemEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, TeamUpSystemEnabled);
      }
      if (hasAchievementsEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, AchievementsEnabled);
      }
      if (hasOmegaMissionsEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, OmegaMissionsEnabled);
      }
      if (hasVeteranRewardsEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, VeteranRewardsEnabled);
      }
      if (hasMultiSpecRewardsEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, MultiSpecRewardsEnabled);
      }
      if (hasGiftingEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, GiftingEnabled);
      }
      if (hasCharacterSelectV2Enabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, CharacterSelectV2Enabled);
      }
      if (hasCommunityNewsV2Enabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, CommunityNewsV2Enabled);
      }
      if (hasLeaderboardsEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, LeaderboardsEnabled);
      }
      if (hasDynamicCombatLevelEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, DynamicCombatLevelEnabled);
      }
      if (hasNewPlayerExperienceEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, NewPlayerExperienceEnabled);
      }
      if (hasServerTimeOffsetUTC) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, ServerTimeOffsetUTC);
      }
      if (hasUseServerTimeOffset) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, UseServerTimeOffset);
      }
      if (hasMissionTrackerV2Enabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, MissionTrackerV2Enabled);
      }
      if (hasGiftingAccountAgeInDaysRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, GiftingAccountAgeInDaysRequired);
      }
      if (hasGiftingAvatarLevelRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, GiftingAvatarLevelRequired);
      }
      if (hasGiftingLoginCountRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, GiftingLoginCountRequired);
      }
      if (hasChatBanVoteAccountAgeInDaysRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, ChatBanVoteAccountAgeInDaysRequired);
      }
      if (hasChatBanVoteAvatarLevelRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, ChatBanVoteAvatarLevelRequired);
      }
      if (hasChatBanVoteLoginCountRequired) {
        size += pb::CodedOutputStream.ComputeInt32Size(22, ChatBanVoteLoginCountRequired);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructGameOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructGameOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructGameOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructGameOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructGameOptions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructGameOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructGameOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructGameOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructGameOptions result;
      
      private NetStructGameOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructGameOptions original = result;
          result = new NetStructGameOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructGameOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructGameOptions.Descriptor; }
      }
      
      public override NetStructGameOptions DefaultInstanceForType {
        get { return global::Gazillion.NetStructGameOptions.DefaultInstance; }
      }
      
      public override NetStructGameOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructGameOptions) {
          return MergeFrom((NetStructGameOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructGameOptions other) {
        if (other == global::Gazillion.NetStructGameOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamUpSystemEnabled) {
          TeamUpSystemEnabled = other.TeamUpSystemEnabled;
        }
        if (other.HasAchievementsEnabled) {
          AchievementsEnabled = other.AchievementsEnabled;
        }
        if (other.HasOmegaMissionsEnabled) {
          OmegaMissionsEnabled = other.OmegaMissionsEnabled;
        }
        if (other.HasVeteranRewardsEnabled) {
          VeteranRewardsEnabled = other.VeteranRewardsEnabled;
        }
        if (other.HasMultiSpecRewardsEnabled) {
          MultiSpecRewardsEnabled = other.MultiSpecRewardsEnabled;
        }
        if (other.HasGiftingEnabled) {
          GiftingEnabled = other.GiftingEnabled;
        }
        if (other.HasCharacterSelectV2Enabled) {
          CharacterSelectV2Enabled = other.CharacterSelectV2Enabled;
        }
        if (other.HasCommunityNewsV2Enabled) {
          CommunityNewsV2Enabled = other.CommunityNewsV2Enabled;
        }
        if (other.HasLeaderboardsEnabled) {
          LeaderboardsEnabled = other.LeaderboardsEnabled;
        }
        if (other.HasDynamicCombatLevelEnabled) {
          DynamicCombatLevelEnabled = other.DynamicCombatLevelEnabled;
        }
        if (other.HasNewPlayerExperienceEnabled) {
          NewPlayerExperienceEnabled = other.NewPlayerExperienceEnabled;
        }
        if (other.HasServerTimeOffsetUTC) {
          ServerTimeOffsetUTC = other.ServerTimeOffsetUTC;
        }
        if (other.HasUseServerTimeOffset) {
          UseServerTimeOffset = other.UseServerTimeOffset;
        }
        if (other.HasMissionTrackerV2Enabled) {
          MissionTrackerV2Enabled = other.MissionTrackerV2Enabled;
        }
        if (other.HasGiftingAccountAgeInDaysRequired) {
          GiftingAccountAgeInDaysRequired = other.GiftingAccountAgeInDaysRequired;
        }
        if (other.HasGiftingAvatarLevelRequired) {
          GiftingAvatarLevelRequired = other.GiftingAvatarLevelRequired;
        }
        if (other.HasGiftingLoginCountRequired) {
          GiftingLoginCountRequired = other.GiftingLoginCountRequired;
        }
        if (other.HasChatBanVoteAccountAgeInDaysRequired) {
          ChatBanVoteAccountAgeInDaysRequired = other.ChatBanVoteAccountAgeInDaysRequired;
        }
        if (other.HasChatBanVoteAvatarLevelRequired) {
          ChatBanVoteAvatarLevelRequired = other.ChatBanVoteAvatarLevelRequired;
        }
        if (other.HasChatBanVoteLoginCountRequired) {
          ChatBanVoteLoginCountRequired = other.ChatBanVoteLoginCountRequired;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructGameOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructGameOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamUpSystemEnabled = input.ReadBool(ref result.teamUpSystemEnabled_);
              break;
            }
            case 24: {
              result.hasAchievementsEnabled = input.ReadBool(ref result.achievementsEnabled_);
              break;
            }
            case 32: {
              result.hasOmegaMissionsEnabled = input.ReadBool(ref result.omegaMissionsEnabled_);
              break;
            }
            case 40: {
              result.hasVeteranRewardsEnabled = input.ReadBool(ref result.veteranRewardsEnabled_);
              break;
            }
            case 48: {
              result.hasMultiSpecRewardsEnabled = input.ReadBool(ref result.multiSpecRewardsEnabled_);
              break;
            }
            case 56: {
              result.hasGiftingEnabled = input.ReadBool(ref result.giftingEnabled_);
              break;
            }
            case 64: {
              result.hasCharacterSelectV2Enabled = input.ReadBool(ref result.characterSelectV2Enabled_);
              break;
            }
            case 72: {
              result.hasCommunityNewsV2Enabled = input.ReadBool(ref result.communityNewsV2Enabled_);
              break;
            }
            case 80: {
              result.hasLeaderboardsEnabled = input.ReadBool(ref result.leaderboardsEnabled_);
              break;
            }
            case 88: {
              result.hasDynamicCombatLevelEnabled = input.ReadBool(ref result.dynamicCombatLevelEnabled_);
              break;
            }
            case 96: {
              result.hasNewPlayerExperienceEnabled = input.ReadBool(ref result.newPlayerExperienceEnabled_);
              break;
            }
            case 104: {
              result.hasServerTimeOffsetUTC = input.ReadInt32(ref result.serverTimeOffsetUTC_);
              break;
            }
            case 112: {
              result.hasUseServerTimeOffset = input.ReadBool(ref result.useServerTimeOffset_);
              break;
            }
            case 120: {
              result.hasMissionTrackerV2Enabled = input.ReadBool(ref result.missionTrackerV2Enabled_);
              break;
            }
            case 128: {
              result.hasGiftingAccountAgeInDaysRequired = input.ReadInt32(ref result.giftingAccountAgeInDaysRequired_);
              break;
            }
            case 136: {
              result.hasGiftingAvatarLevelRequired = input.ReadInt32(ref result.giftingAvatarLevelRequired_);
              break;
            }
            case 144: {
              result.hasGiftingLoginCountRequired = input.ReadInt32(ref result.giftingLoginCountRequired_);
              break;
            }
            case 160: {
              result.hasChatBanVoteAccountAgeInDaysRequired = input.ReadInt32(ref result.chatBanVoteAccountAgeInDaysRequired_);
              break;
            }
            case 168: {
              result.hasChatBanVoteAvatarLevelRequired = input.ReadInt32(ref result.chatBanVoteAvatarLevelRequired_);
              break;
            }
            case 176: {
              result.hasChatBanVoteLoginCountRequired = input.ReadInt32(ref result.chatBanVoteLoginCountRequired_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamUpSystemEnabled {
        get { return result.hasTeamUpSystemEnabled; }
      }
      public bool TeamUpSystemEnabled {
        get { return result.TeamUpSystemEnabled; }
        set { SetTeamUpSystemEnabled(value); }
      }
      public Builder SetTeamUpSystemEnabled(bool value) {
        PrepareBuilder();
        result.hasTeamUpSystemEnabled = true;
        result.teamUpSystemEnabled_ = value;
        return this;
      }
      public Builder ClearTeamUpSystemEnabled() {
        PrepareBuilder();
        result.hasTeamUpSystemEnabled = false;
        result.teamUpSystemEnabled_ = false;
        return this;
      }
      
      public bool HasAchievementsEnabled {
        get { return result.hasAchievementsEnabled; }
      }
      public bool AchievementsEnabled {
        get { return result.AchievementsEnabled; }
        set { SetAchievementsEnabled(value); }
      }
      public Builder SetAchievementsEnabled(bool value) {
        PrepareBuilder();
        result.hasAchievementsEnabled = true;
        result.achievementsEnabled_ = value;
        return this;
      }
      public Builder ClearAchievementsEnabled() {
        PrepareBuilder();
        result.hasAchievementsEnabled = false;
        result.achievementsEnabled_ = false;
        return this;
      }
      
      public bool HasOmegaMissionsEnabled {
        get { return result.hasOmegaMissionsEnabled; }
      }
      public bool OmegaMissionsEnabled {
        get { return result.OmegaMissionsEnabled; }
        set { SetOmegaMissionsEnabled(value); }
      }
      public Builder SetOmegaMissionsEnabled(bool value) {
        PrepareBuilder();
        result.hasOmegaMissionsEnabled = true;
        result.omegaMissionsEnabled_ = value;
        return this;
      }
      public Builder ClearOmegaMissionsEnabled() {
        PrepareBuilder();
        result.hasOmegaMissionsEnabled = false;
        result.omegaMissionsEnabled_ = false;
        return this;
      }
      
      public bool HasVeteranRewardsEnabled {
        get { return result.hasVeteranRewardsEnabled; }
      }
      public bool VeteranRewardsEnabled {
        get { return result.VeteranRewardsEnabled; }
        set { SetVeteranRewardsEnabled(value); }
      }
      public Builder SetVeteranRewardsEnabled(bool value) {
        PrepareBuilder();
        result.hasVeteranRewardsEnabled = true;
        result.veteranRewardsEnabled_ = value;
        return this;
      }
      public Builder ClearVeteranRewardsEnabled() {
        PrepareBuilder();
        result.hasVeteranRewardsEnabled = false;
        result.veteranRewardsEnabled_ = false;
        return this;
      }
      
      public bool HasMultiSpecRewardsEnabled {
        get { return result.hasMultiSpecRewardsEnabled; }
      }
      public bool MultiSpecRewardsEnabled {
        get { return result.MultiSpecRewardsEnabled; }
        set { SetMultiSpecRewardsEnabled(value); }
      }
      public Builder SetMultiSpecRewardsEnabled(bool value) {
        PrepareBuilder();
        result.hasMultiSpecRewardsEnabled = true;
        result.multiSpecRewardsEnabled_ = value;
        return this;
      }
      public Builder ClearMultiSpecRewardsEnabled() {
        PrepareBuilder();
        result.hasMultiSpecRewardsEnabled = false;
        result.multiSpecRewardsEnabled_ = false;
        return this;
      }
      
      public bool HasGiftingEnabled {
        get { return result.hasGiftingEnabled; }
      }
      public bool GiftingEnabled {
        get { return result.GiftingEnabled; }
        set { SetGiftingEnabled(value); }
      }
      public Builder SetGiftingEnabled(bool value) {
        PrepareBuilder();
        result.hasGiftingEnabled = true;
        result.giftingEnabled_ = value;
        return this;
      }
      public Builder ClearGiftingEnabled() {
        PrepareBuilder();
        result.hasGiftingEnabled = false;
        result.giftingEnabled_ = false;
        return this;
      }
      
      public bool HasCharacterSelectV2Enabled {
        get { return result.hasCharacterSelectV2Enabled; }
      }
      public bool CharacterSelectV2Enabled {
        get { return result.CharacterSelectV2Enabled; }
        set { SetCharacterSelectV2Enabled(value); }
      }
      public Builder SetCharacterSelectV2Enabled(bool value) {
        PrepareBuilder();
        result.hasCharacterSelectV2Enabled = true;
        result.characterSelectV2Enabled_ = value;
        return this;
      }
      public Builder ClearCharacterSelectV2Enabled() {
        PrepareBuilder();
        result.hasCharacterSelectV2Enabled = false;
        result.characterSelectV2Enabled_ = false;
        return this;
      }
      
      public bool HasCommunityNewsV2Enabled {
        get { return result.hasCommunityNewsV2Enabled; }
      }
      public bool CommunityNewsV2Enabled {
        get { return result.CommunityNewsV2Enabled; }
        set { SetCommunityNewsV2Enabled(value); }
      }
      public Builder SetCommunityNewsV2Enabled(bool value) {
        PrepareBuilder();
        result.hasCommunityNewsV2Enabled = true;
        result.communityNewsV2Enabled_ = value;
        return this;
      }
      public Builder ClearCommunityNewsV2Enabled() {
        PrepareBuilder();
        result.hasCommunityNewsV2Enabled = false;
        result.communityNewsV2Enabled_ = false;
        return this;
      }
      
      public bool HasLeaderboardsEnabled {
        get { return result.hasLeaderboardsEnabled; }
      }
      public bool LeaderboardsEnabled {
        get { return result.LeaderboardsEnabled; }
        set { SetLeaderboardsEnabled(value); }
      }
      public Builder SetLeaderboardsEnabled(bool value) {
        PrepareBuilder();
        result.hasLeaderboardsEnabled = true;
        result.leaderboardsEnabled_ = value;
        return this;
      }
      public Builder ClearLeaderboardsEnabled() {
        PrepareBuilder();
        result.hasLeaderboardsEnabled = false;
        result.leaderboardsEnabled_ = false;
        return this;
      }
      
      public bool HasDynamicCombatLevelEnabled {
        get { return result.hasDynamicCombatLevelEnabled; }
      }
      public bool DynamicCombatLevelEnabled {
        get { return result.DynamicCombatLevelEnabled; }
        set { SetDynamicCombatLevelEnabled(value); }
      }
      public Builder SetDynamicCombatLevelEnabled(bool value) {
        PrepareBuilder();
        result.hasDynamicCombatLevelEnabled = true;
        result.dynamicCombatLevelEnabled_ = value;
        return this;
      }
      public Builder ClearDynamicCombatLevelEnabled() {
        PrepareBuilder();
        result.hasDynamicCombatLevelEnabled = false;
        result.dynamicCombatLevelEnabled_ = false;
        return this;
      }
      
      public bool HasNewPlayerExperienceEnabled {
        get { return result.hasNewPlayerExperienceEnabled; }
      }
      public bool NewPlayerExperienceEnabled {
        get { return result.NewPlayerExperienceEnabled; }
        set { SetNewPlayerExperienceEnabled(value); }
      }
      public Builder SetNewPlayerExperienceEnabled(bool value) {
        PrepareBuilder();
        result.hasNewPlayerExperienceEnabled = true;
        result.newPlayerExperienceEnabled_ = value;
        return this;
      }
      public Builder ClearNewPlayerExperienceEnabled() {
        PrepareBuilder();
        result.hasNewPlayerExperienceEnabled = false;
        result.newPlayerExperienceEnabled_ = false;
        return this;
      }
      
      public bool HasServerTimeOffsetUTC {
        get { return result.hasServerTimeOffsetUTC; }
      }
      public int ServerTimeOffsetUTC {
        get { return result.ServerTimeOffsetUTC; }
        set { SetServerTimeOffsetUTC(value); }
      }
      public Builder SetServerTimeOffsetUTC(int value) {
        PrepareBuilder();
        result.hasServerTimeOffsetUTC = true;
        result.serverTimeOffsetUTC_ = value;
        return this;
      }
      public Builder ClearServerTimeOffsetUTC() {
        PrepareBuilder();
        result.hasServerTimeOffsetUTC = false;
        result.serverTimeOffsetUTC_ = 0;
        return this;
      }
      
      public bool HasUseServerTimeOffset {
        get { return result.hasUseServerTimeOffset; }
      }
      public bool UseServerTimeOffset {
        get { return result.UseServerTimeOffset; }
        set { SetUseServerTimeOffset(value); }
      }
      public Builder SetUseServerTimeOffset(bool value) {
        PrepareBuilder();
        result.hasUseServerTimeOffset = true;
        result.useServerTimeOffset_ = value;
        return this;
      }
      public Builder ClearUseServerTimeOffset() {
        PrepareBuilder();
        result.hasUseServerTimeOffset = false;
        result.useServerTimeOffset_ = false;
        return this;
      }
      
      public bool HasMissionTrackerV2Enabled {
        get { return result.hasMissionTrackerV2Enabled; }
      }
      public bool MissionTrackerV2Enabled {
        get { return result.MissionTrackerV2Enabled; }
        set { SetMissionTrackerV2Enabled(value); }
      }
      public Builder SetMissionTrackerV2Enabled(bool value) {
        PrepareBuilder();
        result.hasMissionTrackerV2Enabled = true;
        result.missionTrackerV2Enabled_ = value;
        return this;
      }
      public Builder ClearMissionTrackerV2Enabled() {
        PrepareBuilder();
        result.hasMissionTrackerV2Enabled = false;
        result.missionTrackerV2Enabled_ = false;
        return this;
      }
      
      public bool HasGiftingAccountAgeInDaysRequired {
        get { return result.hasGiftingAccountAgeInDaysRequired; }
      }
      public int GiftingAccountAgeInDaysRequired {
        get { return result.GiftingAccountAgeInDaysRequired; }
        set { SetGiftingAccountAgeInDaysRequired(value); }
      }
      public Builder SetGiftingAccountAgeInDaysRequired(int value) {
        PrepareBuilder();
        result.hasGiftingAccountAgeInDaysRequired = true;
        result.giftingAccountAgeInDaysRequired_ = value;
        return this;
      }
      public Builder ClearGiftingAccountAgeInDaysRequired() {
        PrepareBuilder();
        result.hasGiftingAccountAgeInDaysRequired = false;
        result.giftingAccountAgeInDaysRequired_ = 0;
        return this;
      }
      
      public bool HasGiftingAvatarLevelRequired {
        get { return result.hasGiftingAvatarLevelRequired; }
      }
      public int GiftingAvatarLevelRequired {
        get { return result.GiftingAvatarLevelRequired; }
        set { SetGiftingAvatarLevelRequired(value); }
      }
      public Builder SetGiftingAvatarLevelRequired(int value) {
        PrepareBuilder();
        result.hasGiftingAvatarLevelRequired = true;
        result.giftingAvatarLevelRequired_ = value;
        return this;
      }
      public Builder ClearGiftingAvatarLevelRequired() {
        PrepareBuilder();
        result.hasGiftingAvatarLevelRequired = false;
        result.giftingAvatarLevelRequired_ = 0;
        return this;
      }
      
      public bool HasGiftingLoginCountRequired {
        get { return result.hasGiftingLoginCountRequired; }
      }
      public int GiftingLoginCountRequired {
        get { return result.GiftingLoginCountRequired; }
        set { SetGiftingLoginCountRequired(value); }
      }
      public Builder SetGiftingLoginCountRequired(int value) {
        PrepareBuilder();
        result.hasGiftingLoginCountRequired = true;
        result.giftingLoginCountRequired_ = value;
        return this;
      }
      public Builder ClearGiftingLoginCountRequired() {
        PrepareBuilder();
        result.hasGiftingLoginCountRequired = false;
        result.giftingLoginCountRequired_ = 0;
        return this;
      }
      
      public bool HasChatBanVoteAccountAgeInDaysRequired {
        get { return result.hasChatBanVoteAccountAgeInDaysRequired; }
      }
      public int ChatBanVoteAccountAgeInDaysRequired {
        get { return result.ChatBanVoteAccountAgeInDaysRequired; }
        set { SetChatBanVoteAccountAgeInDaysRequired(value); }
      }
      public Builder SetChatBanVoteAccountAgeInDaysRequired(int value) {
        PrepareBuilder();
        result.hasChatBanVoteAccountAgeInDaysRequired = true;
        result.chatBanVoteAccountAgeInDaysRequired_ = value;
        return this;
      }
      public Builder ClearChatBanVoteAccountAgeInDaysRequired() {
        PrepareBuilder();
        result.hasChatBanVoteAccountAgeInDaysRequired = false;
        result.chatBanVoteAccountAgeInDaysRequired_ = 0;
        return this;
      }
      
      public bool HasChatBanVoteAvatarLevelRequired {
        get { return result.hasChatBanVoteAvatarLevelRequired; }
      }
      public int ChatBanVoteAvatarLevelRequired {
        get { return result.ChatBanVoteAvatarLevelRequired; }
        set { SetChatBanVoteAvatarLevelRequired(value); }
      }
      public Builder SetChatBanVoteAvatarLevelRequired(int value) {
        PrepareBuilder();
        result.hasChatBanVoteAvatarLevelRequired = true;
        result.chatBanVoteAvatarLevelRequired_ = value;
        return this;
      }
      public Builder ClearChatBanVoteAvatarLevelRequired() {
        PrepareBuilder();
        result.hasChatBanVoteAvatarLevelRequired = false;
        result.chatBanVoteAvatarLevelRequired_ = 0;
        return this;
      }
      
      public bool HasChatBanVoteLoginCountRequired {
        get { return result.hasChatBanVoteLoginCountRequired; }
      }
      public int ChatBanVoteLoginCountRequired {
        get { return result.ChatBanVoteLoginCountRequired; }
        set { SetChatBanVoteLoginCountRequired(value); }
      }
      public Builder SetChatBanVoteLoginCountRequired(int value) {
        PrepareBuilder();
        result.hasChatBanVoteLoginCountRequired = true;
        result.chatBanVoteLoginCountRequired_ = value;
        return this;
      }
      public Builder ClearChatBanVoteLoginCountRequired() {
        PrepareBuilder();
        result.hasChatBanVoteLoginCountRequired = false;
        result.chatBanVoteLoginCountRequired_ = 0;
        return this;
      }
    }
    static NetStructGameOptions() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocalPlayer : pb::GeneratedMessage<NetMessageLocalPlayer, NetMessageLocalPlayer.Builder> {
    private NetMessageLocalPlayer() { }
    private static readonly NetMessageLocalPlayer defaultInstance = new NetMessageLocalPlayer().MakeReadOnly();
    private static readonly string[] _netMessageLocalPlayerFieldNames = new string[] { "gameOptions", "localPlayerEntityId" };
    private static readonly uint[] _netMessageLocalPlayerFieldTags = new uint[] { 18, 8 };
    public static NetMessageLocalPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocalPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocalPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocalPlayer, NetMessageLocalPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalPlayer__FieldAccessorTable; }
    }
    
    public const int LocalPlayerEntityIdFieldNumber = 1;
    private bool hasLocalPlayerEntityId;
    private ulong localPlayerEntityId_;
    public bool HasLocalPlayerEntityId {
      get { return hasLocalPlayerEntityId; }
    }
    public ulong LocalPlayerEntityId {
      get { return localPlayerEntityId_; }
    }
    
    public const int GameOptionsFieldNumber = 2;
    private bool hasGameOptions;
    private global::Gazillion.NetStructGameOptions gameOptions_;
    public bool HasGameOptions {
      get { return hasGameOptions; }
    }
    public global::Gazillion.NetStructGameOptions GameOptions {
      get { return gameOptions_ ?? global::Gazillion.NetStructGameOptions.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalPlayerEntityId) return false;
        if (!hasGameOptions) return false;
        if (!GameOptions.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocalPlayerFieldNames;
      if (hasLocalPlayerEntityId) {
        output.WriteUInt64(1, field_names[1], LocalPlayerEntityId);
      }
      if (hasGameOptions) {
        output.WriteMessage(2, field_names[0], GameOptions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLocalPlayerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LocalPlayerEntityId);
      }
      if (hasGameOptions) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GameOptions);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocalPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocalPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocalPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocalPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocalPlayer result;
      
      private NetMessageLocalPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocalPlayer original = result;
          result = new NetMessageLocalPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocalPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocalPlayer.Descriptor; }
      }
      
      public override NetMessageLocalPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocalPlayer.DefaultInstance; }
      }
      
      public override NetMessageLocalPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocalPlayer) {
          return MergeFrom((NetMessageLocalPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocalPlayer other) {
        if (other == global::Gazillion.NetMessageLocalPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalPlayerEntityId) {
          LocalPlayerEntityId = other.LocalPlayerEntityId;
        }
        if (other.HasGameOptions) {
          MergeGameOptions(other.GameOptions);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocalPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocalPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLocalPlayerEntityId = input.ReadUInt64(ref result.localPlayerEntityId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructGameOptions.Builder subBuilder = global::Gazillion.NetStructGameOptions.CreateBuilder();
              if (result.hasGameOptions) {
                subBuilder.MergeFrom(GameOptions);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameOptions = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalPlayerEntityId {
        get { return result.hasLocalPlayerEntityId; }
      }
      public ulong LocalPlayerEntityId {
        get { return result.LocalPlayerEntityId; }
        set { SetLocalPlayerEntityId(value); }
      }
      public Builder SetLocalPlayerEntityId(ulong value) {
        PrepareBuilder();
        result.hasLocalPlayerEntityId = true;
        result.localPlayerEntityId_ = value;
        return this;
      }
      public Builder ClearLocalPlayerEntityId() {
        PrepareBuilder();
        result.hasLocalPlayerEntityId = false;
        result.localPlayerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasGameOptions {
       get { return result.hasGameOptions; }
      }
      public global::Gazillion.NetStructGameOptions GameOptions {
        get { return result.GameOptions; }
        set { SetGameOptions(value); }
      }
      public Builder SetGameOptions(global::Gazillion.NetStructGameOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameOptions = true;
        result.gameOptions_ = value;
        return this;
      }
      public Builder SetGameOptions(global::Gazillion.NetStructGameOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameOptions = true;
        result.gameOptions_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameOptions(global::Gazillion.NetStructGameOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameOptions &&
            result.gameOptions_ != global::Gazillion.NetStructGameOptions.DefaultInstance) {
            result.gameOptions_ = global::Gazillion.NetStructGameOptions.CreateBuilder(result.gameOptions_).MergeFrom(value).BuildPartial();
        } else {
          result.gameOptions_ = value;
        }
        result.hasGameOptions = true;
        return this;
      }
      public Builder ClearGameOptions() {
        PrepareBuilder();
        result.hasGameOptions = false;
        result.gameOptions_ = null;
        return this;
      }
    }
    static NetMessageLocalPlayer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityCreate : pb::GeneratedMessage<NetMessageEntityCreate, NetMessageEntityCreate.Builder> {
    private NetMessageEntityCreate() { }
    private static readonly NetMessageEntityCreate defaultInstance = new NetMessageEntityCreate().MakeReadOnly();
    private static readonly string[] _netMessageEntityCreateFieldNames = new string[] { "archiveData", "baseData" };
    private static readonly uint[] _netMessageEntityCreateFieldTags = new uint[] { 18, 10 };
    public static NetMessageEntityCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityCreate, NetMessageEntityCreate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityCreate__FieldAccessorTable; }
    }
    
    public const int BaseDataFieldNumber = 1;
    private bool hasBaseData;
    private pb::ByteString baseData_ = pb::ByteString.Empty;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public pb::ByteString BaseData {
      get { return baseData_; }
    }
    
    public const int ArchiveDataFieldNumber = 2;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseData) return false;
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityCreateFieldNames;
      if (hasBaseData) {
        output.WriteBytes(1, field_names[1], BaseData);
      }
      if (hasArchiveData) {
        output.WriteBytes(2, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, BaseData);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityCreate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityCreate result;
      
      private NetMessageEntityCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityCreate original = result;
          result = new NetMessageEntityCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityCreate.Descriptor; }
      }
      
      public override NetMessageEntityCreate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityCreate.DefaultInstance; }
      }
      
      public override NetMessageEntityCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityCreate) {
          return MergeFrom((NetMessageEntityCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityCreate other) {
        if (other == global::Gazillion.NetMessageEntityCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseData) {
          BaseData = other.BaseData;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBaseData = input.ReadBytes(ref result.baseData_);
              break;
            }
            case 18: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseData {
        get { return result.hasBaseData; }
      }
      public pb::ByteString BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageEntityCreate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityDestroy : pb::GeneratedMessage<NetMessageEntityDestroy, NetMessageEntityDestroy.Builder> {
    private NetMessageEntityDestroy() { }
    private static readonly NetMessageEntityDestroy defaultInstance = new NetMessageEntityDestroy().MakeReadOnly();
    private static readonly string[] _netMessageEntityDestroyFieldNames = new string[] { "areaId", "cellId", "entityServerString", "idEntity", "ownerEntityId", "ownerPrototypeId", "position", "prototypeId", "regionId" };
    private static readonly uint[] _netMessageEntityDestroyFieldTags = new uint[] { 32, 24, 74, 8, 56, 64, 50, 16, 40 };
    public static NetMessageEntityDestroy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityDestroy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityDestroy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityDestroy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityDestroy, NetMessageEntityDestroy.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityDestroy__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int PrototypeIdFieldNumber = 2;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public const int CellIdFieldNumber = 3;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int AreaIdFieldNumber = 4;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int RegionIdFieldNumber = 5;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int PositionFieldNumber = 6;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OwnerEntityIdFieldNumber = 7;
    private bool hasOwnerEntityId;
    private ulong ownerEntityId_;
    public bool HasOwnerEntityId {
      get { return hasOwnerEntityId; }
    }
    public ulong OwnerEntityId {
      get { return ownerEntityId_; }
    }
    
    public const int OwnerPrototypeIdFieldNumber = 8;
    private bool hasOwnerPrototypeId;
    private ulong ownerPrototypeId_;
    public bool HasOwnerPrototypeId {
      get { return hasOwnerPrototypeId; }
    }
    public ulong OwnerPrototypeId {
      get { return ownerPrototypeId_; }
    }
    
    public const int EntityServerStringFieldNumber = 9;
    private bool hasEntityServerString;
    private string entityServerString_ = "";
    public bool HasEntityServerString {
      get { return hasEntityServerString; }
    }
    public string EntityServerString {
      get { return entityServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityDestroyFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[3], IdEntity);
      }
      if (hasPrototypeId) {
        output.WriteUInt64(2, field_names[7], PrototypeId);
      }
      if (hasCellId) {
        output.WriteUInt32(3, field_names[1], CellId);
      }
      if (hasAreaId) {
        output.WriteUInt32(4, field_names[0], AreaId);
      }
      if (hasRegionId) {
        output.WriteUInt64(5, field_names[8], RegionId);
      }
      if (hasPosition) {
        output.WriteMessage(6, field_names[6], Position);
      }
      if (hasOwnerEntityId) {
        output.WriteUInt64(7, field_names[4], OwnerEntityId);
      }
      if (hasOwnerPrototypeId) {
        output.WriteUInt64(8, field_names[5], OwnerPrototypeId);
      }
      if (hasEntityServerString) {
        output.WriteString(9, field_names[2], EntityServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CellId);
      }
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AreaId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, RegionId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Position);
      }
      if (hasOwnerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, OwnerEntityId);
      }
      if (hasOwnerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, OwnerPrototypeId);
      }
      if (hasEntityServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(9, EntityServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityDestroy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityDestroy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityDestroy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityDestroy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityDestroy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityDestroy result;
      
      private NetMessageEntityDestroy PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityDestroy original = result;
          result = new NetMessageEntityDestroy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityDestroy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityDestroy.Descriptor; }
      }
      
      public override NetMessageEntityDestroy DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityDestroy.DefaultInstance; }
      }
      
      public override NetMessageEntityDestroy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityDestroy) {
          return MergeFrom((NetMessageEntityDestroy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityDestroy other) {
        if (other == global::Gazillion.NetMessageEntityDestroy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOwnerEntityId) {
          OwnerEntityId = other.OwnerEntityId;
        }
        if (other.HasOwnerPrototypeId) {
          OwnerPrototypeId = other.OwnerPrototypeId;
        }
        if (other.HasEntityServerString) {
          EntityServerString = other.EntityServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityDestroyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityDestroyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
            case 24: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 32: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 40: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasOwnerEntityId = input.ReadUInt64(ref result.ownerEntityId_);
              break;
            }
            case 64: {
              result.hasOwnerPrototypeId = input.ReadUInt64(ref result.ownerPrototypeId_);
              break;
            }
            case 74: {
              result.hasEntityServerString = input.ReadString(ref result.entityServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOwnerEntityId {
        get { return result.hasOwnerEntityId; }
      }
      public ulong OwnerEntityId {
        get { return result.OwnerEntityId; }
        set { SetOwnerEntityId(value); }
      }
      public Builder SetOwnerEntityId(ulong value) {
        PrepareBuilder();
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder ClearOwnerEntityId() {
        PrepareBuilder();
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasOwnerPrototypeId {
        get { return result.hasOwnerPrototypeId; }
      }
      public ulong OwnerPrototypeId {
        get { return result.OwnerPrototypeId; }
        set { SetOwnerPrototypeId(value); }
      }
      public Builder SetOwnerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasOwnerPrototypeId = true;
        result.ownerPrototypeId_ = value;
        return this;
      }
      public Builder ClearOwnerPrototypeId() {
        PrepareBuilder();
        result.hasOwnerPrototypeId = false;
        result.ownerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEntityServerString {
        get { return result.hasEntityServerString; }
      }
      public string EntityServerString {
        get { return result.EntityServerString; }
        set { SetEntityServerString(value); }
      }
      public Builder SetEntityServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityServerString = true;
        result.entityServerString_ = value;
        return this;
      }
      public Builder ClearEntityServerString() {
        PrepareBuilder();
        result.hasEntityServerString = false;
        result.entityServerString_ = "";
        return this;
      }
    }
    static NetMessageEntityDestroy() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityTracked : pb::GeneratedMessage<NetMessageEntityTracked, NetMessageEntityTracked.Builder> {
    private NetMessageEntityTracked() { }
    private static readonly NetMessageEntityTracked defaultInstance = new NetMessageEntityTracked().MakeReadOnly();
    private static readonly string[] _netMessageEntityTrackedFieldNames = new string[] { "flags", "idEntity", "trackingProtoId" };
    private static readonly uint[] _netMessageEntityTrackedFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageEntityTracked DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityTracked DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityTracked ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityTracked__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityTracked, NetMessageEntityTracked.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityTracked__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int TrackingProtoIdFieldNumber = 2;
    private bool hasTrackingProtoId;
    private ulong trackingProtoId_;
    public bool HasTrackingProtoId {
      get { return hasTrackingProtoId; }
    }
    public ulong TrackingProtoId {
      get { return trackingProtoId_; }
    }
    
    public const int FlagsFieldNumber = 3;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasTrackingProtoId) return false;
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityTrackedFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasTrackingProtoId) {
        output.WriteUInt64(2, field_names[2], TrackingProtoId);
      }
      if (hasFlags) {
        output.WriteUInt32(3, field_names[0], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasTrackingProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TrackingProtoId);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Flags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityTracked ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityTracked ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityTracked ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityTracked MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityTracked prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityTracked, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityTracked cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityTracked result;
      
      private NetMessageEntityTracked PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityTracked original = result;
          result = new NetMessageEntityTracked();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityTracked MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityTracked.Descriptor; }
      }
      
      public override NetMessageEntityTracked DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityTracked.DefaultInstance; }
      }
      
      public override NetMessageEntityTracked BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityTracked) {
          return MergeFrom((NetMessageEntityTracked) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityTracked other) {
        if (other == global::Gazillion.NetMessageEntityTracked.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasTrackingProtoId) {
          TrackingProtoId = other.TrackingProtoId;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityTrackedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityTrackedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasTrackingProtoId = input.ReadUInt64(ref result.trackingProtoId_);
              break;
            }
            case 24: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasTrackingProtoId {
        get { return result.hasTrackingProtoId; }
      }
      public ulong TrackingProtoId {
        get { return result.TrackingProtoId; }
        set { SetTrackingProtoId(value); }
      }
      public Builder SetTrackingProtoId(ulong value) {
        PrepareBuilder();
        result.hasTrackingProtoId = true;
        result.trackingProtoId_ = value;
        return this;
      }
      public Builder ClearTrackingProtoId() {
        PrepareBuilder();
        result.hasTrackingProtoId = false;
        result.trackingProtoId_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static NetMessageEntityTracked() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntitySelectorAction : pb::GeneratedMessage<NetMessageEntitySelectorAction, NetMessageEntitySelectorAction.Builder> {
    private NetMessageEntitySelectorAction() { }
    private static readonly NetMessageEntitySelectorAction defaultInstance = new NetMessageEntitySelectorAction().MakeReadOnly();
    private static readonly string[] _netMessageEntitySelectorActionFieldNames = new string[] { "canSend", "entitySelectorActionEventType", "idEntity", "idTarget" };
    private static readonly uint[] _netMessageEntitySelectorActionFieldTags = new uint[] { 32, 24, 8, 16 };
    public static NetMessageEntitySelectorAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntitySelectorAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntitySelectorAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntitySelectorAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntitySelectorAction, NetMessageEntitySelectorAction.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntitySelectorAction__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int IdTargetFieldNumber = 2;
    private bool hasIdTarget;
    private ulong idTarget_;
    public bool HasIdTarget {
      get { return hasIdTarget; }
    }
    public ulong IdTarget {
      get { return idTarget_; }
    }
    
    public const int EntitySelectorActionEventTypeFieldNumber = 3;
    private bool hasEntitySelectorActionEventType;
    private uint entitySelectorActionEventType_;
    public bool HasEntitySelectorActionEventType {
      get { return hasEntitySelectorActionEventType; }
    }
    public uint EntitySelectorActionEventType {
      get { return entitySelectorActionEventType_; }
    }
    
    public const int CanSendFieldNumber = 4;
    private bool hasCanSend;
    private bool canSend_;
    public bool HasCanSend {
      get { return hasCanSend; }
    }
    public bool CanSend {
      get { return canSend_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasIdTarget) return false;
        if (!hasEntitySelectorActionEventType) return false;
        if (!hasCanSend) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntitySelectorActionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[2], IdEntity);
      }
      if (hasIdTarget) {
        output.WriteUInt64(2, field_names[3], IdTarget);
      }
      if (hasEntitySelectorActionEventType) {
        output.WriteUInt32(3, field_names[1], EntitySelectorActionEventType);
      }
      if (hasCanSend) {
        output.WriteBool(4, field_names[0], CanSend);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasIdTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdTarget);
      }
      if (hasEntitySelectorActionEventType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EntitySelectorActionEventType);
      }
      if (hasCanSend) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, CanSend);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntitySelectorAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntitySelectorAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntitySelectorAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntitySelectorAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntitySelectorAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntitySelectorAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntitySelectorAction result;
      
      private NetMessageEntitySelectorAction PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntitySelectorAction original = result;
          result = new NetMessageEntitySelectorAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntitySelectorAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntitySelectorAction.Descriptor; }
      }
      
      public override NetMessageEntitySelectorAction DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntitySelectorAction.DefaultInstance; }
      }
      
      public override NetMessageEntitySelectorAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntitySelectorAction) {
          return MergeFrom((NetMessageEntitySelectorAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntitySelectorAction other) {
        if (other == global::Gazillion.NetMessageEntitySelectorAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasIdTarget) {
          IdTarget = other.IdTarget;
        }
        if (other.HasEntitySelectorActionEventType) {
          EntitySelectorActionEventType = other.EntitySelectorActionEventType;
        }
        if (other.HasCanSend) {
          CanSend = other.CanSend;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntitySelectorActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntitySelectorActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasIdTarget = input.ReadUInt64(ref result.idTarget_);
              break;
            }
            case 24: {
              result.hasEntitySelectorActionEventType = input.ReadUInt32(ref result.entitySelectorActionEventType_);
              break;
            }
            case 32: {
              result.hasCanSend = input.ReadBool(ref result.canSend_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasIdTarget {
        get { return result.hasIdTarget; }
      }
      public ulong IdTarget {
        get { return result.IdTarget; }
        set { SetIdTarget(value); }
      }
      public Builder SetIdTarget(ulong value) {
        PrepareBuilder();
        result.hasIdTarget = true;
        result.idTarget_ = value;
        return this;
      }
      public Builder ClearIdTarget() {
        PrepareBuilder();
        result.hasIdTarget = false;
        result.idTarget_ = 0UL;
        return this;
      }
      
      public bool HasEntitySelectorActionEventType {
        get { return result.hasEntitySelectorActionEventType; }
      }
      public uint EntitySelectorActionEventType {
        get { return result.EntitySelectorActionEventType; }
        set { SetEntitySelectorActionEventType(value); }
      }
      public Builder SetEntitySelectorActionEventType(uint value) {
        PrepareBuilder();
        result.hasEntitySelectorActionEventType = true;
        result.entitySelectorActionEventType_ = value;
        return this;
      }
      public Builder ClearEntitySelectorActionEventType() {
        PrepareBuilder();
        result.hasEntitySelectorActionEventType = false;
        result.entitySelectorActionEventType_ = 0;
        return this;
      }
      
      public bool HasCanSend {
        get { return result.hasCanSend; }
      }
      public bool CanSend {
        get { return result.CanSend; }
        set { SetCanSend(value); }
      }
      public Builder SetCanSend(bool value) {
        PrepareBuilder();
        result.hasCanSend = true;
        result.canSend_ = value;
        return this;
      }
      public Builder ClearCanSend() {
        PrepareBuilder();
        result.hasCanSend = false;
        result.canSend_ = false;
        return this;
      }
    }
    static NetMessageEntitySelectorAction() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryMove : pb::GeneratedMessage<NetMessageInventoryMove, NetMessageInventoryMove.Builder> {
    private NetMessageInventoryMove() { }
    private static readonly NetMessageInventoryMove defaultInstance = new NetMessageInventoryMove().MakeReadOnly();
    private static readonly string[] _netMessageInventoryMoveFieldNames = new string[] { "destOwnerDataId", "entityDataId", "entityId", "invLocContainerEntityId", "invLocInventoryPrototypeId", "invLocSlot", "requiredNoOwnerOnClient" };
    private static readonly uint[] _netMessageInventoryMoveFieldTags = new uint[] { 56, 48, 8, 16, 24, 32, 40 };
    public static NetMessageInventoryMove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryMove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryMove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryMove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryMove, NetMessageInventoryMove.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryMove__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int InvLocContainerEntityIdFieldNumber = 2;
    private bool hasInvLocContainerEntityId;
    private ulong invLocContainerEntityId_;
    public bool HasInvLocContainerEntityId {
      get { return hasInvLocContainerEntityId; }
    }
    public ulong InvLocContainerEntityId {
      get { return invLocContainerEntityId_; }
    }
    
    public const int InvLocInventoryPrototypeIdFieldNumber = 3;
    private bool hasInvLocInventoryPrototypeId;
    private ulong invLocInventoryPrototypeId_;
    public bool HasInvLocInventoryPrototypeId {
      get { return hasInvLocInventoryPrototypeId; }
    }
    public ulong InvLocInventoryPrototypeId {
      get { return invLocInventoryPrototypeId_; }
    }
    
    public const int InvLocSlotFieldNumber = 4;
    private bool hasInvLocSlot;
    private uint invLocSlot_;
    public bool HasInvLocSlot {
      get { return hasInvLocSlot; }
    }
    public uint InvLocSlot {
      get { return invLocSlot_; }
    }
    
    public const int RequiredNoOwnerOnClientFieldNumber = 5;
    private bool hasRequiredNoOwnerOnClient;
    private bool requiredNoOwnerOnClient_;
    public bool HasRequiredNoOwnerOnClient {
      get { return hasRequiredNoOwnerOnClient; }
    }
    public bool RequiredNoOwnerOnClient {
      get { return requiredNoOwnerOnClient_; }
    }
    
    public const int EntityDataIdFieldNumber = 6;
    private bool hasEntityDataId;
    private ulong entityDataId_;
    public bool HasEntityDataId {
      get { return hasEntityDataId; }
    }
    public ulong EntityDataId {
      get { return entityDataId_; }
    }
    
    public const int DestOwnerDataIdFieldNumber = 7;
    private bool hasDestOwnerDataId;
    private ulong destOwnerDataId_;
    public bool HasDestOwnerDataId {
      get { return hasDestOwnerDataId; }
    }
    public ulong DestOwnerDataId {
      get { return destOwnerDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasInvLocContainerEntityId) return false;
        if (!hasInvLocInventoryPrototypeId) return false;
        if (!hasInvLocSlot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryMoveFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[2], EntityId);
      }
      if (hasInvLocContainerEntityId) {
        output.WriteUInt64(2, field_names[3], InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        output.WriteUInt64(3, field_names[4], InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        output.WriteUInt32(4, field_names[5], InvLocSlot);
      }
      if (hasRequiredNoOwnerOnClient) {
        output.WriteBool(5, field_names[6], RequiredNoOwnerOnClient);
      }
      if (hasEntityDataId) {
        output.WriteUInt64(6, field_names[1], EntityDataId);
      }
      if (hasDestOwnerDataId) {
        output.WriteUInt64(7, field_names[0], DestOwnerDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasInvLocContainerEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InvLocContainerEntityId);
      }
      if (hasInvLocInventoryPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, InvLocInventoryPrototypeId);
      }
      if (hasInvLocSlot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, InvLocSlot);
      }
      if (hasRequiredNoOwnerOnClient) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, RequiredNoOwnerOnClient);
      }
      if (hasEntityDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, EntityDataId);
      }
      if (hasDestOwnerDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, DestOwnerDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryMove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryMove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryMove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryMove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryMove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryMove result;
      
      private NetMessageInventoryMove PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryMove original = result;
          result = new NetMessageInventoryMove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryMove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryMove.Descriptor; }
      }
      
      public override NetMessageInventoryMove DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryMove.DefaultInstance; }
      }
      
      public override NetMessageInventoryMove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryMove) {
          return MergeFrom((NetMessageInventoryMove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryMove other) {
        if (other == global::Gazillion.NetMessageInventoryMove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasInvLocContainerEntityId) {
          InvLocContainerEntityId = other.InvLocContainerEntityId;
        }
        if (other.HasInvLocInventoryPrototypeId) {
          InvLocInventoryPrototypeId = other.InvLocInventoryPrototypeId;
        }
        if (other.HasInvLocSlot) {
          InvLocSlot = other.InvLocSlot;
        }
        if (other.HasRequiredNoOwnerOnClient) {
          RequiredNoOwnerOnClient = other.RequiredNoOwnerOnClient;
        }
        if (other.HasEntityDataId) {
          EntityDataId = other.EntityDataId;
        }
        if (other.HasDestOwnerDataId) {
          DestOwnerDataId = other.DestOwnerDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryMoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasInvLocContainerEntityId = input.ReadUInt64(ref result.invLocContainerEntityId_);
              break;
            }
            case 24: {
              result.hasInvLocInventoryPrototypeId = input.ReadUInt64(ref result.invLocInventoryPrototypeId_);
              break;
            }
            case 32: {
              result.hasInvLocSlot = input.ReadUInt32(ref result.invLocSlot_);
              break;
            }
            case 40: {
              result.hasRequiredNoOwnerOnClient = input.ReadBool(ref result.requiredNoOwnerOnClient_);
              break;
            }
            case 48: {
              result.hasEntityDataId = input.ReadUInt64(ref result.entityDataId_);
              break;
            }
            case 56: {
              result.hasDestOwnerDataId = input.ReadUInt64(ref result.destOwnerDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocContainerEntityId {
        get { return result.hasInvLocContainerEntityId; }
      }
      public ulong InvLocContainerEntityId {
        get { return result.InvLocContainerEntityId; }
        set { SetInvLocContainerEntityId(value); }
      }
      public Builder SetInvLocContainerEntityId(ulong value) {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = true;
        result.invLocContainerEntityId_ = value;
        return this;
      }
      public Builder ClearInvLocContainerEntityId() {
        PrepareBuilder();
        result.hasInvLocContainerEntityId = false;
        result.invLocContainerEntityId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocInventoryPrototypeId {
        get { return result.hasInvLocInventoryPrototypeId; }
      }
      public ulong InvLocInventoryPrototypeId {
        get { return result.InvLocInventoryPrototypeId; }
        set { SetInvLocInventoryPrototypeId(value); }
      }
      public Builder SetInvLocInventoryPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = true;
        result.invLocInventoryPrototypeId_ = value;
        return this;
      }
      public Builder ClearInvLocInventoryPrototypeId() {
        PrepareBuilder();
        result.hasInvLocInventoryPrototypeId = false;
        result.invLocInventoryPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasInvLocSlot {
        get { return result.hasInvLocSlot; }
      }
      public uint InvLocSlot {
        get { return result.InvLocSlot; }
        set { SetInvLocSlot(value); }
      }
      public Builder SetInvLocSlot(uint value) {
        PrepareBuilder();
        result.hasInvLocSlot = true;
        result.invLocSlot_ = value;
        return this;
      }
      public Builder ClearInvLocSlot() {
        PrepareBuilder();
        result.hasInvLocSlot = false;
        result.invLocSlot_ = 0;
        return this;
      }
      
      public bool HasRequiredNoOwnerOnClient {
        get { return result.hasRequiredNoOwnerOnClient; }
      }
      public bool RequiredNoOwnerOnClient {
        get { return result.RequiredNoOwnerOnClient; }
        set { SetRequiredNoOwnerOnClient(value); }
      }
      public Builder SetRequiredNoOwnerOnClient(bool value) {
        PrepareBuilder();
        result.hasRequiredNoOwnerOnClient = true;
        result.requiredNoOwnerOnClient_ = value;
        return this;
      }
      public Builder ClearRequiredNoOwnerOnClient() {
        PrepareBuilder();
        result.hasRequiredNoOwnerOnClient = false;
        result.requiredNoOwnerOnClient_ = false;
        return this;
      }
      
      public bool HasEntityDataId {
        get { return result.hasEntityDataId; }
      }
      public ulong EntityDataId {
        get { return result.EntityDataId; }
        set { SetEntityDataId(value); }
      }
      public Builder SetEntityDataId(ulong value) {
        PrepareBuilder();
        result.hasEntityDataId = true;
        result.entityDataId_ = value;
        return this;
      }
      public Builder ClearEntityDataId() {
        PrepareBuilder();
        result.hasEntityDataId = false;
        result.entityDataId_ = 0UL;
        return this;
      }
      
      public bool HasDestOwnerDataId {
        get { return result.hasDestOwnerDataId; }
      }
      public ulong DestOwnerDataId {
        get { return result.DestOwnerDataId; }
        set { SetDestOwnerDataId(value); }
      }
      public Builder SetDestOwnerDataId(ulong value) {
        PrepareBuilder();
        result.hasDestOwnerDataId = true;
        result.destOwnerDataId_ = value;
        return this;
      }
      public Builder ClearDestOwnerDataId() {
        PrepareBuilder();
        result.hasDestOwnerDataId = false;
        result.destOwnerDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryMove() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryUnlock : pb::GeneratedMessage<NetMessageInventoryUnlock, NetMessageInventoryUnlock.Builder> {
    private NetMessageInventoryUnlock() { }
    private static readonly NetMessageInventoryUnlock defaultInstance = new NetMessageInventoryUnlock().MakeReadOnly();
    private static readonly string[] _netMessageInventoryUnlockFieldNames = new string[] { "invProtoId" };
    private static readonly uint[] _netMessageInventoryUnlockFieldTags = new uint[] { 8 };
    public static NetMessageInventoryUnlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryUnlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryUnlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryUnlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryUnlock, NetMessageInventoryUnlock.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryUnlock__FieldAccessorTable; }
    }
    
    public const int InvProtoIdFieldNumber = 1;
    private bool hasInvProtoId;
    private ulong invProtoId_;
    public bool HasInvProtoId {
      get { return hasInvProtoId; }
    }
    public ulong InvProtoId {
      get { return invProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInvProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryUnlockFieldNames;
      if (hasInvProtoId) {
        output.WriteUInt64(1, field_names[0], InvProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInvProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InvProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryUnlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryUnlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryUnlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryUnlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryUnlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryUnlock result;
      
      private NetMessageInventoryUnlock PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryUnlock original = result;
          result = new NetMessageInventoryUnlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryUnlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryUnlock.Descriptor; }
      }
      
      public override NetMessageInventoryUnlock DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryUnlock.DefaultInstance; }
      }
      
      public override NetMessageInventoryUnlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryUnlock) {
          return MergeFrom((NetMessageInventoryUnlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryUnlock other) {
        if (other == global::Gazillion.NetMessageInventoryUnlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInvProtoId) {
          InvProtoId = other.InvProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryUnlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryUnlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInvProtoId = input.ReadUInt64(ref result.invProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInvProtoId {
        get { return result.hasInvProtoId; }
      }
      public ulong InvProtoId {
        get { return result.InvProtoId; }
        set { SetInvProtoId(value); }
      }
      public Builder SetInvProtoId(ulong value) {
        PrepareBuilder();
        result.hasInvProtoId = true;
        result.invProtoId_ = value;
        return this;
      }
      public Builder ClearInvProtoId() {
        PrepareBuilder();
        result.hasInvProtoId = false;
        result.invProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryUnlock() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePermaBuffUnlock : pb::GeneratedMessage<NetMessagePermaBuffUnlock, NetMessagePermaBuffUnlock.Builder> {
    private NetMessagePermaBuffUnlock() { }
    private static readonly NetMessagePermaBuffUnlock defaultInstance = new NetMessagePermaBuffUnlock().MakeReadOnly();
    private static readonly string[] _netMessagePermaBuffUnlockFieldNames = new string[] { "permaBuffProtoId" };
    private static readonly uint[] _netMessagePermaBuffUnlockFieldTags = new uint[] { 8 };
    public static NetMessagePermaBuffUnlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePermaBuffUnlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePermaBuffUnlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePermaBuffUnlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePermaBuffUnlock, NetMessagePermaBuffUnlock.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePermaBuffUnlock__FieldAccessorTable; }
    }
    
    public const int PermaBuffProtoIdFieldNumber = 1;
    private bool hasPermaBuffProtoId;
    private ulong permaBuffProtoId_;
    public bool HasPermaBuffProtoId {
      get { return hasPermaBuffProtoId; }
    }
    public ulong PermaBuffProtoId {
      get { return permaBuffProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPermaBuffProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePermaBuffUnlockFieldNames;
      if (hasPermaBuffProtoId) {
        output.WriteUInt64(1, field_names[0], PermaBuffProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPermaBuffProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PermaBuffProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePermaBuffUnlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePermaBuffUnlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePermaBuffUnlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePermaBuffUnlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePermaBuffUnlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePermaBuffUnlock result;
      
      private NetMessagePermaBuffUnlock PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePermaBuffUnlock original = result;
          result = new NetMessagePermaBuffUnlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePermaBuffUnlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePermaBuffUnlock.Descriptor; }
      }
      
      public override NetMessagePermaBuffUnlock DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePermaBuffUnlock.DefaultInstance; }
      }
      
      public override NetMessagePermaBuffUnlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePermaBuffUnlock) {
          return MergeFrom((NetMessagePermaBuffUnlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePermaBuffUnlock other) {
        if (other == global::Gazillion.NetMessagePermaBuffUnlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPermaBuffProtoId) {
          PermaBuffProtoId = other.PermaBuffProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePermaBuffUnlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePermaBuffUnlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPermaBuffProtoId = input.ReadUInt64(ref result.permaBuffProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPermaBuffProtoId {
        get { return result.hasPermaBuffProtoId; }
      }
      public ulong PermaBuffProtoId {
        get { return result.PermaBuffProtoId; }
        set { SetPermaBuffProtoId(value); }
      }
      public Builder SetPermaBuffProtoId(ulong value) {
        PrepareBuilder();
        result.hasPermaBuffProtoId = true;
        result.permaBuffProtoId_ = value;
        return this;
      }
      public Builder ClearPermaBuffProtoId() {
        PrepareBuilder();
        result.hasPermaBuffProtoId = false;
        result.permaBuffProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePermaBuffUnlock() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityKill : pb::GeneratedMessage<NetMessageEntityKill, NetMessageEntityKill.Builder> {
    private NetMessageEntityKill() { }
    private static readonly NetMessageEntityKill defaultInstance = new NetMessageEntityKill().MakeReadOnly();
    private static readonly string[] _netMessageEntityKillFieldNames = new string[] { "idEntity", "idKillerEntity", "killFlags" };
    private static readonly uint[] _netMessageEntityKillFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageEntityKill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityKill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityKill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityKill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityKill, NetMessageEntityKill.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityKill__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int IdKillerEntityFieldNumber = 2;
    private bool hasIdKillerEntity;
    private ulong idKillerEntity_;
    public bool HasIdKillerEntity {
      get { return hasIdKillerEntity; }
    }
    public ulong IdKillerEntity {
      get { return idKillerEntity_; }
    }
    
    public const int KillFlagsFieldNumber = 3;
    private bool hasKillFlags;
    private uint killFlags_;
    public bool HasKillFlags {
      get { return hasKillFlags; }
    }
    public uint KillFlags {
      get { return killFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasIdKillerEntity) return false;
        if (!hasKillFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityKillFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasIdKillerEntity) {
        output.WriteUInt64(2, field_names[1], IdKillerEntity);
      }
      if (hasKillFlags) {
        output.WriteUInt32(3, field_names[2], KillFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasIdKillerEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdKillerEntity);
      }
      if (hasKillFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KillFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityKill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityKill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityKill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityKill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityKill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityKill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityKill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityKill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityKill result;
      
      private NetMessageEntityKill PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityKill original = result;
          result = new NetMessageEntityKill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityKill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityKill.Descriptor; }
      }
      
      public override NetMessageEntityKill DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityKill.DefaultInstance; }
      }
      
      public override NetMessageEntityKill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityKill) {
          return MergeFrom((NetMessageEntityKill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityKill other) {
        if (other == global::Gazillion.NetMessageEntityKill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasIdKillerEntity) {
          IdKillerEntity = other.IdKillerEntity;
        }
        if (other.HasKillFlags) {
          KillFlags = other.KillFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityKillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityKillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasIdKillerEntity = input.ReadUInt64(ref result.idKillerEntity_);
              break;
            }
            case 24: {
              result.hasKillFlags = input.ReadUInt32(ref result.killFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasIdKillerEntity {
        get { return result.hasIdKillerEntity; }
      }
      public ulong IdKillerEntity {
        get { return result.IdKillerEntity; }
        set { SetIdKillerEntity(value); }
      }
      public Builder SetIdKillerEntity(ulong value) {
        PrepareBuilder();
        result.hasIdKillerEntity = true;
        result.idKillerEntity_ = value;
        return this;
      }
      public Builder ClearIdKillerEntity() {
        PrepareBuilder();
        result.hasIdKillerEntity = false;
        result.idKillerEntity_ = 0UL;
        return this;
      }
      
      public bool HasKillFlags {
        get { return result.hasKillFlags; }
      }
      public uint KillFlags {
        get { return result.KillFlags; }
        set { SetKillFlags(value); }
      }
      public Builder SetKillFlags(uint value) {
        PrepareBuilder();
        result.hasKillFlags = true;
        result.killFlags_ = value;
        return this;
      }
      public Builder ClearKillFlags() {
        PrepareBuilder();
        result.hasKillFlags = false;
        result.killFlags_ = 0;
        return this;
      }
    }
    static NetMessageEntityKill() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFullscreenMovieSync : pb::GeneratedMessage<NetMessageFullscreenMovieSync, NetMessageFullscreenMovieSync.Builder> {
    private NetMessageFullscreenMovieSync() { }
    private static readonly NetMessageFullscreenMovieSync defaultInstance = new NetMessageFullscreenMovieSync().MakeReadOnly();
    private static readonly string[] _netMessageFullscreenMovieSyncFieldNames = new string[] { "movieProtoId", "syncRequestId" };
    private static readonly uint[] _netMessageFullscreenMovieSyncFieldTags = new uint[] { 16, 8 };
    public static NetMessageFullscreenMovieSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFullscreenMovieSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFullscreenMovieSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullscreenMovieSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFullscreenMovieSync, NetMessageFullscreenMovieSync.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullscreenMovieSync__FieldAccessorTable; }
    }
    
    public const int SyncRequestIdFieldNumber = 1;
    private bool hasSyncRequestId;
    private uint syncRequestId_;
    public bool HasSyncRequestId {
      get { return hasSyncRequestId; }
    }
    public uint SyncRequestId {
      get { return syncRequestId_; }
    }
    
    public const int MovieProtoIdFieldNumber = 2;
    private pbc::PopsicleList<ulong> movieProtoId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> MovieProtoIdList {
      get { return pbc::Lists.AsReadOnly(movieProtoId_); }
    }
    public int MovieProtoIdCount {
      get { return movieProtoId_.Count; }
    }
    public ulong GetMovieProtoId(int index) {
      return movieProtoId_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSyncRequestId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFullscreenMovieSyncFieldNames;
      if (hasSyncRequestId) {
        output.WriteUInt32(1, field_names[1], SyncRequestId);
      }
      if (movieProtoId_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], movieProtoId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSyncRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, SyncRequestId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in MovieProtoIdList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * movieProtoId_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFullscreenMovieSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullscreenMovieSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFullscreenMovieSync MakeReadOnly() {
      movieProtoId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFullscreenMovieSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFullscreenMovieSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFullscreenMovieSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFullscreenMovieSync result;
      
      private NetMessageFullscreenMovieSync PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFullscreenMovieSync original = result;
          result = new NetMessageFullscreenMovieSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFullscreenMovieSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFullscreenMovieSync.Descriptor; }
      }
      
      public override NetMessageFullscreenMovieSync DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFullscreenMovieSync.DefaultInstance; }
      }
      
      public override NetMessageFullscreenMovieSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFullscreenMovieSync) {
          return MergeFrom((NetMessageFullscreenMovieSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFullscreenMovieSync other) {
        if (other == global::Gazillion.NetMessageFullscreenMovieSync.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSyncRequestId) {
          SyncRequestId = other.SyncRequestId;
        }
        if (other.movieProtoId_.Count != 0) {
          result.movieProtoId_.Add(other.movieProtoId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFullscreenMovieSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFullscreenMovieSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSyncRequestId = input.ReadUInt32(ref result.syncRequestId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.movieProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSyncRequestId {
        get { return result.hasSyncRequestId; }
      }
      public uint SyncRequestId {
        get { return result.SyncRequestId; }
        set { SetSyncRequestId(value); }
      }
      public Builder SetSyncRequestId(uint value) {
        PrepareBuilder();
        result.hasSyncRequestId = true;
        result.syncRequestId_ = value;
        return this;
      }
      public Builder ClearSyncRequestId() {
        PrepareBuilder();
        result.hasSyncRequestId = false;
        result.syncRequestId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> MovieProtoIdList {
        get { return PrepareBuilder().movieProtoId_; }
      }
      public int MovieProtoIdCount {
        get { return result.MovieProtoIdCount; }
      }
      public ulong GetMovieProtoId(int index) {
        return result.GetMovieProtoId(index);
      }
      public Builder SetMovieProtoId(int index, ulong value) {
        PrepareBuilder();
        result.movieProtoId_[index] = value;
        return this;
      }
      public Builder AddMovieProtoId(ulong value) {
        PrepareBuilder();
        result.movieProtoId_.Add(value);
        return this;
      }
      public Builder AddRangeMovieProtoId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.movieProtoId_.Add(values);
        return this;
      }
      public Builder ClearMovieProtoId() {
        PrepareBuilder();
        result.movieProtoId_.Clear();
        return this;
      }
    }
    static NetMessageFullscreenMovieSync() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueueFullscreenMovie : pb::GeneratedMessage<NetMessageQueueFullscreenMovie, NetMessageQueueFullscreenMovie.Builder> {
    private NetMessageQueueFullscreenMovie() { }
    private static readonly NetMessageQueueFullscreenMovie defaultInstance = new NetMessageQueueFullscreenMovie().MakeReadOnly();
    private static readonly string[] _netMessageQueueFullscreenMovieFieldNames = new string[] { "moviePrototypeId" };
    private static readonly uint[] _netMessageQueueFullscreenMovieFieldTags = new uint[] { 8 };
    public static NetMessageQueueFullscreenMovie DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueueFullscreenMovie DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueueFullscreenMovie ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueFullscreenMovie__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueueFullscreenMovie, NetMessageQueueFullscreenMovie.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueFullscreenMovie__FieldAccessorTable; }
    }
    
    public const int MoviePrototypeIdFieldNumber = 1;
    private bool hasMoviePrototypeId;
    private ulong moviePrototypeId_;
    public bool HasMoviePrototypeId {
      get { return hasMoviePrototypeId; }
    }
    public ulong MoviePrototypeId {
      get { return moviePrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueueFullscreenMovieFieldNames;
      if (hasMoviePrototypeId) {
        output.WriteUInt64(1, field_names[0], MoviePrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMoviePrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MoviePrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueFullscreenMovie ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueueFullscreenMovie MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueueFullscreenMovie prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueueFullscreenMovie, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueueFullscreenMovie cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueueFullscreenMovie result;
      
      private NetMessageQueueFullscreenMovie PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueueFullscreenMovie original = result;
          result = new NetMessageQueueFullscreenMovie();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueueFullscreenMovie MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueueFullscreenMovie.Descriptor; }
      }
      
      public override NetMessageQueueFullscreenMovie DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueueFullscreenMovie.DefaultInstance; }
      }
      
      public override NetMessageQueueFullscreenMovie BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueueFullscreenMovie) {
          return MergeFrom((NetMessageQueueFullscreenMovie) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueueFullscreenMovie other) {
        if (other == global::Gazillion.NetMessageQueueFullscreenMovie.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMoviePrototypeId) {
          MoviePrototypeId = other.MoviePrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueueFullscreenMovieFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueueFullscreenMovieFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMoviePrototypeId = input.ReadUInt64(ref result.moviePrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMoviePrototypeId {
        get { return result.hasMoviePrototypeId; }
      }
      public ulong MoviePrototypeId {
        get { return result.MoviePrototypeId; }
        set { SetMoviePrototypeId(value); }
      }
      public Builder SetMoviePrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMoviePrototypeId = true;
        result.moviePrototypeId_ = value;
        return this;
      }
      public Builder ClearMoviePrototypeId() {
        PrepareBuilder();
        result.hasMoviePrototypeId = false;
        result.moviePrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageQueueFullscreenMovie() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueueLoadingScreen : pb::GeneratedMessage<NetMessageQueueLoadingScreen, NetMessageQueueLoadingScreen.Builder> {
    private NetMessageQueueLoadingScreen() { }
    private static readonly NetMessageQueueLoadingScreen defaultInstance = new NetMessageQueueLoadingScreen().MakeReadOnly();
    private static readonly string[] _netMessageQueueLoadingScreenFieldNames = new string[] { "loadingScreenPrototypeId", "regionPrototypeId" };
    private static readonly uint[] _netMessageQueueLoadingScreenFieldTags = new uint[] { 16, 8 };
    public static NetMessageQueueLoadingScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueueLoadingScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueueLoadingScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueLoadingScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueueLoadingScreen, NetMessageQueueLoadingScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueueLoadingScreen__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeIdFieldNumber = 1;
    private bool hasRegionPrototypeId;
    private ulong regionPrototypeId_;
    public bool HasRegionPrototypeId {
      get { return hasRegionPrototypeId; }
    }
    public ulong RegionPrototypeId {
      get { return regionPrototypeId_; }
    }
    
    public const int LoadingScreenPrototypeIdFieldNumber = 2;
    private bool hasLoadingScreenPrototypeId;
    private ulong loadingScreenPrototypeId_;
    public bool HasLoadingScreenPrototypeId {
      get { return hasLoadingScreenPrototypeId; }
    }
    public ulong LoadingScreenPrototypeId {
      get { return loadingScreenPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueueLoadingScreenFieldNames;
      if (hasRegionPrototypeId) {
        output.WriteUInt64(1, field_names[1], RegionPrototypeId);
      }
      if (hasLoadingScreenPrototypeId) {
        output.WriteUInt64(2, field_names[0], LoadingScreenPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototypeId);
      }
      if (hasLoadingScreenPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, LoadingScreenPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueueLoadingScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueueLoadingScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueueLoadingScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueueLoadingScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueueLoadingScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueueLoadingScreen result;
      
      private NetMessageQueueLoadingScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueueLoadingScreen original = result;
          result = new NetMessageQueueLoadingScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueueLoadingScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueueLoadingScreen.Descriptor; }
      }
      
      public override NetMessageQueueLoadingScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueueLoadingScreen.DefaultInstance; }
      }
      
      public override NetMessageQueueLoadingScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueueLoadingScreen) {
          return MergeFrom((NetMessageQueueLoadingScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueueLoadingScreen other) {
        if (other == global::Gazillion.NetMessageQueueLoadingScreen.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototypeId) {
          RegionPrototypeId = other.RegionPrototypeId;
        }
        if (other.HasLoadingScreenPrototypeId) {
          LoadingScreenPrototypeId = other.LoadingScreenPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueueLoadingScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueueLoadingScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototypeId = input.ReadUInt64(ref result.regionPrototypeId_);
              break;
            }
            case 16: {
              result.hasLoadingScreenPrototypeId = input.ReadUInt64(ref result.loadingScreenPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototypeId {
        get { return result.hasRegionPrototypeId; }
      }
      public ulong RegionPrototypeId {
        get { return result.RegionPrototypeId; }
        set { SetRegionPrototypeId(value); }
      }
      public Builder SetRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototypeId = true;
        result.regionPrototypeId_ = value;
        return this;
      }
      public Builder ClearRegionPrototypeId() {
        PrepareBuilder();
        result.hasRegionPrototypeId = false;
        result.regionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasLoadingScreenPrototypeId {
        get { return result.hasLoadingScreenPrototypeId; }
      }
      public ulong LoadingScreenPrototypeId {
        get { return result.LoadingScreenPrototypeId; }
        set { SetLoadingScreenPrototypeId(value); }
      }
      public Builder SetLoadingScreenPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasLoadingScreenPrototypeId = true;
        result.loadingScreenPrototypeId_ = value;
        return this;
      }
      public Builder ClearLoadingScreenPrototypeId() {
        PrepareBuilder();
        result.hasLoadingScreenPrototypeId = false;
        result.loadingScreenPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageQueueLoadingScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDequeueLoadingScreen : pb::GeneratedMessage<NetMessageDequeueLoadingScreen, NetMessageDequeueLoadingScreen.Builder> {
    private NetMessageDequeueLoadingScreen() { }
    private static readonly NetMessageDequeueLoadingScreen defaultInstance = new NetMessageDequeueLoadingScreen().MakeReadOnly();
    private static readonly string[] _netMessageDequeueLoadingScreenFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDequeueLoadingScreenFieldTags = new uint[] {  };
    public static NetMessageDequeueLoadingScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDequeueLoadingScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDequeueLoadingScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDequeueLoadingScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDequeueLoadingScreen, NetMessageDequeueLoadingScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDequeueLoadingScreen__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDequeueLoadingScreenFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDequeueLoadingScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDequeueLoadingScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDequeueLoadingScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDequeueLoadingScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDequeueLoadingScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDequeueLoadingScreen result;
      
      private NetMessageDequeueLoadingScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDequeueLoadingScreen original = result;
          result = new NetMessageDequeueLoadingScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDequeueLoadingScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDequeueLoadingScreen.Descriptor; }
      }
      
      public override NetMessageDequeueLoadingScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDequeueLoadingScreen.DefaultInstance; }
      }
      
      public override NetMessageDequeueLoadingScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDequeueLoadingScreen) {
          return MergeFrom((NetMessageDequeueLoadingScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDequeueLoadingScreen other) {
        if (other == global::Gazillion.NetMessageDequeueLoadingScreen.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDequeueLoadingScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDequeueLoadingScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDequeueLoadingScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionChange : pb::GeneratedMessage<NetMessageRegionChange, NetMessageRegionChange.Builder> {
    private NetMessageRegionChange() { }
    private static readonly NetMessageRegionChange defaultInstance = new NetMessageRegionChange().MakeReadOnly();
    private static readonly string[] _netMessageRegionChangeFieldNames = new string[] { "archiveData", "clearingAllInterest", "createRegionParams", "entitiestodestroy", "regionId", "regionMax", "regionMin", "regionPrototypeId", "regionRandomSeed", "serverGameId" };
    private static readonly uint[] _netMessageRegionChangeFieldTags = new uint[] { 58, 24, 82, 32, 8, 74, 66, 40, 48, 16 };
    public static NetMessageRegionChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionChange, NetMessageRegionChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionChange__FieldAccessorTable; }
    }
    
    public const int RegionIdFieldNumber = 1;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int ServerGameIdFieldNumber = 2;
    private bool hasServerGameId;
    private ulong serverGameId_;
    public bool HasServerGameId {
      get { return hasServerGameId; }
    }
    public ulong ServerGameId {
      get { return serverGameId_; }
    }
    
    public const int ClearingAllInterestFieldNumber = 3;
    private bool hasClearingAllInterest;
    private bool clearingAllInterest_;
    public bool HasClearingAllInterest {
      get { return hasClearingAllInterest; }
    }
    public bool ClearingAllInterest {
      get { return clearingAllInterest_; }
    }
    
    public const int EntitiestodestroyFieldNumber = 4;
    private pbc::PopsicleList<ulong> entitiestodestroy_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> EntitiestodestroyList {
      get { return pbc::Lists.AsReadOnly(entitiestodestroy_); }
    }
    public int EntitiestodestroyCount {
      get { return entitiestodestroy_.Count; }
    }
    public ulong GetEntitiestodestroy(int index) {
      return entitiestodestroy_[index];
    }
    
    public const int RegionPrototypeIdFieldNumber = 5;
    private bool hasRegionPrototypeId;
    private ulong regionPrototypeId_;
    public bool HasRegionPrototypeId {
      get { return hasRegionPrototypeId; }
    }
    public ulong RegionPrototypeId {
      get { return regionPrototypeId_; }
    }
    
    public const int RegionRandomSeedFieldNumber = 6;
    private bool hasRegionRandomSeed;
    private int regionRandomSeed_;
    public bool HasRegionRandomSeed {
      get { return hasRegionRandomSeed; }
    }
    public int RegionRandomSeed {
      get { return regionRandomSeed_; }
    }
    
    public const int ArchiveDataFieldNumber = 7;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public const int RegionMinFieldNumber = 8;
    private bool hasRegionMin;
    private global::Gazillion.NetStructPoint3 regionMin_;
    public bool HasRegionMin {
      get { return hasRegionMin; }
    }
    public global::Gazillion.NetStructPoint3 RegionMin {
      get { return regionMin_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RegionMaxFieldNumber = 9;
    private bool hasRegionMax;
    private global::Gazillion.NetStructPoint3 regionMax_;
    public bool HasRegionMax {
      get { return hasRegionMax; }
    }
    public global::Gazillion.NetStructPoint3 RegionMax {
      get { return regionMax_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CreateRegionParamsFieldNumber = 10;
    private bool hasCreateRegionParams;
    private global::Gazillion.NetStructCreateRegionParams createRegionParams_;
    public bool HasCreateRegionParams {
      get { return hasCreateRegionParams; }
    }
    public global::Gazillion.NetStructCreateRegionParams CreateRegionParams {
      get { return createRegionParams_ ?? global::Gazillion.NetStructCreateRegionParams.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionId) return false;
        if (!hasServerGameId) return false;
        if (!hasClearingAllInterest) return false;
        if (HasCreateRegionParams) {
          if (!CreateRegionParams.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionChangeFieldNames;
      if (hasRegionId) {
        output.WriteUInt64(1, field_names[4], RegionId);
      }
      if (hasServerGameId) {
        output.WriteUInt64(2, field_names[9], ServerGameId);
      }
      if (hasClearingAllInterest) {
        output.WriteBool(3, field_names[1], ClearingAllInterest);
      }
      if (entitiestodestroy_.Count > 0) {
        output.WriteUInt64Array(4, field_names[3], entitiestodestroy_);
      }
      if (hasRegionPrototypeId) {
        output.WriteUInt64(5, field_names[7], RegionPrototypeId);
      }
      if (hasRegionRandomSeed) {
        output.WriteInt32(6, field_names[8], RegionRandomSeed);
      }
      if (hasArchiveData) {
        output.WriteBytes(7, field_names[0], ArchiveData);
      }
      if (hasRegionMin) {
        output.WriteMessage(8, field_names[6], RegionMin);
      }
      if (hasRegionMax) {
        output.WriteMessage(9, field_names[5], RegionMax);
      }
      if (hasCreateRegionParams) {
        output.WriteMessage(10, field_names[2], CreateRegionParams);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionId);
      }
      if (hasServerGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ServerGameId);
      }
      if (hasClearingAllInterest) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ClearingAllInterest);
      }
      {
        int dataSize = 0;
        foreach (ulong element in EntitiestodestroyList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * entitiestodestroy_.Count;
      }
      if (hasRegionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, RegionPrototypeId);
      }
      if (hasRegionRandomSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, RegionRandomSeed);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(7, ArchiveData);
      }
      if (hasRegionMin) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, RegionMin);
      }
      if (hasRegionMax) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, RegionMax);
      }
      if (hasCreateRegionParams) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, CreateRegionParams);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionChange MakeReadOnly() {
      entitiestodestroy_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionChange result;
      
      private NetMessageRegionChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionChange original = result;
          result = new NetMessageRegionChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionChange.Descriptor; }
      }
      
      public override NetMessageRegionChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionChange.DefaultInstance; }
      }
      
      public override NetMessageRegionChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionChange) {
          return MergeFrom((NetMessageRegionChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionChange other) {
        if (other == global::Gazillion.NetMessageRegionChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasServerGameId) {
          ServerGameId = other.ServerGameId;
        }
        if (other.HasClearingAllInterest) {
          ClearingAllInterest = other.ClearingAllInterest;
        }
        if (other.entitiestodestroy_.Count != 0) {
          result.entitiestodestroy_.Add(other.entitiestodestroy_);
        }
        if (other.HasRegionPrototypeId) {
          RegionPrototypeId = other.RegionPrototypeId;
        }
        if (other.HasRegionRandomSeed) {
          RegionRandomSeed = other.RegionRandomSeed;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        if (other.HasRegionMin) {
          MergeRegionMin(other.RegionMin);
        }
        if (other.HasRegionMax) {
          MergeRegionMax(other.RegionMax);
        }
        if (other.HasCreateRegionParams) {
          MergeCreateRegionParams(other.CreateRegionParams);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 16: {
              result.hasServerGameId = input.ReadUInt64(ref result.serverGameId_);
              break;
            }
            case 24: {
              result.hasClearingAllInterest = input.ReadBool(ref result.clearingAllInterest_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt64Array(tag, field_name, result.entitiestodestroy_);
              break;
            }
            case 40: {
              result.hasRegionPrototypeId = input.ReadUInt64(ref result.regionPrototypeId_);
              break;
            }
            case 48: {
              result.hasRegionRandomSeed = input.ReadInt32(ref result.regionRandomSeed_);
              break;
            }
            case 58: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
            case 66: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasRegionMin) {
                subBuilder.MergeFrom(RegionMin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RegionMin = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasRegionMax) {
                subBuilder.MergeFrom(RegionMax);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RegionMax = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Gazillion.NetStructCreateRegionParams.Builder subBuilder = global::Gazillion.NetStructCreateRegionParams.CreateBuilder();
              if (result.hasCreateRegionParams) {
                subBuilder.MergeFrom(CreateRegionParams);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreateRegionParams = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasServerGameId {
        get { return result.hasServerGameId; }
      }
      public ulong ServerGameId {
        get { return result.ServerGameId; }
        set { SetServerGameId(value); }
      }
      public Builder SetServerGameId(ulong value) {
        PrepareBuilder();
        result.hasServerGameId = true;
        result.serverGameId_ = value;
        return this;
      }
      public Builder ClearServerGameId() {
        PrepareBuilder();
        result.hasServerGameId = false;
        result.serverGameId_ = 0UL;
        return this;
      }
      
      public bool HasClearingAllInterest {
        get { return result.hasClearingAllInterest; }
      }
      public bool ClearingAllInterest {
        get { return result.ClearingAllInterest; }
        set { SetClearingAllInterest(value); }
      }
      public Builder SetClearingAllInterest(bool value) {
        PrepareBuilder();
        result.hasClearingAllInterest = true;
        result.clearingAllInterest_ = value;
        return this;
      }
      public Builder ClearClearingAllInterest() {
        PrepareBuilder();
        result.hasClearingAllInterest = false;
        result.clearingAllInterest_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> EntitiestodestroyList {
        get { return PrepareBuilder().entitiestodestroy_; }
      }
      public int EntitiestodestroyCount {
        get { return result.EntitiestodestroyCount; }
      }
      public ulong GetEntitiestodestroy(int index) {
        return result.GetEntitiestodestroy(index);
      }
      public Builder SetEntitiestodestroy(int index, ulong value) {
        PrepareBuilder();
        result.entitiestodestroy_[index] = value;
        return this;
      }
      public Builder AddEntitiestodestroy(ulong value) {
        PrepareBuilder();
        result.entitiestodestroy_.Add(value);
        return this;
      }
      public Builder AddRangeEntitiestodestroy(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.entitiestodestroy_.Add(values);
        return this;
      }
      public Builder ClearEntitiestodestroy() {
        PrepareBuilder();
        result.entitiestodestroy_.Clear();
        return this;
      }
      
      public bool HasRegionPrototypeId {
        get { return result.hasRegionPrototypeId; }
      }
      public ulong RegionPrototypeId {
        get { return result.RegionPrototypeId; }
        set { SetRegionPrototypeId(value); }
      }
      public Builder SetRegionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototypeId = true;
        result.regionPrototypeId_ = value;
        return this;
      }
      public Builder ClearRegionPrototypeId() {
        PrepareBuilder();
        result.hasRegionPrototypeId = false;
        result.regionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasRegionRandomSeed {
        get { return result.hasRegionRandomSeed; }
      }
      public int RegionRandomSeed {
        get { return result.RegionRandomSeed; }
        set { SetRegionRandomSeed(value); }
      }
      public Builder SetRegionRandomSeed(int value) {
        PrepareBuilder();
        result.hasRegionRandomSeed = true;
        result.regionRandomSeed_ = value;
        return this;
      }
      public Builder ClearRegionRandomSeed() {
        PrepareBuilder();
        result.hasRegionRandomSeed = false;
        result.regionRandomSeed_ = 0;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasRegionMin {
       get { return result.hasRegionMin; }
      }
      public global::Gazillion.NetStructPoint3 RegionMin {
        get { return result.RegionMin; }
        set { SetRegionMin(value); }
      }
      public Builder SetRegionMin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegionMin = true;
        result.regionMin_ = value;
        return this;
      }
      public Builder SetRegionMin(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRegionMin = true;
        result.regionMin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRegionMin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRegionMin &&
            result.regionMin_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.regionMin_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.regionMin_).MergeFrom(value).BuildPartial();
        } else {
          result.regionMin_ = value;
        }
        result.hasRegionMin = true;
        return this;
      }
      public Builder ClearRegionMin() {
        PrepareBuilder();
        result.hasRegionMin = false;
        result.regionMin_ = null;
        return this;
      }
      
      public bool HasRegionMax {
       get { return result.hasRegionMax; }
      }
      public global::Gazillion.NetStructPoint3 RegionMax {
        get { return result.RegionMax; }
        set { SetRegionMax(value); }
      }
      public Builder SetRegionMax(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegionMax = true;
        result.regionMax_ = value;
        return this;
      }
      public Builder SetRegionMax(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRegionMax = true;
        result.regionMax_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRegionMax(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRegionMax &&
            result.regionMax_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.regionMax_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.regionMax_).MergeFrom(value).BuildPartial();
        } else {
          result.regionMax_ = value;
        }
        result.hasRegionMax = true;
        return this;
      }
      public Builder ClearRegionMax() {
        PrepareBuilder();
        result.hasRegionMax = false;
        result.regionMax_ = null;
        return this;
      }
      
      public bool HasCreateRegionParams {
       get { return result.hasCreateRegionParams; }
      }
      public global::Gazillion.NetStructCreateRegionParams CreateRegionParams {
        get { return result.CreateRegionParams; }
        set { SetCreateRegionParams(value); }
      }
      public Builder SetCreateRegionParams(global::Gazillion.NetStructCreateRegionParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateRegionParams = true;
        result.createRegionParams_ = value;
        return this;
      }
      public Builder SetCreateRegionParams(global::Gazillion.NetStructCreateRegionParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreateRegionParams = true;
        result.createRegionParams_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreateRegionParams(global::Gazillion.NetStructCreateRegionParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreateRegionParams &&
            result.createRegionParams_ != global::Gazillion.NetStructCreateRegionParams.DefaultInstance) {
            result.createRegionParams_ = global::Gazillion.NetStructCreateRegionParams.CreateBuilder(result.createRegionParams_).MergeFrom(value).BuildPartial();
        } else {
          result.createRegionParams_ = value;
        }
        result.hasCreateRegionParams = true;
        return this;
      }
      public Builder ClearCreateRegionParams() {
        PrepareBuilder();
        result.hasCreateRegionParams = false;
        result.createRegionParams_ = null;
        return this;
      }
    }
    static NetMessageRegionChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPosition : pb::GeneratedMessage<NetMessageEntityPosition, NetMessageEntityPosition.Builder> {
    private NetMessageEntityPosition() { }
    private static readonly NetMessageEntityPosition defaultInstance = new NetMessageEntityPosition().MakeReadOnly();
    private static readonly string[] _netMessageEntityPositionFieldNames = new string[] { "areaId", "cellId", "entityPrototypeId", "flags", "idEntity", "orientation", "position" };
    private static readonly uint[] _netMessageEntityPositionFieldTags = new uint[] { 48, 40, 56, 16, 8, 34, 26 };
    public static NetMessageEntityPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPosition, NetMessageEntityPosition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPosition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int FlagsFieldNumber = 2;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int OrientationFieldNumber = 4;
    private bool hasOrientation;
    private global::Gazillion.NetStructPoint3 orientation_;
    public bool HasOrientation {
      get { return hasOrientation; }
    }
    public global::Gazillion.NetStructPoint3 Orientation {
      get { return orientation_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CellIdFieldNumber = 5;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int AreaIdFieldNumber = 6;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 7;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPositionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[4], IdEntity);
      }
      if (hasFlags) {
        output.WriteUInt32(2, field_names[3], Flags);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[6], Position);
      }
      if (hasOrientation) {
        output.WriteMessage(4, field_names[5], Orientation);
      }
      if (hasCellId) {
        output.WriteUInt32(5, field_names[1], CellId);
      }
      if (hasAreaId) {
        output.WriteUInt32(6, field_names[0], AreaId);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(7, field_names[2], EntityPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Flags);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
      }
      if (hasOrientation) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Orientation);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CellId);
      }
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, AreaId);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, EntityPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPosition result;
      
      private NetMessageEntityPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPosition original = result;
          result = new NetMessageEntityPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPosition.Descriptor; }
      }
      
      public override NetMessageEntityPosition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPosition.DefaultInstance; }
      }
      
      public override NetMessageEntityPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPosition) {
          return MergeFrom((NetMessageEntityPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPosition other) {
        if (other == global::Gazillion.NetMessageEntityPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasOrientation) {
          MergeOrientation(other.Orientation);
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasOrientation) {
                subBuilder.MergeFrom(Orientation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orientation = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 48: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 56: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasOrientation {
       get { return result.hasOrientation; }
      }
      public global::Gazillion.NetStructPoint3 Orientation {
        get { return result.Orientation; }
        set { SetOrientation(value); }
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = value;
        return this;
      }
      public Builder SetOrientation(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrientation = true;
        result.orientation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrientation(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrientation &&
            result.orientation_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.orientation_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.orientation_).MergeFrom(value).BuildPartial();
        } else {
          result.orientation_ = value;
        }
        result.hasOrientation = true;
        return this;
      }
      public Builder ClearOrientation() {
        PrepareBuilder();
        result.hasOrientation = false;
        result.orientation_ = null;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPosition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocomotionStateUpdate : pb::GeneratedMessage<NetMessageLocomotionStateUpdate, NetMessageLocomotionStateUpdate.Builder> {
    private NetMessageLocomotionStateUpdate() { }
    private static readonly NetMessageLocomotionStateUpdate defaultInstance = new NetMessageLocomotionStateUpdate().MakeReadOnly();
    private static readonly string[] _netMessageLocomotionStateUpdateFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageLocomotionStateUpdateFieldTags = new uint[] { 10 };
    public static NetMessageLocomotionStateUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocomotionStateUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocomotionStateUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocomotionStateUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocomotionStateUpdate, NetMessageLocomotionStateUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocomotionStateUpdate__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocomotionStateUpdateFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocomotionStateUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocomotionStateUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocomotionStateUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocomotionStateUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocomotionStateUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocomotionStateUpdate result;
      
      private NetMessageLocomotionStateUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocomotionStateUpdate original = result;
          result = new NetMessageLocomotionStateUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocomotionStateUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocomotionStateUpdate.Descriptor; }
      }
      
      public override NetMessageLocomotionStateUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocomotionStateUpdate.DefaultInstance; }
      }
      
      public override NetMessageLocomotionStateUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocomotionStateUpdate) {
          return MergeFrom((NetMessageLocomotionStateUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocomotionStateUpdate other) {
        if (other == global::Gazillion.NetMessageLocomotionStateUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocomotionStateUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocomotionStateUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageLocomotionStateUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLootRollFailed : pb::GeneratedMessage<NetMessageLootRollFailed, NetMessageLootRollFailed.Builder> {
    private NetMessageLootRollFailed() { }
    private static readonly NetMessageLootRollFailed defaultInstance = new NetMessageLootRollFailed().MakeReadOnly();
    private static readonly string[] _netMessageLootRollFailedFieldNames = new string[] { "lootTableProtoId" };
    private static readonly uint[] _netMessageLootRollFailedFieldTags = new uint[] { 8 };
    public static NetMessageLootRollFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLootRollFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLootRollFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLootRollFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLootRollFailed, NetMessageLootRollFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLootRollFailed__FieldAccessorTable; }
    }
    
    public const int LootTableProtoIdFieldNumber = 1;
    private bool hasLootTableProtoId;
    private ulong lootTableProtoId_;
    public bool HasLootTableProtoId {
      get { return hasLootTableProtoId; }
    }
    public ulong LootTableProtoId {
      get { return lootTableProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLootRollFailedFieldNames;
      if (hasLootTableProtoId) {
        output.WriteUInt64(1, field_names[0], LootTableProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLootTableProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LootTableProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLootRollFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLootRollFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLootRollFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLootRollFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLootRollFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLootRollFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLootRollFailed result;
      
      private NetMessageLootRollFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLootRollFailed original = result;
          result = new NetMessageLootRollFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLootRollFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLootRollFailed.Descriptor; }
      }
      
      public override NetMessageLootRollFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLootRollFailed.DefaultInstance; }
      }
      
      public override NetMessageLootRollFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLootRollFailed) {
          return MergeFrom((NetMessageLootRollFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLootRollFailed other) {
        if (other == global::Gazillion.NetMessageLootRollFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLootTableProtoId) {
          LootTableProtoId = other.LootTableProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLootRollFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLootRollFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLootTableProtoId = input.ReadUInt64(ref result.lootTableProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLootTableProtoId {
        get { return result.hasLootTableProtoId; }
      }
      public ulong LootTableProtoId {
        get { return result.LootTableProtoId; }
        set { SetLootTableProtoId(value); }
      }
      public Builder SetLootTableProtoId(ulong value) {
        PrepareBuilder();
        result.hasLootTableProtoId = true;
        result.lootTableProtoId_ = value;
        return this;
      }
      public Builder ClearLootTableProtoId() {
        PrepareBuilder();
        result.hasLootTableProtoId = false;
        result.lootTableProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageLootRollFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInterestPolicies : pb::GeneratedMessage<NetMessageInterestPolicies, NetMessageInterestPolicies.Builder> {
    private NetMessageInterestPolicies() { }
    private static readonly NetMessageInterestPolicies defaultInstance = new NetMessageInterestPolicies().MakeReadOnly();
    private static readonly string[] _netMessageInterestPoliciesFieldNames = new string[] { "entityDataId", "idEntity", "newPolicies", "prevPolicies" };
    private static readonly uint[] _netMessageInterestPoliciesFieldTags = new uint[] { 32, 8, 16, 24 };
    public static NetMessageInterestPolicies DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInterestPolicies DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInterestPolicies ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInterestPolicies__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInterestPolicies, NetMessageInterestPolicies.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInterestPolicies__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int NewPoliciesFieldNumber = 2;
    private bool hasNewPolicies;
    private uint newPolicies_;
    public bool HasNewPolicies {
      get { return hasNewPolicies; }
    }
    public uint NewPolicies {
      get { return newPolicies_; }
    }
    
    public const int PrevPoliciesFieldNumber = 3;
    private bool hasPrevPolicies;
    private uint prevPolicies_;
    public bool HasPrevPolicies {
      get { return hasPrevPolicies; }
    }
    public uint PrevPolicies {
      get { return prevPolicies_; }
    }
    
    public const int EntityDataIdFieldNumber = 4;
    private bool hasEntityDataId;
    private ulong entityDataId_;
    public bool HasEntityDataId {
      get { return hasEntityDataId; }
    }
    public ulong EntityDataId {
      get { return entityDataId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasNewPolicies) return false;
        if (!hasPrevPolicies) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInterestPoliciesFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasNewPolicies) {
        output.WriteUInt32(2, field_names[2], NewPolicies);
      }
      if (hasPrevPolicies) {
        output.WriteUInt32(3, field_names[3], PrevPolicies);
      }
      if (hasEntityDataId) {
        output.WriteUInt64(4, field_names[0], EntityDataId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasNewPolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, NewPolicies);
      }
      if (hasPrevPolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PrevPolicies);
      }
      if (hasEntityDataId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, EntityDataId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInterestPolicies ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInterestPolicies MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInterestPolicies prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInterestPolicies, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInterestPolicies cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInterestPolicies result;
      
      private NetMessageInterestPolicies PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInterestPolicies original = result;
          result = new NetMessageInterestPolicies();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInterestPolicies MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInterestPolicies.Descriptor; }
      }
      
      public override NetMessageInterestPolicies DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInterestPolicies.DefaultInstance; }
      }
      
      public override NetMessageInterestPolicies BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInterestPolicies) {
          return MergeFrom((NetMessageInterestPolicies) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInterestPolicies other) {
        if (other == global::Gazillion.NetMessageInterestPolicies.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasNewPolicies) {
          NewPolicies = other.NewPolicies;
        }
        if (other.HasPrevPolicies) {
          PrevPolicies = other.PrevPolicies;
        }
        if (other.HasEntityDataId) {
          EntityDataId = other.EntityDataId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInterestPoliciesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInterestPoliciesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasNewPolicies = input.ReadUInt32(ref result.newPolicies_);
              break;
            }
            case 24: {
              result.hasPrevPolicies = input.ReadUInt32(ref result.prevPolicies_);
              break;
            }
            case 32: {
              result.hasEntityDataId = input.ReadUInt64(ref result.entityDataId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasNewPolicies {
        get { return result.hasNewPolicies; }
      }
      public uint NewPolicies {
        get { return result.NewPolicies; }
        set { SetNewPolicies(value); }
      }
      public Builder SetNewPolicies(uint value) {
        PrepareBuilder();
        result.hasNewPolicies = true;
        result.newPolicies_ = value;
        return this;
      }
      public Builder ClearNewPolicies() {
        PrepareBuilder();
        result.hasNewPolicies = false;
        result.newPolicies_ = 0;
        return this;
      }
      
      public bool HasPrevPolicies {
        get { return result.hasPrevPolicies; }
      }
      public uint PrevPolicies {
        get { return result.PrevPolicies; }
        set { SetPrevPolicies(value); }
      }
      public Builder SetPrevPolicies(uint value) {
        PrepareBuilder();
        result.hasPrevPolicies = true;
        result.prevPolicies_ = value;
        return this;
      }
      public Builder ClearPrevPolicies() {
        PrepareBuilder();
        result.hasPrevPolicies = false;
        result.prevPolicies_ = 0;
        return this;
      }
      
      public bool HasEntityDataId {
        get { return result.hasEntityDataId; }
      }
      public ulong EntityDataId {
        get { return result.EntityDataId; }
        set { SetEntityDataId(value); }
      }
      public Builder SetEntityDataId(ulong value) {
        PrepareBuilder();
        result.hasEntityDataId = true;
        result.entityDataId_ = value;
        return this;
      }
      public Builder ClearEntityDataId() {
        PrepareBuilder();
        result.hasEntityDataId = false;
        result.entityDataId_ = 0UL;
        return this;
      }
    }
    static NetMessageInterestPolicies() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnableToChangeRegion : pb::GeneratedMessage<NetMessageUnableToChangeRegion, NetMessageUnableToChangeRegion.Builder> {
    private NetMessageUnableToChangeRegion() { }
    private static readonly NetMessageUnableToChangeRegion defaultInstance = new NetMessageUnableToChangeRegion().MakeReadOnly();
    private static readonly string[] _netMessageUnableToChangeRegionFieldNames = new string[] { "changeFailed" };
    private static readonly uint[] _netMessageUnableToChangeRegionFieldTags = new uint[] { 10 };
    public static NetMessageUnableToChangeRegion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnableToChangeRegion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnableToChangeRegion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnableToChangeRegion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnableToChangeRegion, NetMessageUnableToChangeRegion.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnableToChangeRegion__FieldAccessorTable; }
    }
    
    public const int ChangeFailedFieldNumber = 1;
    private bool hasChangeFailed;
    private global::Gazillion.ChangeRegionFailed changeFailed_;
    public bool HasChangeFailed {
      get { return hasChangeFailed; }
    }
    public global::Gazillion.ChangeRegionFailed ChangeFailed {
      get { return changeFailed_ ?? global::Gazillion.ChangeRegionFailed.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChangeFailed) return false;
        if (!ChangeFailed.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnableToChangeRegionFieldNames;
      if (hasChangeFailed) {
        output.WriteMessage(1, field_names[0], ChangeFailed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChangeFailed) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ChangeFailed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnableToChangeRegion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnableToChangeRegion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnableToChangeRegion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnableToChangeRegion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnableToChangeRegion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnableToChangeRegion result;
      
      private NetMessageUnableToChangeRegion PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnableToChangeRegion original = result;
          result = new NetMessageUnableToChangeRegion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnableToChangeRegion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnableToChangeRegion.Descriptor; }
      }
      
      public override NetMessageUnableToChangeRegion DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnableToChangeRegion.DefaultInstance; }
      }
      
      public override NetMessageUnableToChangeRegion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnableToChangeRegion) {
          return MergeFrom((NetMessageUnableToChangeRegion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnableToChangeRegion other) {
        if (other == global::Gazillion.NetMessageUnableToChangeRegion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChangeFailed) {
          MergeChangeFailed(other.ChangeFailed);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnableToChangeRegionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnableToChangeRegionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.ChangeRegionFailed.Builder subBuilder = global::Gazillion.ChangeRegionFailed.CreateBuilder();
              if (result.hasChangeFailed) {
                subBuilder.MergeFrom(ChangeFailed);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChangeFailed = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChangeFailed {
       get { return result.hasChangeFailed; }
      }
      public global::Gazillion.ChangeRegionFailed ChangeFailed {
        get { return result.ChangeFailed; }
        set { SetChangeFailed(value); }
      }
      public Builder SetChangeFailed(global::Gazillion.ChangeRegionFailed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChangeFailed = true;
        result.changeFailed_ = value;
        return this;
      }
      public Builder SetChangeFailed(global::Gazillion.ChangeRegionFailed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChangeFailed = true;
        result.changeFailed_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChangeFailed(global::Gazillion.ChangeRegionFailed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChangeFailed &&
            result.changeFailed_ != global::Gazillion.ChangeRegionFailed.DefaultInstance) {
            result.changeFailed_ = global::Gazillion.ChangeRegionFailed.CreateBuilder(result.changeFailed_).MergeFrom(value).BuildPartial();
        } else {
          result.changeFailed_ = value;
        }
        result.hasChangeFailed = true;
        return this;
      }
      public Builder ClearChangeFailed() {
        PrepareBuilder();
        result.hasChangeFailed = false;
        result.changeFailed_ = null;
        return this;
      }
    }
    static NetMessageUnableToChangeRegion() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructAreaConnection : pb::GeneratedMessage<NetStructAreaConnection, NetStructAreaConnection.Builder> {
    private NetStructAreaConnection() { }
    private static readonly NetStructAreaConnection defaultInstance = new NetStructAreaConnection().MakeReadOnly();
    private static readonly string[] _netStructAreaConnectionFieldNames = new string[] { "areaId", "connectPoint" };
    private static readonly uint[] _netStructAreaConnectionFieldTags = new uint[] { 8, 18 };
    public static NetStructAreaConnection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructAreaConnection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructAreaConnection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAreaConnection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructAreaConnection, NetStructAreaConnection.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAreaConnection__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int ConnectPointFieldNumber = 2;
    private bool hasConnectPoint;
    private global::Gazillion.NetStructIPoint2 connectPoint_;
    public bool HasConnectPoint {
      get { return hasConnectPoint; }
    }
    public global::Gazillion.NetStructIPoint2 ConnectPoint {
      get { return connectPoint_ ?? global::Gazillion.NetStructIPoint2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasConnectPoint) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructAreaConnectionFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasConnectPoint) {
        output.WriteMessage(2, field_names[1], ConnectPoint);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasConnectPoint) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, ConnectPoint);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructAreaConnection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructAreaConnection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructAreaConnection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAreaConnection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructAreaConnection MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructAreaConnection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructAreaConnection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructAreaConnection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructAreaConnection result;
      
      private NetStructAreaConnection PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructAreaConnection original = result;
          result = new NetStructAreaConnection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructAreaConnection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructAreaConnection.Descriptor; }
      }
      
      public override NetStructAreaConnection DefaultInstanceForType {
        get { return global::Gazillion.NetStructAreaConnection.DefaultInstance; }
      }
      
      public override NetStructAreaConnection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructAreaConnection) {
          return MergeFrom((NetStructAreaConnection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructAreaConnection other) {
        if (other == global::Gazillion.NetStructAreaConnection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasConnectPoint) {
          MergeConnectPoint(other.ConnectPoint);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructAreaConnectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructAreaConnectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructIPoint2.Builder subBuilder = global::Gazillion.NetStructIPoint2.CreateBuilder();
              if (result.hasConnectPoint) {
                subBuilder.MergeFrom(ConnectPoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConnectPoint = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasConnectPoint {
       get { return result.hasConnectPoint; }
      }
      public global::Gazillion.NetStructIPoint2 ConnectPoint {
        get { return result.ConnectPoint; }
        set { SetConnectPoint(value); }
      }
      public Builder SetConnectPoint(global::Gazillion.NetStructIPoint2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConnectPoint = true;
        result.connectPoint_ = value;
        return this;
      }
      public Builder SetConnectPoint(global::Gazillion.NetStructIPoint2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConnectPoint = true;
        result.connectPoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConnectPoint(global::Gazillion.NetStructIPoint2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConnectPoint &&
            result.connectPoint_ != global::Gazillion.NetStructIPoint2.DefaultInstance) {
            result.connectPoint_ = global::Gazillion.NetStructIPoint2.CreateBuilder(result.connectPoint_).MergeFrom(value).BuildPartial();
        } else {
          result.connectPoint_ = value;
        }
        result.hasConnectPoint = true;
        return this;
      }
      public Builder ClearConnectPoint() {
        PrepareBuilder();
        result.hasConnectPoint = false;
        result.connectPoint_ = null;
        return this;
      }
    }
    static NetStructAreaConnection() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAddArea : pb::GeneratedMessage<NetMessageAddArea, NetMessageAddArea.Builder> {
    private NetMessageAddArea() { }
    private static readonly NetMessageAddArea defaultInstance = new NetMessageAddArea().MakeReadOnly();
    private static readonly string[] _netMessageAddAreaFieldNames = new string[] { "areaId", "areaOrigin", "areaPrototypeId", "isStartArea" };
    private static readonly uint[] _netMessageAddAreaFieldTags = new uint[] { 8, 26, 16, 32 };
    public static NetMessageAddArea DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAddArea DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAddArea ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddArea__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAddArea, NetMessageAddArea.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddArea__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int AreaPrototypeIdFieldNumber = 2;
    private bool hasAreaPrototypeId;
    private ulong areaPrototypeId_;
    public bool HasAreaPrototypeId {
      get { return hasAreaPrototypeId; }
    }
    public ulong AreaPrototypeId {
      get { return areaPrototypeId_; }
    }
    
    public const int AreaOriginFieldNumber = 3;
    private bool hasAreaOrigin;
    private global::Gazillion.NetStructPoint3 areaOrigin_;
    public bool HasAreaOrigin {
      get { return hasAreaOrigin; }
    }
    public global::Gazillion.NetStructPoint3 AreaOrigin {
      get { return areaOrigin_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int IsStartAreaFieldNumber = 4;
    private bool hasIsStartArea;
    private bool isStartArea_;
    public bool HasIsStartArea {
      get { return hasIsStartArea; }
    }
    public bool IsStartArea {
      get { return isStartArea_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasAreaPrototypeId) return false;
        if (!hasAreaOrigin) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAddAreaFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasAreaPrototypeId) {
        output.WriteUInt64(2, field_names[2], AreaPrototypeId);
      }
      if (hasAreaOrigin) {
        output.WriteMessage(3, field_names[1], AreaOrigin);
      }
      if (hasIsStartArea) {
        output.WriteBool(4, field_names[3], IsStartArea);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasAreaPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AreaPrototypeId);
      }
      if (hasAreaOrigin) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, AreaOrigin);
      }
      if (hasIsStartArea) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, IsStartArea);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAddArea ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddArea ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAddArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAddArea MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAddArea prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAddArea, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAddArea cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAddArea result;
      
      private NetMessageAddArea PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAddArea original = result;
          result = new NetMessageAddArea();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAddArea MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAddArea.Descriptor; }
      }
      
      public override NetMessageAddArea DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAddArea.DefaultInstance; }
      }
      
      public override NetMessageAddArea BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAddArea) {
          return MergeFrom((NetMessageAddArea) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAddArea other) {
        if (other == global::Gazillion.NetMessageAddArea.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasAreaPrototypeId) {
          AreaPrototypeId = other.AreaPrototypeId;
        }
        if (other.HasAreaOrigin) {
          MergeAreaOrigin(other.AreaOrigin);
        }
        if (other.HasIsStartArea) {
          IsStartArea = other.IsStartArea;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAddAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAddAreaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasAreaPrototypeId = input.ReadUInt64(ref result.areaPrototypeId_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasAreaOrigin) {
                subBuilder.MergeFrom(AreaOrigin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AreaOrigin = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasIsStartArea = input.ReadBool(ref result.isStartArea_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasAreaPrototypeId {
        get { return result.hasAreaPrototypeId; }
      }
      public ulong AreaPrototypeId {
        get { return result.AreaPrototypeId; }
        set { SetAreaPrototypeId(value); }
      }
      public Builder SetAreaPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasAreaPrototypeId = true;
        result.areaPrototypeId_ = value;
        return this;
      }
      public Builder ClearAreaPrototypeId() {
        PrepareBuilder();
        result.hasAreaPrototypeId = false;
        result.areaPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasAreaOrigin {
       get { return result.hasAreaOrigin; }
      }
      public global::Gazillion.NetStructPoint3 AreaOrigin {
        get { return result.AreaOrigin; }
        set { SetAreaOrigin(value); }
      }
      public Builder SetAreaOrigin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAreaOrigin = true;
        result.areaOrigin_ = value;
        return this;
      }
      public Builder SetAreaOrigin(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAreaOrigin = true;
        result.areaOrigin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAreaOrigin(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAreaOrigin &&
            result.areaOrigin_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.areaOrigin_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.areaOrigin_).MergeFrom(value).BuildPartial();
        } else {
          result.areaOrigin_ = value;
        }
        result.hasAreaOrigin = true;
        return this;
      }
      public Builder ClearAreaOrigin() {
        PrepareBuilder();
        result.hasAreaOrigin = false;
        result.areaOrigin_ = null;
        return this;
      }
      
      public bool HasIsStartArea {
        get { return result.hasIsStartArea; }
      }
      public bool IsStartArea {
        get { return result.IsStartArea; }
        set { SetIsStartArea(value); }
      }
      public Builder SetIsStartArea(bool value) {
        PrepareBuilder();
        result.hasIsStartArea = true;
        result.isStartArea_ = value;
        return this;
      }
      public Builder ClearIsStartArea() {
        PrepareBuilder();
        result.hasIsStartArea = false;
        result.isStartArea_ = false;
        return this;
      }
    }
    static NetMessageAddArea() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoveArea : pb::GeneratedMessage<NetMessageRemoveArea, NetMessageRemoveArea.Builder> {
    private NetMessageRemoveArea() { }
    private static readonly NetMessageRemoveArea defaultInstance = new NetMessageRemoveArea().MakeReadOnly();
    private static readonly string[] _netMessageRemoveAreaFieldNames = new string[] { "areaId" };
    private static readonly uint[] _netMessageRemoveAreaFieldTags = new uint[] { 8 };
    public static NetMessageRemoveArea DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoveArea DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoveArea ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveArea__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoveArea, NetMessageRemoveArea.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveArea__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemoveAreaFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoveArea ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoveArea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveArea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoveArea MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoveArea prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoveArea, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoveArea cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoveArea result;
      
      private NetMessageRemoveArea PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoveArea original = result;
          result = new NetMessageRemoveArea();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoveArea MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoveArea.Descriptor; }
      }
      
      public override NetMessageRemoveArea DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoveArea.DefaultInstance; }
      }
      
      public override NetMessageRemoveArea BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoveArea) {
          return MergeFrom((NetMessageRemoveArea) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoveArea other) {
        if (other == global::Gazillion.NetMessageRemoveArea.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemoveAreaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemoveAreaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
    }
    static NetMessageRemoveArea() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructReservedSpawn : pb::GeneratedMessage<NetStructReservedSpawn, NetStructReservedSpawn.Builder> {
    private NetStructReservedSpawn() { }
    private static readonly NetStructReservedSpawn defaultInstance = new NetStructReservedSpawn().MakeReadOnly();
    private static readonly string[] _netStructReservedSpawnFieldNames = new string[] { "asset", "id", "useMarkerOrientation" };
    private static readonly uint[] _netStructReservedSpawnFieldTags = new uint[] { 8, 16, 24 };
    public static NetStructReservedSpawn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructReservedSpawn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructReservedSpawn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructReservedSpawn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructReservedSpawn, NetStructReservedSpawn.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructReservedSpawn__FieldAccessorTable; }
    }
    
    public const int AssetFieldNumber = 1;
    private bool hasAsset;
    private ulong asset_;
    public bool HasAsset {
      get { return hasAsset; }
    }
    public ulong Asset {
      get { return asset_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int UseMarkerOrientationFieldNumber = 3;
    private bool hasUseMarkerOrientation;
    private bool useMarkerOrientation_;
    public bool HasUseMarkerOrientation {
      get { return hasUseMarkerOrientation; }
    }
    public bool UseMarkerOrientation {
      get { return useMarkerOrientation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAsset) return false;
        if (!hasId) return false;
        if (!hasUseMarkerOrientation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructReservedSpawnFieldNames;
      if (hasAsset) {
        output.WriteUInt64(1, field_names[0], Asset);
      }
      if (hasId) {
        output.WriteUInt32(2, field_names[1], Id);
      }
      if (hasUseMarkerOrientation) {
        output.WriteBool(3, field_names[2], UseMarkerOrientation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAsset) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Asset);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
      }
      if (hasUseMarkerOrientation) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, UseMarkerOrientation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructReservedSpawn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructReservedSpawn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructReservedSpawn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructReservedSpawn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructReservedSpawn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructReservedSpawn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructReservedSpawn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructReservedSpawn result;
      
      private NetStructReservedSpawn PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructReservedSpawn original = result;
          result = new NetStructReservedSpawn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructReservedSpawn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructReservedSpawn.Descriptor; }
      }
      
      public override NetStructReservedSpawn DefaultInstanceForType {
        get { return global::Gazillion.NetStructReservedSpawn.DefaultInstance; }
      }
      
      public override NetStructReservedSpawn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructReservedSpawn) {
          return MergeFrom((NetStructReservedSpawn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructReservedSpawn other) {
        if (other == global::Gazillion.NetStructReservedSpawn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAsset) {
          Asset = other.Asset;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUseMarkerOrientation) {
          UseMarkerOrientation = other.UseMarkerOrientation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructReservedSpawnFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructReservedSpawnFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAsset = input.ReadUInt64(ref result.asset_);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasUseMarkerOrientation = input.ReadBool(ref result.useMarkerOrientation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAsset {
        get { return result.hasAsset; }
      }
      public ulong Asset {
        get { return result.Asset; }
        set { SetAsset(value); }
      }
      public Builder SetAsset(ulong value) {
        PrepareBuilder();
        result.hasAsset = true;
        result.asset_ = value;
        return this;
      }
      public Builder ClearAsset() {
        PrepareBuilder();
        result.hasAsset = false;
        result.asset_ = 0UL;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasUseMarkerOrientation {
        get { return result.hasUseMarkerOrientation; }
      }
      public bool UseMarkerOrientation {
        get { return result.UseMarkerOrientation; }
        set { SetUseMarkerOrientation(value); }
      }
      public Builder SetUseMarkerOrientation(bool value) {
        PrepareBuilder();
        result.hasUseMarkerOrientation = true;
        result.useMarkerOrientation_ = value;
        return this;
      }
      public Builder ClearUseMarkerOrientation() {
        PrepareBuilder();
        result.hasUseMarkerOrientation = false;
        result.useMarkerOrientation_ = false;
        return this;
      }
    }
    static NetStructReservedSpawn() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellCreate : pb::GeneratedMessage<NetMessageCellCreate, NetMessageCellCreate.Builder> {
    private NetMessageCellCreate() { }
    private static readonly NetMessageCellCreate defaultInstance = new NetMessageCellCreate().MakeReadOnly();
    private static readonly string[] _netMessageCellCreateFieldNames = new string[] { "areaId", "bufferwidth", "cellId", "cellPrototypeId", "cellRandomSeed", "encounters", "overrideLocationName", "positionInArea" };
    private static readonly uint[] _netMessageCellCreateFieldTags = new uint[] { 8, 56, 16, 24, 40, 50, 64, 34 };
    public static NetMessageCellCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellCreate, NetMessageCellCreate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellCreate__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int CellIdFieldNumber = 2;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int CellPrototypeIdFieldNumber = 3;
    private bool hasCellPrototypeId;
    private ulong cellPrototypeId_;
    public bool HasCellPrototypeId {
      get { return hasCellPrototypeId; }
    }
    public ulong CellPrototypeId {
      get { return cellPrototypeId_; }
    }
    
    public const int PositionInAreaFieldNumber = 4;
    private bool hasPositionInArea;
    private global::Gazillion.NetStructPoint3 positionInArea_;
    public bool HasPositionInArea {
      get { return hasPositionInArea; }
    }
    public global::Gazillion.NetStructPoint3 PositionInArea {
      get { return positionInArea_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int CellRandomSeedFieldNumber = 5;
    private bool hasCellRandomSeed;
    private int cellRandomSeed_;
    public bool HasCellRandomSeed {
      get { return hasCellRandomSeed; }
    }
    public int CellRandomSeed {
      get { return cellRandomSeed_; }
    }
    
    public const int EncountersFieldNumber = 6;
    private pbc::PopsicleList<global::Gazillion.NetStructReservedSpawn> encounters_ = new pbc::PopsicleList<global::Gazillion.NetStructReservedSpawn>();
    public scg::IList<global::Gazillion.NetStructReservedSpawn> EncountersList {
      get { return encounters_; }
    }
    public int EncountersCount {
      get { return encounters_.Count; }
    }
    public global::Gazillion.NetStructReservedSpawn GetEncounters(int index) {
      return encounters_[index];
    }
    
    public const int BufferwidthFieldNumber = 7;
    private bool hasBufferwidth;
    private int bufferwidth_;
    public bool HasBufferwidth {
      get { return hasBufferwidth; }
    }
    public int Bufferwidth {
      get { return bufferwidth_; }
    }
    
    public const int OverrideLocationNameFieldNumber = 8;
    private bool hasOverrideLocationName;
    private ulong overrideLocationName_;
    public bool HasOverrideLocationName {
      get { return hasOverrideLocationName; }
    }
    public ulong OverrideLocationName {
      get { return overrideLocationName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasCellId) return false;
        if (!hasCellPrototypeId) return false;
        if (!hasPositionInArea) return false;
        if (!hasCellRandomSeed) return false;
        if (!hasBufferwidth) return false;
        if (!hasOverrideLocationName) return false;
        foreach (global::Gazillion.NetStructReservedSpawn element in EncountersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellCreateFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasCellId) {
        output.WriteUInt32(2, field_names[2], CellId);
      }
      if (hasCellPrototypeId) {
        output.WriteUInt64(3, field_names[3], CellPrototypeId);
      }
      if (hasPositionInArea) {
        output.WriteMessage(4, field_names[7], PositionInArea);
      }
      if (hasCellRandomSeed) {
        output.WriteInt32(5, field_names[4], CellRandomSeed);
      }
      if (encounters_.Count > 0) {
        output.WriteMessageArray(6, field_names[5], encounters_);
      }
      if (hasBufferwidth) {
        output.WriteInt32(7, field_names[1], Bufferwidth);
      }
      if (hasOverrideLocationName) {
        output.WriteUInt64(8, field_names[6], OverrideLocationName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CellId);
      }
      if (hasCellPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, CellPrototypeId);
      }
      if (hasPositionInArea) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, PositionInArea);
      }
      if (hasCellRandomSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, CellRandomSeed);
      }
      foreach (global::Gazillion.NetStructReservedSpawn element in EncountersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      if (hasBufferwidth) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Bufferwidth);
      }
      if (hasOverrideLocationName) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, OverrideLocationName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellCreate MakeReadOnly() {
      encounters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellCreate result;
      
      private NetMessageCellCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellCreate original = result;
          result = new NetMessageCellCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellCreate.Descriptor; }
      }
      
      public override NetMessageCellCreate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellCreate.DefaultInstance; }
      }
      
      public override NetMessageCellCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellCreate) {
          return MergeFrom((NetMessageCellCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellCreate other) {
        if (other == global::Gazillion.NetMessageCellCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasCellPrototypeId) {
          CellPrototypeId = other.CellPrototypeId;
        }
        if (other.HasPositionInArea) {
          MergePositionInArea(other.PositionInArea);
        }
        if (other.HasCellRandomSeed) {
          CellRandomSeed = other.CellRandomSeed;
        }
        if (other.encounters_.Count != 0) {
          result.encounters_.Add(other.encounters_);
        }
        if (other.HasBufferwidth) {
          Bufferwidth = other.Bufferwidth;
        }
        if (other.HasOverrideLocationName) {
          OverrideLocationName = other.OverrideLocationName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 24: {
              result.hasCellPrototypeId = input.ReadUInt64(ref result.cellPrototypeId_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPositionInArea) {
                subBuilder.MergeFrom(PositionInArea);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PositionInArea = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasCellRandomSeed = input.ReadInt32(ref result.cellRandomSeed_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.encounters_, global::Gazillion.NetStructReservedSpawn.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasBufferwidth = input.ReadInt32(ref result.bufferwidth_);
              break;
            }
            case 64: {
              result.hasOverrideLocationName = input.ReadUInt64(ref result.overrideLocationName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasCellPrototypeId {
        get { return result.hasCellPrototypeId; }
      }
      public ulong CellPrototypeId {
        get { return result.CellPrototypeId; }
        set { SetCellPrototypeId(value); }
      }
      public Builder SetCellPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasCellPrototypeId = true;
        result.cellPrototypeId_ = value;
        return this;
      }
      public Builder ClearCellPrototypeId() {
        PrepareBuilder();
        result.hasCellPrototypeId = false;
        result.cellPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasPositionInArea {
       get { return result.hasPositionInArea; }
      }
      public global::Gazillion.NetStructPoint3 PositionInArea {
        get { return result.PositionInArea; }
        set { SetPositionInArea(value); }
      }
      public Builder SetPositionInArea(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionInArea = true;
        result.positionInArea_ = value;
        return this;
      }
      public Builder SetPositionInArea(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPositionInArea = true;
        result.positionInArea_ = builderForValue.Build();
        return this;
      }
      public Builder MergePositionInArea(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPositionInArea &&
            result.positionInArea_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.positionInArea_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.positionInArea_).MergeFrom(value).BuildPartial();
        } else {
          result.positionInArea_ = value;
        }
        result.hasPositionInArea = true;
        return this;
      }
      public Builder ClearPositionInArea() {
        PrepareBuilder();
        result.hasPositionInArea = false;
        result.positionInArea_ = null;
        return this;
      }
      
      public bool HasCellRandomSeed {
        get { return result.hasCellRandomSeed; }
      }
      public int CellRandomSeed {
        get { return result.CellRandomSeed; }
        set { SetCellRandomSeed(value); }
      }
      public Builder SetCellRandomSeed(int value) {
        PrepareBuilder();
        result.hasCellRandomSeed = true;
        result.cellRandomSeed_ = value;
        return this;
      }
      public Builder ClearCellRandomSeed() {
        PrepareBuilder();
        result.hasCellRandomSeed = false;
        result.cellRandomSeed_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructReservedSpawn> EncountersList {
        get { return PrepareBuilder().encounters_; }
      }
      public int EncountersCount {
        get { return result.EncountersCount; }
      }
      public global::Gazillion.NetStructReservedSpawn GetEncounters(int index) {
        return result.GetEncounters(index);
      }
      public Builder SetEncounters(int index, global::Gazillion.NetStructReservedSpawn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.encounters_[index] = value;
        return this;
      }
      public Builder SetEncounters(int index, global::Gazillion.NetStructReservedSpawn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.encounters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEncounters(global::Gazillion.NetStructReservedSpawn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.encounters_.Add(value);
        return this;
      }
      public Builder AddEncounters(global::Gazillion.NetStructReservedSpawn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.encounters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEncounters(scg::IEnumerable<global::Gazillion.NetStructReservedSpawn> values) {
        PrepareBuilder();
        result.encounters_.Add(values);
        return this;
      }
      public Builder ClearEncounters() {
        PrepareBuilder();
        result.encounters_.Clear();
        return this;
      }
      
      public bool HasBufferwidth {
        get { return result.hasBufferwidth; }
      }
      public int Bufferwidth {
        get { return result.Bufferwidth; }
        set { SetBufferwidth(value); }
      }
      public Builder SetBufferwidth(int value) {
        PrepareBuilder();
        result.hasBufferwidth = true;
        result.bufferwidth_ = value;
        return this;
      }
      public Builder ClearBufferwidth() {
        PrepareBuilder();
        result.hasBufferwidth = false;
        result.bufferwidth_ = 0;
        return this;
      }
      
      public bool HasOverrideLocationName {
        get { return result.hasOverrideLocationName; }
      }
      public ulong OverrideLocationName {
        get { return result.OverrideLocationName; }
        set { SetOverrideLocationName(value); }
      }
      public Builder SetOverrideLocationName(ulong value) {
        PrepareBuilder();
        result.hasOverrideLocationName = true;
        result.overrideLocationName_ = value;
        return this;
      }
      public Builder ClearOverrideLocationName() {
        PrepareBuilder();
        result.hasOverrideLocationName = false;
        result.overrideLocationName_ = 0UL;
        return this;
      }
    }
    static NetMessageCellCreate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCellDestroy : pb::GeneratedMessage<NetMessageCellDestroy, NetMessageCellDestroy.Builder> {
    private NetMessageCellDestroy() { }
    private static readonly NetMessageCellDestroy defaultInstance = new NetMessageCellDestroy().MakeReadOnly();
    private static readonly string[] _netMessageCellDestroyFieldNames = new string[] { "areaId", "cellId" };
    private static readonly uint[] _netMessageCellDestroyFieldTags = new uint[] { 8, 16 };
    public static NetMessageCellDestroy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCellDestroy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCellDestroy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellDestroy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCellDestroy, NetMessageCellDestroy.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCellDestroy__FieldAccessorTable; }
    }
    
    public const int AreaIdFieldNumber = 1;
    private bool hasAreaId;
    private uint areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public uint AreaId {
      get { return areaId_; }
    }
    
    public const int CellIdFieldNumber = 2;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAreaId) return false;
        if (!hasCellId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCellDestroyFieldNames;
      if (hasAreaId) {
        output.WriteUInt32(1, field_names[0], AreaId);
      }
      if (hasCellId) {
        output.WriteUInt32(2, field_names[1], CellId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AreaId);
      }
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CellId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCellDestroy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCellDestroy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCellDestroy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCellDestroy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCellDestroy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCellDestroy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCellDestroy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCellDestroy result;
      
      private NetMessageCellDestroy PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCellDestroy original = result;
          result = new NetMessageCellDestroy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCellDestroy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCellDestroy.Descriptor; }
      }
      
      public override NetMessageCellDestroy DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCellDestroy.DefaultInstance; }
      }
      
      public override NetMessageCellDestroy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCellDestroy) {
          return MergeFrom((NetMessageCellDestroy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCellDestroy other) {
        if (other == global::Gazillion.NetMessageCellDestroy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCellDestroyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCellDestroyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAreaId = input.ReadUInt32(ref result.areaId_);
              break;
            }
            case 16: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public uint AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(uint value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
    }
    static NetMessageCellDestroy() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEnvironmentUpdate : pb::GeneratedMessage<NetMessageEnvironmentUpdate, NetMessageEnvironmentUpdate.Builder> {
    private NetMessageEnvironmentUpdate() { }
    private static readonly NetMessageEnvironmentUpdate defaultInstance = new NetMessageEnvironmentUpdate().MakeReadOnly();
    private static readonly string[] _netMessageEnvironmentUpdateFieldNames = new string[] { "flags" };
    private static readonly uint[] _netMessageEnvironmentUpdateFieldTags = new uint[] { 8 };
    public static NetMessageEnvironmentUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEnvironmentUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEnvironmentUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnvironmentUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEnvironmentUpdate, NetMessageEnvironmentUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnvironmentUpdate__FieldAccessorTable; }
    }
    
    public const int FlagsFieldNumber = 1;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEnvironmentUpdateFieldNames;
      if (hasFlags) {
        output.WriteUInt32(1, field_names[0], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Flags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnvironmentUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEnvironmentUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEnvironmentUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEnvironmentUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEnvironmentUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEnvironmentUpdate result;
      
      private NetMessageEnvironmentUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEnvironmentUpdate original = result;
          result = new NetMessageEnvironmentUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEnvironmentUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEnvironmentUpdate.Descriptor; }
      }
      
      public override NetMessageEnvironmentUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEnvironmentUpdate.DefaultInstance; }
      }
      
      public override NetMessageEnvironmentUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEnvironmentUpdate) {
          return MergeFrom((NetMessageEnvironmentUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEnvironmentUpdate other) {
        if (other == global::Gazillion.NetMessageEnvironmentUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEnvironmentUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEnvironmentUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static NetMessageEnvironmentUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugSpawnMapVisualization : pb::GeneratedMessage<NetMessageDebugSpawnMapVisualization, NetMessageDebugSpawnMapVisualization.Builder> {
    private NetMessageDebugSpawnMapVisualization() { }
    private static readonly NetMessageDebugSpawnMapVisualization defaultInstance = new NetMessageDebugSpawnMapVisualization().MakeReadOnly();
    private static readonly string[] _netMessageDebugSpawnMapVisualizationFieldNames = new string[] { "areaid", "boundsx", "boundsy", "mapdata", "visualize" };
    private static readonly uint[] _netMessageDebugSpawnMapVisualizationFieldTags = new uint[] { 16, 24, 32, 42, 8 };
    public static NetMessageDebugSpawnMapVisualization DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugSpawnMapVisualization DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugSpawnMapVisualization ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugSpawnMapVisualization, NetMessageDebugSpawnMapVisualization.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugSpawnMapVisualization__FieldAccessorTable; }
    }
    
    public const int VisualizeFieldNumber = 1;
    private bool hasVisualize;
    private bool visualize_;
    public bool HasVisualize {
      get { return hasVisualize; }
    }
    public bool Visualize {
      get { return visualize_; }
    }
    
    public const int AreaidFieldNumber = 2;
    private bool hasAreaid;
    private uint areaid_;
    public bool HasAreaid {
      get { return hasAreaid; }
    }
    public uint Areaid {
      get { return areaid_; }
    }
    
    public const int BoundsxFieldNumber = 3;
    private bool hasBoundsx;
    private uint boundsx_;
    public bool HasBoundsx {
      get { return hasBoundsx; }
    }
    public uint Boundsx {
      get { return boundsx_; }
    }
    
    public const int BoundsyFieldNumber = 4;
    private bool hasBoundsy;
    private uint boundsy_;
    public bool HasBoundsy {
      get { return hasBoundsy; }
    }
    public uint Boundsy {
      get { return boundsy_; }
    }
    
    public const int MapdataFieldNumber = 5;
    private bool hasMapdata;
    private pb::ByteString mapdata_ = pb::ByteString.Empty;
    public bool HasMapdata {
      get { return hasMapdata; }
    }
    public pb::ByteString Mapdata {
      get { return mapdata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVisualize) return false;
        if (!hasAreaid) return false;
        if (!hasBoundsx) return false;
        if (!hasBoundsy) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugSpawnMapVisualizationFieldNames;
      if (hasVisualize) {
        output.WriteBool(1, field_names[4], Visualize);
      }
      if (hasAreaid) {
        output.WriteUInt32(2, field_names[0], Areaid);
      }
      if (hasBoundsx) {
        output.WriteUInt32(3, field_names[1], Boundsx);
      }
      if (hasBoundsy) {
        output.WriteUInt32(4, field_names[2], Boundsy);
      }
      if (hasMapdata) {
        output.WriteBytes(5, field_names[3], Mapdata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVisualize) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Visualize);
      }
      if (hasAreaid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Areaid);
      }
      if (hasBoundsx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Boundsx);
      }
      if (hasBoundsy) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Boundsy);
      }
      if (hasMapdata) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, Mapdata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugSpawnMapVisualization ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugSpawnMapVisualization MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugSpawnMapVisualization prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugSpawnMapVisualization, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugSpawnMapVisualization cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugSpawnMapVisualization result;
      
      private NetMessageDebugSpawnMapVisualization PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugSpawnMapVisualization original = result;
          result = new NetMessageDebugSpawnMapVisualization();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugSpawnMapVisualization MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugSpawnMapVisualization.Descriptor; }
      }
      
      public override NetMessageDebugSpawnMapVisualization DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugSpawnMapVisualization.DefaultInstance; }
      }
      
      public override NetMessageDebugSpawnMapVisualization BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugSpawnMapVisualization) {
          return MergeFrom((NetMessageDebugSpawnMapVisualization) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugSpawnMapVisualization other) {
        if (other == global::Gazillion.NetMessageDebugSpawnMapVisualization.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVisualize) {
          Visualize = other.Visualize;
        }
        if (other.HasAreaid) {
          Areaid = other.Areaid;
        }
        if (other.HasBoundsx) {
          Boundsx = other.Boundsx;
        }
        if (other.HasBoundsy) {
          Boundsy = other.Boundsy;
        }
        if (other.HasMapdata) {
          Mapdata = other.Mapdata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugSpawnMapVisualizationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugSpawnMapVisualizationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVisualize = input.ReadBool(ref result.visualize_);
              break;
            }
            case 16: {
              result.hasAreaid = input.ReadUInt32(ref result.areaid_);
              break;
            }
            case 24: {
              result.hasBoundsx = input.ReadUInt32(ref result.boundsx_);
              break;
            }
            case 32: {
              result.hasBoundsy = input.ReadUInt32(ref result.boundsy_);
              break;
            }
            case 42: {
              result.hasMapdata = input.ReadBytes(ref result.mapdata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVisualize {
        get { return result.hasVisualize; }
      }
      public bool Visualize {
        get { return result.Visualize; }
        set { SetVisualize(value); }
      }
      public Builder SetVisualize(bool value) {
        PrepareBuilder();
        result.hasVisualize = true;
        result.visualize_ = value;
        return this;
      }
      public Builder ClearVisualize() {
        PrepareBuilder();
        result.hasVisualize = false;
        result.visualize_ = false;
        return this;
      }
      
      public bool HasAreaid {
        get { return result.hasAreaid; }
      }
      public uint Areaid {
        get { return result.Areaid; }
        set { SetAreaid(value); }
      }
      public Builder SetAreaid(uint value) {
        PrepareBuilder();
        result.hasAreaid = true;
        result.areaid_ = value;
        return this;
      }
      public Builder ClearAreaid() {
        PrepareBuilder();
        result.hasAreaid = false;
        result.areaid_ = 0;
        return this;
      }
      
      public bool HasBoundsx {
        get { return result.hasBoundsx; }
      }
      public uint Boundsx {
        get { return result.Boundsx; }
        set { SetBoundsx(value); }
      }
      public Builder SetBoundsx(uint value) {
        PrepareBuilder();
        result.hasBoundsx = true;
        result.boundsx_ = value;
        return this;
      }
      public Builder ClearBoundsx() {
        PrepareBuilder();
        result.hasBoundsx = false;
        result.boundsx_ = 0;
        return this;
      }
      
      public bool HasBoundsy {
        get { return result.hasBoundsy; }
      }
      public uint Boundsy {
        get { return result.Boundsy; }
        set { SetBoundsy(value); }
      }
      public Builder SetBoundsy(uint value) {
        PrepareBuilder();
        result.hasBoundsy = true;
        result.boundsy_ = value;
        return this;
      }
      public Builder ClearBoundsy() {
        PrepareBuilder();
        result.hasBoundsy = false;
        result.boundsy_ = 0;
        return this;
      }
      
      public bool HasMapdata {
        get { return result.hasMapdata; }
      }
      public pb::ByteString Mapdata {
        get { return result.Mapdata; }
        set { SetMapdata(value); }
      }
      public Builder SetMapdata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapdata = true;
        result.mapdata_ = value;
        return this;
      }
      public Builder ClearMapdata() {
        PrepareBuilder();
        result.hasMapdata = false;
        result.mapdata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageDebugSpawnMapVisualization() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeAOIPolicies : pb::GeneratedMessage<NetMessageChangeAOIPolicies, NetMessageChangeAOIPolicies.Builder> {
    private NetMessageChangeAOIPolicies() { }
    private static readonly NetMessageChangeAOIPolicies defaultInstance = new NetMessageChangeAOIPolicies().MakeReadOnly();
    private static readonly string[] _netMessageChangeAOIPoliciesFieldNames = new string[] { "currentpolicies", "entityPrototypeId", "exitGameWorld", "idEntity" };
    private static readonly uint[] _netMessageChangeAOIPoliciesFieldTags = new uint[] { 16, 32, 24, 8 };
    public static NetMessageChangeAOIPolicies DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeAOIPolicies DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeAOIPolicies ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeAOIPolicies__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeAOIPolicies, NetMessageChangeAOIPolicies.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeAOIPolicies__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int CurrentpoliciesFieldNumber = 2;
    private bool hasCurrentpolicies;
    private uint currentpolicies_;
    public bool HasCurrentpolicies {
      get { return hasCurrentpolicies; }
    }
    public uint Currentpolicies {
      get { return currentpolicies_; }
    }
    
    public const int ExitGameWorldFieldNumber = 3;
    private bool hasExitGameWorld;
    private bool exitGameWorld_;
    public bool HasExitGameWorld {
      get { return hasExitGameWorld; }
    }
    public bool ExitGameWorld {
      get { return exitGameWorld_; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 4;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasCurrentpolicies) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeAOIPoliciesFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[3], IdEntity);
      }
      if (hasCurrentpolicies) {
        output.WriteUInt32(2, field_names[0], Currentpolicies);
      }
      if (hasExitGameWorld) {
        output.WriteBool(3, field_names[2], ExitGameWorld);
      }
      if (hasEntityPrototypeId) {
        output.WriteUInt64(4, field_names[1], EntityPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasCurrentpolicies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Currentpolicies);
      }
      if (hasExitGameWorld) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ExitGameWorld);
      }
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, EntityPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeAOIPolicies ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeAOIPolicies MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeAOIPolicies prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeAOIPolicies, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeAOIPolicies cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeAOIPolicies result;
      
      private NetMessageChangeAOIPolicies PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeAOIPolicies original = result;
          result = new NetMessageChangeAOIPolicies();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeAOIPolicies MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeAOIPolicies.Descriptor; }
      }
      
      public override NetMessageChangeAOIPolicies DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeAOIPolicies.DefaultInstance; }
      }
      
      public override NetMessageChangeAOIPolicies BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeAOIPolicies) {
          return MergeFrom((NetMessageChangeAOIPolicies) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeAOIPolicies other) {
        if (other == global::Gazillion.NetMessageChangeAOIPolicies.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasCurrentpolicies) {
          Currentpolicies = other.Currentpolicies;
        }
        if (other.HasExitGameWorld) {
          ExitGameWorld = other.ExitGameWorld;
        }
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeAOIPoliciesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeAOIPoliciesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasCurrentpolicies = input.ReadUInt32(ref result.currentpolicies_);
              break;
            }
            case 24: {
              result.hasExitGameWorld = input.ReadBool(ref result.exitGameWorld_);
              break;
            }
            case 32: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasCurrentpolicies {
        get { return result.hasCurrentpolicies; }
      }
      public uint Currentpolicies {
        get { return result.Currentpolicies; }
        set { SetCurrentpolicies(value); }
      }
      public Builder SetCurrentpolicies(uint value) {
        PrepareBuilder();
        result.hasCurrentpolicies = true;
        result.currentpolicies_ = value;
        return this;
      }
      public Builder ClearCurrentpolicies() {
        PrepareBuilder();
        result.hasCurrentpolicies = false;
        result.currentpolicies_ = 0;
        return this;
      }
      
      public bool HasExitGameWorld {
        get { return result.hasExitGameWorld; }
      }
      public bool ExitGameWorld {
        get { return result.ExitGameWorld; }
        set { SetExitGameWorld(value); }
      }
      public Builder SetExitGameWorld(bool value) {
        PrepareBuilder();
        result.hasExitGameWorld = true;
        result.exitGameWorld_ = value;
        return this;
      }
      public Builder ClearExitGameWorld() {
        PrepareBuilder();
        result.hasExitGameWorld = false;
        result.exitGameWorld_ = false;
        return this;
      }
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeAOIPolicies() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFullInWorldHierarchyUpdateEnd : pb::GeneratedMessage<NetMessageFullInWorldHierarchyUpdateEnd, NetMessageFullInWorldHierarchyUpdateEnd.Builder> {
    private NetMessageFullInWorldHierarchyUpdateEnd() { }
    private static readonly NetMessageFullInWorldHierarchyUpdateEnd defaultInstance = new NetMessageFullInWorldHierarchyUpdateEnd().MakeReadOnly();
    private static readonly string[] _netMessageFullInWorldHierarchyUpdateEndFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageFullInWorldHierarchyUpdateEndFieldTags = new uint[] { 8 };
    public static NetMessageFullInWorldHierarchyUpdateEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFullInWorldHierarchyUpdateEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFullInWorldHierarchyUpdateEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFullInWorldHierarchyUpdateEnd, NetMessageFullInWorldHierarchyUpdateEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateEnd__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFullInWorldHierarchyUpdateEndFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFullInWorldHierarchyUpdateEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFullInWorldHierarchyUpdateEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFullInWorldHierarchyUpdateEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFullInWorldHierarchyUpdateEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFullInWorldHierarchyUpdateEnd result;
      
      private NetMessageFullInWorldHierarchyUpdateEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFullInWorldHierarchyUpdateEnd original = result;
          result = new NetMessageFullInWorldHierarchyUpdateEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFullInWorldHierarchyUpdateEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.Descriptor; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.DefaultInstance; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFullInWorldHierarchyUpdateEnd) {
          return MergeFrom((NetMessageFullInWorldHierarchyUpdateEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFullInWorldHierarchyUpdateEnd other) {
        if (other == global::Gazillion.NetMessageFullInWorldHierarchyUpdateEnd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFullInWorldHierarchyUpdateEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFullInWorldHierarchyUpdateEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageFullInWorldHierarchyUpdateEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageFullInWorldHierarchyUpdateBegin : pb::GeneratedMessage<NetMessageFullInWorldHierarchyUpdateBegin, NetMessageFullInWorldHierarchyUpdateBegin.Builder> {
    private NetMessageFullInWorldHierarchyUpdateBegin() { }
    private static readonly NetMessageFullInWorldHierarchyUpdateBegin defaultInstance = new NetMessageFullInWorldHierarchyUpdateBegin().MakeReadOnly();
    private static readonly string[] _netMessageFullInWorldHierarchyUpdateBeginFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageFullInWorldHierarchyUpdateBeginFieldTags = new uint[] { 8 };
    public static NetMessageFullInWorldHierarchyUpdateBegin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageFullInWorldHierarchyUpdateBegin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageFullInWorldHierarchyUpdateBegin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageFullInWorldHierarchyUpdateBegin, NetMessageFullInWorldHierarchyUpdateBegin.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageFullInWorldHierarchyUpdateBegin__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageFullInWorldHierarchyUpdateBeginFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageFullInWorldHierarchyUpdateBegin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageFullInWorldHierarchyUpdateBegin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageFullInWorldHierarchyUpdateBegin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageFullInWorldHierarchyUpdateBegin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageFullInWorldHierarchyUpdateBegin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageFullInWorldHierarchyUpdateBegin result;
      
      private NetMessageFullInWorldHierarchyUpdateBegin PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageFullInWorldHierarchyUpdateBegin original = result;
          result = new NetMessageFullInWorldHierarchyUpdateBegin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageFullInWorldHierarchyUpdateBegin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.Descriptor; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateBegin DefaultInstanceForType {
        get { return global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.DefaultInstance; }
      }
      
      public override NetMessageFullInWorldHierarchyUpdateBegin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageFullInWorldHierarchyUpdateBegin) {
          return MergeFrom((NetMessageFullInWorldHierarchyUpdateBegin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageFullInWorldHierarchyUpdateBegin other) {
        if (other == global::Gazillion.NetMessageFullInWorldHierarchyUpdateBegin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageFullInWorldHierarchyUpdateBeginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageFullInWorldHierarchyUpdateBeginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageFullInWorldHierarchyUpdateBegin() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAdminCommandResponse : pb::GeneratedMessage<NetMessageAdminCommandResponse, NetMessageAdminCommandResponse.Builder> {
    private NetMessageAdminCommandResponse() { }
    private static readonly NetMessageAdminCommandResponse defaultInstance = new NetMessageAdminCommandResponse().MakeReadOnly();
    private static readonly string[] _netMessageAdminCommandResponseFieldNames = new string[] { "filecontents", "filerelativepath", "response" };
    private static readonly uint[] _netMessageAdminCommandResponseFieldTags = new uint[] { 18, 26, 10 };
    public static NetMessageAdminCommandResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAdminCommandResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAdminCommandResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAdminCommandResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAdminCommandResponse, NetMessageAdminCommandResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAdminCommandResponse__FieldAccessorTable; }
    }
    
    public const int ResponseFieldNumber = 1;
    private bool hasResponse;
    private string response_ = "";
    public bool HasResponse {
      get { return hasResponse; }
    }
    public string Response {
      get { return response_; }
    }
    
    public const int FilecontentsFieldNumber = 2;
    private bool hasFilecontents;
    private string filecontents_ = "";
    public bool HasFilecontents {
      get { return hasFilecontents; }
    }
    public string Filecontents {
      get { return filecontents_; }
    }
    
    public const int FilerelativepathFieldNumber = 3;
    private bool hasFilerelativepath;
    private string filerelativepath_ = "";
    public bool HasFilerelativepath {
      get { return hasFilerelativepath; }
    }
    public string Filerelativepath {
      get { return filerelativepath_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResponse) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAdminCommandResponseFieldNames;
      if (hasResponse) {
        output.WriteString(1, field_names[2], Response);
      }
      if (hasFilecontents) {
        output.WriteString(2, field_names[0], Filecontents);
      }
      if (hasFilerelativepath) {
        output.WriteString(3, field_names[1], Filerelativepath);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResponse) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Response);
      }
      if (hasFilecontents) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Filecontents);
      }
      if (hasFilerelativepath) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Filerelativepath);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAdminCommandResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAdminCommandResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAdminCommandResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAdminCommandResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAdminCommandResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAdminCommandResponse result;
      
      private NetMessageAdminCommandResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAdminCommandResponse original = result;
          result = new NetMessageAdminCommandResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAdminCommandResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAdminCommandResponse.Descriptor; }
      }
      
      public override NetMessageAdminCommandResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAdminCommandResponse.DefaultInstance; }
      }
      
      public override NetMessageAdminCommandResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAdminCommandResponse) {
          return MergeFrom((NetMessageAdminCommandResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAdminCommandResponse other) {
        if (other == global::Gazillion.NetMessageAdminCommandResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResponse) {
          Response = other.Response;
        }
        if (other.HasFilecontents) {
          Filecontents = other.Filecontents;
        }
        if (other.HasFilerelativepath) {
          Filerelativepath = other.Filerelativepath;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAdminCommandResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAdminCommandResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasResponse = input.ReadString(ref result.response_);
              break;
            }
            case 18: {
              result.hasFilecontents = input.ReadString(ref result.filecontents_);
              break;
            }
            case 26: {
              result.hasFilerelativepath = input.ReadString(ref result.filerelativepath_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResponse {
        get { return result.hasResponse; }
      }
      public string Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = "";
        return this;
      }
      
      public bool HasFilecontents {
        get { return result.hasFilecontents; }
      }
      public string Filecontents {
        get { return result.Filecontents; }
        set { SetFilecontents(value); }
      }
      public Builder SetFilecontents(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilecontents = true;
        result.filecontents_ = value;
        return this;
      }
      public Builder ClearFilecontents() {
        PrepareBuilder();
        result.hasFilecontents = false;
        result.filecontents_ = "";
        return this;
      }
      
      public bool HasFilerelativepath {
        get { return result.hasFilerelativepath; }
      }
      public string Filerelativepath {
        get { return result.Filerelativepath; }
        set { SetFilerelativepath(value); }
      }
      public Builder SetFilerelativepath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilerelativepath = true;
        result.filerelativepath_ = value;
        return this;
      }
      public Builder ClearFilerelativepath() {
        PrepareBuilder();
        result.hasFilerelativepath = false;
        result.filerelativepath_ = "";
        return this;
      }
    }
    static NetMessageAdminCommandResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageActivatePowerFailed : pb::GeneratedMessage<NetMessageActivatePowerFailed, NetMessageActivatePowerFailed.Builder> {
    private NetMessageActivatePowerFailed() { }
    private static readonly NetMessageActivatePowerFailed defaultInstance = new NetMessageActivatePowerFailed().MakeReadOnly();
    private static readonly string[] _netMessageActivatePowerFailedFieldNames = new string[] { "avatarIndex", "powerPrototypeId", "reason" };
    private static readonly uint[] _netMessageActivatePowerFailedFieldTags = new uint[] { 24, 16, 8 };
    public static NetMessageActivatePowerFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageActivatePowerFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageActivatePowerFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePowerFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageActivatePowerFailed, NetMessageActivatePowerFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePowerFailed__FieldAccessorTable; }
    }
    
    public const int ReasonFieldNumber = 1;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int AvatarIndexFieldNumber = 3;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReason) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageActivatePowerFailedFieldNames;
      if (hasReason) {
        output.WriteUInt32(1, field_names[2], Reason);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[1], PowerPrototypeId);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(3, field_names[0], AvatarIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Reason);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, AvatarIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePowerFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageActivatePowerFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageActivatePowerFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageActivatePowerFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageActivatePowerFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageActivatePowerFailed result;
      
      private NetMessageActivatePowerFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageActivatePowerFailed original = result;
          result = new NetMessageActivatePowerFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageActivatePowerFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageActivatePowerFailed.Descriptor; }
      }
      
      public override NetMessageActivatePowerFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageActivatePowerFailed.DefaultInstance; }
      }
      
      public override NetMessageActivatePowerFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageActivatePowerFailed) {
          return MergeFrom((NetMessageActivatePowerFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageActivatePowerFailed other) {
        if (other == global::Gazillion.NetMessageActivatePowerFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageActivatePowerFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageActivatePowerFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
    }
    static NetMessageActivatePowerFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCancelPower : pb::GeneratedMessage<NetMessageCancelPower, NetMessageCancelPower.Builder> {
    private NetMessageCancelPower() { }
    private static readonly NetMessageCancelPower defaultInstance = new NetMessageCancelPower().MakeReadOnly();
    private static readonly string[] _netMessageCancelPowerFieldNames = new string[] { "endPowerFlags", "idAgent", "powerPrototypeId" };
    private static readonly uint[] _netMessageCancelPowerFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageCancelPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCancelPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCancelPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCancelPower, NetMessageCancelPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPower__FieldAccessorTable; }
    }
    
    public const int IdAgentFieldNumber = 1;
    private bool hasIdAgent;
    private ulong idAgent_;
    public bool HasIdAgent {
      get { return hasIdAgent; }
    }
    public ulong IdAgent {
      get { return idAgent_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int EndPowerFlagsFieldNumber = 3;
    private bool hasEndPowerFlags;
    private uint endPowerFlags_;
    public bool HasEndPowerFlags {
      get { return hasEndPowerFlags; }
    }
    public uint EndPowerFlags {
      get { return endPowerFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAgent) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasEndPowerFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCancelPowerFieldNames;
      if (hasIdAgent) {
        output.WriteUInt64(1, field_names[1], IdAgent);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        output.WriteUInt32(3, field_names[0], EndPowerFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAgent);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasEndPowerFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EndPowerFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCancelPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCancelPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCancelPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCancelPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCancelPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCancelPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCancelPower result;
      
      private NetMessageCancelPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCancelPower original = result;
          result = new NetMessageCancelPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCancelPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCancelPower.Descriptor; }
      }
      
      public override NetMessageCancelPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCancelPower.DefaultInstance; }
      }
      
      public override NetMessageCancelPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCancelPower) {
          return MergeFrom((NetMessageCancelPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCancelPower other) {
        if (other == global::Gazillion.NetMessageCancelPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAgent) {
          IdAgent = other.IdAgent;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasEndPowerFlags) {
          EndPowerFlags = other.EndPowerFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCancelPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCancelPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAgent = input.ReadUInt64(ref result.idAgent_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasEndPowerFlags = input.ReadUInt32(ref result.endPowerFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAgent {
        get { return result.hasIdAgent; }
      }
      public ulong IdAgent {
        get { return result.IdAgent; }
        set { SetIdAgent(value); }
      }
      public Builder SetIdAgent(ulong value) {
        PrepareBuilder();
        result.hasIdAgent = true;
        result.idAgent_ = value;
        return this;
      }
      public Builder ClearIdAgent() {
        PrepareBuilder();
        result.hasIdAgent = false;
        result.idAgent_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasEndPowerFlags {
        get { return result.hasEndPowerFlags; }
      }
      public uint EndPowerFlags {
        get { return result.EndPowerFlags; }
        set { SetEndPowerFlags(value); }
      }
      public Builder SetEndPowerFlags(uint value) {
        PrepareBuilder();
        result.hasEndPowerFlags = true;
        result.endPowerFlags_ = value;
        return this;
      }
      public Builder ClearEndPowerFlags() {
        PrepareBuilder();
        result.hasEndPowerFlags = false;
        result.endPowerFlags_ = 0;
        return this;
      }
    }
    static NetMessageCancelPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageContinuousPowerUpdateToClient : pb::GeneratedMessage<NetMessageContinuousPowerUpdateToClient, NetMessageContinuousPowerUpdateToClient.Builder> {
    private NetMessageContinuousPowerUpdateToClient() { }
    private static readonly NetMessageContinuousPowerUpdateToClient defaultInstance = new NetMessageContinuousPowerUpdateToClient().MakeReadOnly();
    private static readonly string[] _netMessageContinuousPowerUpdateToClientFieldNames = new string[] { "idAvatar", "idTargetEntity", "powerPrototypeId", "randomSeed", "targetPosition" };
    private static readonly uint[] _netMessageContinuousPowerUpdateToClientFieldTags = new uint[] { 8, 24, 16, 40, 34 };
    public static NetMessageContinuousPowerUpdateToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageContinuousPowerUpdateToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageContinuousPowerUpdateToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageContinuousPowerUpdateToClient, NetMessageContinuousPowerUpdateToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageContinuousPowerUpdateToClient__FieldAccessorTable; }
    }
    
    public const int IdAvatarFieldNumber = 1;
    private bool hasIdAvatar;
    private ulong idAvatar_;
    public bool HasIdAvatar {
      get { return hasIdAvatar; }
    }
    public ulong IdAvatar {
      get { return idAvatar_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RandomSeedFieldNumber = 5;
    private bool hasRandomSeed;
    private uint randomSeed_;
    public bool HasRandomSeed {
      get { return hasRandomSeed; }
    }
    public uint RandomSeed {
      get { return randomSeed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAvatar) return false;
        if (!hasPowerPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageContinuousPowerUpdateToClientFieldNames;
      if (hasIdAvatar) {
        output.WriteUInt64(1, field_names[0], IdAvatar);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[1], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[4], TargetPosition);
      }
      if (hasRandomSeed) {
        output.WriteUInt32(5, field_names[3], RandomSeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAvatar) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAvatar);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      if (hasRandomSeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RandomSeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageContinuousPowerUpdateToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageContinuousPowerUpdateToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageContinuousPowerUpdateToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageContinuousPowerUpdateToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageContinuousPowerUpdateToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageContinuousPowerUpdateToClient result;
      
      private NetMessageContinuousPowerUpdateToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageContinuousPowerUpdateToClient original = result;
          result = new NetMessageContinuousPowerUpdateToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageContinuousPowerUpdateToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToClient.Descriptor; }
      }
      
      public override NetMessageContinuousPowerUpdateToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageContinuousPowerUpdateToClient.DefaultInstance; }
      }
      
      public override NetMessageContinuousPowerUpdateToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageContinuousPowerUpdateToClient) {
          return MergeFrom((NetMessageContinuousPowerUpdateToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageContinuousPowerUpdateToClient other) {
        if (other == global::Gazillion.NetMessageContinuousPowerUpdateToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAvatar) {
          IdAvatar = other.IdAvatar;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        if (other.HasRandomSeed) {
          RandomSeed = other.RandomSeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageContinuousPowerUpdateToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageContinuousPowerUpdateToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAvatar = input.ReadUInt64(ref result.idAvatar_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasRandomSeed = input.ReadUInt32(ref result.randomSeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAvatar {
        get { return result.hasIdAvatar; }
      }
      public ulong IdAvatar {
        get { return result.IdAvatar; }
        set { SetIdAvatar(value); }
      }
      public Builder SetIdAvatar(ulong value) {
        PrepareBuilder();
        result.hasIdAvatar = true;
        result.idAvatar_ = value;
        return this;
      }
      public Builder ClearIdAvatar() {
        PrepareBuilder();
        result.hasIdAvatar = false;
        result.idAvatar_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
      
      public bool HasRandomSeed {
        get { return result.hasRandomSeed; }
      }
      public uint RandomSeed {
        get { return result.RandomSeed; }
        set { SetRandomSeed(value); }
      }
      public Builder SetRandomSeed(uint value) {
        PrepareBuilder();
        result.hasRandomSeed = true;
        result.randomSeed_ = value;
        return this;
      }
      public Builder ClearRandomSeed() {
        PrepareBuilder();
        result.hasRandomSeed = false;
        result.randomSeed_ = 0;
        return this;
      }
    }
    static NetMessageContinuousPowerUpdateToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageActivatePower : pb::GeneratedMessage<NetMessageActivatePower, NetMessageActivatePower.Builder> {
    private NetMessageActivatePower() { }
    private static readonly NetMessageActivatePower defaultInstance = new NetMessageActivatePower().MakeReadOnly();
    private static readonly string[] _netMessageActivatePowerFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageActivatePowerFieldTags = new uint[] { 10 };
    public static NetMessageActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageActivatePower, NetMessageActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageActivatePower__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageActivatePowerFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageActivatePower result;
      
      private NetMessageActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageActivatePower original = result;
          result = new NetMessageActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageActivatePower.Descriptor; }
      }
      
      public override NetMessageActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessageActivatePower.DefaultInstance; }
      }
      
      public override NetMessageActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageActivatePower) {
          return MergeFrom((NetMessageActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageActivatePower other) {
        if (other == global::Gazillion.NetMessageActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageActivatePower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePreActivatePower : pb::GeneratedMessage<NetMessagePreActivatePower, NetMessagePreActivatePower.Builder> {
    private NetMessagePreActivatePower() { }
    private static readonly NetMessagePreActivatePower defaultInstance = new NetMessagePreActivatePower().MakeReadOnly();
    private static readonly string[] _netMessagePreActivatePowerFieldNames = new string[] { "idTargetEntity", "idUserEntity", "powerPrototypeId", "targetPosition" };
    private static readonly uint[] _netMessagePreActivatePowerFieldTags = new uint[] { 24, 8, 16, 34 };
    public static NetMessagePreActivatePower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePreActivatePower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePreActivatePower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePreActivatePower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePreActivatePower, NetMessagePreActivatePower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePreActivatePower__FieldAccessorTable; }
    }
    
    public const int IdUserEntityFieldNumber = 1;
    private bool hasIdUserEntity;
    private ulong idUserEntity_;
    public bool HasIdUserEntity {
      get { return hasIdUserEntity; }
    }
    public ulong IdUserEntity {
      get { return idUserEntity_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 2;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int IdTargetEntityFieldNumber = 3;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int TargetPositionFieldNumber = 4;
    private bool hasTargetPosition;
    private global::Gazillion.NetStructPoint3 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 TargetPosition {
      get { return targetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdUserEntity) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasIdTargetEntity) return false;
        if (!hasTargetPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePreActivatePowerFieldNames;
      if (hasIdUserEntity) {
        output.WriteUInt64(1, field_names[1], IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(2, field_names[2], PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        output.WriteUInt64(3, field_names[0], IdTargetEntity);
      }
      if (hasTargetPosition) {
        output.WriteMessage(4, field_names[3], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdUserEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdUserEntity);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerPrototypeId);
      }
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IdTargetEntity);
      }
      if (hasTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, TargetPosition);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePreActivatePower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePreActivatePower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePreActivatePower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePreActivatePower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePreActivatePower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePreActivatePower result;
      
      private NetMessagePreActivatePower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePreActivatePower original = result;
          result = new NetMessagePreActivatePower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePreActivatePower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePreActivatePower.Descriptor; }
      }
      
      public override NetMessagePreActivatePower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePreActivatePower.DefaultInstance; }
      }
      
      public override NetMessagePreActivatePower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePreActivatePower) {
          return MergeFrom((NetMessagePreActivatePower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePreActivatePower other) {
        if (other == global::Gazillion.NetMessagePreActivatePower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdUserEntity) {
          IdUserEntity = other.IdUserEntity;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePreActivatePowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePreActivatePowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdUserEntity = input.ReadUInt64(ref result.idUserEntity_);
              break;
            }
            case 16: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 24: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdUserEntity {
        get { return result.hasIdUserEntity; }
      }
      public ulong IdUserEntity {
        get { return result.IdUserEntity; }
        set { SetIdUserEntity(value); }
      }
      public Builder SetIdUserEntity(ulong value) {
        PrepareBuilder();
        result.hasIdUserEntity = true;
        result.idUserEntity_ = value;
        return this;
      }
      public Builder ClearIdUserEntity() {
        PrepareBuilder();
        result.hasIdUserEntity = false;
        result.idUserEntity_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.targetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static NetMessagePreActivatePower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerResult : pb::GeneratedMessage<NetMessagePowerResult, NetMessagePowerResult.Builder> {
    private NetMessagePowerResult() { }
    private static readonly NetMessagePowerResult defaultInstance = new NetMessagePowerResult().MakeReadOnly();
    private static readonly string[] _netMessagePowerResultFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessagePowerResultFieldTags = new uint[] { 10 };
    public static NetMessagePowerResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerResult, NetMessagePowerResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerResult__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerResultFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerResult result;
      
      private NetMessagePowerResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerResult original = result;
          result = new NetMessagePowerResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerResult.Descriptor; }
      }
      
      public override NetMessagePowerResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerResult.DefaultInstance; }
      }
      
      public override NetMessagePowerResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerResult) {
          return MergeFrom((NetMessagePowerResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerResult other) {
        if (other == global::Gazillion.NetMessagePowerResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessagePowerResult() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerBounce : pb::GeneratedMessage<NetMessagePowerBounce, NetMessagePowerBounce.Builder> {
    private NetMessagePowerBounce() { }
    private static readonly NetMessagePowerBounce defaultInstance = new NetMessagePowerBounce().MakeReadOnly();
    private static readonly string[] _netMessagePowerBounceFieldNames = new string[] { "fxRandomSeed", "idLastTarget", "idNewTarget", "idPowerUser", "lastTargetPosition", "powerPrototypeId", "projectileSpeed", "userCurrentAssetId", "userOriginalAssetId" };
    private static readonly uint[] _netMessagePowerBounceFieldTags = new uint[] { 72, 16, 32, 8, 26, 40, 69, 56, 48 };
    public static NetMessagePowerBounce DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerBounce DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerBounce ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerBounce__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerBounce, NetMessagePowerBounce.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerBounce__FieldAccessorTable; }
    }
    
    public const int IdPowerUserFieldNumber = 1;
    private bool hasIdPowerUser;
    private ulong idPowerUser_;
    public bool HasIdPowerUser {
      get { return hasIdPowerUser; }
    }
    public ulong IdPowerUser {
      get { return idPowerUser_; }
    }
    
    public const int IdLastTargetFieldNumber = 2;
    private bool hasIdLastTarget;
    private ulong idLastTarget_;
    public bool HasIdLastTarget {
      get { return hasIdLastTarget; }
    }
    public ulong IdLastTarget {
      get { return idLastTarget_; }
    }
    
    public const int LastTargetPositionFieldNumber = 3;
    private bool hasLastTargetPosition;
    private global::Gazillion.NetStructPoint3 lastTargetPosition_;
    public bool HasLastTargetPosition {
      get { return hasLastTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 LastTargetPosition {
      get { return lastTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int IdNewTargetFieldNumber = 4;
    private bool hasIdNewTarget;
    private ulong idNewTarget_;
    public bool HasIdNewTarget {
      get { return hasIdNewTarget; }
    }
    public ulong IdNewTarget {
      get { return idNewTarget_; }
    }
    
    public const int PowerPrototypeIdFieldNumber = 5;
    private bool hasPowerPrototypeId;
    private ulong powerPrototypeId_;
    public bool HasPowerPrototypeId {
      get { return hasPowerPrototypeId; }
    }
    public ulong PowerPrototypeId {
      get { return powerPrototypeId_; }
    }
    
    public const int UserOriginalAssetIdFieldNumber = 6;
    private bool hasUserOriginalAssetId;
    private ulong userOriginalAssetId_;
    public bool HasUserOriginalAssetId {
      get { return hasUserOriginalAssetId; }
    }
    public ulong UserOriginalAssetId {
      get { return userOriginalAssetId_; }
    }
    
    public const int UserCurrentAssetIdFieldNumber = 7;
    private bool hasUserCurrentAssetId;
    private ulong userCurrentAssetId_;
    public bool HasUserCurrentAssetId {
      get { return hasUserCurrentAssetId; }
    }
    public ulong UserCurrentAssetId {
      get { return userCurrentAssetId_; }
    }
    
    public const int ProjectileSpeedFieldNumber = 8;
    private bool hasProjectileSpeed;
    private float projectileSpeed_;
    public bool HasProjectileSpeed {
      get { return hasProjectileSpeed; }
    }
    public float ProjectileSpeed {
      get { return projectileSpeed_; }
    }
    
    public const int FxRandomSeedFieldNumber = 9;
    private bool hasFxRandomSeed;
    private int fxRandomSeed_;
    public bool HasFxRandomSeed {
      get { return hasFxRandomSeed; }
    }
    public int FxRandomSeed {
      get { return fxRandomSeed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdPowerUser) return false;
        if (!hasIdLastTarget) return false;
        if (!hasLastTargetPosition) return false;
        if (!hasIdNewTarget) return false;
        if (!hasPowerPrototypeId) return false;
        if (!hasUserOriginalAssetId) return false;
        if (!hasUserCurrentAssetId) return false;
        if (!hasProjectileSpeed) return false;
        if (!hasFxRandomSeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerBounceFieldNames;
      if (hasIdPowerUser) {
        output.WriteUInt64(1, field_names[3], IdPowerUser);
      }
      if (hasIdLastTarget) {
        output.WriteUInt64(2, field_names[1], IdLastTarget);
      }
      if (hasLastTargetPosition) {
        output.WriteMessage(3, field_names[4], LastTargetPosition);
      }
      if (hasIdNewTarget) {
        output.WriteUInt64(4, field_names[2], IdNewTarget);
      }
      if (hasPowerPrototypeId) {
        output.WriteUInt64(5, field_names[5], PowerPrototypeId);
      }
      if (hasUserOriginalAssetId) {
        output.WriteUInt64(6, field_names[8], UserOriginalAssetId);
      }
      if (hasUserCurrentAssetId) {
        output.WriteUInt64(7, field_names[7], UserCurrentAssetId);
      }
      if (hasProjectileSpeed) {
        output.WriteFloat(8, field_names[6], ProjectileSpeed);
      }
      if (hasFxRandomSeed) {
        output.WriteInt32(9, field_names[0], FxRandomSeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdPowerUser) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdPowerUser);
      }
      if (hasIdLastTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLastTarget);
      }
      if (hasLastTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LastTargetPosition);
      }
      if (hasIdNewTarget) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, IdNewTarget);
      }
      if (hasPowerPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, PowerPrototypeId);
      }
      if (hasUserOriginalAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, UserOriginalAssetId);
      }
      if (hasUserCurrentAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, UserCurrentAssetId);
      }
      if (hasProjectileSpeed) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, ProjectileSpeed);
      }
      if (hasFxRandomSeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, FxRandomSeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerBounce ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerBounce ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerBounce ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerBounce MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerBounce prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerBounce, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerBounce cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerBounce result;
      
      private NetMessagePowerBounce PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerBounce original = result;
          result = new NetMessagePowerBounce();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerBounce MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerBounce.Descriptor; }
      }
      
      public override NetMessagePowerBounce DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerBounce.DefaultInstance; }
      }
      
      public override NetMessagePowerBounce BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerBounce) {
          return MergeFrom((NetMessagePowerBounce) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerBounce other) {
        if (other == global::Gazillion.NetMessagePowerBounce.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdPowerUser) {
          IdPowerUser = other.IdPowerUser;
        }
        if (other.HasIdLastTarget) {
          IdLastTarget = other.IdLastTarget;
        }
        if (other.HasLastTargetPosition) {
          MergeLastTargetPosition(other.LastTargetPosition);
        }
        if (other.HasIdNewTarget) {
          IdNewTarget = other.IdNewTarget;
        }
        if (other.HasPowerPrototypeId) {
          PowerPrototypeId = other.PowerPrototypeId;
        }
        if (other.HasUserOriginalAssetId) {
          UserOriginalAssetId = other.UserOriginalAssetId;
        }
        if (other.HasUserCurrentAssetId) {
          UserCurrentAssetId = other.UserCurrentAssetId;
        }
        if (other.HasProjectileSpeed) {
          ProjectileSpeed = other.ProjectileSpeed;
        }
        if (other.HasFxRandomSeed) {
          FxRandomSeed = other.FxRandomSeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerBounceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerBounceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdPowerUser = input.ReadUInt64(ref result.idPowerUser_);
              break;
            }
            case 16: {
              result.hasIdLastTarget = input.ReadUInt64(ref result.idLastTarget_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasLastTargetPosition) {
                subBuilder.MergeFrom(LastTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasIdNewTarget = input.ReadUInt64(ref result.idNewTarget_);
              break;
            }
            case 40: {
              result.hasPowerPrototypeId = input.ReadUInt64(ref result.powerPrototypeId_);
              break;
            }
            case 48: {
              result.hasUserOriginalAssetId = input.ReadUInt64(ref result.userOriginalAssetId_);
              break;
            }
            case 56: {
              result.hasUserCurrentAssetId = input.ReadUInt64(ref result.userCurrentAssetId_);
              break;
            }
            case 69: {
              result.hasProjectileSpeed = input.ReadFloat(ref result.projectileSpeed_);
              break;
            }
            case 72: {
              result.hasFxRandomSeed = input.ReadInt32(ref result.fxRandomSeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdPowerUser {
        get { return result.hasIdPowerUser; }
      }
      public ulong IdPowerUser {
        get { return result.IdPowerUser; }
        set { SetIdPowerUser(value); }
      }
      public Builder SetIdPowerUser(ulong value) {
        PrepareBuilder();
        result.hasIdPowerUser = true;
        result.idPowerUser_ = value;
        return this;
      }
      public Builder ClearIdPowerUser() {
        PrepareBuilder();
        result.hasIdPowerUser = false;
        result.idPowerUser_ = 0UL;
        return this;
      }
      
      public bool HasIdLastTarget {
        get { return result.hasIdLastTarget; }
      }
      public ulong IdLastTarget {
        get { return result.IdLastTarget; }
        set { SetIdLastTarget(value); }
      }
      public Builder SetIdLastTarget(ulong value) {
        PrepareBuilder();
        result.hasIdLastTarget = true;
        result.idLastTarget_ = value;
        return this;
      }
      public Builder ClearIdLastTarget() {
        PrepareBuilder();
        result.hasIdLastTarget = false;
        result.idLastTarget_ = 0UL;
        return this;
      }
      
      public bool HasLastTargetPosition {
       get { return result.hasLastTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 LastTargetPosition {
        get { return result.LastTargetPosition; }
        set { SetLastTargetPosition(value); }
      }
      public Builder SetLastTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastTargetPosition = true;
        result.lastTargetPosition_ = value;
        return this;
      }
      public Builder SetLastTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastTargetPosition = true;
        result.lastTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastTargetPosition &&
            result.lastTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.lastTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.lastTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.lastTargetPosition_ = value;
        }
        result.hasLastTargetPosition = true;
        return this;
      }
      public Builder ClearLastTargetPosition() {
        PrepareBuilder();
        result.hasLastTargetPosition = false;
        result.lastTargetPosition_ = null;
        return this;
      }
      
      public bool HasIdNewTarget {
        get { return result.hasIdNewTarget; }
      }
      public ulong IdNewTarget {
        get { return result.IdNewTarget; }
        set { SetIdNewTarget(value); }
      }
      public Builder SetIdNewTarget(ulong value) {
        PrepareBuilder();
        result.hasIdNewTarget = true;
        result.idNewTarget_ = value;
        return this;
      }
      public Builder ClearIdNewTarget() {
        PrepareBuilder();
        result.hasIdNewTarget = false;
        result.idNewTarget_ = 0UL;
        return this;
      }
      
      public bool HasPowerPrototypeId {
        get { return result.hasPowerPrototypeId; }
      }
      public ulong PowerPrototypeId {
        get { return result.PowerPrototypeId; }
        set { SetPowerPrototypeId(value); }
      }
      public Builder SetPowerPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPowerPrototypeId = true;
        result.powerPrototypeId_ = value;
        return this;
      }
      public Builder ClearPowerPrototypeId() {
        PrepareBuilder();
        result.hasPowerPrototypeId = false;
        result.powerPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasUserOriginalAssetId {
        get { return result.hasUserOriginalAssetId; }
      }
      public ulong UserOriginalAssetId {
        get { return result.UserOriginalAssetId; }
        set { SetUserOriginalAssetId(value); }
      }
      public Builder SetUserOriginalAssetId(ulong value) {
        PrepareBuilder();
        result.hasUserOriginalAssetId = true;
        result.userOriginalAssetId_ = value;
        return this;
      }
      public Builder ClearUserOriginalAssetId() {
        PrepareBuilder();
        result.hasUserOriginalAssetId = false;
        result.userOriginalAssetId_ = 0UL;
        return this;
      }
      
      public bool HasUserCurrentAssetId {
        get { return result.hasUserCurrentAssetId; }
      }
      public ulong UserCurrentAssetId {
        get { return result.UserCurrentAssetId; }
        set { SetUserCurrentAssetId(value); }
      }
      public Builder SetUserCurrentAssetId(ulong value) {
        PrepareBuilder();
        result.hasUserCurrentAssetId = true;
        result.userCurrentAssetId_ = value;
        return this;
      }
      public Builder ClearUserCurrentAssetId() {
        PrepareBuilder();
        result.hasUserCurrentAssetId = false;
        result.userCurrentAssetId_ = 0UL;
        return this;
      }
      
      public bool HasProjectileSpeed {
        get { return result.hasProjectileSpeed; }
      }
      public float ProjectileSpeed {
        get { return result.ProjectileSpeed; }
        set { SetProjectileSpeed(value); }
      }
      public Builder SetProjectileSpeed(float value) {
        PrepareBuilder();
        result.hasProjectileSpeed = true;
        result.projectileSpeed_ = value;
        return this;
      }
      public Builder ClearProjectileSpeed() {
        PrepareBuilder();
        result.hasProjectileSpeed = false;
        result.projectileSpeed_ = 0F;
        return this;
      }
      
      public bool HasFxRandomSeed {
        get { return result.hasFxRandomSeed; }
      }
      public int FxRandomSeed {
        get { return result.FxRandomSeed; }
        set { SetFxRandomSeed(value); }
      }
      public Builder SetFxRandomSeed(int value) {
        PrepareBuilder();
        result.hasFxRandomSeed = true;
        result.fxRandomSeed_ = value;
        return this;
      }
      public Builder ClearFxRandomSeed() {
        PrepareBuilder();
        result.hasFxRandomSeed = false;
        result.fxRandomSeed_ = 0;
        return this;
      }
    }
    static NetMessagePowerBounce() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnPreInteractPowerEnd : pb::GeneratedMessage<NetMessageOnPreInteractPowerEnd, NetMessageOnPreInteractPowerEnd.Builder> {
    private NetMessageOnPreInteractPowerEnd() { }
    private static readonly NetMessageOnPreInteractPowerEnd defaultInstance = new NetMessageOnPreInteractPowerEnd().MakeReadOnly();
    private static readonly string[] _netMessageOnPreInteractPowerEndFieldNames = new string[] { "avatarIndex", "idTargetEntity" };
    private static readonly uint[] _netMessageOnPreInteractPowerEndFieldTags = new uint[] { 16, 8 };
    public static NetMessageOnPreInteractPowerEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnPreInteractPowerEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnPreInteractPowerEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnPreInteractPowerEnd, NetMessageOnPreInteractPowerEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnPreInteractPowerEnd__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int AvatarIndexFieldNumber = 2;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnPreInteractPowerEndFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[1], IdTargetEntity);
      }
      if (hasAvatarIndex) {
        output.WriteInt32(2, field_names[0], AvatarIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AvatarIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnPreInteractPowerEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnPreInteractPowerEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnPreInteractPowerEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnPreInteractPowerEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnPreInteractPowerEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnPreInteractPowerEnd result;
      
      private NetMessageOnPreInteractPowerEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnPreInteractPowerEnd original = result;
          result = new NetMessageOnPreInteractPowerEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnPreInteractPowerEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnPreInteractPowerEnd.Descriptor; }
      }
      
      public override NetMessageOnPreInteractPowerEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnPreInteractPowerEnd.DefaultInstance; }
      }
      
      public override NetMessageOnPreInteractPowerEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnPreInteractPowerEnd) {
          return MergeFrom((NetMessageOnPreInteractPowerEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnPreInteractPowerEnd other) {
        if (other == global::Gazillion.NetMessageOnPreInteractPowerEnd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnPreInteractPowerEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnPreInteractPowerEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 16: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
    }
    static NetMessageOnPreInteractPowerEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveBox : pb::GeneratedMessage<NetMessageRegionPrimitiveBox, NetMessageRegionPrimitiveBox.Builder> {
    private NetMessageRegionPrimitiveBox() { }
    private static readonly NetMessageRegionPrimitiveBox defaultInstance = new NetMessageRegionPrimitiveBox().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveBoxFieldNames = new string[] { "add", "center", "color", "lifetimeInMilliseconds", "size" };
    private static readonly uint[] _netMessageRegionPrimitiveBoxFieldTags = new uint[] { 40, 10, 26, 32, 18 };
    public static NetMessageRegionPrimitiveBox DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveBox DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveBox ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveBox__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveBox, NetMessageRegionPrimitiveBox.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveBox__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Gazillion.NetStructPoint3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Gazillion.NetStructPoint3 Center {
      get { return center_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::Gazillion.NetStructPoint3 size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::Gazillion.NetStructPoint3 Size {
      get { return size_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasSize) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveBoxFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[1], Center);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[4], Size);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[2], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasSize) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveBox ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveBox MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveBox prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveBox, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveBox cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveBox result;
      
      private NetMessageRegionPrimitiveBox PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveBox original = result;
          result = new NetMessageRegionPrimitiveBox();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveBox MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveBox.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveBox DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveBox.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveBox BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveBox) {
          return MergeFrom((NetMessageRegionPrimitiveBox) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveBox other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveBox.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveBoxFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveBoxFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Gazillion.NetStructPoint3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCenter &&
            result.center_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.center_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
        }
        result.hasCenter = true;
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::Gazillion.NetStructPoint3 Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.size_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveBox() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveTriangle : pb::GeneratedMessage<NetMessageRegionPrimitiveTriangle, NetMessageRegionPrimitiveTriangle.Builder> {
    private NetMessageRegionPrimitiveTriangle() { }
    private static readonly NetMessageRegionPrimitiveTriangle defaultInstance = new NetMessageRegionPrimitiveTriangle().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveTriangleFieldNames = new string[] { "add", "color", "lifetimeInMilliseconds", "point0", "point1", "point2" };
    private static readonly uint[] _netMessageRegionPrimitiveTriangleFieldTags = new uint[] { 48, 34, 40, 10, 18, 26 };
    public static NetMessageRegionPrimitiveTriangle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveTriangle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveTriangle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveTriangle, NetMessageRegionPrimitiveTriangle.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveTriangle__FieldAccessorTable; }
    }
    
    public const int Point0FieldNumber = 1;
    private bool hasPoint0;
    private global::Gazillion.NetStructPoint3 point0_;
    public bool HasPoint0 {
      get { return hasPoint0; }
    }
    public global::Gazillion.NetStructPoint3 Point0 {
      get { return point0_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int Point1FieldNumber = 2;
    private bool hasPoint1;
    private global::Gazillion.NetStructPoint3 point1_;
    public bool HasPoint1 {
      get { return hasPoint1; }
    }
    public global::Gazillion.NetStructPoint3 Point1 {
      get { return point1_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int Point2FieldNumber = 3;
    private bool hasPoint2;
    private global::Gazillion.NetStructPoint3 point2_;
    public bool HasPoint2 {
      get { return hasPoint2; }
    }
    public global::Gazillion.NetStructPoint3 Point2 {
      get { return point2_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 4;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 5;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 6;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPoint0) return false;
        if (!hasPoint1) return false;
        if (!hasPoint2) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveTriangleFieldNames;
      if (hasPoint0) {
        output.WriteMessage(1, field_names[3], Point0);
      }
      if (hasPoint1) {
        output.WriteMessage(2, field_names[4], Point1);
      }
      if (hasPoint2) {
        output.WriteMessage(3, field_names[5], Point2);
      }
      if (hasColor) {
        output.WriteMessage(4, field_names[1], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(5, field_names[2], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(6, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPoint0) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Point0);
      }
      if (hasPoint1) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Point1);
      }
      if (hasPoint2) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Point2);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveTriangle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveTriangle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveTriangle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveTriangle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveTriangle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveTriangle result;
      
      private NetMessageRegionPrimitiveTriangle PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveTriangle original = result;
          result = new NetMessageRegionPrimitiveTriangle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveTriangle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveTriangle.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveTriangle DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveTriangle.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveTriangle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveTriangle) {
          return MergeFrom((NetMessageRegionPrimitiveTriangle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveTriangle other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveTriangle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPoint0) {
          MergePoint0(other.Point0);
        }
        if (other.HasPoint1) {
          MergePoint1(other.Point1);
        }
        if (other.HasPoint2) {
          MergePoint2(other.Point2);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveTriangleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveTriangleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint0) {
                subBuilder.MergeFrom(Point0);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point0 = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint1) {
                subBuilder.MergeFrom(Point1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point1 = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPoint2) {
                subBuilder.MergeFrom(Point2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point2 = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 48: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPoint0 {
       get { return result.hasPoint0; }
      }
      public global::Gazillion.NetStructPoint3 Point0 {
        get { return result.Point0; }
        set { SetPoint0(value); }
      }
      public Builder SetPoint0(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint0 = true;
        result.point0_ = value;
        return this;
      }
      public Builder SetPoint0(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint0 = true;
        result.point0_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint0(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint0 &&
            result.point0_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point0_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point0_).MergeFrom(value).BuildPartial();
        } else {
          result.point0_ = value;
        }
        result.hasPoint0 = true;
        return this;
      }
      public Builder ClearPoint0() {
        PrepareBuilder();
        result.hasPoint0 = false;
        result.point0_ = null;
        return this;
      }
      
      public bool HasPoint1 {
       get { return result.hasPoint1; }
      }
      public global::Gazillion.NetStructPoint3 Point1 {
        get { return result.Point1; }
        set { SetPoint1(value); }
      }
      public Builder SetPoint1(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint1 = true;
        result.point1_ = value;
        return this;
      }
      public Builder SetPoint1(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint1 = true;
        result.point1_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint1(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint1 &&
            result.point1_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point1_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point1_).MergeFrom(value).BuildPartial();
        } else {
          result.point1_ = value;
        }
        result.hasPoint1 = true;
        return this;
      }
      public Builder ClearPoint1() {
        PrepareBuilder();
        result.hasPoint1 = false;
        result.point1_ = null;
        return this;
      }
      
      public bool HasPoint2 {
       get { return result.hasPoint2; }
      }
      public global::Gazillion.NetStructPoint3 Point2 {
        get { return result.Point2; }
        set { SetPoint2(value); }
      }
      public Builder SetPoint2(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint2 = true;
        result.point2_ = value;
        return this;
      }
      public Builder SetPoint2(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint2 = true;
        result.point2_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint2(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint2 &&
            result.point2_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.point2_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.point2_).MergeFrom(value).BuildPartial();
        } else {
          result.point2_ = value;
        }
        result.hasPoint2 = true;
        return this;
      }
      public Builder ClearPoint2() {
        PrepareBuilder();
        result.hasPoint2 = false;
        result.point2_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveTriangle() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveSphere : pb::GeneratedMessage<NetMessageRegionPrimitiveSphere, NetMessageRegionPrimitiveSphere.Builder> {
    private NetMessageRegionPrimitiveSphere() { }
    private static readonly NetMessageRegionPrimitiveSphere defaultInstance = new NetMessageRegionPrimitiveSphere().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveSphereFieldNames = new string[] { "add", "center", "color", "lifetimeInMilliseconds", "radius" };
    private static readonly uint[] _netMessageRegionPrimitiveSphereFieldTags = new uint[] { 40, 10, 26, 32, 21 };
    public static NetMessageRegionPrimitiveSphere DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveSphere DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveSphere ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveSphere__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveSphere, NetMessageRegionPrimitiveSphere.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveSphere__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Gazillion.NetStructPoint3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Gazillion.NetStructPoint3 Center {
      get { return center_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RadiusFieldNumber = 2;
    private bool hasRadius;
    private float radius_;
    public bool HasRadius {
      get { return hasRadius; }
    }
    public float Radius {
      get { return radius_; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasRadius) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveSphereFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[1], Center);
      }
      if (hasRadius) {
        output.WriteFloat(2, field_names[4], Radius);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[2], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasRadius) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Radius);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveSphere ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveSphere MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveSphere prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveSphere, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveSphere cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveSphere result;
      
      private NetMessageRegionPrimitiveSphere PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveSphere original = result;
          result = new NetMessageRegionPrimitiveSphere();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveSphere MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveSphere.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveSphere DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveSphere.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveSphere BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveSphere) {
          return MergeFrom((NetMessageRegionPrimitiveSphere) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveSphere other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveSphere.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasRadius) {
          Radius = other.Radius;
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveSphereFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveSphereFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 21: {
              result.hasRadius = input.ReadFloat(ref result.radius_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Gazillion.NetStructPoint3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCenter &&
            result.center_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.center_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
        }
        result.hasCenter = true;
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasRadius {
        get { return result.hasRadius; }
      }
      public float Radius {
        get { return result.Radius; }
        set { SetRadius(value); }
      }
      public Builder SetRadius(float value) {
        PrepareBuilder();
        result.hasRadius = true;
        result.radius_ = value;
        return this;
      }
      public Builder ClearRadius() {
        PrepareBuilder();
        result.hasRadius = false;
        result.radius_ = 0F;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveSphere() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveCircle : pb::GeneratedMessage<NetMessageRegionPrimitiveCircle, NetMessageRegionPrimitiveCircle.Builder> {
    private NetMessageRegionPrimitiveCircle() { }
    private static readonly NetMessageRegionPrimitiveCircle defaultInstance = new NetMessageRegionPrimitiveCircle().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveCircleFieldNames = new string[] { "add", "center", "color", "lifetimeInMilliseconds", "radius" };
    private static readonly uint[] _netMessageRegionPrimitiveCircleFieldTags = new uint[] { 40, 10, 26, 32, 21 };
    public static NetMessageRegionPrimitiveCircle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveCircle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveCircle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveCircle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveCircle, NetMessageRegionPrimitiveCircle.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveCircle__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Gazillion.NetStructPoint3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Gazillion.NetStructPoint3 Center {
      get { return center_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int RadiusFieldNumber = 2;
    private bool hasRadius;
    private float radius_;
    public bool HasRadius {
      get { return hasRadius; }
    }
    public float Radius {
      get { return radius_; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasRadius) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveCircleFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[1], Center);
      }
      if (hasRadius) {
        output.WriteFloat(2, field_names[4], Radius);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[2], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasRadius) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Radius);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveCircle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveCircle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveCircle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveCircle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveCircle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveCircle result;
      
      private NetMessageRegionPrimitiveCircle PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveCircle original = result;
          result = new NetMessageRegionPrimitiveCircle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveCircle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveCircle.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveCircle DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveCircle.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveCircle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveCircle) {
          return MergeFrom((NetMessageRegionPrimitiveCircle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveCircle other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveCircle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasRadius) {
          Radius = other.Radius;
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveCircleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveCircleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 21: {
              result.hasRadius = input.ReadFloat(ref result.radius_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Gazillion.NetStructPoint3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCenter &&
            result.center_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.center_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
        }
        result.hasCenter = true;
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasRadius {
        get { return result.hasRadius; }
      }
      public float Radius {
        get { return result.Radius; }
        set { SetRadius(value); }
      }
      public Builder SetRadius(float value) {
        PrepareBuilder();
        result.hasRadius = true;
        result.radius_ = value;
        return this;
      }
      public Builder ClearRadius() {
        PrepareBuilder();
        result.hasRadius = false;
        result.radius_ = 0F;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveCircle() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionPrimitiveLine : pb::GeneratedMessage<NetMessageRegionPrimitiveLine, NetMessageRegionPrimitiveLine.Builder> {
    private NetMessageRegionPrimitiveLine() { }
    private static readonly NetMessageRegionPrimitiveLine defaultInstance = new NetMessageRegionPrimitiveLine().MakeReadOnly();
    private static readonly string[] _netMessageRegionPrimitiveLineFieldNames = new string[] { "add", "color", "end", "lifetimeInMilliseconds", "start" };
    private static readonly uint[] _netMessageRegionPrimitiveLineFieldTags = new uint[] { 40, 26, 18, 32, 10 };
    public static NetMessageRegionPrimitiveLine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionPrimitiveLine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionPrimitiveLine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveLine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionPrimitiveLine, NetMessageRegionPrimitiveLine.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionPrimitiveLine__FieldAccessorTable; }
    }
    
    public const int StartFieldNumber = 1;
    private bool hasStart;
    private global::Gazillion.NetStructPoint3 start_;
    public bool HasStart {
      get { return hasStart; }
    }
    public global::Gazillion.NetStructPoint3 Start {
      get { return start_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int EndFieldNumber = 2;
    private bool hasEnd;
    private global::Gazillion.NetStructPoint3 end_;
    public bool HasEnd {
      get { return hasEnd; }
    }
    public global::Gazillion.NetStructPoint3 End {
      get { return end_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::Gazillion.NetStructIPoint3 color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::Gazillion.NetStructIPoint3 Color {
      get { return color_ ?? global::Gazillion.NetStructIPoint3.DefaultInstance; }
    }
    
    public const int LifetimeInMillisecondsFieldNumber = 4;
    private bool hasLifetimeInMilliseconds;
    private ulong lifetimeInMilliseconds_;
    public bool HasLifetimeInMilliseconds {
      get { return hasLifetimeInMilliseconds; }
    }
    public ulong LifetimeInMilliseconds {
      get { return lifetimeInMilliseconds_; }
    }
    
    public const int AddFieldNumber = 5;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStart) return false;
        if (!hasEnd) return false;
        if (!hasColor) return false;
        if (!hasLifetimeInMilliseconds) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionPrimitiveLineFieldNames;
      if (hasStart) {
        output.WriteMessage(1, field_names[4], Start);
      }
      if (hasEnd) {
        output.WriteMessage(2, field_names[2], End);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[1], Color);
      }
      if (hasLifetimeInMilliseconds) {
        output.WriteUInt64(4, field_names[3], LifetimeInMilliseconds);
      }
      if (hasAdd) {
        output.WriteBool(5, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStart) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Start);
      }
      if (hasEnd) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, End);
      }
      if (hasColor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
      }
      if (hasLifetimeInMilliseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LifetimeInMilliseconds);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionPrimitiveLine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionPrimitiveLine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionPrimitiveLine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionPrimitiveLine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionPrimitiveLine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionPrimitiveLine result;
      
      private NetMessageRegionPrimitiveLine PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionPrimitiveLine original = result;
          result = new NetMessageRegionPrimitiveLine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionPrimitiveLine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveLine.Descriptor; }
      }
      
      public override NetMessageRegionPrimitiveLine DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionPrimitiveLine.DefaultInstance; }
      }
      
      public override NetMessageRegionPrimitiveLine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionPrimitiveLine) {
          return MergeFrom((NetMessageRegionPrimitiveLine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionPrimitiveLine other) {
        if (other == global::Gazillion.NetMessageRegionPrimitiveLine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStart) {
          MergeStart(other.Start);
        }
        if (other.HasEnd) {
          MergeEnd(other.End);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasLifetimeInMilliseconds) {
          LifetimeInMilliseconds = other.LifetimeInMilliseconds;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionPrimitiveLineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionPrimitiveLineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasStart) {
                subBuilder.MergeFrom(Start);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Start = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasEnd) {
                subBuilder.MergeFrom(End);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              End = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.NetStructIPoint3.Builder subBuilder = global::Gazillion.NetStructIPoint3.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLifetimeInMilliseconds = input.ReadUInt64(ref result.lifetimeInMilliseconds_);
              break;
            }
            case 40: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStart {
       get { return result.hasStart; }
      }
      public global::Gazillion.NetStructPoint3 Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      public Builder SetStart(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder SetStart(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStart(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStart &&
            result.start_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.start_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.start_).MergeFrom(value).BuildPartial();
        } else {
          result.start_ = value;
        }
        result.hasStart = true;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = null;
        return this;
      }
      
      public bool HasEnd {
       get { return result.hasEnd; }
      }
      public global::Gazillion.NetStructPoint3 End {
        get { return result.End; }
        set { SetEnd(value); }
      }
      public Builder SetEnd(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = value;
        return this;
      }
      public Builder SetEnd(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEnd(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEnd &&
            result.end_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.end_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.end_).MergeFrom(value).BuildPartial();
        } else {
          result.end_ = value;
        }
        result.hasEnd = true;
        return this;
      }
      public Builder ClearEnd() {
        PrepareBuilder();
        result.hasEnd = false;
        result.end_ = null;
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::Gazillion.NetStructIPoint3 Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::Gazillion.NetStructIPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::Gazillion.NetStructIPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::Gazillion.NetStructIPoint3.DefaultInstance) {
            result.color_ = global::Gazillion.NetStructIPoint3.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasLifetimeInMilliseconds {
        get { return result.hasLifetimeInMilliseconds; }
      }
      public ulong LifetimeInMilliseconds {
        get { return result.LifetimeInMilliseconds; }
        set { SetLifetimeInMilliseconds(value); }
      }
      public Builder SetLifetimeInMilliseconds(ulong value) {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = true;
        result.lifetimeInMilliseconds_ = value;
        return this;
      }
      public Builder ClearLifetimeInMilliseconds() {
        PrepareBuilder();
        result.hasLifetimeInMilliseconds = false;
        result.lifetimeInMilliseconds_ = 0UL;
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static NetMessageRegionPrimitiveLine() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMarkFirstGameFrame : pb::GeneratedMessage<NetMessageMarkFirstGameFrame, NetMessageMarkFirstGameFrame.Builder> {
    private NetMessageMarkFirstGameFrame() { }
    private static readonly NetMessageMarkFirstGameFrame defaultInstance = new NetMessageMarkFirstGameFrame().MakeReadOnly();
    private static readonly string[] _netMessageMarkFirstGameFrameFieldNames = new string[] { "currentservergameid", "currentservergametime", "gamestarttime" };
    private static readonly uint[] _netMessageMarkFirstGameFrameFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageMarkFirstGameFrame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMarkFirstGameFrame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMarkFirstGameFrame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMarkFirstGameFrame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMarkFirstGameFrame, NetMessageMarkFirstGameFrame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMarkFirstGameFrame__FieldAccessorTable; }
    }
    
    public const int CurrentservergametimeFieldNumber = 1;
    private bool hasCurrentservergametime;
    private ulong currentservergametime_;
    public bool HasCurrentservergametime {
      get { return hasCurrentservergametime; }
    }
    public ulong Currentservergametime {
      get { return currentservergametime_; }
    }
    
    public const int CurrentservergameidFieldNumber = 2;
    private bool hasCurrentservergameid;
    private ulong currentservergameid_;
    public bool HasCurrentservergameid {
      get { return hasCurrentservergameid; }
    }
    public ulong Currentservergameid {
      get { return currentservergameid_; }
    }
    
    public const int GamestarttimeFieldNumber = 3;
    private bool hasGamestarttime;
    private ulong gamestarttime_;
    public bool HasGamestarttime {
      get { return hasGamestarttime; }
    }
    public ulong Gamestarttime {
      get { return gamestarttime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentservergametime) return false;
        if (!hasCurrentservergameid) return false;
        if (!hasGamestarttime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMarkFirstGameFrameFieldNames;
      if (hasCurrentservergametime) {
        output.WriteUInt64(1, field_names[1], Currentservergametime);
      }
      if (hasCurrentservergameid) {
        output.WriteUInt64(2, field_names[0], Currentservergameid);
      }
      if (hasGamestarttime) {
        output.WriteUInt64(3, field_names[2], Gamestarttime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentservergametime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Currentservergametime);
      }
      if (hasCurrentservergameid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Currentservergameid);
      }
      if (hasGamestarttime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, Gamestarttime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMarkFirstGameFrame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMarkFirstGameFrame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMarkFirstGameFrame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMarkFirstGameFrame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMarkFirstGameFrame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMarkFirstGameFrame result;
      
      private NetMessageMarkFirstGameFrame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMarkFirstGameFrame original = result;
          result = new NetMessageMarkFirstGameFrame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMarkFirstGameFrame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMarkFirstGameFrame.Descriptor; }
      }
      
      public override NetMessageMarkFirstGameFrame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMarkFirstGameFrame.DefaultInstance; }
      }
      
      public override NetMessageMarkFirstGameFrame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMarkFirstGameFrame) {
          return MergeFrom((NetMessageMarkFirstGameFrame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMarkFirstGameFrame other) {
        if (other == global::Gazillion.NetMessageMarkFirstGameFrame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentservergametime) {
          Currentservergametime = other.Currentservergametime;
        }
        if (other.HasCurrentservergameid) {
          Currentservergameid = other.Currentservergameid;
        }
        if (other.HasGamestarttime) {
          Gamestarttime = other.Gamestarttime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMarkFirstGameFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMarkFirstGameFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentservergametime = input.ReadUInt64(ref result.currentservergametime_);
              break;
            }
            case 16: {
              result.hasCurrentservergameid = input.ReadUInt64(ref result.currentservergameid_);
              break;
            }
            case 24: {
              result.hasGamestarttime = input.ReadUInt64(ref result.gamestarttime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentservergametime {
        get { return result.hasCurrentservergametime; }
      }
      public ulong Currentservergametime {
        get { return result.Currentservergametime; }
        set { SetCurrentservergametime(value); }
      }
      public Builder SetCurrentservergametime(ulong value) {
        PrepareBuilder();
        result.hasCurrentservergametime = true;
        result.currentservergametime_ = value;
        return this;
      }
      public Builder ClearCurrentservergametime() {
        PrepareBuilder();
        result.hasCurrentservergametime = false;
        result.currentservergametime_ = 0UL;
        return this;
      }
      
      public bool HasCurrentservergameid {
        get { return result.hasCurrentservergameid; }
      }
      public ulong Currentservergameid {
        get { return result.Currentservergameid; }
        set { SetCurrentservergameid(value); }
      }
      public Builder SetCurrentservergameid(ulong value) {
        PrepareBuilder();
        result.hasCurrentservergameid = true;
        result.currentservergameid_ = value;
        return this;
      }
      public Builder ClearCurrentservergameid() {
        PrepareBuilder();
        result.hasCurrentservergameid = false;
        result.currentservergameid_ = 0UL;
        return this;
      }
      
      public bool HasGamestarttime {
        get { return result.hasGamestarttime; }
      }
      public ulong Gamestarttime {
        get { return result.Gamestarttime; }
        set { SetGamestarttime(value); }
      }
      public Builder SetGamestarttime(ulong value) {
        PrepareBuilder();
        result.hasGamestarttime = true;
        result.gamestarttime_ = value;
        return this;
      }
      public Builder ClearGamestarttime() {
        PrepareBuilder();
        result.hasGamestarttime = false;
        result.gamestarttime_ = 0UL;
        return this;
      }
    }
    static NetMessageMarkFirstGameFrame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBeginExitGame : pb::GeneratedMessage<NetMessageBeginExitGame, NetMessageBeginExitGame.Builder> {
    private NetMessageBeginExitGame() { }
    private static readonly NetMessageBeginExitGame defaultInstance = new NetMessageBeginExitGame().MakeReadOnly();
    private static readonly string[] _netMessageBeginExitGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageBeginExitGameFieldTags = new uint[] {  };
    public static NetMessageBeginExitGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBeginExitGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBeginExitGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBeginExitGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBeginExitGame, NetMessageBeginExitGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBeginExitGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBeginExitGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBeginExitGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBeginExitGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBeginExitGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBeginExitGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBeginExitGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBeginExitGame result;
      
      private NetMessageBeginExitGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBeginExitGame original = result;
          result = new NetMessageBeginExitGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBeginExitGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBeginExitGame.Descriptor; }
      }
      
      public override NetMessageBeginExitGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBeginExitGame.DefaultInstance; }
      }
      
      public override NetMessageBeginExitGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBeginExitGame) {
          return MergeFrom((NetMessageBeginExitGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBeginExitGame other) {
        if (other == global::Gazillion.NetMessageBeginExitGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBeginExitGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBeginExitGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageBeginExitGame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSystemMessage : pb::GeneratedMessage<NetMessageSystemMessage, NetMessageSystemMessage.Builder> {
    private NetMessageSystemMessage() { }
    private static readonly NetMessageSystemMessage defaultInstance = new NetMessageSystemMessage().MakeReadOnly();
    private static readonly string[] _netMessageSystemMessageFieldNames = new string[] { "messageId" };
    private static readonly uint[] _netMessageSystemMessageFieldTags = new uint[] { 8 };
    public static NetMessageSystemMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSystemMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSystemMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSystemMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSystemMessage, NetMessageSystemMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSystemMessage__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSystemMessageFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[0], MessageId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSystemMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSystemMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSystemMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSystemMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSystemMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSystemMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSystemMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSystemMessage result;
      
      private NetMessageSystemMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSystemMessage original = result;
          result = new NetMessageSystemMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSystemMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSystemMessage.Descriptor; }
      }
      
      public override NetMessageSystemMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSystemMessage.DefaultInstance; }
      }
      
      public override NetMessageSystemMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSystemMessage) {
          return MergeFrom((NetMessageSystemMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSystemMessage other) {
        if (other == global::Gazillion.NetMessageSystemMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSystemMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSystemMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
    }
    static NetMessageSystemMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIPerformanceUIUpdate : pb::GeneratedMessage<NetMessageAIPerformanceUIUpdate, NetMessageAIPerformanceUIUpdate.Builder> {
    private NetMessageAIPerformanceUIUpdate() { }
    private static readonly NetMessageAIPerformanceUIUpdate defaultInstance = new NetMessageAIPerformanceUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageAIPerformanceUIUpdateFieldNames = new string[] { "hitchInfoStrArray", "numAgentsAllocated", "numAgentsSimulated", "numAvatarOctreeQueriesInTimeSlice", "numGameEntitySweepsInTimeSlice", "numLOSChecksInTimeSlice", "numOctreeQueriesInTimeSlice", "numOctreeValidTargetChecksInTimeSlice", "numServerHitchesInTimeSlice", "numThinksInTimeSlice", "numValidTargetChecksInTimeSlice", "timeSlice" };
    private static readonly uint[] _netMessageAIPerformanceUIUpdateFieldTags = new uint[] { 98, 16, 24, 88, 64, 48, 40, 80, 72, 32, 56, 8 };
    public static NetMessageAIPerformanceUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIPerformanceUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIPerformanceUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIPerformanceUIUpdate, NetMessageAIPerformanceUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIPerformanceUIUpdate__FieldAccessorTable; }
    }
    
    public const int TimeSliceFieldNumber = 1;
    private bool hasTimeSlice;
    private uint timeSlice_;
    public bool HasTimeSlice {
      get { return hasTimeSlice; }
    }
    public uint TimeSlice {
      get { return timeSlice_; }
    }
    
    public const int NumAgentsAllocatedFieldNumber = 2;
    private bool hasNumAgentsAllocated;
    private uint numAgentsAllocated_;
    public bool HasNumAgentsAllocated {
      get { return hasNumAgentsAllocated; }
    }
    public uint NumAgentsAllocated {
      get { return numAgentsAllocated_; }
    }
    
    public const int NumAgentsSimulatedFieldNumber = 3;
    private bool hasNumAgentsSimulated;
    private uint numAgentsSimulated_;
    public bool HasNumAgentsSimulated {
      get { return hasNumAgentsSimulated; }
    }
    public uint NumAgentsSimulated {
      get { return numAgentsSimulated_; }
    }
    
    public const int NumThinksInTimeSliceFieldNumber = 4;
    private bool hasNumThinksInTimeSlice;
    private uint numThinksInTimeSlice_;
    public bool HasNumThinksInTimeSlice {
      get { return hasNumThinksInTimeSlice; }
    }
    public uint NumThinksInTimeSlice {
      get { return numThinksInTimeSlice_; }
    }
    
    public const int NumOctreeQueriesInTimeSliceFieldNumber = 5;
    private bool hasNumOctreeQueriesInTimeSlice;
    private uint numOctreeQueriesInTimeSlice_;
    public bool HasNumOctreeQueriesInTimeSlice {
      get { return hasNumOctreeQueriesInTimeSlice; }
    }
    public uint NumOctreeQueriesInTimeSlice {
      get { return numOctreeQueriesInTimeSlice_; }
    }
    
    public const int NumLOSChecksInTimeSliceFieldNumber = 6;
    private bool hasNumLOSChecksInTimeSlice;
    private uint numLOSChecksInTimeSlice_;
    public bool HasNumLOSChecksInTimeSlice {
      get { return hasNumLOSChecksInTimeSlice; }
    }
    public uint NumLOSChecksInTimeSlice {
      get { return numLOSChecksInTimeSlice_; }
    }
    
    public const int NumValidTargetChecksInTimeSliceFieldNumber = 7;
    private bool hasNumValidTargetChecksInTimeSlice;
    private uint numValidTargetChecksInTimeSlice_;
    public bool HasNumValidTargetChecksInTimeSlice {
      get { return hasNumValidTargetChecksInTimeSlice; }
    }
    public uint NumValidTargetChecksInTimeSlice {
      get { return numValidTargetChecksInTimeSlice_; }
    }
    
    public const int NumGameEntitySweepsInTimeSliceFieldNumber = 8;
    private bool hasNumGameEntitySweepsInTimeSlice;
    private uint numGameEntitySweepsInTimeSlice_;
    public bool HasNumGameEntitySweepsInTimeSlice {
      get { return hasNumGameEntitySweepsInTimeSlice; }
    }
    public uint NumGameEntitySweepsInTimeSlice {
      get { return numGameEntitySweepsInTimeSlice_; }
    }
    
    public const int NumServerHitchesInTimeSliceFieldNumber = 9;
    private bool hasNumServerHitchesInTimeSlice;
    private uint numServerHitchesInTimeSlice_;
    public bool HasNumServerHitchesInTimeSlice {
      get { return hasNumServerHitchesInTimeSlice; }
    }
    public uint NumServerHitchesInTimeSlice {
      get { return numServerHitchesInTimeSlice_; }
    }
    
    public const int NumOctreeValidTargetChecksInTimeSliceFieldNumber = 10;
    private bool hasNumOctreeValidTargetChecksInTimeSlice;
    private uint numOctreeValidTargetChecksInTimeSlice_;
    public bool HasNumOctreeValidTargetChecksInTimeSlice {
      get { return hasNumOctreeValidTargetChecksInTimeSlice; }
    }
    public uint NumOctreeValidTargetChecksInTimeSlice {
      get { return numOctreeValidTargetChecksInTimeSlice_; }
    }
    
    public const int NumAvatarOctreeQueriesInTimeSliceFieldNumber = 11;
    private bool hasNumAvatarOctreeQueriesInTimeSlice;
    private uint numAvatarOctreeQueriesInTimeSlice_;
    public bool HasNumAvatarOctreeQueriesInTimeSlice {
      get { return hasNumAvatarOctreeQueriesInTimeSlice; }
    }
    public uint NumAvatarOctreeQueriesInTimeSlice {
      get { return numAvatarOctreeQueriesInTimeSlice_; }
    }
    
    public const int HitchInfoStrArrayFieldNumber = 12;
    private pbc::PopsicleList<string> hitchInfoStrArray_ = new pbc::PopsicleList<string>();
    public scg::IList<string> HitchInfoStrArrayList {
      get { return pbc::Lists.AsReadOnly(hitchInfoStrArray_); }
    }
    public int HitchInfoStrArrayCount {
      get { return hitchInfoStrArray_.Count; }
    }
    public string GetHitchInfoStrArray(int index) {
      return hitchInfoStrArray_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimeSlice) return false;
        if (!hasNumAgentsAllocated) return false;
        if (!hasNumAgentsSimulated) return false;
        if (!hasNumThinksInTimeSlice) return false;
        if (!hasNumOctreeQueriesInTimeSlice) return false;
        if (!hasNumLOSChecksInTimeSlice) return false;
        if (!hasNumValidTargetChecksInTimeSlice) return false;
        if (!hasNumGameEntitySweepsInTimeSlice) return false;
        if (!hasNumServerHitchesInTimeSlice) return false;
        if (!hasNumOctreeValidTargetChecksInTimeSlice) return false;
        if (!hasNumAvatarOctreeQueriesInTimeSlice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIPerformanceUIUpdateFieldNames;
      if (hasTimeSlice) {
        output.WriteUInt32(1, field_names[11], TimeSlice);
      }
      if (hasNumAgentsAllocated) {
        output.WriteUInt32(2, field_names[1], NumAgentsAllocated);
      }
      if (hasNumAgentsSimulated) {
        output.WriteUInt32(3, field_names[2], NumAgentsSimulated);
      }
      if (hasNumThinksInTimeSlice) {
        output.WriteUInt32(4, field_names[9], NumThinksInTimeSlice);
      }
      if (hasNumOctreeQueriesInTimeSlice) {
        output.WriteUInt32(5, field_names[6], NumOctreeQueriesInTimeSlice);
      }
      if (hasNumLOSChecksInTimeSlice) {
        output.WriteUInt32(6, field_names[5], NumLOSChecksInTimeSlice);
      }
      if (hasNumValidTargetChecksInTimeSlice) {
        output.WriteUInt32(7, field_names[10], NumValidTargetChecksInTimeSlice);
      }
      if (hasNumGameEntitySweepsInTimeSlice) {
        output.WriteUInt32(8, field_names[4], NumGameEntitySweepsInTimeSlice);
      }
      if (hasNumServerHitchesInTimeSlice) {
        output.WriteUInt32(9, field_names[8], NumServerHitchesInTimeSlice);
      }
      if (hasNumOctreeValidTargetChecksInTimeSlice) {
        output.WriteUInt32(10, field_names[7], NumOctreeValidTargetChecksInTimeSlice);
      }
      if (hasNumAvatarOctreeQueriesInTimeSlice) {
        output.WriteUInt32(11, field_names[3], NumAvatarOctreeQueriesInTimeSlice);
      }
      if (hitchInfoStrArray_.Count > 0) {
        output.WriteStringArray(12, field_names[0], hitchInfoStrArray_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TimeSlice);
      }
      if (hasNumAgentsAllocated) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, NumAgentsAllocated);
      }
      if (hasNumAgentsSimulated) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, NumAgentsSimulated);
      }
      if (hasNumThinksInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, NumThinksInTimeSlice);
      }
      if (hasNumOctreeQueriesInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, NumOctreeQueriesInTimeSlice);
      }
      if (hasNumLOSChecksInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, NumLOSChecksInTimeSlice);
      }
      if (hasNumValidTargetChecksInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, NumValidTargetChecksInTimeSlice);
      }
      if (hasNumGameEntitySweepsInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, NumGameEntitySweepsInTimeSlice);
      }
      if (hasNumServerHitchesInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, NumServerHitchesInTimeSlice);
      }
      if (hasNumOctreeValidTargetChecksInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, NumOctreeValidTargetChecksInTimeSlice);
      }
      if (hasNumAvatarOctreeQueriesInTimeSlice) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, NumAvatarOctreeQueriesInTimeSlice);
      }
      {
        int dataSize = 0;
        foreach (string element in HitchInfoStrArrayList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * hitchInfoStrArray_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIPerformanceUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIPerformanceUIUpdate MakeReadOnly() {
      hitchInfoStrArray_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIPerformanceUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIPerformanceUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIPerformanceUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIPerformanceUIUpdate result;
      
      private NetMessageAIPerformanceUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIPerformanceUIUpdate original = result;
          result = new NetMessageAIPerformanceUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIPerformanceUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIPerformanceUIUpdate.Descriptor; }
      }
      
      public override NetMessageAIPerformanceUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIPerformanceUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageAIPerformanceUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIPerformanceUIUpdate) {
          return MergeFrom((NetMessageAIPerformanceUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIPerformanceUIUpdate other) {
        if (other == global::Gazillion.NetMessageAIPerformanceUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeSlice) {
          TimeSlice = other.TimeSlice;
        }
        if (other.HasNumAgentsAllocated) {
          NumAgentsAllocated = other.NumAgentsAllocated;
        }
        if (other.HasNumAgentsSimulated) {
          NumAgentsSimulated = other.NumAgentsSimulated;
        }
        if (other.HasNumThinksInTimeSlice) {
          NumThinksInTimeSlice = other.NumThinksInTimeSlice;
        }
        if (other.HasNumOctreeQueriesInTimeSlice) {
          NumOctreeQueriesInTimeSlice = other.NumOctreeQueriesInTimeSlice;
        }
        if (other.HasNumLOSChecksInTimeSlice) {
          NumLOSChecksInTimeSlice = other.NumLOSChecksInTimeSlice;
        }
        if (other.HasNumValidTargetChecksInTimeSlice) {
          NumValidTargetChecksInTimeSlice = other.NumValidTargetChecksInTimeSlice;
        }
        if (other.HasNumGameEntitySweepsInTimeSlice) {
          NumGameEntitySweepsInTimeSlice = other.NumGameEntitySweepsInTimeSlice;
        }
        if (other.HasNumServerHitchesInTimeSlice) {
          NumServerHitchesInTimeSlice = other.NumServerHitchesInTimeSlice;
        }
        if (other.HasNumOctreeValidTargetChecksInTimeSlice) {
          NumOctreeValidTargetChecksInTimeSlice = other.NumOctreeValidTargetChecksInTimeSlice;
        }
        if (other.HasNumAvatarOctreeQueriesInTimeSlice) {
          NumAvatarOctreeQueriesInTimeSlice = other.NumAvatarOctreeQueriesInTimeSlice;
        }
        if (other.hitchInfoStrArray_.Count != 0) {
          result.hitchInfoStrArray_.Add(other.hitchInfoStrArray_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIPerformanceUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIPerformanceUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeSlice = input.ReadUInt32(ref result.timeSlice_);
              break;
            }
            case 16: {
              result.hasNumAgentsAllocated = input.ReadUInt32(ref result.numAgentsAllocated_);
              break;
            }
            case 24: {
              result.hasNumAgentsSimulated = input.ReadUInt32(ref result.numAgentsSimulated_);
              break;
            }
            case 32: {
              result.hasNumThinksInTimeSlice = input.ReadUInt32(ref result.numThinksInTimeSlice_);
              break;
            }
            case 40: {
              result.hasNumOctreeQueriesInTimeSlice = input.ReadUInt32(ref result.numOctreeQueriesInTimeSlice_);
              break;
            }
            case 48: {
              result.hasNumLOSChecksInTimeSlice = input.ReadUInt32(ref result.numLOSChecksInTimeSlice_);
              break;
            }
            case 56: {
              result.hasNumValidTargetChecksInTimeSlice = input.ReadUInt32(ref result.numValidTargetChecksInTimeSlice_);
              break;
            }
            case 64: {
              result.hasNumGameEntitySweepsInTimeSlice = input.ReadUInt32(ref result.numGameEntitySweepsInTimeSlice_);
              break;
            }
            case 72: {
              result.hasNumServerHitchesInTimeSlice = input.ReadUInt32(ref result.numServerHitchesInTimeSlice_);
              break;
            }
            case 80: {
              result.hasNumOctreeValidTargetChecksInTimeSlice = input.ReadUInt32(ref result.numOctreeValidTargetChecksInTimeSlice_);
              break;
            }
            case 88: {
              result.hasNumAvatarOctreeQueriesInTimeSlice = input.ReadUInt32(ref result.numAvatarOctreeQueriesInTimeSlice_);
              break;
            }
            case 98: {
              input.ReadStringArray(tag, field_name, result.hitchInfoStrArray_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeSlice {
        get { return result.hasTimeSlice; }
      }
      public uint TimeSlice {
        get { return result.TimeSlice; }
        set { SetTimeSlice(value); }
      }
      public Builder SetTimeSlice(uint value) {
        PrepareBuilder();
        result.hasTimeSlice = true;
        result.timeSlice_ = value;
        return this;
      }
      public Builder ClearTimeSlice() {
        PrepareBuilder();
        result.hasTimeSlice = false;
        result.timeSlice_ = 0;
        return this;
      }
      
      public bool HasNumAgentsAllocated {
        get { return result.hasNumAgentsAllocated; }
      }
      public uint NumAgentsAllocated {
        get { return result.NumAgentsAllocated; }
        set { SetNumAgentsAllocated(value); }
      }
      public Builder SetNumAgentsAllocated(uint value) {
        PrepareBuilder();
        result.hasNumAgentsAllocated = true;
        result.numAgentsAllocated_ = value;
        return this;
      }
      public Builder ClearNumAgentsAllocated() {
        PrepareBuilder();
        result.hasNumAgentsAllocated = false;
        result.numAgentsAllocated_ = 0;
        return this;
      }
      
      public bool HasNumAgentsSimulated {
        get { return result.hasNumAgentsSimulated; }
      }
      public uint NumAgentsSimulated {
        get { return result.NumAgentsSimulated; }
        set { SetNumAgentsSimulated(value); }
      }
      public Builder SetNumAgentsSimulated(uint value) {
        PrepareBuilder();
        result.hasNumAgentsSimulated = true;
        result.numAgentsSimulated_ = value;
        return this;
      }
      public Builder ClearNumAgentsSimulated() {
        PrepareBuilder();
        result.hasNumAgentsSimulated = false;
        result.numAgentsSimulated_ = 0;
        return this;
      }
      
      public bool HasNumThinksInTimeSlice {
        get { return result.hasNumThinksInTimeSlice; }
      }
      public uint NumThinksInTimeSlice {
        get { return result.NumThinksInTimeSlice; }
        set { SetNumThinksInTimeSlice(value); }
      }
      public Builder SetNumThinksInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumThinksInTimeSlice = true;
        result.numThinksInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumThinksInTimeSlice() {
        PrepareBuilder();
        result.hasNumThinksInTimeSlice = false;
        result.numThinksInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumOctreeQueriesInTimeSlice {
        get { return result.hasNumOctreeQueriesInTimeSlice; }
      }
      public uint NumOctreeQueriesInTimeSlice {
        get { return result.NumOctreeQueriesInTimeSlice; }
        set { SetNumOctreeQueriesInTimeSlice(value); }
      }
      public Builder SetNumOctreeQueriesInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumOctreeQueriesInTimeSlice = true;
        result.numOctreeQueriesInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumOctreeQueriesInTimeSlice() {
        PrepareBuilder();
        result.hasNumOctreeQueriesInTimeSlice = false;
        result.numOctreeQueriesInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumLOSChecksInTimeSlice {
        get { return result.hasNumLOSChecksInTimeSlice; }
      }
      public uint NumLOSChecksInTimeSlice {
        get { return result.NumLOSChecksInTimeSlice; }
        set { SetNumLOSChecksInTimeSlice(value); }
      }
      public Builder SetNumLOSChecksInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumLOSChecksInTimeSlice = true;
        result.numLOSChecksInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumLOSChecksInTimeSlice() {
        PrepareBuilder();
        result.hasNumLOSChecksInTimeSlice = false;
        result.numLOSChecksInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumValidTargetChecksInTimeSlice {
        get { return result.hasNumValidTargetChecksInTimeSlice; }
      }
      public uint NumValidTargetChecksInTimeSlice {
        get { return result.NumValidTargetChecksInTimeSlice; }
        set { SetNumValidTargetChecksInTimeSlice(value); }
      }
      public Builder SetNumValidTargetChecksInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumValidTargetChecksInTimeSlice = true;
        result.numValidTargetChecksInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumValidTargetChecksInTimeSlice() {
        PrepareBuilder();
        result.hasNumValidTargetChecksInTimeSlice = false;
        result.numValidTargetChecksInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumGameEntitySweepsInTimeSlice {
        get { return result.hasNumGameEntitySweepsInTimeSlice; }
      }
      public uint NumGameEntitySweepsInTimeSlice {
        get { return result.NumGameEntitySweepsInTimeSlice; }
        set { SetNumGameEntitySweepsInTimeSlice(value); }
      }
      public Builder SetNumGameEntitySweepsInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumGameEntitySweepsInTimeSlice = true;
        result.numGameEntitySweepsInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumGameEntitySweepsInTimeSlice() {
        PrepareBuilder();
        result.hasNumGameEntitySweepsInTimeSlice = false;
        result.numGameEntitySweepsInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumServerHitchesInTimeSlice {
        get { return result.hasNumServerHitchesInTimeSlice; }
      }
      public uint NumServerHitchesInTimeSlice {
        get { return result.NumServerHitchesInTimeSlice; }
        set { SetNumServerHitchesInTimeSlice(value); }
      }
      public Builder SetNumServerHitchesInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumServerHitchesInTimeSlice = true;
        result.numServerHitchesInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumServerHitchesInTimeSlice() {
        PrepareBuilder();
        result.hasNumServerHitchesInTimeSlice = false;
        result.numServerHitchesInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumOctreeValidTargetChecksInTimeSlice {
        get { return result.hasNumOctreeValidTargetChecksInTimeSlice; }
      }
      public uint NumOctreeValidTargetChecksInTimeSlice {
        get { return result.NumOctreeValidTargetChecksInTimeSlice; }
        set { SetNumOctreeValidTargetChecksInTimeSlice(value); }
      }
      public Builder SetNumOctreeValidTargetChecksInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumOctreeValidTargetChecksInTimeSlice = true;
        result.numOctreeValidTargetChecksInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumOctreeValidTargetChecksInTimeSlice() {
        PrepareBuilder();
        result.hasNumOctreeValidTargetChecksInTimeSlice = false;
        result.numOctreeValidTargetChecksInTimeSlice_ = 0;
        return this;
      }
      
      public bool HasNumAvatarOctreeQueriesInTimeSlice {
        get { return result.hasNumAvatarOctreeQueriesInTimeSlice; }
      }
      public uint NumAvatarOctreeQueriesInTimeSlice {
        get { return result.NumAvatarOctreeQueriesInTimeSlice; }
        set { SetNumAvatarOctreeQueriesInTimeSlice(value); }
      }
      public Builder SetNumAvatarOctreeQueriesInTimeSlice(uint value) {
        PrepareBuilder();
        result.hasNumAvatarOctreeQueriesInTimeSlice = true;
        result.numAvatarOctreeQueriesInTimeSlice_ = value;
        return this;
      }
      public Builder ClearNumAvatarOctreeQueriesInTimeSlice() {
        PrepareBuilder();
        result.hasNumAvatarOctreeQueriesInTimeSlice = false;
        result.numAvatarOctreeQueriesInTimeSlice_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> HitchInfoStrArrayList {
        get { return PrepareBuilder().hitchInfoStrArray_; }
      }
      public int HitchInfoStrArrayCount {
        get { return result.HitchInfoStrArrayCount; }
      }
      public string GetHitchInfoStrArray(int index) {
        return result.GetHitchInfoStrArray(index);
      }
      public Builder SetHitchInfoStrArray(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hitchInfoStrArray_[index] = value;
        return this;
      }
      public Builder AddHitchInfoStrArray(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hitchInfoStrArray_.Add(value);
        return this;
      }
      public Builder AddRangeHitchInfoStrArray(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.hitchInfoStrArray_.Add(values);
        return this;
      }
      public Builder ClearHitchInfoStrArray() {
        PrepareBuilder();
        result.hitchInfoStrArray_.Clear();
        return this;
      }
    }
    static NetMessageAIPerformanceUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIDebugUIUpdate : pb::GeneratedMessage<NetMessageAIDebugUIUpdate, NetMessageAIDebugUIUpdate.Builder> {
    private NetMessageAIDebugUIUpdate() { }
    private static readonly NetMessageAIDebugUIUpdate defaultInstance = new NetMessageAIDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageAIDebugUIUpdateFieldNames = new string[] { "currentActionName", "idTargetNPC", "powerResultString", "previousActionName", "propertyString", "sensoryInputs" };
    private static readonly uint[] _netMessageAIDebugUIUpdateFieldTags = new uint[] { 18, 8, 50, 26, 42, 34 };
    public static NetMessageAIDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIDebugUIUpdate, NetMessageAIDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetNPCFieldNumber = 1;
    private bool hasIdTargetNPC;
    private ulong idTargetNPC_;
    public bool HasIdTargetNPC {
      get { return hasIdTargetNPC; }
    }
    public ulong IdTargetNPC {
      get { return idTargetNPC_; }
    }
    
    public const int CurrentActionNameFieldNumber = 2;
    private bool hasCurrentActionName;
    private string currentActionName_ = "";
    public bool HasCurrentActionName {
      get { return hasCurrentActionName; }
    }
    public string CurrentActionName {
      get { return currentActionName_; }
    }
    
    public const int PreviousActionNameFieldNumber = 3;
    private bool hasPreviousActionName;
    private string previousActionName_ = "";
    public bool HasPreviousActionName {
      get { return hasPreviousActionName; }
    }
    public string PreviousActionName {
      get { return previousActionName_; }
    }
    
    public const int SensoryInputsFieldNumber = 4;
    private pbc::PopsicleList<string> sensoryInputs_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SensoryInputsList {
      get { return pbc::Lists.AsReadOnly(sensoryInputs_); }
    }
    public int SensoryInputsCount {
      get { return sensoryInputs_.Count; }
    }
    public string GetSensoryInputs(int index) {
      return sensoryInputs_[index];
    }
    
    public const int PropertyStringFieldNumber = 5;
    private bool hasPropertyString;
    private string propertyString_ = "";
    public bool HasPropertyString {
      get { return hasPropertyString; }
    }
    public string PropertyString {
      get { return propertyString_; }
    }
    
    public const int PowerResultStringFieldNumber = 6;
    private bool hasPowerResultString;
    private string powerResultString_ = "";
    public bool HasPowerResultString {
      get { return hasPowerResultString; }
    }
    public string PowerResultString {
      get { return powerResultString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetNPC) return false;
        if (!hasCurrentActionName) return false;
        if (!hasPreviousActionName) return false;
        if (!hasPropertyString) return false;
        if (!hasPowerResultString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIDebugUIUpdateFieldNames;
      if (hasIdTargetNPC) {
        output.WriteUInt64(1, field_names[1], IdTargetNPC);
      }
      if (hasCurrentActionName) {
        output.WriteString(2, field_names[0], CurrentActionName);
      }
      if (hasPreviousActionName) {
        output.WriteString(3, field_names[3], PreviousActionName);
      }
      if (sensoryInputs_.Count > 0) {
        output.WriteStringArray(4, field_names[5], sensoryInputs_);
      }
      if (hasPropertyString) {
        output.WriteString(5, field_names[4], PropertyString);
      }
      if (hasPowerResultString) {
        output.WriteString(6, field_names[2], PowerResultString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetNPC) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetNPC);
      }
      if (hasCurrentActionName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CurrentActionName);
      }
      if (hasPreviousActionName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PreviousActionName);
      }
      {
        int dataSize = 0;
        foreach (string element in SensoryInputsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * sensoryInputs_.Count;
      }
      if (hasPropertyString) {
        size += pb::CodedOutputStream.ComputeStringSize(5, PropertyString);
      }
      if (hasPowerResultString) {
        size += pb::CodedOutputStream.ComputeStringSize(6, PowerResultString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIDebugUIUpdate MakeReadOnly() {
      sensoryInputs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIDebugUIUpdate result;
      
      private NetMessageAIDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIDebugUIUpdate original = result;
          result = new NetMessageAIDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageAIDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageAIDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIDebugUIUpdate) {
          return MergeFrom((NetMessageAIDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageAIDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetNPC) {
          IdTargetNPC = other.IdTargetNPC;
        }
        if (other.HasCurrentActionName) {
          CurrentActionName = other.CurrentActionName;
        }
        if (other.HasPreviousActionName) {
          PreviousActionName = other.PreviousActionName;
        }
        if (other.sensoryInputs_.Count != 0) {
          result.sensoryInputs_.Add(other.sensoryInputs_);
        }
        if (other.HasPropertyString) {
          PropertyString = other.PropertyString;
        }
        if (other.HasPowerResultString) {
          PowerResultString = other.PowerResultString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetNPC = input.ReadUInt64(ref result.idTargetNPC_);
              break;
            }
            case 18: {
              result.hasCurrentActionName = input.ReadString(ref result.currentActionName_);
              break;
            }
            case 26: {
              result.hasPreviousActionName = input.ReadString(ref result.previousActionName_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.sensoryInputs_);
              break;
            }
            case 42: {
              result.hasPropertyString = input.ReadString(ref result.propertyString_);
              break;
            }
            case 50: {
              result.hasPowerResultString = input.ReadString(ref result.powerResultString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetNPC {
        get { return result.hasIdTargetNPC; }
      }
      public ulong IdTargetNPC {
        get { return result.IdTargetNPC; }
        set { SetIdTargetNPC(value); }
      }
      public Builder SetIdTargetNPC(ulong value) {
        PrepareBuilder();
        result.hasIdTargetNPC = true;
        result.idTargetNPC_ = value;
        return this;
      }
      public Builder ClearIdTargetNPC() {
        PrepareBuilder();
        result.hasIdTargetNPC = false;
        result.idTargetNPC_ = 0UL;
        return this;
      }
      
      public bool HasCurrentActionName {
        get { return result.hasCurrentActionName; }
      }
      public string CurrentActionName {
        get { return result.CurrentActionName; }
        set { SetCurrentActionName(value); }
      }
      public Builder SetCurrentActionName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentActionName = true;
        result.currentActionName_ = value;
        return this;
      }
      public Builder ClearCurrentActionName() {
        PrepareBuilder();
        result.hasCurrentActionName = false;
        result.currentActionName_ = "";
        return this;
      }
      
      public bool HasPreviousActionName {
        get { return result.hasPreviousActionName; }
      }
      public string PreviousActionName {
        get { return result.PreviousActionName; }
        set { SetPreviousActionName(value); }
      }
      public Builder SetPreviousActionName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreviousActionName = true;
        result.previousActionName_ = value;
        return this;
      }
      public Builder ClearPreviousActionName() {
        PrepareBuilder();
        result.hasPreviousActionName = false;
        result.previousActionName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> SensoryInputsList {
        get { return PrepareBuilder().sensoryInputs_; }
      }
      public int SensoryInputsCount {
        get { return result.SensoryInputsCount; }
      }
      public string GetSensoryInputs(int index) {
        return result.GetSensoryInputs(index);
      }
      public Builder SetSensoryInputs(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensoryInputs_[index] = value;
        return this;
      }
      public Builder AddSensoryInputs(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensoryInputs_.Add(value);
        return this;
      }
      public Builder AddRangeSensoryInputs(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.sensoryInputs_.Add(values);
        return this;
      }
      public Builder ClearSensoryInputs() {
        PrepareBuilder();
        result.sensoryInputs_.Clear();
        return this;
      }
      
      public bool HasPropertyString {
        get { return result.hasPropertyString; }
      }
      public string PropertyString {
        get { return result.PropertyString; }
        set { SetPropertyString(value); }
      }
      public Builder SetPropertyString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropertyString = true;
        result.propertyString_ = value;
        return this;
      }
      public Builder ClearPropertyString() {
        PrepareBuilder();
        result.hasPropertyString = false;
        result.propertyString_ = "";
        return this;
      }
      
      public bool HasPowerResultString {
        get { return result.hasPowerResultString; }
      }
      public string PowerResultString {
        get { return result.PowerResultString; }
        set { SetPowerResultString(value); }
      }
      public Builder SetPowerResultString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPowerResultString = true;
        result.powerResultString_ = value;
        return this;
      }
      public Builder ClearPowerResultString() {
        PrepareBuilder();
        result.hasPowerResultString = false;
        result.powerResultString_ = "";
        return this;
      }
    }
    static NetMessageAIDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePropertiesDebugUIUpdate : pb::GeneratedMessage<NetMessagePropertiesDebugUIUpdate, NetMessagePropertiesDebugUIUpdate.Builder> {
    private NetMessagePropertiesDebugUIUpdate() { }
    private static readonly NetMessagePropertiesDebugUIUpdate defaultInstance = new NetMessagePropertiesDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePropertiesDebugUIUpdateFieldNames = new string[] { "entityString", "idTargetEntity", "propertyString" };
    private static readonly uint[] _netMessagePropertiesDebugUIUpdateFieldTags = new uint[] { 26, 8, 18 };
    public static NetMessagePropertiesDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePropertiesDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePropertiesDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePropertiesDebugUIUpdate, NetMessagePropertiesDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePropertiesDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int PropertyStringFieldNumber = 2;
    private bool hasPropertyString;
    private string propertyString_ = "";
    public bool HasPropertyString {
      get { return hasPropertyString; }
    }
    public string PropertyString {
      get { return propertyString_; }
    }
    
    public const int EntityStringFieldNumber = 3;
    private bool hasEntityString;
    private string entityString_ = "";
    public bool HasEntityString {
      get { return hasEntityString; }
    }
    public string EntityString {
      get { return entityString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasPropertyString) return false;
        if (!hasEntityString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePropertiesDebugUIUpdateFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[1], IdTargetEntity);
      }
      if (hasPropertyString) {
        output.WriteString(2, field_names[2], PropertyString);
      }
      if (hasEntityString) {
        output.WriteString(3, field_names[0], EntityString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasPropertyString) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PropertyString);
      }
      if (hasEntityString) {
        size += pb::CodedOutputStream.ComputeStringSize(3, EntityString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePropertiesDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePropertiesDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePropertiesDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePropertiesDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePropertiesDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePropertiesDebugUIUpdate result;
      
      private NetMessagePropertiesDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePropertiesDebugUIUpdate original = result;
          result = new NetMessagePropertiesDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePropertiesDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePropertiesDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessagePropertiesDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePropertiesDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessagePropertiesDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePropertiesDebugUIUpdate) {
          return MergeFrom((NetMessagePropertiesDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePropertiesDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessagePropertiesDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasPropertyString) {
          PropertyString = other.PropertyString;
        }
        if (other.HasEntityString) {
          EntityString = other.EntityString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePropertiesDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePropertiesDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 18: {
              result.hasPropertyString = input.ReadString(ref result.propertyString_);
              break;
            }
            case 26: {
              result.hasEntityString = input.ReadString(ref result.entityString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasPropertyString {
        get { return result.hasPropertyString; }
      }
      public string PropertyString {
        get { return result.PropertyString; }
        set { SetPropertyString(value); }
      }
      public Builder SetPropertyString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropertyString = true;
        result.propertyString_ = value;
        return this;
      }
      public Builder ClearPropertyString() {
        PrepareBuilder();
        result.hasPropertyString = false;
        result.propertyString_ = "";
        return this;
      }
      
      public bool HasEntityString {
        get { return result.hasEntityString; }
      }
      public string EntityString {
        get { return result.EntityString; }
        set { SetEntityString(value); }
      }
      public Builder SetEntityString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityString = true;
        result.entityString_ = value;
        return this;
      }
      public Builder ClearEntityString() {
        PrepareBuilder();
        result.hasEntityString = false;
        result.entityString_ = "";
        return this;
      }
    }
    static NetMessagePropertiesDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConditionsDebugUIUpdate : pb::GeneratedMessage<NetMessageConditionsDebugUIUpdate, NetMessageConditionsDebugUIUpdate.Builder> {
    private NetMessageConditionsDebugUIUpdate() { }
    private static readonly NetMessageConditionsDebugUIUpdate defaultInstance = new NetMessageConditionsDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageConditionsDebugUIUpdateFieldNames = new string[] { "conditionsString", "idTargetEntity" };
    private static readonly uint[] _netMessageConditionsDebugUIUpdateFieldTags = new uint[] { 18, 8 };
    public static NetMessageConditionsDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConditionsDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConditionsDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConditionsDebugUIUpdate, NetMessageConditionsDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConditionsDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int IdTargetEntityFieldNumber = 1;
    private bool hasIdTargetEntity;
    private ulong idTargetEntity_;
    public bool HasIdTargetEntity {
      get { return hasIdTargetEntity; }
    }
    public ulong IdTargetEntity {
      get { return idTargetEntity_; }
    }
    
    public const int ConditionsStringFieldNumber = 2;
    private bool hasConditionsString;
    private string conditionsString_ = "";
    public bool HasConditionsString {
      get { return hasConditionsString; }
    }
    public string ConditionsString {
      get { return conditionsString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdTargetEntity) return false;
        if (!hasConditionsString) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConditionsDebugUIUpdateFieldNames;
      if (hasIdTargetEntity) {
        output.WriteUInt64(1, field_names[1], IdTargetEntity);
      }
      if (hasConditionsString) {
        output.WriteString(2, field_names[0], ConditionsString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdTargetEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdTargetEntity);
      }
      if (hasConditionsString) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ConditionsString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConditionsDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConditionsDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConditionsDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConditionsDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConditionsDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConditionsDebugUIUpdate result;
      
      private NetMessageConditionsDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConditionsDebugUIUpdate original = result;
          result = new NetMessageConditionsDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConditionsDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConditionsDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageConditionsDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConditionsDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageConditionsDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConditionsDebugUIUpdate) {
          return MergeFrom((NetMessageConditionsDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConditionsDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageConditionsDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdTargetEntity) {
          IdTargetEntity = other.IdTargetEntity;
        }
        if (other.HasConditionsString) {
          ConditionsString = other.ConditionsString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConditionsDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConditionsDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdTargetEntity = input.ReadUInt64(ref result.idTargetEntity_);
              break;
            }
            case 18: {
              result.hasConditionsString = input.ReadString(ref result.conditionsString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdTargetEntity {
        get { return result.hasIdTargetEntity; }
      }
      public ulong IdTargetEntity {
        get { return result.IdTargetEntity; }
        set { SetIdTargetEntity(value); }
      }
      public Builder SetIdTargetEntity(ulong value) {
        PrepareBuilder();
        result.hasIdTargetEntity = true;
        result.idTargetEntity_ = value;
        return this;
      }
      public Builder ClearIdTargetEntity() {
        PrepareBuilder();
        result.hasIdTargetEntity = false;
        result.idTargetEntity_ = 0UL;
        return this;
      }
      
      public bool HasConditionsString {
        get { return result.hasConditionsString; }
      }
      public string ConditionsString {
        get { return result.ConditionsString; }
        set { SetConditionsString(value); }
      }
      public Builder SetConditionsString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConditionsString = true;
        result.conditionsString_ = value;
        return this;
      }
      public Builder ClearConditionsString() {
        PrepareBuilder();
        result.hasConditionsString = false;
        result.conditionsString_ = "";
        return this;
      }
    }
    static NetMessageConditionsDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowersDebugUIUpdate : pb::GeneratedMessage<NetMessagePowersDebugUIUpdate, NetMessagePowersDebugUIUpdate.Builder> {
    private NetMessagePowersDebugUIUpdate() { }
    private static readonly NetMessagePowersDebugUIUpdate defaultInstance = new NetMessagePowersDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePowersDebugUIUpdateFieldNames = new string[] { "activePowerId", "activePowerLastActivationTime", "continuousPowerId", "continuousTargetId", "continuousTargetPosition", "debugEntityId", "isInCombat", "pendingActionState", "pendingPowerId", "pendingTargetId", "pendingTargetPosition", "serverPowerResultString", "usingControllerInput" };
    private static readonly uint[] _netMessagePowersDebugUIUpdateFieldTags = new uint[] { 16, 80, 56, 64, 74, 8, 88, 24, 32, 40, 50, 98, 104 };
    public static NetMessagePowersDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowersDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowersDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowersDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowersDebugUIUpdate, NetMessagePowersDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowersDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int DebugEntityIdFieldNumber = 1;
    private bool hasDebugEntityId;
    private ulong debugEntityId_;
    public bool HasDebugEntityId {
      get { return hasDebugEntityId; }
    }
    public ulong DebugEntityId {
      get { return debugEntityId_; }
    }
    
    public const int ActivePowerIdFieldNumber = 2;
    private bool hasActivePowerId;
    private ulong activePowerId_;
    public bool HasActivePowerId {
      get { return hasActivePowerId; }
    }
    public ulong ActivePowerId {
      get { return activePowerId_; }
    }
    
    public const int PendingActionStateFieldNumber = 3;
    private bool hasPendingActionState;
    private int pendingActionState_;
    public bool HasPendingActionState {
      get { return hasPendingActionState; }
    }
    public int PendingActionState {
      get { return pendingActionState_; }
    }
    
    public const int PendingPowerIdFieldNumber = 4;
    private bool hasPendingPowerId;
    private ulong pendingPowerId_;
    public bool HasPendingPowerId {
      get { return hasPendingPowerId; }
    }
    public ulong PendingPowerId {
      get { return pendingPowerId_; }
    }
    
    public const int PendingTargetIdFieldNumber = 5;
    private bool hasPendingTargetId;
    private ulong pendingTargetId_;
    public bool HasPendingTargetId {
      get { return hasPendingTargetId; }
    }
    public ulong PendingTargetId {
      get { return pendingTargetId_; }
    }
    
    public const int PendingTargetPositionFieldNumber = 6;
    private bool hasPendingTargetPosition;
    private global::Gazillion.NetStructPoint3 pendingTargetPosition_;
    public bool HasPendingTargetPosition {
      get { return hasPendingTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 PendingTargetPosition {
      get { return pendingTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ContinuousPowerIdFieldNumber = 7;
    private bool hasContinuousPowerId;
    private ulong continuousPowerId_;
    public bool HasContinuousPowerId {
      get { return hasContinuousPowerId; }
    }
    public ulong ContinuousPowerId {
      get { return continuousPowerId_; }
    }
    
    public const int ContinuousTargetIdFieldNumber = 8;
    private bool hasContinuousTargetId;
    private ulong continuousTargetId_;
    public bool HasContinuousTargetId {
      get { return hasContinuousTargetId; }
    }
    public ulong ContinuousTargetId {
      get { return continuousTargetId_; }
    }
    
    public const int ContinuousTargetPositionFieldNumber = 9;
    private bool hasContinuousTargetPosition;
    private global::Gazillion.NetStructPoint3 continuousTargetPosition_;
    public bool HasContinuousTargetPosition {
      get { return hasContinuousTargetPosition; }
    }
    public global::Gazillion.NetStructPoint3 ContinuousTargetPosition {
      get { return continuousTargetPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int ActivePowerLastActivationTimeFieldNumber = 10;
    private bool hasActivePowerLastActivationTime;
    private ulong activePowerLastActivationTime_;
    public bool HasActivePowerLastActivationTime {
      get { return hasActivePowerLastActivationTime; }
    }
    public ulong ActivePowerLastActivationTime {
      get { return activePowerLastActivationTime_; }
    }
    
    public const int IsInCombatFieldNumber = 11;
    private bool hasIsInCombat;
    private bool isInCombat_;
    public bool HasIsInCombat {
      get { return hasIsInCombat; }
    }
    public bool IsInCombat {
      get { return isInCombat_; }
    }
    
    public const int ServerPowerResultStringFieldNumber = 12;
    private bool hasServerPowerResultString;
    private string serverPowerResultString_ = "";
    public bool HasServerPowerResultString {
      get { return hasServerPowerResultString; }
    }
    public string ServerPowerResultString {
      get { return serverPowerResultString_; }
    }
    
    public const int UsingControllerInputFieldNumber = 13;
    private bool hasUsingControllerInput;
    private bool usingControllerInput_;
    public bool HasUsingControllerInput {
      get { return hasUsingControllerInput; }
    }
    public bool UsingControllerInput {
      get { return usingControllerInput_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDebugEntityId) return false;
        if (!hasActivePowerId) return false;
        if (!hasPendingActionState) return false;
        if (!hasPendingPowerId) return false;
        if (!hasPendingTargetId) return false;
        if (!hasPendingTargetPosition) return false;
        if (!hasContinuousPowerId) return false;
        if (!hasContinuousTargetId) return false;
        if (!hasContinuousTargetPosition) return false;
        if (!hasActivePowerLastActivationTime) return false;
        if (!hasIsInCombat) return false;
        if (!hasServerPowerResultString) return false;
        if (!hasUsingControllerInput) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowersDebugUIUpdateFieldNames;
      if (hasDebugEntityId) {
        output.WriteUInt64(1, field_names[5], DebugEntityId);
      }
      if (hasActivePowerId) {
        output.WriteUInt64(2, field_names[0], ActivePowerId);
      }
      if (hasPendingActionState) {
        output.WriteInt32(3, field_names[7], PendingActionState);
      }
      if (hasPendingPowerId) {
        output.WriteUInt64(4, field_names[8], PendingPowerId);
      }
      if (hasPendingTargetId) {
        output.WriteUInt64(5, field_names[9], PendingTargetId);
      }
      if (hasPendingTargetPosition) {
        output.WriteMessage(6, field_names[10], PendingTargetPosition);
      }
      if (hasContinuousPowerId) {
        output.WriteUInt64(7, field_names[2], ContinuousPowerId);
      }
      if (hasContinuousTargetId) {
        output.WriteUInt64(8, field_names[3], ContinuousTargetId);
      }
      if (hasContinuousTargetPosition) {
        output.WriteMessage(9, field_names[4], ContinuousTargetPosition);
      }
      if (hasActivePowerLastActivationTime) {
        output.WriteUInt64(10, field_names[1], ActivePowerLastActivationTime);
      }
      if (hasIsInCombat) {
        output.WriteBool(11, field_names[6], IsInCombat);
      }
      if (hasServerPowerResultString) {
        output.WriteString(12, field_names[11], ServerPowerResultString);
      }
      if (hasUsingControllerInput) {
        output.WriteBool(13, field_names[12], UsingControllerInput);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDebugEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DebugEntityId);
      }
      if (hasActivePowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ActivePowerId);
      }
      if (hasPendingActionState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, PendingActionState);
      }
      if (hasPendingPowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, PendingPowerId);
      }
      if (hasPendingTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, PendingTargetId);
      }
      if (hasPendingTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, PendingTargetPosition);
      }
      if (hasContinuousPowerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, ContinuousPowerId);
      }
      if (hasContinuousTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ContinuousTargetId);
      }
      if (hasContinuousTargetPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, ContinuousTargetPosition);
      }
      if (hasActivePowerLastActivationTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, ActivePowerLastActivationTime);
      }
      if (hasIsInCombat) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, IsInCombat);
      }
      if (hasServerPowerResultString) {
        size += pb::CodedOutputStream.ComputeStringSize(12, ServerPowerResultString);
      }
      if (hasUsingControllerInput) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, UsingControllerInput);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowersDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowersDebugUIUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowersDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowersDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowersDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowersDebugUIUpdate result;
      
      private NetMessagePowersDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowersDebugUIUpdate original = result;
          result = new NetMessagePowersDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowersDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowersDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessagePowersDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowersDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessagePowersDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowersDebugUIUpdate) {
          return MergeFrom((NetMessagePowersDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowersDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessagePowersDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDebugEntityId) {
          DebugEntityId = other.DebugEntityId;
        }
        if (other.HasActivePowerId) {
          ActivePowerId = other.ActivePowerId;
        }
        if (other.HasPendingActionState) {
          PendingActionState = other.PendingActionState;
        }
        if (other.HasPendingPowerId) {
          PendingPowerId = other.PendingPowerId;
        }
        if (other.HasPendingTargetId) {
          PendingTargetId = other.PendingTargetId;
        }
        if (other.HasPendingTargetPosition) {
          MergePendingTargetPosition(other.PendingTargetPosition);
        }
        if (other.HasContinuousPowerId) {
          ContinuousPowerId = other.ContinuousPowerId;
        }
        if (other.HasContinuousTargetId) {
          ContinuousTargetId = other.ContinuousTargetId;
        }
        if (other.HasContinuousTargetPosition) {
          MergeContinuousTargetPosition(other.ContinuousTargetPosition);
        }
        if (other.HasActivePowerLastActivationTime) {
          ActivePowerLastActivationTime = other.ActivePowerLastActivationTime;
        }
        if (other.HasIsInCombat) {
          IsInCombat = other.IsInCombat;
        }
        if (other.HasServerPowerResultString) {
          ServerPowerResultString = other.ServerPowerResultString;
        }
        if (other.HasUsingControllerInput) {
          UsingControllerInput = other.UsingControllerInput;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowersDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowersDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDebugEntityId = input.ReadUInt64(ref result.debugEntityId_);
              break;
            }
            case 16: {
              result.hasActivePowerId = input.ReadUInt64(ref result.activePowerId_);
              break;
            }
            case 24: {
              result.hasPendingActionState = input.ReadInt32(ref result.pendingActionState_);
              break;
            }
            case 32: {
              result.hasPendingPowerId = input.ReadUInt64(ref result.pendingPowerId_);
              break;
            }
            case 40: {
              result.hasPendingTargetId = input.ReadUInt64(ref result.pendingTargetId_);
              break;
            }
            case 50: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPendingTargetPosition) {
                subBuilder.MergeFrom(PendingTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PendingTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasContinuousPowerId = input.ReadUInt64(ref result.continuousPowerId_);
              break;
            }
            case 64: {
              result.hasContinuousTargetId = input.ReadUInt64(ref result.continuousTargetId_);
              break;
            }
            case 74: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasContinuousTargetPosition) {
                subBuilder.MergeFrom(ContinuousTargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContinuousTargetPosition = subBuilder.BuildPartial();
              break;
            }
            case 80: {
              result.hasActivePowerLastActivationTime = input.ReadUInt64(ref result.activePowerLastActivationTime_);
              break;
            }
            case 88: {
              result.hasIsInCombat = input.ReadBool(ref result.isInCombat_);
              break;
            }
            case 98: {
              result.hasServerPowerResultString = input.ReadString(ref result.serverPowerResultString_);
              break;
            }
            case 104: {
              result.hasUsingControllerInput = input.ReadBool(ref result.usingControllerInput_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDebugEntityId {
        get { return result.hasDebugEntityId; }
      }
      public ulong DebugEntityId {
        get { return result.DebugEntityId; }
        set { SetDebugEntityId(value); }
      }
      public Builder SetDebugEntityId(ulong value) {
        PrepareBuilder();
        result.hasDebugEntityId = true;
        result.debugEntityId_ = value;
        return this;
      }
      public Builder ClearDebugEntityId() {
        PrepareBuilder();
        result.hasDebugEntityId = false;
        result.debugEntityId_ = 0UL;
        return this;
      }
      
      public bool HasActivePowerId {
        get { return result.hasActivePowerId; }
      }
      public ulong ActivePowerId {
        get { return result.ActivePowerId; }
        set { SetActivePowerId(value); }
      }
      public Builder SetActivePowerId(ulong value) {
        PrepareBuilder();
        result.hasActivePowerId = true;
        result.activePowerId_ = value;
        return this;
      }
      public Builder ClearActivePowerId() {
        PrepareBuilder();
        result.hasActivePowerId = false;
        result.activePowerId_ = 0UL;
        return this;
      }
      
      public bool HasPendingActionState {
        get { return result.hasPendingActionState; }
      }
      public int PendingActionState {
        get { return result.PendingActionState; }
        set { SetPendingActionState(value); }
      }
      public Builder SetPendingActionState(int value) {
        PrepareBuilder();
        result.hasPendingActionState = true;
        result.pendingActionState_ = value;
        return this;
      }
      public Builder ClearPendingActionState() {
        PrepareBuilder();
        result.hasPendingActionState = false;
        result.pendingActionState_ = 0;
        return this;
      }
      
      public bool HasPendingPowerId {
        get { return result.hasPendingPowerId; }
      }
      public ulong PendingPowerId {
        get { return result.PendingPowerId; }
        set { SetPendingPowerId(value); }
      }
      public Builder SetPendingPowerId(ulong value) {
        PrepareBuilder();
        result.hasPendingPowerId = true;
        result.pendingPowerId_ = value;
        return this;
      }
      public Builder ClearPendingPowerId() {
        PrepareBuilder();
        result.hasPendingPowerId = false;
        result.pendingPowerId_ = 0UL;
        return this;
      }
      
      public bool HasPendingTargetId {
        get { return result.hasPendingTargetId; }
      }
      public ulong PendingTargetId {
        get { return result.PendingTargetId; }
        set { SetPendingTargetId(value); }
      }
      public Builder SetPendingTargetId(ulong value) {
        PrepareBuilder();
        result.hasPendingTargetId = true;
        result.pendingTargetId_ = value;
        return this;
      }
      public Builder ClearPendingTargetId() {
        PrepareBuilder();
        result.hasPendingTargetId = false;
        result.pendingTargetId_ = 0UL;
        return this;
      }
      
      public bool HasPendingTargetPosition {
       get { return result.hasPendingTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 PendingTargetPosition {
        get { return result.PendingTargetPosition; }
        set { SetPendingTargetPosition(value); }
      }
      public Builder SetPendingTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPendingTargetPosition = true;
        result.pendingTargetPosition_ = value;
        return this;
      }
      public Builder SetPendingTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPendingTargetPosition = true;
        result.pendingTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePendingTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPendingTargetPosition &&
            result.pendingTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.pendingTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.pendingTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.pendingTargetPosition_ = value;
        }
        result.hasPendingTargetPosition = true;
        return this;
      }
      public Builder ClearPendingTargetPosition() {
        PrepareBuilder();
        result.hasPendingTargetPosition = false;
        result.pendingTargetPosition_ = null;
        return this;
      }
      
      public bool HasContinuousPowerId {
        get { return result.hasContinuousPowerId; }
      }
      public ulong ContinuousPowerId {
        get { return result.ContinuousPowerId; }
        set { SetContinuousPowerId(value); }
      }
      public Builder SetContinuousPowerId(ulong value) {
        PrepareBuilder();
        result.hasContinuousPowerId = true;
        result.continuousPowerId_ = value;
        return this;
      }
      public Builder ClearContinuousPowerId() {
        PrepareBuilder();
        result.hasContinuousPowerId = false;
        result.continuousPowerId_ = 0UL;
        return this;
      }
      
      public bool HasContinuousTargetId {
        get { return result.hasContinuousTargetId; }
      }
      public ulong ContinuousTargetId {
        get { return result.ContinuousTargetId; }
        set { SetContinuousTargetId(value); }
      }
      public Builder SetContinuousTargetId(ulong value) {
        PrepareBuilder();
        result.hasContinuousTargetId = true;
        result.continuousTargetId_ = value;
        return this;
      }
      public Builder ClearContinuousTargetId() {
        PrepareBuilder();
        result.hasContinuousTargetId = false;
        result.continuousTargetId_ = 0UL;
        return this;
      }
      
      public bool HasContinuousTargetPosition {
       get { return result.hasContinuousTargetPosition; }
      }
      public global::Gazillion.NetStructPoint3 ContinuousTargetPosition {
        get { return result.ContinuousTargetPosition; }
        set { SetContinuousTargetPosition(value); }
      }
      public Builder SetContinuousTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContinuousTargetPosition = true;
        result.continuousTargetPosition_ = value;
        return this;
      }
      public Builder SetContinuousTargetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContinuousTargetPosition = true;
        result.continuousTargetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContinuousTargetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContinuousTargetPosition &&
            result.continuousTargetPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.continuousTargetPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.continuousTargetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.continuousTargetPosition_ = value;
        }
        result.hasContinuousTargetPosition = true;
        return this;
      }
      public Builder ClearContinuousTargetPosition() {
        PrepareBuilder();
        result.hasContinuousTargetPosition = false;
        result.continuousTargetPosition_ = null;
        return this;
      }
      
      public bool HasActivePowerLastActivationTime {
        get { return result.hasActivePowerLastActivationTime; }
      }
      public ulong ActivePowerLastActivationTime {
        get { return result.ActivePowerLastActivationTime; }
        set { SetActivePowerLastActivationTime(value); }
      }
      public Builder SetActivePowerLastActivationTime(ulong value) {
        PrepareBuilder();
        result.hasActivePowerLastActivationTime = true;
        result.activePowerLastActivationTime_ = value;
        return this;
      }
      public Builder ClearActivePowerLastActivationTime() {
        PrepareBuilder();
        result.hasActivePowerLastActivationTime = false;
        result.activePowerLastActivationTime_ = 0UL;
        return this;
      }
      
      public bool HasIsInCombat {
        get { return result.hasIsInCombat; }
      }
      public bool IsInCombat {
        get { return result.IsInCombat; }
        set { SetIsInCombat(value); }
      }
      public Builder SetIsInCombat(bool value) {
        PrepareBuilder();
        result.hasIsInCombat = true;
        result.isInCombat_ = value;
        return this;
      }
      public Builder ClearIsInCombat() {
        PrepareBuilder();
        result.hasIsInCombat = false;
        result.isInCombat_ = false;
        return this;
      }
      
      public bool HasServerPowerResultString {
        get { return result.hasServerPowerResultString; }
      }
      public string ServerPowerResultString {
        get { return result.ServerPowerResultString; }
        set { SetServerPowerResultString(value); }
      }
      public Builder SetServerPowerResultString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerPowerResultString = true;
        result.serverPowerResultString_ = value;
        return this;
      }
      public Builder ClearServerPowerResultString() {
        PrepareBuilder();
        result.hasServerPowerResultString = false;
        result.serverPowerResultString_ = "";
        return this;
      }
      
      public bool HasUsingControllerInput {
        get { return result.hasUsingControllerInput; }
      }
      public bool UsingControllerInput {
        get { return result.UsingControllerInput; }
        set { SetUsingControllerInput(value); }
      }
      public Builder SetUsingControllerInput(bool value) {
        PrepareBuilder();
        result.hasUsingControllerInput = true;
        result.usingControllerInput_ = value;
        return this;
      }
      public Builder ClearUsingControllerInput() {
        PrepareBuilder();
        result.hasUsingControllerInput = false;
        result.usingControllerInput_ = false;
        return this;
      }
    }
    static NetMessagePowersDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionDebugUIUpdate : pb::GeneratedMessage<NetMessageMissionDebugUIUpdate, NetMessageMissionDebugUIUpdate.Builder> {
    private NetMessageMissionDebugUIUpdate() { }
    private static readonly NetMessageMissionDebugUIUpdate defaultInstance = new NetMessageMissionDebugUIUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionDebugUIUpdateFieldNames = new string[] { "missionStrings", "resetTimeRemainingSeconds" };
    private static readonly uint[] _netMessageMissionDebugUIUpdateFieldTags = new uint[] { 10, 16 };
    public static NetMessageMissionDebugUIUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionDebugUIUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionDebugUIUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionDebugUIUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionDebugUIUpdate, NetMessageMissionDebugUIUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionDebugUIUpdate__FieldAccessorTable; }
    }
    
    public const int MissionStringsFieldNumber = 1;
    private pbc::PopsicleList<string> missionStrings_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MissionStringsList {
      get { return pbc::Lists.AsReadOnly(missionStrings_); }
    }
    public int MissionStringsCount {
      get { return missionStrings_.Count; }
    }
    public string GetMissionStrings(int index) {
      return missionStrings_[index];
    }
    
    public const int ResetTimeRemainingSecondsFieldNumber = 2;
    private bool hasResetTimeRemainingSeconds;
    private uint resetTimeRemainingSeconds_;
    public bool HasResetTimeRemainingSeconds {
      get { return hasResetTimeRemainingSeconds; }
    }
    public uint ResetTimeRemainingSeconds {
      get { return resetTimeRemainingSeconds_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionDebugUIUpdateFieldNames;
      if (missionStrings_.Count > 0) {
        output.WriteStringArray(1, field_names[0], missionStrings_);
      }
      if (hasResetTimeRemainingSeconds) {
        output.WriteUInt32(2, field_names[1], ResetTimeRemainingSeconds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (string element in MissionStringsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * missionStrings_.Count;
      }
      if (hasResetTimeRemainingSeconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ResetTimeRemainingSeconds);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionDebugUIUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionDebugUIUpdate MakeReadOnly() {
      missionStrings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionDebugUIUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionDebugUIUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionDebugUIUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionDebugUIUpdate result;
      
      private NetMessageMissionDebugUIUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionDebugUIUpdate original = result;
          result = new NetMessageMissionDebugUIUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionDebugUIUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionDebugUIUpdate.Descriptor; }
      }
      
      public override NetMessageMissionDebugUIUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionDebugUIUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionDebugUIUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionDebugUIUpdate) {
          return MergeFrom((NetMessageMissionDebugUIUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionDebugUIUpdate other) {
        if (other == global::Gazillion.NetMessageMissionDebugUIUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.missionStrings_.Count != 0) {
          result.missionStrings_.Add(other.missionStrings_);
        }
        if (other.HasResetTimeRemainingSeconds) {
          ResetTimeRemainingSeconds = other.ResetTimeRemainingSeconds;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionDebugUIUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionDebugUIUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.missionStrings_);
              break;
            }
            case 16: {
              result.hasResetTimeRemainingSeconds = input.ReadUInt32(ref result.resetTimeRemainingSeconds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> MissionStringsList {
        get { return PrepareBuilder().missionStrings_; }
      }
      public int MissionStringsCount {
        get { return result.MissionStringsCount; }
      }
      public string GetMissionStrings(int index) {
        return result.GetMissionStrings(index);
      }
      public Builder SetMissionStrings(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missionStrings_[index] = value;
        return this;
      }
      public Builder AddMissionStrings(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missionStrings_.Add(value);
        return this;
      }
      public Builder AddRangeMissionStrings(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.missionStrings_.Add(values);
        return this;
      }
      public Builder ClearMissionStrings() {
        PrepareBuilder();
        result.missionStrings_.Clear();
        return this;
      }
      
      public bool HasResetTimeRemainingSeconds {
        get { return result.hasResetTimeRemainingSeconds; }
      }
      public uint ResetTimeRemainingSeconds {
        get { return result.ResetTimeRemainingSeconds; }
        set { SetResetTimeRemainingSeconds(value); }
      }
      public Builder SetResetTimeRemainingSeconds(uint value) {
        PrepareBuilder();
        result.hasResetTimeRemainingSeconds = true;
        result.resetTimeRemainingSeconds_ = value;
        return this;
      }
      public Builder ClearResetTimeRemainingSeconds() {
        PrepareBuilder();
        result.hasResetTimeRemainingSeconds = false;
        result.resetTimeRemainingSeconds_ = 0;
        return this;
      }
    }
    static NetMessageMissionDebugUIUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDebugEntityPosition : pb::GeneratedMessage<NetMessageDebugEntityPosition, NetMessageDebugEntityPosition.Builder> {
    private NetMessageDebugEntityPosition() { }
    private static readonly NetMessageDebugEntityPosition defaultInstance = new NetMessageDebugEntityPosition().MakeReadOnly();
    private static readonly string[] _netMessageDebugEntityPositionFieldNames = new string[] { "entityId", "position" };
    private static readonly uint[] _netMessageDebugEntityPositionFieldTags = new uint[] { 8, 18 };
    public static NetMessageDebugEntityPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDebugEntityPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDebugEntityPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugEntityPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDebugEntityPosition, NetMessageDebugEntityPosition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDebugEntityPosition__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::Gazillion.NetStructPoint3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Gazillion.NetStructPoint3 Position {
      get { return position_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDebugEntityPositionFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[1], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDebugEntityPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDebugEntityPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDebugEntityPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDebugEntityPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDebugEntityPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDebugEntityPosition result;
      
      private NetMessageDebugEntityPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDebugEntityPosition original = result;
          result = new NetMessageDebugEntityPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDebugEntityPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDebugEntityPosition.Descriptor; }
      }
      
      public override NetMessageDebugEntityPosition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDebugEntityPosition.DefaultInstance; }
      }
      
      public override NetMessageDebugEntityPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDebugEntityPosition) {
          return MergeFrom((NetMessageDebugEntityPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDebugEntityPosition other) {
        if (other == global::Gazillion.NetMessageDebugEntityPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDebugEntityPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDebugEntityPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Gazillion.NetStructPoint3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.position_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static NetMessageDebugEntityPosition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageServerFrameProfile : pb::GeneratedMessage<NetMessageServerFrameProfile, NetMessageServerFrameProfile.Builder> {
    private NetMessageServerFrameProfile() { }
    private static readonly NetMessageServerFrameProfile defaultInstance = new NetMessageServerFrameProfile().MakeReadOnly();
    private static readonly string[] _netMessageServerFrameProfileFieldNames = new string[] { "frameTime", "processingTime" };
    private static readonly uint[] _netMessageServerFrameProfileFieldTags = new uint[] { 16, 8 };
    public static NetMessageServerFrameProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageServerFrameProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageServerFrameProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerFrameProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageServerFrameProfile, NetMessageServerFrameProfile.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerFrameProfile__FieldAccessorTable; }
    }
    
    public const int ProcessingTimeFieldNumber = 1;
    private bool hasProcessingTime;
    private uint processingTime_;
    public bool HasProcessingTime {
      get { return hasProcessingTime; }
    }
    public uint ProcessingTime {
      get { return processingTime_; }
    }
    
    public const int FrameTimeFieldNumber = 2;
    private bool hasFrameTime;
    private uint frameTime_;
    public bool HasFrameTime {
      get { return hasFrameTime; }
    }
    public uint FrameTime {
      get { return frameTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProcessingTime) return false;
        if (!hasFrameTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageServerFrameProfileFieldNames;
      if (hasProcessingTime) {
        output.WriteUInt32(1, field_names[1], ProcessingTime);
      }
      if (hasFrameTime) {
        output.WriteUInt32(2, field_names[0], FrameTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProcessingTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ProcessingTime);
      }
      if (hasFrameTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, FrameTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageServerFrameProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerFrameProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageServerFrameProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageServerFrameProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageServerFrameProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageServerFrameProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageServerFrameProfile result;
      
      private NetMessageServerFrameProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageServerFrameProfile original = result;
          result = new NetMessageServerFrameProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageServerFrameProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageServerFrameProfile.Descriptor; }
      }
      
      public override NetMessageServerFrameProfile DefaultInstanceForType {
        get { return global::Gazillion.NetMessageServerFrameProfile.DefaultInstance; }
      }
      
      public override NetMessageServerFrameProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageServerFrameProfile) {
          return MergeFrom((NetMessageServerFrameProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageServerFrameProfile other) {
        if (other == global::Gazillion.NetMessageServerFrameProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProcessingTime) {
          ProcessingTime = other.ProcessingTime;
        }
        if (other.HasFrameTime) {
          FrameTime = other.FrameTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageServerFrameProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageServerFrameProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProcessingTime = input.ReadUInt32(ref result.processingTime_);
              break;
            }
            case 16: {
              result.hasFrameTime = input.ReadUInt32(ref result.frameTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProcessingTime {
        get { return result.hasProcessingTime; }
      }
      public uint ProcessingTime {
        get { return result.ProcessingTime; }
        set { SetProcessingTime(value); }
      }
      public Builder SetProcessingTime(uint value) {
        PrepareBuilder();
        result.hasProcessingTime = true;
        result.processingTime_ = value;
        return this;
      }
      public Builder ClearProcessingTime() {
        PrepareBuilder();
        result.hasProcessingTime = false;
        result.processingTime_ = 0;
        return this;
      }
      
      public bool HasFrameTime {
        get { return result.hasFrameTime; }
      }
      public uint FrameTime {
        get { return result.FrameTime; }
        set { SetFrameTime(value); }
      }
      public Builder SetFrameTime(uint value) {
        PrepareBuilder();
        result.hasFrameTime = true;
        result.frameTime_ = value;
        return this;
      }
      public Builder ClearFrameTime() {
        PrepareBuilder();
        result.hasFrameTime = false;
        result.frameTime_ = 0;
        return this;
      }
    }
    static NetMessageServerFrameProfile() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePingResponse : pb::GeneratedMessage<NetMessagePingResponse, NetMessagePingResponse.Builder> {
    private NetMessagePingResponse() { }
    private static readonly NetMessagePingResponse defaultInstance = new NetMessagePingResponse().MakeReadOnly();
    private static readonly string[] _netMessagePingResponseFieldNames = new string[] { "displayOutput", "frontendname", "gameservername", "requestNetReceivedGameTime", "requestSentClientTime", "requestSentGameTime", "responseLatencyBufferReceiveClientTime", "responseNetReceiveClientTime", "responseNetReceiveGameTime", "responseSendTime", "serverTickforecast" };
    private static readonly uint[] _netMessagePingResponseFieldTags = new uint[] { 8, 90, 82, 32, 16, 24, 72, 48, 56, 40, 64 };
    public static NetMessagePingResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePingResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePingResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePingResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePingResponse, NetMessagePingResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePingResponse__FieldAccessorTable; }
    }
    
    public const int DisplayOutputFieldNumber = 1;
    private bool hasDisplayOutput;
    private bool displayOutput_;
    public bool HasDisplayOutput {
      get { return hasDisplayOutput; }
    }
    public bool DisplayOutput {
      get { return displayOutput_; }
    }
    
    public const int RequestSentClientTimeFieldNumber = 2;
    private bool hasRequestSentClientTime;
    private ulong requestSentClientTime_;
    public bool HasRequestSentClientTime {
      get { return hasRequestSentClientTime; }
    }
    public ulong RequestSentClientTime {
      get { return requestSentClientTime_; }
    }
    
    public const int RequestSentGameTimeFieldNumber = 3;
    private bool hasRequestSentGameTime;
    private ulong requestSentGameTime_;
    public bool HasRequestSentGameTime {
      get { return hasRequestSentGameTime; }
    }
    public ulong RequestSentGameTime {
      get { return requestSentGameTime_; }
    }
    
    public const int RequestNetReceivedGameTimeFieldNumber = 4;
    private bool hasRequestNetReceivedGameTime;
    private ulong requestNetReceivedGameTime_;
    public bool HasRequestNetReceivedGameTime {
      get { return hasRequestNetReceivedGameTime; }
    }
    public ulong RequestNetReceivedGameTime {
      get { return requestNetReceivedGameTime_; }
    }
    
    public const int ResponseSendTimeFieldNumber = 5;
    private bool hasResponseSendTime;
    private ulong responseSendTime_;
    public bool HasResponseSendTime {
      get { return hasResponseSendTime; }
    }
    public ulong ResponseSendTime {
      get { return responseSendTime_; }
    }
    
    public const int ResponseNetReceiveClientTimeFieldNumber = 6;
    private bool hasResponseNetReceiveClientTime;
    private ulong responseNetReceiveClientTime_;
    public bool HasResponseNetReceiveClientTime {
      get { return hasResponseNetReceiveClientTime; }
    }
    public ulong ResponseNetReceiveClientTime {
      get { return responseNetReceiveClientTime_; }
    }
    
    public const int ResponseNetReceiveGameTimeFieldNumber = 7;
    private bool hasResponseNetReceiveGameTime;
    private ulong responseNetReceiveGameTime_;
    public bool HasResponseNetReceiveGameTime {
      get { return hasResponseNetReceiveGameTime; }
    }
    public ulong ResponseNetReceiveGameTime {
      get { return responseNetReceiveGameTime_; }
    }
    
    public const int ServerTickforecastFieldNumber = 8;
    private bool hasServerTickforecast;
    private ulong serverTickforecast_;
    public bool HasServerTickforecast {
      get { return hasServerTickforecast; }
    }
    public ulong ServerTickforecast {
      get { return serverTickforecast_; }
    }
    
    public const int ResponseLatencyBufferReceiveClientTimeFieldNumber = 9;
    private bool hasResponseLatencyBufferReceiveClientTime;
    private ulong responseLatencyBufferReceiveClientTime_;
    public bool HasResponseLatencyBufferReceiveClientTime {
      get { return hasResponseLatencyBufferReceiveClientTime; }
    }
    public ulong ResponseLatencyBufferReceiveClientTime {
      get { return responseLatencyBufferReceiveClientTime_; }
    }
    
    public const int GameservernameFieldNumber = 10;
    private bool hasGameservername;
    private string gameservername_ = "";
    public bool HasGameservername {
      get { return hasGameservername; }
    }
    public string Gameservername {
      get { return gameservername_; }
    }
    
    public const int FrontendnameFieldNumber = 11;
    private bool hasFrontendname;
    private string frontendname_ = "";
    public bool HasFrontendname {
      get { return hasFrontendname; }
    }
    public string Frontendname {
      get { return frontendname_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayOutput) return false;
        if (!hasRequestSentClientTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePingResponseFieldNames;
      if (hasDisplayOutput) {
        output.WriteBool(1, field_names[0], DisplayOutput);
      }
      if (hasRequestSentClientTime) {
        output.WriteUInt64(2, field_names[4], RequestSentClientTime);
      }
      if (hasRequestSentGameTime) {
        output.WriteUInt64(3, field_names[5], RequestSentGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        output.WriteUInt64(4, field_names[3], RequestNetReceivedGameTime);
      }
      if (hasResponseSendTime) {
        output.WriteUInt64(5, field_names[9], ResponseSendTime);
      }
      if (hasResponseNetReceiveClientTime) {
        output.WriteUInt64(6, field_names[7], ResponseNetReceiveClientTime);
      }
      if (hasResponseNetReceiveGameTime) {
        output.WriteUInt64(7, field_names[8], ResponseNetReceiveGameTime);
      }
      if (hasServerTickforecast) {
        output.WriteUInt64(8, field_names[10], ServerTickforecast);
      }
      if (hasResponseLatencyBufferReceiveClientTime) {
        output.WriteUInt64(9, field_names[6], ResponseLatencyBufferReceiveClientTime);
      }
      if (hasGameservername) {
        output.WriteString(10, field_names[2], Gameservername);
      }
      if (hasFrontendname) {
        output.WriteString(11, field_names[1], Frontendname);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayOutput) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DisplayOutput);
      }
      if (hasRequestSentClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RequestSentClientTime);
      }
      if (hasRequestSentGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RequestSentGameTime);
      }
      if (hasRequestNetReceivedGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, RequestNetReceivedGameTime);
      }
      if (hasResponseSendTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, ResponseSendTime);
      }
      if (hasResponseNetReceiveClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, ResponseNetReceiveClientTime);
      }
      if (hasResponseNetReceiveGameTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, ResponseNetReceiveGameTime);
      }
      if (hasServerTickforecast) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, ServerTickforecast);
      }
      if (hasResponseLatencyBufferReceiveClientTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, ResponseLatencyBufferReceiveClientTime);
      }
      if (hasGameservername) {
        size += pb::CodedOutputStream.ComputeStringSize(10, Gameservername);
      }
      if (hasFrontendname) {
        size += pb::CodedOutputStream.ComputeStringSize(11, Frontendname);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePingResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePingResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePingResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePingResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePingResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePingResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePingResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePingResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePingResponse result;
      
      private NetMessagePingResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePingResponse original = result;
          result = new NetMessagePingResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePingResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePingResponse.Descriptor; }
      }
      
      public override NetMessagePingResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePingResponse.DefaultInstance; }
      }
      
      public override NetMessagePingResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePingResponse) {
          return MergeFrom((NetMessagePingResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePingResponse other) {
        if (other == global::Gazillion.NetMessagePingResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayOutput) {
          DisplayOutput = other.DisplayOutput;
        }
        if (other.HasRequestSentClientTime) {
          RequestSentClientTime = other.RequestSentClientTime;
        }
        if (other.HasRequestSentGameTime) {
          RequestSentGameTime = other.RequestSentGameTime;
        }
        if (other.HasRequestNetReceivedGameTime) {
          RequestNetReceivedGameTime = other.RequestNetReceivedGameTime;
        }
        if (other.HasResponseSendTime) {
          ResponseSendTime = other.ResponseSendTime;
        }
        if (other.HasResponseNetReceiveClientTime) {
          ResponseNetReceiveClientTime = other.ResponseNetReceiveClientTime;
        }
        if (other.HasResponseNetReceiveGameTime) {
          ResponseNetReceiveGameTime = other.ResponseNetReceiveGameTime;
        }
        if (other.HasServerTickforecast) {
          ServerTickforecast = other.ServerTickforecast;
        }
        if (other.HasResponseLatencyBufferReceiveClientTime) {
          ResponseLatencyBufferReceiveClientTime = other.ResponseLatencyBufferReceiveClientTime;
        }
        if (other.HasGameservername) {
          Gameservername = other.Gameservername;
        }
        if (other.HasFrontendname) {
          Frontendname = other.Frontendname;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePingResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePingResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayOutput = input.ReadBool(ref result.displayOutput_);
              break;
            }
            case 16: {
              result.hasRequestSentClientTime = input.ReadUInt64(ref result.requestSentClientTime_);
              break;
            }
            case 24: {
              result.hasRequestSentGameTime = input.ReadUInt64(ref result.requestSentGameTime_);
              break;
            }
            case 32: {
              result.hasRequestNetReceivedGameTime = input.ReadUInt64(ref result.requestNetReceivedGameTime_);
              break;
            }
            case 40: {
              result.hasResponseSendTime = input.ReadUInt64(ref result.responseSendTime_);
              break;
            }
            case 48: {
              result.hasResponseNetReceiveClientTime = input.ReadUInt64(ref result.responseNetReceiveClientTime_);
              break;
            }
            case 56: {
              result.hasResponseNetReceiveGameTime = input.ReadUInt64(ref result.responseNetReceiveGameTime_);
              break;
            }
            case 64: {
              result.hasServerTickforecast = input.ReadUInt64(ref result.serverTickforecast_);
              break;
            }
            case 72: {
              result.hasResponseLatencyBufferReceiveClientTime = input.ReadUInt64(ref result.responseLatencyBufferReceiveClientTime_);
              break;
            }
            case 82: {
              result.hasGameservername = input.ReadString(ref result.gameservername_);
              break;
            }
            case 90: {
              result.hasFrontendname = input.ReadString(ref result.frontendname_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayOutput {
        get { return result.hasDisplayOutput; }
      }
      public bool DisplayOutput {
        get { return result.DisplayOutput; }
        set { SetDisplayOutput(value); }
      }
      public Builder SetDisplayOutput(bool value) {
        PrepareBuilder();
        result.hasDisplayOutput = true;
        result.displayOutput_ = value;
        return this;
      }
      public Builder ClearDisplayOutput() {
        PrepareBuilder();
        result.hasDisplayOutput = false;
        result.displayOutput_ = false;
        return this;
      }
      
      public bool HasRequestSentClientTime {
        get { return result.hasRequestSentClientTime; }
      }
      public ulong RequestSentClientTime {
        get { return result.RequestSentClientTime; }
        set { SetRequestSentClientTime(value); }
      }
      public Builder SetRequestSentClientTime(ulong value) {
        PrepareBuilder();
        result.hasRequestSentClientTime = true;
        result.requestSentClientTime_ = value;
        return this;
      }
      public Builder ClearRequestSentClientTime() {
        PrepareBuilder();
        result.hasRequestSentClientTime = false;
        result.requestSentClientTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestSentGameTime {
        get { return result.hasRequestSentGameTime; }
      }
      public ulong RequestSentGameTime {
        get { return result.RequestSentGameTime; }
        set { SetRequestSentGameTime(value); }
      }
      public Builder SetRequestSentGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestSentGameTime = true;
        result.requestSentGameTime_ = value;
        return this;
      }
      public Builder ClearRequestSentGameTime() {
        PrepareBuilder();
        result.hasRequestSentGameTime = false;
        result.requestSentGameTime_ = 0UL;
        return this;
      }
      
      public bool HasRequestNetReceivedGameTime {
        get { return result.hasRequestNetReceivedGameTime; }
      }
      public ulong RequestNetReceivedGameTime {
        get { return result.RequestNetReceivedGameTime; }
        set { SetRequestNetReceivedGameTime(value); }
      }
      public Builder SetRequestNetReceivedGameTime(ulong value) {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = true;
        result.requestNetReceivedGameTime_ = value;
        return this;
      }
      public Builder ClearRequestNetReceivedGameTime() {
        PrepareBuilder();
        result.hasRequestNetReceivedGameTime = false;
        result.requestNetReceivedGameTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseSendTime {
        get { return result.hasResponseSendTime; }
      }
      public ulong ResponseSendTime {
        get { return result.ResponseSendTime; }
        set { SetResponseSendTime(value); }
      }
      public Builder SetResponseSendTime(ulong value) {
        PrepareBuilder();
        result.hasResponseSendTime = true;
        result.responseSendTime_ = value;
        return this;
      }
      public Builder ClearResponseSendTime() {
        PrepareBuilder();
        result.hasResponseSendTime = false;
        result.responseSendTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseNetReceiveClientTime {
        get { return result.hasResponseNetReceiveClientTime; }
      }
      public ulong ResponseNetReceiveClientTime {
        get { return result.ResponseNetReceiveClientTime; }
        set { SetResponseNetReceiveClientTime(value); }
      }
      public Builder SetResponseNetReceiveClientTime(ulong value) {
        PrepareBuilder();
        result.hasResponseNetReceiveClientTime = true;
        result.responseNetReceiveClientTime_ = value;
        return this;
      }
      public Builder ClearResponseNetReceiveClientTime() {
        PrepareBuilder();
        result.hasResponseNetReceiveClientTime = false;
        result.responseNetReceiveClientTime_ = 0UL;
        return this;
      }
      
      public bool HasResponseNetReceiveGameTime {
        get { return result.hasResponseNetReceiveGameTime; }
      }
      public ulong ResponseNetReceiveGameTime {
        get { return result.ResponseNetReceiveGameTime; }
        set { SetResponseNetReceiveGameTime(value); }
      }
      public Builder SetResponseNetReceiveGameTime(ulong value) {
        PrepareBuilder();
        result.hasResponseNetReceiveGameTime = true;
        result.responseNetReceiveGameTime_ = value;
        return this;
      }
      public Builder ClearResponseNetReceiveGameTime() {
        PrepareBuilder();
        result.hasResponseNetReceiveGameTime = false;
        result.responseNetReceiveGameTime_ = 0UL;
        return this;
      }
      
      public bool HasServerTickforecast {
        get { return result.hasServerTickforecast; }
      }
      public ulong ServerTickforecast {
        get { return result.ServerTickforecast; }
        set { SetServerTickforecast(value); }
      }
      public Builder SetServerTickforecast(ulong value) {
        PrepareBuilder();
        result.hasServerTickforecast = true;
        result.serverTickforecast_ = value;
        return this;
      }
      public Builder ClearServerTickforecast() {
        PrepareBuilder();
        result.hasServerTickforecast = false;
        result.serverTickforecast_ = 0UL;
        return this;
      }
      
      public bool HasResponseLatencyBufferReceiveClientTime {
        get { return result.hasResponseLatencyBufferReceiveClientTime; }
      }
      public ulong ResponseLatencyBufferReceiveClientTime {
        get { return result.ResponseLatencyBufferReceiveClientTime; }
        set { SetResponseLatencyBufferReceiveClientTime(value); }
      }
      public Builder SetResponseLatencyBufferReceiveClientTime(ulong value) {
        PrepareBuilder();
        result.hasResponseLatencyBufferReceiveClientTime = true;
        result.responseLatencyBufferReceiveClientTime_ = value;
        return this;
      }
      public Builder ClearResponseLatencyBufferReceiveClientTime() {
        PrepareBuilder();
        result.hasResponseLatencyBufferReceiveClientTime = false;
        result.responseLatencyBufferReceiveClientTime_ = 0UL;
        return this;
      }
      
      public bool HasGameservername {
        get { return result.hasGameservername; }
      }
      public string Gameservername {
        get { return result.Gameservername; }
        set { SetGameservername(value); }
      }
      public Builder SetGameservername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameservername = true;
        result.gameservername_ = value;
        return this;
      }
      public Builder ClearGameservername() {
        PrepareBuilder();
        result.hasGameservername = false;
        result.gameservername_ = "";
        return this;
      }
      
      public bool HasFrontendname {
        get { return result.hasFrontendname; }
      }
      public string Frontendname {
        get { return result.Frontendname; }
        set { SetFrontendname(value); }
      }
      public Builder SetFrontendname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrontendname = true;
        result.frontendname_ = value;
        return this;
      }
      public Builder ClearFrontendname() {
        PrepareBuilder();
        result.hasFrontendname = false;
        result.frontendname_ = "";
        return this;
      }
    }
    static NetMessagePingResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityEnterGameWorld : pb::GeneratedMessage<NetMessageEntityEnterGameWorld, NetMessageEntityEnterGameWorld.Builder> {
    private NetMessageEntityEnterGameWorld() { }
    private static readonly NetMessageEntityEnterGameWorld defaultInstance = new NetMessageEntityEnterGameWorld().MakeReadOnly();
    private static readonly string[] _netMessageEntityEnterGameWorldFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageEntityEnterGameWorldFieldTags = new uint[] { 10 };
    public static NetMessageEntityEnterGameWorld DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityEnterGameWorld DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityEnterGameWorld ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityEnterGameWorld__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityEnterGameWorld, NetMessageEntityEnterGameWorld.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityEnterGameWorld__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityEnterGameWorldFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityEnterGameWorld ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityEnterGameWorld MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityEnterGameWorld prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityEnterGameWorld, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityEnterGameWorld cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityEnterGameWorld result;
      
      private NetMessageEntityEnterGameWorld PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityEnterGameWorld original = result;
          result = new NetMessageEntityEnterGameWorld();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityEnterGameWorld MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityEnterGameWorld.Descriptor; }
      }
      
      public override NetMessageEntityEnterGameWorld DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityEnterGameWorld.DefaultInstance; }
      }
      
      public override NetMessageEntityEnterGameWorld BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityEnterGameWorld) {
          return MergeFrom((NetMessageEntityEnterGameWorld) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityEnterGameWorld other) {
        if (other == global::Gazillion.NetMessageEntityEnterGameWorld.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityEnterGameWorldFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityEnterGameWorldFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageEntityEnterGameWorld() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeleportAckRequest : pb::GeneratedMessage<NetMessageTeleportAckRequest, NetMessageTeleportAckRequest.Builder> {
    private NetMessageTeleportAckRequest() { }
    private static readonly NetMessageTeleportAckRequest defaultInstance = new NetMessageTeleportAckRequest().MakeReadOnly();
    private static readonly string[] _netMessageTeleportAckRequestFieldNames = new string[] { "ackseq" };
    private static readonly uint[] _netMessageTeleportAckRequestFieldTags = new uint[] { 8 };
    public static NetMessageTeleportAckRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeleportAckRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeleportAckRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeleportAckRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeleportAckRequest, NetMessageTeleportAckRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeleportAckRequest__FieldAccessorTable; }
    }
    
    public const int AckseqFieldNumber = 1;
    private bool hasAckseq;
    private uint ackseq_;
    public bool HasAckseq {
      get { return hasAckseq; }
    }
    public uint Ackseq {
      get { return ackseq_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAckseq) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeleportAckRequestFieldNames;
      if (hasAckseq) {
        output.WriteUInt32(1, field_names[0], Ackseq);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAckseq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Ackseq);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeleportAckRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeleportAckRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeleportAckRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeleportAckRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeleportAckRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeleportAckRequest result;
      
      private NetMessageTeleportAckRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeleportAckRequest original = result;
          result = new NetMessageTeleportAckRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeleportAckRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeleportAckRequest.Descriptor; }
      }
      
      public override NetMessageTeleportAckRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeleportAckRequest.DefaultInstance; }
      }
      
      public override NetMessageTeleportAckRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeleportAckRequest) {
          return MergeFrom((NetMessageTeleportAckRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeleportAckRequest other) {
        if (other == global::Gazillion.NetMessageTeleportAckRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAckseq) {
          Ackseq = other.Ackseq;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeleportAckRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeleportAckRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAckseq = input.ReadUInt32(ref result.ackseq_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAckseq {
        get { return result.hasAckseq; }
      }
      public uint Ackseq {
        get { return result.Ackseq; }
        set { SetAckseq(value); }
      }
      public Builder SetAckseq(uint value) {
        PrepareBuilder();
        result.hasAckseq = true;
        result.ackseq_ = value;
        return this;
      }
      public Builder ClearAckseq() {
        PrepareBuilder();
        result.hasAckseq = false;
        result.ackseq_ = 0;
        return this;
      }
    }
    static NetMessageTeleportAckRequest() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageServerVersion : pb::GeneratedMessage<NetMessageServerVersion, NetMessageServerVersion.Builder> {
    private NetMessageServerVersion() { }
    private static readonly NetMessageServerVersion defaultInstance = new NetMessageServerVersion().MakeReadOnly();
    private static readonly string[] _netMessageServerVersionFieldNames = new string[] { "version" };
    private static readonly uint[] _netMessageServerVersionFieldTags = new uint[] { 10 };
    public static NetMessageServerVersion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageServerVersion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageServerVersion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerVersion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageServerVersion, NetMessageServerVersion.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageServerVersion__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private string version_ = "";
    public bool HasVersion {
      get { return hasVersion; }
    }
    public string Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageServerVersionFieldNames;
      if (hasVersion) {
        output.WriteString(1, field_names[0], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Version);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageServerVersion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageServerVersion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageServerVersion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageServerVersion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageServerVersion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageServerVersion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageServerVersion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageServerVersion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageServerVersion result;
      
      private NetMessageServerVersion PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageServerVersion original = result;
          result = new NetMessageServerVersion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageServerVersion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageServerVersion.Descriptor; }
      }
      
      public override NetMessageServerVersion DefaultInstanceForType {
        get { return global::Gazillion.NetMessageServerVersion.DefaultInstance; }
      }
      
      public override NetMessageServerVersion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageServerVersion) {
          return MergeFrom((NetMessageServerVersion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageServerVersion other) {
        if (other == global::Gazillion.NetMessageServerVersion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageServerVersionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageServerVersionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasVersion = input.ReadString(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public string Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = "";
        return this;
      }
    }
    static NetMessageServerVersion() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructAgentSpec : pb::GeneratedMessage<NetStructAgentSpec, NetStructAgentSpec.Builder> {
    private NetStructAgentSpec() { }
    private static readonly NetStructAgentSpec defaultInstance = new NetStructAgentSpec().MakeReadOnly();
    private static readonly string[] _netStructAgentSpecFieldNames = new string[] { "agentLevel", "agentProtoRef", "creditsAmount" };
    private static readonly uint[] _netStructAgentSpecFieldTags = new uint[] { 16, 8, 24 };
    public static NetStructAgentSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructAgentSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructAgentSpec ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAgentSpec__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructAgentSpec, NetStructAgentSpec.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructAgentSpec__FieldAccessorTable; }
    }
    
    public const int AgentProtoRefFieldNumber = 1;
    private bool hasAgentProtoRef;
    private ulong agentProtoRef_;
    public bool HasAgentProtoRef {
      get { return hasAgentProtoRef; }
    }
    public ulong AgentProtoRef {
      get { return agentProtoRef_; }
    }
    
    public const int AgentLevelFieldNumber = 2;
    private bool hasAgentLevel;
    private uint agentLevel_;
    public bool HasAgentLevel {
      get { return hasAgentLevel; }
    }
    public uint AgentLevel {
      get { return agentLevel_; }
    }
    
    public const int CreditsAmountFieldNumber = 3;
    private bool hasCreditsAmount;
    private uint creditsAmount_;
    public bool HasCreditsAmount {
      get { return hasCreditsAmount; }
    }
    public uint CreditsAmount {
      get { return creditsAmount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAgentProtoRef) return false;
        if (!hasAgentLevel) return false;
        if (!hasCreditsAmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructAgentSpecFieldNames;
      if (hasAgentProtoRef) {
        output.WriteUInt64(1, field_names[1], AgentProtoRef);
      }
      if (hasAgentLevel) {
        output.WriteUInt32(2, field_names[0], AgentLevel);
      }
      if (hasCreditsAmount) {
        output.WriteUInt32(3, field_names[2], CreditsAmount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AgentProtoRef);
      }
      if (hasAgentLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, AgentLevel);
      }
      if (hasCreditsAmount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CreditsAmount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructAgentSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructAgentSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructAgentSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructAgentSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructAgentSpec MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructAgentSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructAgentSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructAgentSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructAgentSpec result;
      
      private NetStructAgentSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructAgentSpec original = result;
          result = new NetStructAgentSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructAgentSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructAgentSpec.Descriptor; }
      }
      
      public override NetStructAgentSpec DefaultInstanceForType {
        get { return global::Gazillion.NetStructAgentSpec.DefaultInstance; }
      }
      
      public override NetStructAgentSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructAgentSpec) {
          return MergeFrom((NetStructAgentSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructAgentSpec other) {
        if (other == global::Gazillion.NetStructAgentSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentProtoRef) {
          AgentProtoRef = other.AgentProtoRef;
        }
        if (other.HasAgentLevel) {
          AgentLevel = other.AgentLevel;
        }
        if (other.HasCreditsAmount) {
          CreditsAmount = other.CreditsAmount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructAgentSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructAgentSpecFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAgentProtoRef = input.ReadUInt64(ref result.agentProtoRef_);
              break;
            }
            case 16: {
              result.hasAgentLevel = input.ReadUInt32(ref result.agentLevel_);
              break;
            }
            case 24: {
              result.hasCreditsAmount = input.ReadUInt32(ref result.creditsAmount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentProtoRef {
        get { return result.hasAgentProtoRef; }
      }
      public ulong AgentProtoRef {
        get { return result.AgentProtoRef; }
        set { SetAgentProtoRef(value); }
      }
      public Builder SetAgentProtoRef(ulong value) {
        PrepareBuilder();
        result.hasAgentProtoRef = true;
        result.agentProtoRef_ = value;
        return this;
      }
      public Builder ClearAgentProtoRef() {
        PrepareBuilder();
        result.hasAgentProtoRef = false;
        result.agentProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasAgentLevel {
        get { return result.hasAgentLevel; }
      }
      public uint AgentLevel {
        get { return result.AgentLevel; }
        set { SetAgentLevel(value); }
      }
      public Builder SetAgentLevel(uint value) {
        PrepareBuilder();
        result.hasAgentLevel = true;
        result.agentLevel_ = value;
        return this;
      }
      public Builder ClearAgentLevel() {
        PrepareBuilder();
        result.hasAgentLevel = false;
        result.agentLevel_ = 0;
        return this;
      }
      
      public bool HasCreditsAmount {
        get { return result.hasCreditsAmount; }
      }
      public uint CreditsAmount {
        get { return result.CreditsAmount; }
        set { SetCreditsAmount(value); }
      }
      public Builder SetCreditsAmount(uint value) {
        PrepareBuilder();
        result.hasCreditsAmount = true;
        result.creditsAmount_ = value;
        return this;
      }
      public Builder ClearCreditsAmount() {
        PrepareBuilder();
        result.hasCreditsAmount = false;
        result.creditsAmount_ = 0;
        return this;
      }
    }
    static NetStructAgentSpec() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructVendorXPSummary : pb::GeneratedMessage<NetStructVendorXPSummary, NetStructVendorXPSummary.Builder> {
    private NetStructVendorXPSummary() { }
    private static readonly NetStructVendorXPSummary defaultInstance = new NetStructVendorXPSummary().MakeReadOnly();
    private static readonly string[] _netStructVendorXPSummaryFieldNames = new string[] { "vendorProtoRef", "xpAmount" };
    private static readonly uint[] _netStructVendorXPSummaryFieldTags = new uint[] { 8, 16 };
    public static NetStructVendorXPSummary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructVendorXPSummary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructVendorXPSummary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructVendorXPSummary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructVendorXPSummary, NetStructVendorXPSummary.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructVendorXPSummary__FieldAccessorTable; }
    }
    
    public const int VendorProtoRefFieldNumber = 1;
    private bool hasVendorProtoRef;
    private ulong vendorProtoRef_;
    public bool HasVendorProtoRef {
      get { return hasVendorProtoRef; }
    }
    public ulong VendorProtoRef {
      get { return vendorProtoRef_; }
    }
    
    public const int XpAmountFieldNumber = 2;
    private bool hasXpAmount;
    private uint xpAmount_;
    public bool HasXpAmount {
      get { return hasXpAmount; }
    }
    public uint XpAmount {
      get { return xpAmount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorProtoRef) return false;
        if (!hasXpAmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructVendorXPSummaryFieldNames;
      if (hasVendorProtoRef) {
        output.WriteUInt64(1, field_names[0], VendorProtoRef);
      }
      if (hasXpAmount) {
        output.WriteUInt32(2, field_names[1], XpAmount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorProtoRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorProtoRef);
      }
      if (hasXpAmount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, XpAmount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructVendorXPSummary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructVendorXPSummary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructVendorXPSummary MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructVendorXPSummary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructVendorXPSummary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructVendorXPSummary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructVendorXPSummary result;
      
      private NetStructVendorXPSummary PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructVendorXPSummary original = result;
          result = new NetStructVendorXPSummary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructVendorXPSummary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructVendorXPSummary.Descriptor; }
      }
      
      public override NetStructVendorXPSummary DefaultInstanceForType {
        get { return global::Gazillion.NetStructVendorXPSummary.DefaultInstance; }
      }
      
      public override NetStructVendorXPSummary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructVendorXPSummary) {
          return MergeFrom((NetStructVendorXPSummary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructVendorXPSummary other) {
        if (other == global::Gazillion.NetStructVendorXPSummary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorProtoRef) {
          VendorProtoRef = other.VendorProtoRef;
        }
        if (other.HasXpAmount) {
          XpAmount = other.XpAmount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructVendorXPSummaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructVendorXPSummaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorProtoRef = input.ReadUInt64(ref result.vendorProtoRef_);
              break;
            }
            case 16: {
              result.hasXpAmount = input.ReadUInt32(ref result.xpAmount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorProtoRef {
        get { return result.hasVendorProtoRef; }
      }
      public ulong VendorProtoRef {
        get { return result.VendorProtoRef; }
        set { SetVendorProtoRef(value); }
      }
      public Builder SetVendorProtoRef(ulong value) {
        PrepareBuilder();
        result.hasVendorProtoRef = true;
        result.vendorProtoRef_ = value;
        return this;
      }
      public Builder ClearVendorProtoRef() {
        PrepareBuilder();
        result.hasVendorProtoRef = false;
        result.vendorProtoRef_ = 0UL;
        return this;
      }
      
      public bool HasXpAmount {
        get { return result.hasXpAmount; }
      }
      public uint XpAmount {
        get { return result.XpAmount; }
        set { SetXpAmount(value); }
      }
      public Builder SetXpAmount(uint value) {
        PrepareBuilder();
        result.hasXpAmount = true;
        result.xpAmount_ = value;
        return this;
      }
      public Builder ClearXpAmount() {
        PrepareBuilder();
        result.hasXpAmount = false;
        result.xpAmount_ = 0;
        return this;
      }
    }
    static NetStructVendorXPSummary() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructItemSpecStack : pb::GeneratedMessage<NetStructItemSpecStack, NetStructItemSpecStack.Builder> {
    private NetStructItemSpecStack() { }
    private static readonly NetStructItemSpecStack defaultInstance = new NetStructItemSpecStack().MakeReadOnly();
    private static readonly string[] _netStructItemSpecStackFieldNames = new string[] { "count", "spec" };
    private static readonly uint[] _netStructItemSpecStackFieldTags = new uint[] { 8, 18 };
    public static NetStructItemSpecStack DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructItemSpecStack DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructItemSpecStack ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpecStack__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructItemSpecStack, NetStructItemSpecStack.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructItemSpecStack__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private uint count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public uint Count {
      get { return count_; }
    }
    
    public const int SpecFieldNumber = 2;
    private bool hasSpec;
    private global::Gazillion.NetStructItemSpec spec_;
    public bool HasSpec {
      get { return hasSpec; }
    }
    public global::Gazillion.NetStructItemSpec Spec {
      get { return spec_ ?? global::Gazillion.NetStructItemSpec.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        if (!hasSpec) return false;
        if (!Spec.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructItemSpecStackFieldNames;
      if (hasCount) {
        output.WriteUInt32(1, field_names[0], Count);
      }
      if (hasSpec) {
        output.WriteMessage(2, field_names[1], Spec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Count);
      }
      if (hasSpec) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Spec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructItemSpecStack ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructItemSpecStack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructItemSpecStack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructItemSpecStack MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructItemSpecStack prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructItemSpecStack, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructItemSpecStack cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructItemSpecStack result;
      
      private NetStructItemSpecStack PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructItemSpecStack original = result;
          result = new NetStructItemSpecStack();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructItemSpecStack MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructItemSpecStack.Descriptor; }
      }
      
      public override NetStructItemSpecStack DefaultInstanceForType {
        get { return global::Gazillion.NetStructItemSpecStack.DefaultInstance; }
      }
      
      public override NetStructItemSpecStack BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructItemSpecStack) {
          return MergeFrom((NetStructItemSpecStack) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructItemSpecStack other) {
        if (other == global::Gazillion.NetStructItemSpecStack.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasSpec) {
          MergeSpec(other.Spec);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructItemSpecStackFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructItemSpecStackFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadUInt32(ref result.count_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructItemSpec.Builder subBuilder = global::Gazillion.NetStructItemSpec.CreateBuilder();
              if (result.hasSpec) {
                subBuilder.MergeFrom(Spec);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Spec = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public uint Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(uint value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public bool HasSpec {
       get { return result.hasSpec; }
      }
      public global::Gazillion.NetStructItemSpec Spec {
        get { return result.Spec; }
        set { SetSpec(value); }
      }
      public Builder SetSpec(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = value;
        return this;
      }
      public Builder SetSpec(global::Gazillion.NetStructItemSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpec(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpec &&
            result.spec_ != global::Gazillion.NetStructItemSpec.DefaultInstance) {
            result.spec_ = global::Gazillion.NetStructItemSpec.CreateBuilder(result.spec_).MergeFrom(value).BuildPartial();
        } else {
          result.spec_ = value;
        }
        result.hasSpec = true;
        return this;
      }
      public Builder ClearSpec() {
        PrepareBuilder();
        result.hasSpec = false;
        result.spec_ = null;
        return this;
      }
    }
    static NetStructItemSpecStack() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructLootResultSummary : pb::GeneratedMessage<NetStructLootResultSummary, NetStructLootResultSummary.Builder> {
    private NetStructLootResultSummary() { }
    private static readonly NetStructLootResultSummary defaultInstance = new NetStructLootResultSummary().MakeReadOnly();
    private static readonly string[] _netStructLootResultSummaryFieldNames = new string[] { "agents", "callbackNodes", "couponCodes", "credits", "enduranceBonus", "experience", "healthBonus", "items", "powerPoints", "protorefs", "realMoney", "vendorxp" };
    private static readonly uint[] _netStructLootResultSummaryFieldTags = new uint[] { 18, 80, 72, 24, 56, 32, 48, 10, 40, 88, 64, 98 };
    public static NetStructLootResultSummary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructLootResultSummary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructLootResultSummary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructLootResultSummary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructLootResultSummary, NetStructLootResultSummary.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructLootResultSummary__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetStructItemSpecStack> items_ = new pbc::PopsicleList<global::Gazillion.NetStructItemSpecStack>();
    public scg::IList<global::Gazillion.NetStructItemSpecStack> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::Gazillion.NetStructItemSpecStack GetItems(int index) {
      return items_[index];
    }
    
    public const int AgentsFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.NetStructAgentSpec> agents_ = new pbc::PopsicleList<global::Gazillion.NetStructAgentSpec>();
    public scg::IList<global::Gazillion.NetStructAgentSpec> AgentsList {
      get { return agents_; }
    }
    public int AgentsCount {
      get { return agents_.Count; }
    }
    public global::Gazillion.NetStructAgentSpec GetAgents(int index) {
      return agents_[index];
    }
    
    public const int CreditsFieldNumber = 3;
    private pbc::PopsicleList<int> credits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CreditsList {
      get { return pbc::Lists.AsReadOnly(credits_); }
    }
    public int CreditsCount {
      get { return credits_.Count; }
    }
    public int GetCredits(int index) {
      return credits_[index];
    }
    
    public const int ExperienceFieldNumber = 4;
    private bool hasExperience;
    private uint experience_;
    public bool HasExperience {
      get { return hasExperience; }
    }
    public uint Experience {
      get { return experience_; }
    }
    
    public const int PowerPointsFieldNumber = 5;
    private bool hasPowerPoints;
    private uint powerPoints_;
    public bool HasPowerPoints {
      get { return hasPowerPoints; }
    }
    public uint PowerPoints {
      get { return powerPoints_; }
    }
    
    public const int HealthBonusFieldNumber = 6;
    private bool hasHealthBonus;
    private uint healthBonus_;
    public bool HasHealthBonus {
      get { return hasHealthBonus; }
    }
    public uint HealthBonus {
      get { return healthBonus_; }
    }
    
    public const int EnduranceBonusFieldNumber = 7;
    private bool hasEnduranceBonus;
    private uint enduranceBonus_;
    public bool HasEnduranceBonus {
      get { return hasEnduranceBonus; }
    }
    public uint EnduranceBonus {
      get { return enduranceBonus_; }
    }
    
    public const int RealMoneyFieldNumber = 8;
    private bool hasRealMoney;
    private uint realMoney_;
    public bool HasRealMoney {
      get { return hasRealMoney; }
    }
    public uint RealMoney {
      get { return realMoney_; }
    }
    
    public const int CouponCodesFieldNumber = 9;
    private pbc::PopsicleList<long> couponCodes_ = new pbc::PopsicleList<long>();
    public scg::IList<long> CouponCodesList {
      get { return pbc::Lists.AsReadOnly(couponCodes_); }
    }
    public int CouponCodesCount {
      get { return couponCodes_.Count; }
    }
    public long GetCouponCodes(int index) {
      return couponCodes_[index];
    }
    
    public const int CallbackNodesFieldNumber = 10;
    private pbc::PopsicleList<ulong> callbackNodes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> CallbackNodesList {
      get { return pbc::Lists.AsReadOnly(callbackNodes_); }
    }
    public int CallbackNodesCount {
      get { return callbackNodes_.Count; }
    }
    public ulong GetCallbackNodes(int index) {
      return callbackNodes_[index];
    }
    
    public const int ProtorefsFieldNumber = 11;
    private pbc::PopsicleList<ulong> protorefs_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ProtorefsList {
      get { return pbc::Lists.AsReadOnly(protorefs_); }
    }
    public int ProtorefsCount {
      get { return protorefs_.Count; }
    }
    public ulong GetProtorefs(int index) {
      return protorefs_[index];
    }
    
    public const int VendorxpFieldNumber = 12;
    private pbc::PopsicleList<global::Gazillion.NetStructVendorXPSummary> vendorxp_ = new pbc::PopsicleList<global::Gazillion.NetStructVendorXPSummary>();
    public scg::IList<global::Gazillion.NetStructVendorXPSummary> VendorxpList {
      get { return vendorxp_; }
    }
    public int VendorxpCount {
      get { return vendorxp_.Count; }
    }
    public global::Gazillion.NetStructVendorXPSummary GetVendorxp(int index) {
      return vendorxp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetStructItemSpecStack element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.NetStructAgentSpec element in AgentsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.NetStructVendorXPSummary element in VendorxpList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructLootResultSummaryFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[7], items_);
      }
      if (agents_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], agents_);
      }
      if (credits_.Count > 0) {
        output.WriteInt32Array(3, field_names[3], credits_);
      }
      if (hasExperience) {
        output.WriteUInt32(4, field_names[5], Experience);
      }
      if (hasPowerPoints) {
        output.WriteUInt32(5, field_names[8], PowerPoints);
      }
      if (hasHealthBonus) {
        output.WriteUInt32(6, field_names[6], HealthBonus);
      }
      if (hasEnduranceBonus) {
        output.WriteUInt32(7, field_names[4], EnduranceBonus);
      }
      if (hasRealMoney) {
        output.WriteUInt32(8, field_names[10], RealMoney);
      }
      if (couponCodes_.Count > 0) {
        output.WriteInt64Array(9, field_names[2], couponCodes_);
      }
      if (callbackNodes_.Count > 0) {
        output.WriteUInt64Array(10, field_names[1], callbackNodes_);
      }
      if (protorefs_.Count > 0) {
        output.WriteUInt64Array(11, field_names[9], protorefs_);
      }
      if (vendorxp_.Count > 0) {
        output.WriteMessageArray(12, field_names[11], vendorxp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetStructItemSpecStack element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Gazillion.NetStructAgentSpec element in AgentsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      {
        int dataSize = 0;
        foreach (int element in CreditsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * credits_.Count;
      }
      if (hasExperience) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Experience);
      }
      if (hasPowerPoints) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, PowerPoints);
      }
      if (hasHealthBonus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, HealthBonus);
      }
      if (hasEnduranceBonus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, EnduranceBonus);
      }
      if (hasRealMoney) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, RealMoney);
      }
      {
        int dataSize = 0;
        foreach (long element in CouponCodesList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * couponCodes_.Count;
      }
      {
        int dataSize = 0;
        foreach (ulong element in CallbackNodesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * callbackNodes_.Count;
      }
      {
        int dataSize = 0;
        foreach (ulong element in ProtorefsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * protorefs_.Count;
      }
      foreach (global::Gazillion.NetStructVendorXPSummary element in VendorxpList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructLootResultSummary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructLootResultSummary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructLootResultSummary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructLootResultSummary MakeReadOnly() {
      items_.MakeReadOnly();
      agents_.MakeReadOnly();
      credits_.MakeReadOnly();
      couponCodes_.MakeReadOnly();
      callbackNodes_.MakeReadOnly();
      protorefs_.MakeReadOnly();
      vendorxp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructLootResultSummary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructLootResultSummary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructLootResultSummary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructLootResultSummary result;
      
      private NetStructLootResultSummary PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructLootResultSummary original = result;
          result = new NetStructLootResultSummary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructLootResultSummary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructLootResultSummary.Descriptor; }
      }
      
      public override NetStructLootResultSummary DefaultInstanceForType {
        get { return global::Gazillion.NetStructLootResultSummary.DefaultInstance; }
      }
      
      public override NetStructLootResultSummary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructLootResultSummary) {
          return MergeFrom((NetStructLootResultSummary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructLootResultSummary other) {
        if (other == global::Gazillion.NetStructLootResultSummary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.agents_.Count != 0) {
          result.agents_.Add(other.agents_);
        }
        if (other.credits_.Count != 0) {
          result.credits_.Add(other.credits_);
        }
        if (other.HasExperience) {
          Experience = other.Experience;
        }
        if (other.HasPowerPoints) {
          PowerPoints = other.PowerPoints;
        }
        if (other.HasHealthBonus) {
          HealthBonus = other.HealthBonus;
        }
        if (other.HasEnduranceBonus) {
          EnduranceBonus = other.EnduranceBonus;
        }
        if (other.HasRealMoney) {
          RealMoney = other.RealMoney;
        }
        if (other.couponCodes_.Count != 0) {
          result.couponCodes_.Add(other.couponCodes_);
        }
        if (other.callbackNodes_.Count != 0) {
          result.callbackNodes_.Add(other.callbackNodes_);
        }
        if (other.protorefs_.Count != 0) {
          result.protorefs_.Add(other.protorefs_);
        }
        if (other.vendorxp_.Count != 0) {
          result.vendorxp_.Add(other.vendorxp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructLootResultSummaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructLootResultSummaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::Gazillion.NetStructItemSpecStack.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.agents_, global::Gazillion.NetStructAgentSpec.DefaultInstance, extensionRegistry);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.credits_);
              break;
            }
            case 32: {
              result.hasExperience = input.ReadUInt32(ref result.experience_);
              break;
            }
            case 40: {
              result.hasPowerPoints = input.ReadUInt32(ref result.powerPoints_);
              break;
            }
            case 48: {
              result.hasHealthBonus = input.ReadUInt32(ref result.healthBonus_);
              break;
            }
            case 56: {
              result.hasEnduranceBonus = input.ReadUInt32(ref result.enduranceBonus_);
              break;
            }
            case 64: {
              result.hasRealMoney = input.ReadUInt32(ref result.realMoney_);
              break;
            }
            case 74:
            case 72: {
              input.ReadInt64Array(tag, field_name, result.couponCodes_);
              break;
            }
            case 82:
            case 80: {
              input.ReadUInt64Array(tag, field_name, result.callbackNodes_);
              break;
            }
            case 90:
            case 88: {
              input.ReadUInt64Array(tag, field_name, result.protorefs_);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.vendorxp_, global::Gazillion.NetStructVendorXPSummary.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetStructItemSpecStack> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::Gazillion.NetStructItemSpecStack GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::Gazillion.NetStructItemSpecStack value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::Gazillion.NetStructItemSpecStack.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructItemSpecStack value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructItemSpecStack.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::Gazillion.NetStructItemSpecStack> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructAgentSpec> AgentsList {
        get { return PrepareBuilder().agents_; }
      }
      public int AgentsCount {
        get { return result.AgentsCount; }
      }
      public global::Gazillion.NetStructAgentSpec GetAgents(int index) {
        return result.GetAgents(index);
      }
      public Builder SetAgents(int index, global::Gazillion.NetStructAgentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.agents_[index] = value;
        return this;
      }
      public Builder SetAgents(int index, global::Gazillion.NetStructAgentSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.agents_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAgents(global::Gazillion.NetStructAgentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.agents_.Add(value);
        return this;
      }
      public Builder AddAgents(global::Gazillion.NetStructAgentSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.agents_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAgents(scg::IEnumerable<global::Gazillion.NetStructAgentSpec> values) {
        PrepareBuilder();
        result.agents_.Add(values);
        return this;
      }
      public Builder ClearAgents() {
        PrepareBuilder();
        result.agents_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> CreditsList {
        get { return PrepareBuilder().credits_; }
      }
      public int CreditsCount {
        get { return result.CreditsCount; }
      }
      public int GetCredits(int index) {
        return result.GetCredits(index);
      }
      public Builder SetCredits(int index, int value) {
        PrepareBuilder();
        result.credits_[index] = value;
        return this;
      }
      public Builder AddCredits(int value) {
        PrepareBuilder();
        result.credits_.Add(value);
        return this;
      }
      public Builder AddRangeCredits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.credits_.Add(values);
        return this;
      }
      public Builder ClearCredits() {
        PrepareBuilder();
        result.credits_.Clear();
        return this;
      }
      
      public bool HasExperience {
        get { return result.hasExperience; }
      }
      public uint Experience {
        get { return result.Experience; }
        set { SetExperience(value); }
      }
      public Builder SetExperience(uint value) {
        PrepareBuilder();
        result.hasExperience = true;
        result.experience_ = value;
        return this;
      }
      public Builder ClearExperience() {
        PrepareBuilder();
        result.hasExperience = false;
        result.experience_ = 0;
        return this;
      }
      
      public bool HasPowerPoints {
        get { return result.hasPowerPoints; }
      }
      public uint PowerPoints {
        get { return result.PowerPoints; }
        set { SetPowerPoints(value); }
      }
      public Builder SetPowerPoints(uint value) {
        PrepareBuilder();
        result.hasPowerPoints = true;
        result.powerPoints_ = value;
        return this;
      }
      public Builder ClearPowerPoints() {
        PrepareBuilder();
        result.hasPowerPoints = false;
        result.powerPoints_ = 0;
        return this;
      }
      
      public bool HasHealthBonus {
        get { return result.hasHealthBonus; }
      }
      public uint HealthBonus {
        get { return result.HealthBonus; }
        set { SetHealthBonus(value); }
      }
      public Builder SetHealthBonus(uint value) {
        PrepareBuilder();
        result.hasHealthBonus = true;
        result.healthBonus_ = value;
        return this;
      }
      public Builder ClearHealthBonus() {
        PrepareBuilder();
        result.hasHealthBonus = false;
        result.healthBonus_ = 0;
        return this;
      }
      
      public bool HasEnduranceBonus {
        get { return result.hasEnduranceBonus; }
      }
      public uint EnduranceBonus {
        get { return result.EnduranceBonus; }
        set { SetEnduranceBonus(value); }
      }
      public Builder SetEnduranceBonus(uint value) {
        PrepareBuilder();
        result.hasEnduranceBonus = true;
        result.enduranceBonus_ = value;
        return this;
      }
      public Builder ClearEnduranceBonus() {
        PrepareBuilder();
        result.hasEnduranceBonus = false;
        result.enduranceBonus_ = 0;
        return this;
      }
      
      public bool HasRealMoney {
        get { return result.hasRealMoney; }
      }
      public uint RealMoney {
        get { return result.RealMoney; }
        set { SetRealMoney(value); }
      }
      public Builder SetRealMoney(uint value) {
        PrepareBuilder();
        result.hasRealMoney = true;
        result.realMoney_ = value;
        return this;
      }
      public Builder ClearRealMoney() {
        PrepareBuilder();
        result.hasRealMoney = false;
        result.realMoney_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<long> CouponCodesList {
        get { return PrepareBuilder().couponCodes_; }
      }
      public int CouponCodesCount {
        get { return result.CouponCodesCount; }
      }
      public long GetCouponCodes(int index) {
        return result.GetCouponCodes(index);
      }
      public Builder SetCouponCodes(int index, long value) {
        PrepareBuilder();
        result.couponCodes_[index] = value;
        return this;
      }
      public Builder AddCouponCodes(long value) {
        PrepareBuilder();
        result.couponCodes_.Add(value);
        return this;
      }
      public Builder AddRangeCouponCodes(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.couponCodes_.Add(values);
        return this;
      }
      public Builder ClearCouponCodes() {
        PrepareBuilder();
        result.couponCodes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<ulong> CallbackNodesList {
        get { return PrepareBuilder().callbackNodes_; }
      }
      public int CallbackNodesCount {
        get { return result.CallbackNodesCount; }
      }
      public ulong GetCallbackNodes(int index) {
        return result.GetCallbackNodes(index);
      }
      public Builder SetCallbackNodes(int index, ulong value) {
        PrepareBuilder();
        result.callbackNodes_[index] = value;
        return this;
      }
      public Builder AddCallbackNodes(ulong value) {
        PrepareBuilder();
        result.callbackNodes_.Add(value);
        return this;
      }
      public Builder AddRangeCallbackNodes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.callbackNodes_.Add(values);
        return this;
      }
      public Builder ClearCallbackNodes() {
        PrepareBuilder();
        result.callbackNodes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ProtorefsList {
        get { return PrepareBuilder().protorefs_; }
      }
      public int ProtorefsCount {
        get { return result.ProtorefsCount; }
      }
      public ulong GetProtorefs(int index) {
        return result.GetProtorefs(index);
      }
      public Builder SetProtorefs(int index, ulong value) {
        PrepareBuilder();
        result.protorefs_[index] = value;
        return this;
      }
      public Builder AddProtorefs(ulong value) {
        PrepareBuilder();
        result.protorefs_.Add(value);
        return this;
      }
      public Builder AddRangeProtorefs(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.protorefs_.Add(values);
        return this;
      }
      public Builder ClearProtorefs() {
        PrepareBuilder();
        result.protorefs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructVendorXPSummary> VendorxpList {
        get { return PrepareBuilder().vendorxp_; }
      }
      public int VendorxpCount {
        get { return result.VendorxpCount; }
      }
      public global::Gazillion.NetStructVendorXPSummary GetVendorxp(int index) {
        return result.GetVendorxp(index);
      }
      public Builder SetVendorxp(int index, global::Gazillion.NetStructVendorXPSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vendorxp_[index] = value;
        return this;
      }
      public Builder SetVendorxp(int index, global::Gazillion.NetStructVendorXPSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vendorxp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVendorxp(global::Gazillion.NetStructVendorXPSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vendorxp_.Add(value);
        return this;
      }
      public Builder AddVendorxp(global::Gazillion.NetStructVendorXPSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vendorxp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVendorxp(scg::IEnumerable<global::Gazillion.NetStructVendorXPSummary> values) {
        PrepareBuilder();
        result.vendorxp_.Add(values);
        return this;
      }
      public Builder ClearVendorxp() {
        PrepareBuilder();
        result.vendorxp_.Clear();
        return this;
      }
    }
    static NetStructLootResultSummary() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructVaporizedItem : pb::GeneratedMessage<NetStructVaporizedItem, NetStructVaporizedItem.Builder> {
    private NetStructVaporizedItem() { }
    private static readonly NetStructVaporizedItem defaultInstance = new NetStructVaporizedItem().MakeReadOnly();
    private static readonly string[] _netStructVaporizedItemFieldNames = new string[] { "credits", "itemProtoId", "rarityProtoId" };
    private static readonly uint[] _netStructVaporizedItemFieldTags = new uint[] { 24, 8, 16 };
    public static NetStructVaporizedItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructVaporizedItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructVaporizedItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructVaporizedItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructVaporizedItem, NetStructVaporizedItem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructVaporizedItem__FieldAccessorTable; }
    }
    
    public const int ItemProtoIdFieldNumber = 1;
    private bool hasItemProtoId;
    private ulong itemProtoId_;
    public bool HasItemProtoId {
      get { return hasItemProtoId; }
    }
    public ulong ItemProtoId {
      get { return itemProtoId_; }
    }
    
    public const int RarityProtoIdFieldNumber = 2;
    private bool hasRarityProtoId;
    private ulong rarityProtoId_;
    public bool HasRarityProtoId {
      get { return hasRarityProtoId; }
    }
    public ulong RarityProtoId {
      get { return rarityProtoId_; }
    }
    
    public const int CreditsFieldNumber = 3;
    private bool hasCredits;
    private int credits_;
    public bool HasCredits {
      get { return hasCredits; }
    }
    public int Credits {
      get { return credits_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructVaporizedItemFieldNames;
      if (hasItemProtoId) {
        output.WriteUInt64(1, field_names[1], ItemProtoId);
      }
      if (hasRarityProtoId) {
        output.WriteUInt64(2, field_names[2], RarityProtoId);
      }
      if (hasCredits) {
        output.WriteInt32(3, field_names[0], Credits);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemProtoId);
      }
      if (hasRarityProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RarityProtoId);
      }
      if (hasCredits) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Credits);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructVaporizedItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructVaporizedItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructVaporizedItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructVaporizedItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructVaporizedItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructVaporizedItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructVaporizedItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructVaporizedItem result;
      
      private NetStructVaporizedItem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructVaporizedItem original = result;
          result = new NetStructVaporizedItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructVaporizedItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructVaporizedItem.Descriptor; }
      }
      
      public override NetStructVaporizedItem DefaultInstanceForType {
        get { return global::Gazillion.NetStructVaporizedItem.DefaultInstance; }
      }
      
      public override NetStructVaporizedItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructVaporizedItem) {
          return MergeFrom((NetStructVaporizedItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructVaporizedItem other) {
        if (other == global::Gazillion.NetStructVaporizedItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemProtoId) {
          ItemProtoId = other.ItemProtoId;
        }
        if (other.HasRarityProtoId) {
          RarityProtoId = other.RarityProtoId;
        }
        if (other.HasCredits) {
          Credits = other.Credits;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructVaporizedItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructVaporizedItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemProtoId = input.ReadUInt64(ref result.itemProtoId_);
              break;
            }
            case 16: {
              result.hasRarityProtoId = input.ReadUInt64(ref result.rarityProtoId_);
              break;
            }
            case 24: {
              result.hasCredits = input.ReadInt32(ref result.credits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemProtoId {
        get { return result.hasItemProtoId; }
      }
      public ulong ItemProtoId {
        get { return result.ItemProtoId; }
        set { SetItemProtoId(value); }
      }
      public Builder SetItemProtoId(ulong value) {
        PrepareBuilder();
        result.hasItemProtoId = true;
        result.itemProtoId_ = value;
        return this;
      }
      public Builder ClearItemProtoId() {
        PrepareBuilder();
        result.hasItemProtoId = false;
        result.itemProtoId_ = 0UL;
        return this;
      }
      
      public bool HasRarityProtoId {
        get { return result.hasRarityProtoId; }
      }
      public ulong RarityProtoId {
        get { return result.RarityProtoId; }
        set { SetRarityProtoId(value); }
      }
      public Builder SetRarityProtoId(ulong value) {
        PrepareBuilder();
        result.hasRarityProtoId = true;
        result.rarityProtoId_ = value;
        return this;
      }
      public Builder ClearRarityProtoId() {
        PrepareBuilder();
        result.hasRarityProtoId = false;
        result.rarityProtoId_ = 0UL;
        return this;
      }
      
      public bool HasCredits {
        get { return result.hasCredits; }
      }
      public int Credits {
        get { return result.Credits; }
        set { SetCredits(value); }
      }
      public Builder SetCredits(int value) {
        PrepareBuilder();
        result.hasCredits = true;
        result.credits_ = value;
        return this;
      }
      public Builder ClearCredits() {
        PrepareBuilder();
        result.hasCredits = false;
        result.credits_ = 0;
        return this;
      }
    }
    static NetStructVaporizedItem() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVaporizedLootResult : pb::GeneratedMessage<NetMessageVaporizedLootResult, NetMessageVaporizedLootResult.Builder> {
    private NetMessageVaporizedLootResult() { }
    private static readonly NetMessageVaporizedLootResult defaultInstance = new NetMessageVaporizedLootResult().MakeReadOnly();
    private static readonly string[] _netMessageVaporizedLootResultFieldNames = new string[] { "items", "sourceEntityId" };
    private static readonly uint[] _netMessageVaporizedLootResultFieldTags = new uint[] { 10, 16 };
    public static NetMessageVaporizedLootResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVaporizedLootResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVaporizedLootResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVaporizedLootResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVaporizedLootResult, NetMessageVaporizedLootResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVaporizedLootResult__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetStructVaporizedItem> items_ = new pbc::PopsicleList<global::Gazillion.NetStructVaporizedItem>();
    public scg::IList<global::Gazillion.NetStructVaporizedItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::Gazillion.NetStructVaporizedItem GetItems(int index) {
      return items_[index];
    }
    
    public const int SourceEntityIdFieldNumber = 2;
    private bool hasSourceEntityId;
    private ulong sourceEntityId_;
    public bool HasSourceEntityId {
      get { return hasSourceEntityId; }
    }
    public ulong SourceEntityId {
      get { return sourceEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourceEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVaporizedLootResultFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
      if (hasSourceEntityId) {
        output.WriteUInt64(2, field_names[1], SourceEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetStructVaporizedItem element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasSourceEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SourceEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVaporizedLootResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVaporizedLootResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVaporizedLootResult MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVaporizedLootResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVaporizedLootResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVaporizedLootResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVaporizedLootResult result;
      
      private NetMessageVaporizedLootResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVaporizedLootResult original = result;
          result = new NetMessageVaporizedLootResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVaporizedLootResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVaporizedLootResult.Descriptor; }
      }
      
      public override NetMessageVaporizedLootResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVaporizedLootResult.DefaultInstance; }
      }
      
      public override NetMessageVaporizedLootResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVaporizedLootResult) {
          return MergeFrom((NetMessageVaporizedLootResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVaporizedLootResult other) {
        if (other == global::Gazillion.NetMessageVaporizedLootResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasSourceEntityId) {
          SourceEntityId = other.SourceEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVaporizedLootResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVaporizedLootResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::Gazillion.NetStructVaporizedItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasSourceEntityId = input.ReadUInt64(ref result.sourceEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetStructVaporizedItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::Gazillion.NetStructVaporizedItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::Gazillion.NetStructVaporizedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::Gazillion.NetStructVaporizedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructVaporizedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::Gazillion.NetStructVaporizedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::Gazillion.NetStructVaporizedItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasSourceEntityId {
        get { return result.hasSourceEntityId; }
      }
      public ulong SourceEntityId {
        get { return result.SourceEntityId; }
        set { SetSourceEntityId(value); }
      }
      public Builder SetSourceEntityId(ulong value) {
        PrepareBuilder();
        result.hasSourceEntityId = true;
        result.sourceEntityId_ = value;
        return this;
      }
      public Builder ClearSourceEntityId() {
        PrepareBuilder();
        result.hasSourceEntityId = false;
        result.sourceEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageVaporizedLootResult() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSocketGem : pb::GeneratedMessage<NetMessageSocketGem, NetMessageSocketGem.Builder> {
    private NetMessageSocketGem() { }
    private static readonly NetMessageSocketGem defaultInstance = new NetMessageSocketGem().MakeReadOnly();
    private static readonly string[] _netMessageSocketGemFieldNames = new string[] { "destItemId", "gemId" };
    private static readonly uint[] _netMessageSocketGemFieldTags = new uint[] { 8, 16 };
    public static NetMessageSocketGem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSocketGem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSocketGem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSocketGem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSocketGem, NetMessageSocketGem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSocketGem__FieldAccessorTable; }
    }
    
    public const int DestItemIdFieldNumber = 1;
    private bool hasDestItemId;
    private ulong destItemId_;
    public bool HasDestItemId {
      get { return hasDestItemId; }
    }
    public ulong DestItemId {
      get { return destItemId_; }
    }
    
    public const int GemIdFieldNumber = 2;
    private bool hasGemId;
    private ulong gemId_;
    public bool HasGemId {
      get { return hasGemId; }
    }
    public ulong GemId {
      get { return gemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDestItemId) return false;
        if (!hasGemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSocketGemFieldNames;
      if (hasDestItemId) {
        output.WriteUInt64(1, field_names[0], DestItemId);
      }
      if (hasGemId) {
        output.WriteUInt64(2, field_names[1], GemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDestItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DestItemId);
      }
      if (hasGemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSocketGem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSocketGem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSocketGem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSocketGem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSocketGem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSocketGem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSocketGem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSocketGem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSocketGem result;
      
      private NetMessageSocketGem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSocketGem original = result;
          result = new NetMessageSocketGem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSocketGem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSocketGem.Descriptor; }
      }
      
      public override NetMessageSocketGem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSocketGem.DefaultInstance; }
      }
      
      public override NetMessageSocketGem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSocketGem) {
          return MergeFrom((NetMessageSocketGem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSocketGem other) {
        if (other == global::Gazillion.NetMessageSocketGem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDestItemId) {
          DestItemId = other.DestItemId;
        }
        if (other.HasGemId) {
          GemId = other.GemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSocketGemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSocketGemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDestItemId = input.ReadUInt64(ref result.destItemId_);
              break;
            }
            case 16: {
              result.hasGemId = input.ReadUInt64(ref result.gemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDestItemId {
        get { return result.hasDestItemId; }
      }
      public ulong DestItemId {
        get { return result.DestItemId; }
        set { SetDestItemId(value); }
      }
      public Builder SetDestItemId(ulong value) {
        PrepareBuilder();
        result.hasDestItemId = true;
        result.destItemId_ = value;
        return this;
      }
      public Builder ClearDestItemId() {
        PrepareBuilder();
        result.hasDestItemId = false;
        result.destItemId_ = 0UL;
        return this;
      }
      
      public bool HasGemId {
        get { return result.hasGemId; }
      }
      public ulong GemId {
        get { return result.GemId; }
        set { SetGemId(value); }
      }
      public Builder SetGemId(ulong value) {
        PrepareBuilder();
        result.hasGemId = true;
        result.gemId_ = value;
        return this;
      }
      public Builder ClearGemId() {
        PrepareBuilder();
        result.hasGemId = false;
        result.gemId_ = 0UL;
        return this;
      }
    }
    static NetMessageSocketGem() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionUpdate : pb::GeneratedMessage<NetMessageMissionUpdate, NetMessageMissionUpdate.Builder> {
    private NetMessageMissionUpdate() { }
    private static readonly NetMessageMissionUpdate defaultInstance = new NetMessageMissionUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionUpdateFieldNames = new string[] { "missionPrototypeId", "missionState", "missionStateExpireTime", "participants", "rewards", "suppressNotification", "suspendedState" };
    private static readonly uint[] _netMessageMissionUpdateFieldTags = new uint[] { 8, 16, 24, 40, 34, 48, 56 };
    public static NetMessageMissionUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionUpdate, NetMessageMissionUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionUpdate__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int MissionStateFieldNumber = 2;
    private bool hasMissionState;
    private uint missionState_;
    public bool HasMissionState {
      get { return hasMissionState; }
    }
    public uint MissionState {
      get { return missionState_; }
    }
    
    public const int MissionStateExpireTimeFieldNumber = 3;
    private bool hasMissionStateExpireTime;
    private ulong missionStateExpireTime_;
    public bool HasMissionStateExpireTime {
      get { return hasMissionStateExpireTime; }
    }
    public ulong MissionStateExpireTime {
      get { return missionStateExpireTime_; }
    }
    
    public const int RewardsFieldNumber = 4;
    private bool hasRewards;
    private global::Gazillion.NetStructLootResultSummary rewards_;
    public bool HasRewards {
      get { return hasRewards; }
    }
    public global::Gazillion.NetStructLootResultSummary Rewards {
      get { return rewards_ ?? global::Gazillion.NetStructLootResultSummary.DefaultInstance; }
    }
    
    public const int ParticipantsFieldNumber = 5;
    private pbc::PopsicleList<ulong> participants_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ParticipantsList {
      get { return pbc::Lists.AsReadOnly(participants_); }
    }
    public int ParticipantsCount {
      get { return participants_.Count; }
    }
    public ulong GetParticipants(int index) {
      return participants_[index];
    }
    
    public const int SuppressNotificationFieldNumber = 6;
    private bool hasSuppressNotification;
    private bool suppressNotification_;
    public bool HasSuppressNotification {
      get { return hasSuppressNotification; }
    }
    public bool SuppressNotification {
      get { return suppressNotification_; }
    }
    
    public const int SuspendedStateFieldNumber = 7;
    private bool hasSuspendedState;
    private bool suspendedState_;
    public bool HasSuspendedState {
      get { return hasSuspendedState; }
    }
    public bool SuspendedState {
      get { return suspendedState_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        if (HasRewards) {
          if (!Rewards.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionUpdateFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[0], MissionPrototypeId);
      }
      if (hasMissionState) {
        output.WriteUInt32(2, field_names[1], MissionState);
      }
      if (hasMissionStateExpireTime) {
        output.WriteUInt64(3, field_names[2], MissionStateExpireTime);
      }
      if (hasRewards) {
        output.WriteMessage(4, field_names[4], Rewards);
      }
      if (participants_.Count > 0) {
        output.WriteUInt64Array(5, field_names[3], participants_);
      }
      if (hasSuppressNotification) {
        output.WriteBool(6, field_names[5], SuppressNotification);
      }
      if (hasSuspendedState) {
        output.WriteBool(7, field_names[6], SuspendedState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasMissionState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MissionState);
      }
      if (hasMissionStateExpireTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MissionStateExpireTime);
      }
      if (hasRewards) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Rewards);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ParticipantsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * participants_.Count;
      }
      if (hasSuppressNotification) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, SuppressNotification);
      }
      if (hasSuspendedState) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, SuspendedState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionUpdate MakeReadOnly() {
      participants_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionUpdate result;
      
      private NetMessageMissionUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionUpdate original = result;
          result = new NetMessageMissionUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionUpdate.Descriptor; }
      }
      
      public override NetMessageMissionUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionUpdate) {
          return MergeFrom((NetMessageMissionUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionUpdate other) {
        if (other == global::Gazillion.NetMessageMissionUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasMissionState) {
          MissionState = other.MissionState;
        }
        if (other.HasMissionStateExpireTime) {
          MissionStateExpireTime = other.MissionStateExpireTime;
        }
        if (other.HasRewards) {
          MergeRewards(other.Rewards);
        }
        if (other.participants_.Count != 0) {
          result.participants_.Add(other.participants_);
        }
        if (other.HasSuppressNotification) {
          SuppressNotification = other.SuppressNotification;
        }
        if (other.HasSuspendedState) {
          SuspendedState = other.SuspendedState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasMissionState = input.ReadUInt32(ref result.missionState_);
              break;
            }
            case 24: {
              result.hasMissionStateExpireTime = input.ReadUInt64(ref result.missionStateExpireTime_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructLootResultSummary.Builder subBuilder = global::Gazillion.NetStructLootResultSummary.CreateBuilder();
              if (result.hasRewards) {
                subBuilder.MergeFrom(Rewards);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rewards = subBuilder.BuildPartial();
              break;
            }
            case 42:
            case 40: {
              input.ReadUInt64Array(tag, field_name, result.participants_);
              break;
            }
            case 48: {
              result.hasSuppressNotification = input.ReadBool(ref result.suppressNotification_);
              break;
            }
            case 56: {
              result.hasSuspendedState = input.ReadBool(ref result.suspendedState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasMissionState {
        get { return result.hasMissionState; }
      }
      public uint MissionState {
        get { return result.MissionState; }
        set { SetMissionState(value); }
      }
      public Builder SetMissionState(uint value) {
        PrepareBuilder();
        result.hasMissionState = true;
        result.missionState_ = value;
        return this;
      }
      public Builder ClearMissionState() {
        PrepareBuilder();
        result.hasMissionState = false;
        result.missionState_ = 0;
        return this;
      }
      
      public bool HasMissionStateExpireTime {
        get { return result.hasMissionStateExpireTime; }
      }
      public ulong MissionStateExpireTime {
        get { return result.MissionStateExpireTime; }
        set { SetMissionStateExpireTime(value); }
      }
      public Builder SetMissionStateExpireTime(ulong value) {
        PrepareBuilder();
        result.hasMissionStateExpireTime = true;
        result.missionStateExpireTime_ = value;
        return this;
      }
      public Builder ClearMissionStateExpireTime() {
        PrepareBuilder();
        result.hasMissionStateExpireTime = false;
        result.missionStateExpireTime_ = 0UL;
        return this;
      }
      
      public bool HasRewards {
       get { return result.hasRewards; }
      }
      public global::Gazillion.NetStructLootResultSummary Rewards {
        get { return result.Rewards; }
        set { SetRewards(value); }
      }
      public Builder SetRewards(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRewards = true;
        result.rewards_ = value;
        return this;
      }
      public Builder SetRewards(global::Gazillion.NetStructLootResultSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRewards = true;
        result.rewards_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRewards(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRewards &&
            result.rewards_ != global::Gazillion.NetStructLootResultSummary.DefaultInstance) {
            result.rewards_ = global::Gazillion.NetStructLootResultSummary.CreateBuilder(result.rewards_).MergeFrom(value).BuildPartial();
        } else {
          result.rewards_ = value;
        }
        result.hasRewards = true;
        return this;
      }
      public Builder ClearRewards() {
        PrepareBuilder();
        result.hasRewards = false;
        result.rewards_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ParticipantsList {
        get { return PrepareBuilder().participants_; }
      }
      public int ParticipantsCount {
        get { return result.ParticipantsCount; }
      }
      public ulong GetParticipants(int index) {
        return result.GetParticipants(index);
      }
      public Builder SetParticipants(int index, ulong value) {
        PrepareBuilder();
        result.participants_[index] = value;
        return this;
      }
      public Builder AddParticipants(ulong value) {
        PrepareBuilder();
        result.participants_.Add(value);
        return this;
      }
      public Builder AddRangeParticipants(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.participants_.Add(values);
        return this;
      }
      public Builder ClearParticipants() {
        PrepareBuilder();
        result.participants_.Clear();
        return this;
      }
      
      public bool HasSuppressNotification {
        get { return result.hasSuppressNotification; }
      }
      public bool SuppressNotification {
        get { return result.SuppressNotification; }
        set { SetSuppressNotification(value); }
      }
      public Builder SetSuppressNotification(bool value) {
        PrepareBuilder();
        result.hasSuppressNotification = true;
        result.suppressNotification_ = value;
        return this;
      }
      public Builder ClearSuppressNotification() {
        PrepareBuilder();
        result.hasSuppressNotification = false;
        result.suppressNotification_ = false;
        return this;
      }
      
      public bool HasSuspendedState {
        get { return result.hasSuspendedState; }
      }
      public bool SuspendedState {
        get { return result.SuspendedState; }
        set { SetSuspendedState(value); }
      }
      public Builder SetSuspendedState(bool value) {
        PrepareBuilder();
        result.hasSuspendedState = true;
        result.suspendedState_ = value;
        return this;
      }
      public Builder ClearSuspendedState() {
        PrepareBuilder();
        result.hasSuspendedState = false;
        result.suspendedState_ = false;
        return this;
      }
    }
    static NetMessageMissionUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructMissionInteractionTag : pb::GeneratedMessage<NetStructMissionInteractionTag, NetStructMissionInteractionTag.Builder> {
    private NetStructMissionInteractionTag() { }
    private static readonly NetStructMissionInteractionTag defaultInstance = new NetStructMissionInteractionTag().MakeReadOnly();
    private static readonly string[] _netStructMissionInteractionTagFieldNames = new string[] { "entityId", "regionId" };
    private static readonly uint[] _netStructMissionInteractionTagFieldTags = new uint[] { 8, 16 };
    public static NetStructMissionInteractionTag DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructMissionInteractionTag DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructMissionInteractionTag ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructMissionInteractionTag__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructMissionInteractionTag, NetStructMissionInteractionTag.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructMissionInteractionTag__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int RegionIdFieldNumber = 2;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasRegionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructMissionInteractionTagFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasRegionId) {
        output.WriteUInt64(2, field_names[1], RegionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RegionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructMissionInteractionTag ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructMissionInteractionTag ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructMissionInteractionTag MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructMissionInteractionTag prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructMissionInteractionTag, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructMissionInteractionTag cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructMissionInteractionTag result;
      
      private NetStructMissionInteractionTag PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructMissionInteractionTag original = result;
          result = new NetStructMissionInteractionTag();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructMissionInteractionTag MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructMissionInteractionTag.Descriptor; }
      }
      
      public override NetStructMissionInteractionTag DefaultInstanceForType {
        get { return global::Gazillion.NetStructMissionInteractionTag.DefaultInstance; }
      }
      
      public override NetStructMissionInteractionTag BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructMissionInteractionTag) {
          return MergeFrom((NetStructMissionInteractionTag) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructMissionInteractionTag other) {
        if (other == global::Gazillion.NetStructMissionInteractionTag.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructMissionInteractionTagFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructMissionInteractionTagFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
    }
    static NetStructMissionInteractionTag() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionObjectiveUpdate : pb::GeneratedMessage<NetMessageMissionObjectiveUpdate, NetMessageMissionObjectiveUpdate.Builder> {
    private NetMessageMissionObjectiveUpdate() { }
    private static readonly NetMessageMissionObjectiveUpdate defaultInstance = new NetMessageMissionObjectiveUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMissionObjectiveUpdateFieldNames = new string[] { "currentCount", "failCurrentCount", "failRequiredCount", "interactedEntities", "missionPrototypeId", "objectiveIndex", "objectiveState", "objectiveStateExpireTime", "requiredCount", "suppressNotification", "suspendedState" };
    private static readonly uint[] _netMessageMissionObjectiveUpdateFieldTags = new uint[] { 40, 56, 64, 74, 8, 16, 24, 32, 48, 80, 88 };
    public static NetMessageMissionObjectiveUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionObjectiveUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionObjectiveUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionObjectiveUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionObjectiveUpdate, NetMessageMissionObjectiveUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionObjectiveUpdate__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int ObjectiveIndexFieldNumber = 2;
    private bool hasObjectiveIndex;
    private uint objectiveIndex_;
    public bool HasObjectiveIndex {
      get { return hasObjectiveIndex; }
    }
    public uint ObjectiveIndex {
      get { return objectiveIndex_; }
    }
    
    public const int ObjectiveStateFieldNumber = 3;
    private bool hasObjectiveState;
    private uint objectiveState_;
    public bool HasObjectiveState {
      get { return hasObjectiveState; }
    }
    public uint ObjectiveState {
      get { return objectiveState_; }
    }
    
    public const int ObjectiveStateExpireTimeFieldNumber = 4;
    private bool hasObjectiveStateExpireTime;
    private ulong objectiveStateExpireTime_;
    public bool HasObjectiveStateExpireTime {
      get { return hasObjectiveStateExpireTime; }
    }
    public ulong ObjectiveStateExpireTime {
      get { return objectiveStateExpireTime_; }
    }
    
    public const int CurrentCountFieldNumber = 5;
    private bool hasCurrentCount;
    private uint currentCount_;
    public bool HasCurrentCount {
      get { return hasCurrentCount; }
    }
    public uint CurrentCount {
      get { return currentCount_; }
    }
    
    public const int RequiredCountFieldNumber = 6;
    private bool hasRequiredCount;
    private uint requiredCount_;
    public bool HasRequiredCount {
      get { return hasRequiredCount; }
    }
    public uint RequiredCount {
      get { return requiredCount_; }
    }
    
    public const int FailCurrentCountFieldNumber = 7;
    private bool hasFailCurrentCount;
    private uint failCurrentCount_;
    public bool HasFailCurrentCount {
      get { return hasFailCurrentCount; }
    }
    public uint FailCurrentCount {
      get { return failCurrentCount_; }
    }
    
    public const int FailRequiredCountFieldNumber = 8;
    private bool hasFailRequiredCount;
    private uint failRequiredCount_;
    public bool HasFailRequiredCount {
      get { return hasFailRequiredCount; }
    }
    public uint FailRequiredCount {
      get { return failRequiredCount_; }
    }
    
    public const int InteractedEntitiesFieldNumber = 9;
    private pbc::PopsicleList<global::Gazillion.NetStructMissionInteractionTag> interactedEntities_ = new pbc::PopsicleList<global::Gazillion.NetStructMissionInteractionTag>();
    public scg::IList<global::Gazillion.NetStructMissionInteractionTag> InteractedEntitiesList {
      get { return interactedEntities_; }
    }
    public int InteractedEntitiesCount {
      get { return interactedEntities_.Count; }
    }
    public global::Gazillion.NetStructMissionInteractionTag GetInteractedEntities(int index) {
      return interactedEntities_[index];
    }
    
    public const int SuppressNotificationFieldNumber = 10;
    private bool hasSuppressNotification;
    private bool suppressNotification_;
    public bool HasSuppressNotification {
      get { return hasSuppressNotification; }
    }
    public bool SuppressNotification {
      get { return suppressNotification_; }
    }
    
    public const int SuspendedStateFieldNumber = 11;
    private bool hasSuspendedState;
    private bool suspendedState_;
    public bool HasSuspendedState {
      get { return hasSuspendedState; }
    }
    public bool SuspendedState {
      get { return suspendedState_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        if (!hasObjectiveIndex) return false;
        foreach (global::Gazillion.NetStructMissionInteractionTag element in InteractedEntitiesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionObjectiveUpdateFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[4], MissionPrototypeId);
      }
      if (hasObjectiveIndex) {
        output.WriteUInt32(2, field_names[5], ObjectiveIndex);
      }
      if (hasObjectiveState) {
        output.WriteUInt32(3, field_names[6], ObjectiveState);
      }
      if (hasObjectiveStateExpireTime) {
        output.WriteUInt64(4, field_names[7], ObjectiveStateExpireTime);
      }
      if (hasCurrentCount) {
        output.WriteUInt32(5, field_names[0], CurrentCount);
      }
      if (hasRequiredCount) {
        output.WriteUInt32(6, field_names[8], RequiredCount);
      }
      if (hasFailCurrentCount) {
        output.WriteUInt32(7, field_names[1], FailCurrentCount);
      }
      if (hasFailRequiredCount) {
        output.WriteUInt32(8, field_names[2], FailRequiredCount);
      }
      if (interactedEntities_.Count > 0) {
        output.WriteMessageArray(9, field_names[3], interactedEntities_);
      }
      if (hasSuppressNotification) {
        output.WriteBool(10, field_names[9], SuppressNotification);
      }
      if (hasSuspendedState) {
        output.WriteBool(11, field_names[10], SuspendedState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasObjectiveIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ObjectiveIndex);
      }
      if (hasObjectiveState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ObjectiveState);
      }
      if (hasObjectiveStateExpireTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, ObjectiveStateExpireTime);
      }
      if (hasCurrentCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CurrentCount);
      }
      if (hasRequiredCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, RequiredCount);
      }
      if (hasFailCurrentCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, FailCurrentCount);
      }
      if (hasFailRequiredCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, FailRequiredCount);
      }
      foreach (global::Gazillion.NetStructMissionInteractionTag element in InteractedEntitiesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasSuppressNotification) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, SuppressNotification);
      }
      if (hasSuspendedState) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, SuspendedState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionObjectiveUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionObjectiveUpdate MakeReadOnly() {
      interactedEntities_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionObjectiveUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionObjectiveUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionObjectiveUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionObjectiveUpdate result;
      
      private NetMessageMissionObjectiveUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionObjectiveUpdate original = result;
          result = new NetMessageMissionObjectiveUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionObjectiveUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionObjectiveUpdate.Descriptor; }
      }
      
      public override NetMessageMissionObjectiveUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionObjectiveUpdate.DefaultInstance; }
      }
      
      public override NetMessageMissionObjectiveUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionObjectiveUpdate) {
          return MergeFrom((NetMessageMissionObjectiveUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionObjectiveUpdate other) {
        if (other == global::Gazillion.NetMessageMissionObjectiveUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasObjectiveIndex) {
          ObjectiveIndex = other.ObjectiveIndex;
        }
        if (other.HasObjectiveState) {
          ObjectiveState = other.ObjectiveState;
        }
        if (other.HasObjectiveStateExpireTime) {
          ObjectiveStateExpireTime = other.ObjectiveStateExpireTime;
        }
        if (other.HasCurrentCount) {
          CurrentCount = other.CurrentCount;
        }
        if (other.HasRequiredCount) {
          RequiredCount = other.RequiredCount;
        }
        if (other.HasFailCurrentCount) {
          FailCurrentCount = other.FailCurrentCount;
        }
        if (other.HasFailRequiredCount) {
          FailRequiredCount = other.FailRequiredCount;
        }
        if (other.interactedEntities_.Count != 0) {
          result.interactedEntities_.Add(other.interactedEntities_);
        }
        if (other.HasSuppressNotification) {
          SuppressNotification = other.SuppressNotification;
        }
        if (other.HasSuspendedState) {
          SuspendedState = other.SuspendedState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionObjectiveUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionObjectiveUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasObjectiveIndex = input.ReadUInt32(ref result.objectiveIndex_);
              break;
            }
            case 24: {
              result.hasObjectiveState = input.ReadUInt32(ref result.objectiveState_);
              break;
            }
            case 32: {
              result.hasObjectiveStateExpireTime = input.ReadUInt64(ref result.objectiveStateExpireTime_);
              break;
            }
            case 40: {
              result.hasCurrentCount = input.ReadUInt32(ref result.currentCount_);
              break;
            }
            case 48: {
              result.hasRequiredCount = input.ReadUInt32(ref result.requiredCount_);
              break;
            }
            case 56: {
              result.hasFailCurrentCount = input.ReadUInt32(ref result.failCurrentCount_);
              break;
            }
            case 64: {
              result.hasFailRequiredCount = input.ReadUInt32(ref result.failRequiredCount_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.interactedEntities_, global::Gazillion.NetStructMissionInteractionTag.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasSuppressNotification = input.ReadBool(ref result.suppressNotification_);
              break;
            }
            case 88: {
              result.hasSuspendedState = input.ReadBool(ref result.suspendedState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasObjectiveIndex {
        get { return result.hasObjectiveIndex; }
      }
      public uint ObjectiveIndex {
        get { return result.ObjectiveIndex; }
        set { SetObjectiveIndex(value); }
      }
      public Builder SetObjectiveIndex(uint value) {
        PrepareBuilder();
        result.hasObjectiveIndex = true;
        result.objectiveIndex_ = value;
        return this;
      }
      public Builder ClearObjectiveIndex() {
        PrepareBuilder();
        result.hasObjectiveIndex = false;
        result.objectiveIndex_ = 0;
        return this;
      }
      
      public bool HasObjectiveState {
        get { return result.hasObjectiveState; }
      }
      public uint ObjectiveState {
        get { return result.ObjectiveState; }
        set { SetObjectiveState(value); }
      }
      public Builder SetObjectiveState(uint value) {
        PrepareBuilder();
        result.hasObjectiveState = true;
        result.objectiveState_ = value;
        return this;
      }
      public Builder ClearObjectiveState() {
        PrepareBuilder();
        result.hasObjectiveState = false;
        result.objectiveState_ = 0;
        return this;
      }
      
      public bool HasObjectiveStateExpireTime {
        get { return result.hasObjectiveStateExpireTime; }
      }
      public ulong ObjectiveStateExpireTime {
        get { return result.ObjectiveStateExpireTime; }
        set { SetObjectiveStateExpireTime(value); }
      }
      public Builder SetObjectiveStateExpireTime(ulong value) {
        PrepareBuilder();
        result.hasObjectiveStateExpireTime = true;
        result.objectiveStateExpireTime_ = value;
        return this;
      }
      public Builder ClearObjectiveStateExpireTime() {
        PrepareBuilder();
        result.hasObjectiveStateExpireTime = false;
        result.objectiveStateExpireTime_ = 0UL;
        return this;
      }
      
      public bool HasCurrentCount {
        get { return result.hasCurrentCount; }
      }
      public uint CurrentCount {
        get { return result.CurrentCount; }
        set { SetCurrentCount(value); }
      }
      public Builder SetCurrentCount(uint value) {
        PrepareBuilder();
        result.hasCurrentCount = true;
        result.currentCount_ = value;
        return this;
      }
      public Builder ClearCurrentCount() {
        PrepareBuilder();
        result.hasCurrentCount = false;
        result.currentCount_ = 0;
        return this;
      }
      
      public bool HasRequiredCount {
        get { return result.hasRequiredCount; }
      }
      public uint RequiredCount {
        get { return result.RequiredCount; }
        set { SetRequiredCount(value); }
      }
      public Builder SetRequiredCount(uint value) {
        PrepareBuilder();
        result.hasRequiredCount = true;
        result.requiredCount_ = value;
        return this;
      }
      public Builder ClearRequiredCount() {
        PrepareBuilder();
        result.hasRequiredCount = false;
        result.requiredCount_ = 0;
        return this;
      }
      
      public bool HasFailCurrentCount {
        get { return result.hasFailCurrentCount; }
      }
      public uint FailCurrentCount {
        get { return result.FailCurrentCount; }
        set { SetFailCurrentCount(value); }
      }
      public Builder SetFailCurrentCount(uint value) {
        PrepareBuilder();
        result.hasFailCurrentCount = true;
        result.failCurrentCount_ = value;
        return this;
      }
      public Builder ClearFailCurrentCount() {
        PrepareBuilder();
        result.hasFailCurrentCount = false;
        result.failCurrentCount_ = 0;
        return this;
      }
      
      public bool HasFailRequiredCount {
        get { return result.hasFailRequiredCount; }
      }
      public uint FailRequiredCount {
        get { return result.FailRequiredCount; }
        set { SetFailRequiredCount(value); }
      }
      public Builder SetFailRequiredCount(uint value) {
        PrepareBuilder();
        result.hasFailRequiredCount = true;
        result.failRequiredCount_ = value;
        return this;
      }
      public Builder ClearFailRequiredCount() {
        PrepareBuilder();
        result.hasFailRequiredCount = false;
        result.failRequiredCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructMissionInteractionTag> InteractedEntitiesList {
        get { return PrepareBuilder().interactedEntities_; }
      }
      public int InteractedEntitiesCount {
        get { return result.InteractedEntitiesCount; }
      }
      public global::Gazillion.NetStructMissionInteractionTag GetInteractedEntities(int index) {
        return result.GetInteractedEntities(index);
      }
      public Builder SetInteractedEntities(int index, global::Gazillion.NetStructMissionInteractionTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.interactedEntities_[index] = value;
        return this;
      }
      public Builder SetInteractedEntities(int index, global::Gazillion.NetStructMissionInteractionTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.interactedEntities_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInteractedEntities(global::Gazillion.NetStructMissionInteractionTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.interactedEntities_.Add(value);
        return this;
      }
      public Builder AddInteractedEntities(global::Gazillion.NetStructMissionInteractionTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.interactedEntities_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInteractedEntities(scg::IEnumerable<global::Gazillion.NetStructMissionInteractionTag> values) {
        PrepareBuilder();
        result.interactedEntities_.Add(values);
        return this;
      }
      public Builder ClearInteractedEntities() {
        PrepareBuilder();
        result.interactedEntities_.Clear();
        return this;
      }
      
      public bool HasSuppressNotification {
        get { return result.hasSuppressNotification; }
      }
      public bool SuppressNotification {
        get { return result.SuppressNotification; }
        set { SetSuppressNotification(value); }
      }
      public Builder SetSuppressNotification(bool value) {
        PrepareBuilder();
        result.hasSuppressNotification = true;
        result.suppressNotification_ = value;
        return this;
      }
      public Builder ClearSuppressNotification() {
        PrepareBuilder();
        result.hasSuppressNotification = false;
        result.suppressNotification_ = false;
        return this;
      }
      
      public bool HasSuspendedState {
        get { return result.hasSuspendedState; }
      }
      public bool SuspendedState {
        get { return result.SuspendedState; }
        set { SetSuspendedState(value); }
      }
      public Builder SetSuspendedState(bool value) {
        PrepareBuilder();
        result.hasSuspendedState = true;
        result.suspendedState_ = value;
        return this;
      }
      public Builder ClearSuspendedState() {
        PrepareBuilder();
        result.hasSuspendedState = false;
        result.suspendedState_ = false;
        return this;
      }
    }
    static NetMessageMissionObjectiveUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionRewardsResponse : pb::GeneratedMessage<NetMessageMissionRewardsResponse, NetMessageMissionRewardsResponse.Builder> {
    private NetMessageMissionRewardsResponse() { }
    private static readonly NetMessageMissionRewardsResponse defaultInstance = new NetMessageMissionRewardsResponse().MakeReadOnly();
    private static readonly string[] _netMessageMissionRewardsResponseFieldNames = new string[] { "conditionIndex", "entityId", "giveItems", "missionPrototypeId", "showItems" };
    private static readonly uint[] _netMessageMissionRewardsResponseFieldTags = new uint[] { 16, 24, 42, 8, 34 };
    public static NetMessageMissionRewardsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionRewardsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionRewardsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionRewardsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionRewardsResponse, NetMessageMissionRewardsResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionRewardsResponse__FieldAccessorTable; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 1;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int ConditionIndexFieldNumber = 2;
    private bool hasConditionIndex;
    private uint conditionIndex_;
    public bool HasConditionIndex {
      get { return hasConditionIndex; }
    }
    public uint ConditionIndex {
      get { return conditionIndex_; }
    }
    
    public const int EntityIdFieldNumber = 3;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int ShowItemsFieldNumber = 4;
    private bool hasShowItems;
    private global::Gazillion.NetStructLootResultSummary showItems_;
    public bool HasShowItems {
      get { return hasShowItems; }
    }
    public global::Gazillion.NetStructLootResultSummary ShowItems {
      get { return showItems_ ?? global::Gazillion.NetStructLootResultSummary.DefaultInstance; }
    }
    
    public const int GiveItemsFieldNumber = 5;
    private bool hasGiveItems;
    private global::Gazillion.NetStructLootResultSummary giveItems_;
    public bool HasGiveItems {
      get { return hasGiveItems; }
    }
    public global::Gazillion.NetStructLootResultSummary GiveItems {
      get { return giveItems_ ?? global::Gazillion.NetStructLootResultSummary.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMissionPrototypeId) return false;
        if (HasShowItems) {
          if (!ShowItems.IsInitialized) return false;
        }
        if (HasGiveItems) {
          if (!GiveItems.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionRewardsResponseFieldNames;
      if (hasMissionPrototypeId) {
        output.WriteUInt64(1, field_names[3], MissionPrototypeId);
      }
      if (hasConditionIndex) {
        output.WriteUInt32(2, field_names[0], ConditionIndex);
      }
      if (hasEntityId) {
        output.WriteUInt64(3, field_names[1], EntityId);
      }
      if (hasShowItems) {
        output.WriteMessage(4, field_names[4], ShowItems);
      }
      if (hasGiveItems) {
        output.WriteMessage(5, field_names[2], GiveItems);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MissionPrototypeId);
      }
      if (hasConditionIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ConditionIndex);
      }
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, EntityId);
      }
      if (hasShowItems) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, ShowItems);
      }
      if (hasGiveItems) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, GiveItems);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionRewardsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionRewardsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionRewardsResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionRewardsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionRewardsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionRewardsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionRewardsResponse result;
      
      private NetMessageMissionRewardsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionRewardsResponse original = result;
          result = new NetMessageMissionRewardsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionRewardsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionRewardsResponse.Descriptor; }
      }
      
      public override NetMessageMissionRewardsResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionRewardsResponse.DefaultInstance; }
      }
      
      public override NetMessageMissionRewardsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionRewardsResponse) {
          return MergeFrom((NetMessageMissionRewardsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionRewardsResponse other) {
        if (other == global::Gazillion.NetMessageMissionRewardsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasConditionIndex) {
          ConditionIndex = other.ConditionIndex;
        }
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasShowItems) {
          MergeShowItems(other.ShowItems);
        }
        if (other.HasGiveItems) {
          MergeGiveItems(other.GiveItems);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionRewardsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionRewardsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 16: {
              result.hasConditionIndex = input.ReadUInt32(ref result.conditionIndex_);
              break;
            }
            case 24: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 34: {
              global::Gazillion.NetStructLootResultSummary.Builder subBuilder = global::Gazillion.NetStructLootResultSummary.CreateBuilder();
              if (result.hasShowItems) {
                subBuilder.MergeFrom(ShowItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ShowItems = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Gazillion.NetStructLootResultSummary.Builder subBuilder = global::Gazillion.NetStructLootResultSummary.CreateBuilder();
              if (result.hasGiveItems) {
                subBuilder.MergeFrom(GiveItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GiveItems = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasConditionIndex {
        get { return result.hasConditionIndex; }
      }
      public uint ConditionIndex {
        get { return result.ConditionIndex; }
        set { SetConditionIndex(value); }
      }
      public Builder SetConditionIndex(uint value) {
        PrepareBuilder();
        result.hasConditionIndex = true;
        result.conditionIndex_ = value;
        return this;
      }
      public Builder ClearConditionIndex() {
        PrepareBuilder();
        result.hasConditionIndex = false;
        result.conditionIndex_ = 0;
        return this;
      }
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasShowItems {
       get { return result.hasShowItems; }
      }
      public global::Gazillion.NetStructLootResultSummary ShowItems {
        get { return result.ShowItems; }
        set { SetShowItems(value); }
      }
      public Builder SetShowItems(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShowItems = true;
        result.showItems_ = value;
        return this;
      }
      public Builder SetShowItems(global::Gazillion.NetStructLootResultSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasShowItems = true;
        result.showItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShowItems(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasShowItems &&
            result.showItems_ != global::Gazillion.NetStructLootResultSummary.DefaultInstance) {
            result.showItems_ = global::Gazillion.NetStructLootResultSummary.CreateBuilder(result.showItems_).MergeFrom(value).BuildPartial();
        } else {
          result.showItems_ = value;
        }
        result.hasShowItems = true;
        return this;
      }
      public Builder ClearShowItems() {
        PrepareBuilder();
        result.hasShowItems = false;
        result.showItems_ = null;
        return this;
      }
      
      public bool HasGiveItems {
       get { return result.hasGiveItems; }
      }
      public global::Gazillion.NetStructLootResultSummary GiveItems {
        get { return result.GiveItems; }
        set { SetGiveItems(value); }
      }
      public Builder SetGiveItems(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGiveItems = true;
        result.giveItems_ = value;
        return this;
      }
      public Builder SetGiveItems(global::Gazillion.NetStructLootResultSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGiveItems = true;
        result.giveItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGiveItems(global::Gazillion.NetStructLootResultSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGiveItems &&
            result.giveItems_ != global::Gazillion.NetStructLootResultSummary.DefaultInstance) {
            result.giveItems_ = global::Gazillion.NetStructLootResultSummary.CreateBuilder(result.giveItems_).MergeFrom(value).BuildPartial();
        } else {
          result.giveItems_ = value;
        }
        result.hasGiveItems = true;
        return this;
      }
      public Builder ClearGiveItems() {
        PrepareBuilder();
        result.hasGiveItems = false;
        result.giveItems_ = null;
        return this;
      }
    }
    static NetMessageMissionRewardsResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCurrentAvatarChanged : pb::GeneratedMessage<NetMessageCurrentAvatarChanged, NetMessageCurrentAvatarChanged.Builder> {
    private NetMessageCurrentAvatarChanged() { }
    private static readonly NetMessageCurrentAvatarChanged defaultInstance = new NetMessageCurrentAvatarChanged().MakeReadOnly();
    private static readonly string[] _netMessageCurrentAvatarChangedFieldNames = new string[] { "avatarIndex", "lastCurrentEntityId" };
    private static readonly uint[] _netMessageCurrentAvatarChangedFieldTags = new uint[] { 8, 16 };
    public static NetMessageCurrentAvatarChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCurrentAvatarChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCurrentAvatarChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCurrentAvatarChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCurrentAvatarChanged, NetMessageCurrentAvatarChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCurrentAvatarChanged__FieldAccessorTable; }
    }
    
    public const int AvatarIndexFieldNumber = 1;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public const int LastCurrentEntityIdFieldNumber = 2;
    private bool hasLastCurrentEntityId;
    private ulong lastCurrentEntityId_;
    public bool HasLastCurrentEntityId {
      get { return hasLastCurrentEntityId; }
    }
    public ulong LastCurrentEntityId {
      get { return lastCurrentEntityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarIndex) return false;
        if (!hasLastCurrentEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCurrentAvatarChangedFieldNames;
      if (hasAvatarIndex) {
        output.WriteInt32(1, field_names[0], AvatarIndex);
      }
      if (hasLastCurrentEntityId) {
        output.WriteUInt64(2, field_names[1], LastCurrentEntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AvatarIndex);
      }
      if (hasLastCurrentEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, LastCurrentEntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCurrentAvatarChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCurrentAvatarChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCurrentAvatarChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCurrentAvatarChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCurrentAvatarChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCurrentAvatarChanged result;
      
      private NetMessageCurrentAvatarChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCurrentAvatarChanged original = result;
          result = new NetMessageCurrentAvatarChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCurrentAvatarChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCurrentAvatarChanged.Descriptor; }
      }
      
      public override NetMessageCurrentAvatarChanged DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCurrentAvatarChanged.DefaultInstance; }
      }
      
      public override NetMessageCurrentAvatarChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCurrentAvatarChanged) {
          return MergeFrom((NetMessageCurrentAvatarChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCurrentAvatarChanged other) {
        if (other == global::Gazillion.NetMessageCurrentAvatarChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        if (other.HasLastCurrentEntityId) {
          LastCurrentEntityId = other.LastCurrentEntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCurrentAvatarChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCurrentAvatarChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
            case 16: {
              result.hasLastCurrentEntityId = input.ReadUInt64(ref result.lastCurrentEntityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
      
      public bool HasLastCurrentEntityId {
        get { return result.hasLastCurrentEntityId; }
      }
      public ulong LastCurrentEntityId {
        get { return result.LastCurrentEntityId; }
        set { SetLastCurrentEntityId(value); }
      }
      public Builder SetLastCurrentEntityId(ulong value) {
        PrepareBuilder();
        result.hasLastCurrentEntityId = true;
        result.lastCurrentEntityId_ = value;
        return this;
      }
      public Builder ClearLastCurrentEntityId() {
        PrepareBuilder();
        result.hasLastCurrentEntityId = false;
        result.lastCurrentEntityId_ = 0UL;
        return this;
      }
    }
    static NetMessageCurrentAvatarChanged() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNewAvatarAcquired : pb::GeneratedMessage<NetMessageNewAvatarAcquired, NetMessageNewAvatarAcquired.Builder> {
    private NetMessageNewAvatarAcquired() { }
    private static readonly NetMessageNewAvatarAcquired defaultInstance = new NetMessageNewAvatarAcquired().MakeReadOnly();
    private static readonly string[] _netMessageNewAvatarAcquiredFieldNames = new string[] { "prototypeId" };
    private static readonly uint[] _netMessageNewAvatarAcquiredFieldTags = new uint[] { 8 };
    public static NetMessageNewAvatarAcquired DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNewAvatarAcquired DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNewAvatarAcquired ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewAvatarAcquired__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNewAvatarAcquired, NetMessageNewAvatarAcquired.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewAvatarAcquired__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNewAvatarAcquiredFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewAvatarAcquired ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNewAvatarAcquired MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNewAvatarAcquired prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNewAvatarAcquired, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNewAvatarAcquired cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNewAvatarAcquired result;
      
      private NetMessageNewAvatarAcquired PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNewAvatarAcquired original = result;
          result = new NetMessageNewAvatarAcquired();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNewAvatarAcquired MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNewAvatarAcquired.Descriptor; }
      }
      
      public override NetMessageNewAvatarAcquired DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNewAvatarAcquired.DefaultInstance; }
      }
      
      public override NetMessageNewAvatarAcquired BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNewAvatarAcquired) {
          return MergeFrom((NetMessageNewAvatarAcquired) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNewAvatarAcquired other) {
        if (other == global::Gazillion.NetMessageNewAvatarAcquired.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNewAvatarAcquiredFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNewAvatarAcquiredFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageNewAvatarAcquired() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageNewTeamUpAcquired : pb::GeneratedMessage<NetMessageNewTeamUpAcquired, NetMessageNewTeamUpAcquired.Builder> {
    private NetMessageNewTeamUpAcquired() { }
    private static readonly NetMessageNewTeamUpAcquired defaultInstance = new NetMessageNewTeamUpAcquired().MakeReadOnly();
    private static readonly string[] _netMessageNewTeamUpAcquiredFieldNames = new string[] { "prototypeId" };
    private static readonly uint[] _netMessageNewTeamUpAcquiredFieldTags = new uint[] { 8 };
    public static NetMessageNewTeamUpAcquired DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageNewTeamUpAcquired DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageNewTeamUpAcquired ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewTeamUpAcquired__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageNewTeamUpAcquired, NetMessageNewTeamUpAcquired.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageNewTeamUpAcquired__FieldAccessorTable; }
    }
    
    public const int PrototypeIdFieldNumber = 1;
    private bool hasPrototypeId;
    private ulong prototypeId_;
    public bool HasPrototypeId {
      get { return hasPrototypeId; }
    }
    public ulong PrototypeId {
      get { return prototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageNewTeamUpAcquiredFieldNames;
      if (hasPrototypeId) {
        output.WriteUInt64(1, field_names[0], PrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageNewTeamUpAcquired ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageNewTeamUpAcquired MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageNewTeamUpAcquired prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageNewTeamUpAcquired, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageNewTeamUpAcquired cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageNewTeamUpAcquired result;
      
      private NetMessageNewTeamUpAcquired PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageNewTeamUpAcquired original = result;
          result = new NetMessageNewTeamUpAcquired();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageNewTeamUpAcquired MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageNewTeamUpAcquired.Descriptor; }
      }
      
      public override NetMessageNewTeamUpAcquired DefaultInstanceForType {
        get { return global::Gazillion.NetMessageNewTeamUpAcquired.DefaultInstance; }
      }
      
      public override NetMessageNewTeamUpAcquired BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageNewTeamUpAcquired) {
          return MergeFrom((NetMessageNewTeamUpAcquired) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageNewTeamUpAcquired other) {
        if (other == global::Gazillion.NetMessageNewTeamUpAcquired.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrototypeId) {
          PrototypeId = other.PrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageNewTeamUpAcquiredFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageNewTeamUpAcquiredFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrototypeId = input.ReadUInt64(ref result.prototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrototypeId {
        get { return result.hasPrototypeId; }
      }
      public ulong PrototypeId {
        get { return result.PrototypeId; }
        set { SetPrototypeId(value); }
      }
      public Builder SetPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeId = true;
        result.prototypeId_ = value;
        return this;
      }
      public Builder ClearPrototypeId() {
        PrepareBuilder();
        result.hasPrototypeId = false;
        result.prototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageNewTeamUpAcquired() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetStructPrefetchCell : pb::GeneratedMessage<NetStructPrefetchCell, NetStructPrefetchCell.Builder> {
    private NetStructPrefetchCell() { }
    private static readonly NetStructPrefetchCell defaultInstance = new NetStructPrefetchCell().MakeReadOnly();
    private static readonly string[] _netStructPrefetchCellFieldNames = new string[] { "cellId", "cellPrototypeId" };
    private static readonly uint[] _netStructPrefetchCellFieldTags = new uint[] { 8, 16 };
    public static NetStructPrefetchCell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetStructPrefetchCell DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetStructPrefetchCell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchCell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetStructPrefetchCell, NetStructPrefetchCell.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetStructPrefetchCell__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int CellPrototypeIdFieldNumber = 2;
    private bool hasCellPrototypeId;
    private ulong cellPrototypeId_;
    public bool HasCellPrototypeId {
      get { return hasCellPrototypeId; }
    }
    public ulong CellPrototypeId {
      get { return cellPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasCellPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netStructPrefetchCellFieldNames;
      if (hasCellId) {
        output.WriteUInt32(1, field_names[0], CellId);
      }
      if (hasCellPrototypeId) {
        output.WriteUInt64(2, field_names[1], CellPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CellId);
      }
      if (hasCellPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, CellPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetStructPrefetchCell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetStructPrefetchCell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetStructPrefetchCell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetStructPrefetchCell MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetStructPrefetchCell prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetStructPrefetchCell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetStructPrefetchCell cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetStructPrefetchCell result;
      
      private NetStructPrefetchCell PrepareBuilder() {
        if (resultIsReadOnly) {
          NetStructPrefetchCell original = result;
          result = new NetStructPrefetchCell();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetStructPrefetchCell MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetStructPrefetchCell.Descriptor; }
      }
      
      public override NetStructPrefetchCell DefaultInstanceForType {
        get { return global::Gazillion.NetStructPrefetchCell.DefaultInstance; }
      }
      
      public override NetStructPrefetchCell BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetStructPrefetchCell) {
          return MergeFrom((NetStructPrefetchCell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetStructPrefetchCell other) {
        if (other == global::Gazillion.NetStructPrefetchCell.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasCellPrototypeId) {
          CellPrototypeId = other.CellPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netStructPrefetchCellFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netStructPrefetchCellFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 16: {
              result.hasCellPrototypeId = input.ReadUInt64(ref result.cellPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasCellPrototypeId {
        get { return result.hasCellPrototypeId; }
      }
      public ulong CellPrototypeId {
        get { return result.CellPrototypeId; }
        set { SetCellPrototypeId(value); }
      }
      public Builder SetCellPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasCellPrototypeId = true;
        result.cellPrototypeId_ = value;
        return this;
      }
      public Builder ClearCellPrototypeId() {
        PrepareBuilder();
        result.hasCellPrototypeId = false;
        result.cellPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetStructPrefetchCell() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePrefetchAssets : pb::GeneratedMessage<NetMessagePrefetchAssets, NetMessagePrefetchAssets.Builder> {
    private NetMessagePrefetchAssets() { }
    private static readonly NetMessagePrefetchAssets defaultInstance = new NetMessagePrefetchAssets().MakeReadOnly();
    private static readonly string[] _netMessagePrefetchAssetsFieldNames = new string[] { "assets", "cells", "priority", "prototypes", "regionId" };
    private static readonly uint[] _netMessagePrefetchAssetsFieldTags = new uint[] { 16, 34, 8, 24, 40 };
    public static NetMessagePrefetchAssets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePrefetchAssets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePrefetchAssets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchAssets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePrefetchAssets, NetMessagePrefetchAssets.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchAssets__FieldAccessorTable; }
    }
    
    public const int PriorityFieldNumber = 1;
    private bool hasPriority;
    private uint priority_;
    public bool HasPriority {
      get { return hasPriority; }
    }
    public uint Priority {
      get { return priority_; }
    }
    
    public const int AssetsFieldNumber = 2;
    private pbc::PopsicleList<ulong> assets_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> AssetsList {
      get { return pbc::Lists.AsReadOnly(assets_); }
    }
    public int AssetsCount {
      get { return assets_.Count; }
    }
    public ulong GetAssets(int index) {
      return assets_[index];
    }
    
    public const int PrototypesFieldNumber = 3;
    private pbc::PopsicleList<ulong> prototypes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PrototypesList {
      get { return pbc::Lists.AsReadOnly(prototypes_); }
    }
    public int PrototypesCount {
      get { return prototypes_.Count; }
    }
    public ulong GetPrototypes(int index) {
      return prototypes_[index];
    }
    
    public const int CellsFieldNumber = 4;
    private pbc::PopsicleList<global::Gazillion.NetStructPrefetchCell> cells_ = new pbc::PopsicleList<global::Gazillion.NetStructPrefetchCell>();
    public scg::IList<global::Gazillion.NetStructPrefetchCell> CellsList {
      get { return cells_; }
    }
    public int CellsCount {
      get { return cells_.Count; }
    }
    public global::Gazillion.NetStructPrefetchCell GetCells(int index) {
      return cells_[index];
    }
    
    public const int RegionIdFieldNumber = 5;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPriority) return false;
        foreach (global::Gazillion.NetStructPrefetchCell element in CellsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePrefetchAssetsFieldNames;
      if (hasPriority) {
        output.WriteUInt32(1, field_names[2], Priority);
      }
      if (assets_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], assets_);
      }
      if (prototypes_.Count > 0) {
        output.WriteUInt64Array(3, field_names[3], prototypes_);
      }
      if (cells_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], cells_);
      }
      if (hasRegionId) {
        output.WriteUInt64(5, field_names[4], RegionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPriority) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Priority);
      }
      {
        int dataSize = 0;
        foreach (ulong element in AssetsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * assets_.Count;
      }
      {
        int dataSize = 0;
        foreach (ulong element in PrototypesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * prototypes_.Count;
      }
      foreach (global::Gazillion.NetStructPrefetchCell element in CellsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, RegionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchAssets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePrefetchAssets MakeReadOnly() {
      assets_.MakeReadOnly();
      prototypes_.MakeReadOnly();
      cells_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePrefetchAssets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePrefetchAssets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePrefetchAssets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePrefetchAssets result;
      
      private NetMessagePrefetchAssets PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePrefetchAssets original = result;
          result = new NetMessagePrefetchAssets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePrefetchAssets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePrefetchAssets.Descriptor; }
      }
      
      public override NetMessagePrefetchAssets DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePrefetchAssets.DefaultInstance; }
      }
      
      public override NetMessagePrefetchAssets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePrefetchAssets) {
          return MergeFrom((NetMessagePrefetchAssets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePrefetchAssets other) {
        if (other == global::Gazillion.NetMessagePrefetchAssets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPriority) {
          Priority = other.Priority;
        }
        if (other.assets_.Count != 0) {
          result.assets_.Add(other.assets_);
        }
        if (other.prototypes_.Count != 0) {
          result.prototypes_.Add(other.prototypes_);
        }
        if (other.cells_.Count != 0) {
          result.cells_.Add(other.cells_);
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePrefetchAssetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePrefetchAssetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPriority = input.ReadUInt32(ref result.priority_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.assets_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.prototypes_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.cells_, global::Gazillion.NetStructPrefetchCell.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPriority {
        get { return result.hasPriority; }
      }
      public uint Priority {
        get { return result.Priority; }
        set { SetPriority(value); }
      }
      public Builder SetPriority(uint value) {
        PrepareBuilder();
        result.hasPriority = true;
        result.priority_ = value;
        return this;
      }
      public Builder ClearPriority() {
        PrepareBuilder();
        result.hasPriority = false;
        result.priority_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> AssetsList {
        get { return PrepareBuilder().assets_; }
      }
      public int AssetsCount {
        get { return result.AssetsCount; }
      }
      public ulong GetAssets(int index) {
        return result.GetAssets(index);
      }
      public Builder SetAssets(int index, ulong value) {
        PrepareBuilder();
        result.assets_[index] = value;
        return this;
      }
      public Builder AddAssets(ulong value) {
        PrepareBuilder();
        result.assets_.Add(value);
        return this;
      }
      public Builder AddRangeAssets(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.assets_.Add(values);
        return this;
      }
      public Builder ClearAssets() {
        PrepareBuilder();
        result.assets_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<ulong> PrototypesList {
        get { return PrepareBuilder().prototypes_; }
      }
      public int PrototypesCount {
        get { return result.PrototypesCount; }
      }
      public ulong GetPrototypes(int index) {
        return result.GetPrototypes(index);
      }
      public Builder SetPrototypes(int index, ulong value) {
        PrepareBuilder();
        result.prototypes_[index] = value;
        return this;
      }
      public Builder AddPrototypes(ulong value) {
        PrepareBuilder();
        result.prototypes_.Add(value);
        return this;
      }
      public Builder AddRangePrototypes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.prototypes_.Add(values);
        return this;
      }
      public Builder ClearPrototypes() {
        PrepareBuilder();
        result.prototypes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetStructPrefetchCell> CellsList {
        get { return PrepareBuilder().cells_; }
      }
      public int CellsCount {
        get { return result.CellsCount; }
      }
      public global::Gazillion.NetStructPrefetchCell GetCells(int index) {
        return result.GetCells(index);
      }
      public Builder SetCells(int index, global::Gazillion.NetStructPrefetchCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_[index] = value;
        return this;
      }
      public Builder SetCells(int index, global::Gazillion.NetStructPrefetchCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCells(global::Gazillion.NetStructPrefetchCell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cells_.Add(value);
        return this;
      }
      public Builder AddCells(global::Gazillion.NetStructPrefetchCell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cells_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCells(scg::IEnumerable<global::Gazillion.NetStructPrefetchCell> values) {
        PrepareBuilder();
        result.cells_.Add(values);
        return this;
      }
      public Builder ClearCells() {
        PrepareBuilder();
        result.cells_.Clear();
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
    }
    static NetMessagePrefetchAssets() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePrefetchRegionsForDownload : pb::GeneratedMessage<NetMessagePrefetchRegionsForDownload, NetMessagePrefetchRegionsForDownload.Builder> {
    private NetMessagePrefetchRegionsForDownload() { }
    private static readonly NetMessagePrefetchRegionsForDownload defaultInstance = new NetMessagePrefetchRegionsForDownload().MakeReadOnly();
    private static readonly string[] _netMessagePrefetchRegionsForDownloadFieldNames = new string[] { "prototypes" };
    private static readonly uint[] _netMessagePrefetchRegionsForDownloadFieldTags = new uint[] { 8 };
    public static NetMessagePrefetchRegionsForDownload DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePrefetchRegionsForDownload DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePrefetchRegionsForDownload ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePrefetchRegionsForDownload, NetMessagePrefetchRegionsForDownload.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePrefetchRegionsForDownload__FieldAccessorTable; }
    }
    
    public const int PrototypesFieldNumber = 1;
    private pbc::PopsicleList<ulong> prototypes_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PrototypesList {
      get { return pbc::Lists.AsReadOnly(prototypes_); }
    }
    public int PrototypesCount {
      get { return prototypes_.Count; }
    }
    public ulong GetPrototypes(int index) {
      return prototypes_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePrefetchRegionsForDownloadFieldNames;
      if (prototypes_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], prototypes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in PrototypesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * prototypes_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePrefetchRegionsForDownload ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePrefetchRegionsForDownload MakeReadOnly() {
      prototypes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePrefetchRegionsForDownload prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePrefetchRegionsForDownload, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePrefetchRegionsForDownload cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePrefetchRegionsForDownload result;
      
      private NetMessagePrefetchRegionsForDownload PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePrefetchRegionsForDownload original = result;
          result = new NetMessagePrefetchRegionsForDownload();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePrefetchRegionsForDownload MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePrefetchRegionsForDownload.Descriptor; }
      }
      
      public override NetMessagePrefetchRegionsForDownload DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePrefetchRegionsForDownload.DefaultInstance; }
      }
      
      public override NetMessagePrefetchRegionsForDownload BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePrefetchRegionsForDownload) {
          return MergeFrom((NetMessagePrefetchRegionsForDownload) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePrefetchRegionsForDownload other) {
        if (other == global::Gazillion.NetMessagePrefetchRegionsForDownload.DefaultInstance) return this;
        PrepareBuilder();
        if (other.prototypes_.Count != 0) {
          result.prototypes_.Add(other.prototypes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePrefetchRegionsForDownloadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePrefetchRegionsForDownloadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.prototypes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> PrototypesList {
        get { return PrepareBuilder().prototypes_; }
      }
      public int PrototypesCount {
        get { return result.PrototypesCount; }
      }
      public ulong GetPrototypes(int index) {
        return result.GetPrototypes(index);
      }
      public Builder SetPrototypes(int index, ulong value) {
        PrepareBuilder();
        result.prototypes_[index] = value;
        return this;
      }
      public Builder AddPrototypes(ulong value) {
        PrepareBuilder();
        result.prototypes_.Add(value);
        return this;
      }
      public Builder AddRangePrototypes(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.prototypes_.Add(values);
        return this;
      }
      public Builder ClearPrototypes() {
        PrepareBuilder();
        result.prototypes_.Clear();
        return this;
      }
    }
    static NetMessagePrefetchRegionsForDownload() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageQueryIsRegionAvailable : pb::GeneratedMessage<NetMessageQueryIsRegionAvailable, NetMessageQueryIsRegionAvailable.Builder> {
    private NetMessageQueryIsRegionAvailable() { }
    private static readonly NetMessageQueryIsRegionAvailable defaultInstance = new NetMessageQueryIsRegionAvailable().MakeReadOnly();
    private static readonly string[] _netMessageQueryIsRegionAvailableFieldNames = new string[] { "regionPrototype" };
    private static readonly uint[] _netMessageQueryIsRegionAvailableFieldTags = new uint[] { 8 };
    public static NetMessageQueryIsRegionAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageQueryIsRegionAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageQueryIsRegionAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueryIsRegionAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageQueryIsRegionAvailable, NetMessageQueryIsRegionAvailable.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageQueryIsRegionAvailable__FieldAccessorTable; }
    }
    
    public const int RegionPrototypeFieldNumber = 1;
    private bool hasRegionPrototype;
    private ulong regionPrototype_;
    public bool HasRegionPrototype {
      get { return hasRegionPrototype; }
    }
    public ulong RegionPrototype {
      get { return regionPrototype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionPrototype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageQueryIsRegionAvailableFieldNames;
      if (hasRegionPrototype) {
        output.WriteUInt64(1, field_names[0], RegionPrototype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionPrototype) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionPrototype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageQueryIsRegionAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageQueryIsRegionAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageQueryIsRegionAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageQueryIsRegionAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageQueryIsRegionAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageQueryIsRegionAvailable result;
      
      private NetMessageQueryIsRegionAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageQueryIsRegionAvailable original = result;
          result = new NetMessageQueryIsRegionAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageQueryIsRegionAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageQueryIsRegionAvailable.Descriptor; }
      }
      
      public override NetMessageQueryIsRegionAvailable DefaultInstanceForType {
        get { return global::Gazillion.NetMessageQueryIsRegionAvailable.DefaultInstance; }
      }
      
      public override NetMessageQueryIsRegionAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageQueryIsRegionAvailable) {
          return MergeFrom((NetMessageQueryIsRegionAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageQueryIsRegionAvailable other) {
        if (other == global::Gazillion.NetMessageQueryIsRegionAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionPrototype) {
          RegionPrototype = other.RegionPrototype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageQueryIsRegionAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageQueryIsRegionAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionPrototype = input.ReadUInt64(ref result.regionPrototype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionPrototype {
        get { return result.hasRegionPrototype; }
      }
      public ulong RegionPrototype {
        get { return result.RegionPrototype; }
        set { SetRegionPrototype(value); }
      }
      public Builder SetRegionPrototype(ulong value) {
        PrepareBuilder();
        result.hasRegionPrototype = true;
        result.regionPrototype_ = value;
        return this;
      }
      public Builder ClearRegionPrototype() {
        PrepareBuilder();
        result.hasRegionPrototype = false;
        result.regionPrototype_ = 0UL;
        return this;
      }
    }
    static NetMessageQueryIsRegionAvailable() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowOverheadText : pb::GeneratedMessage<NetMessageShowOverheadText, NetMessageShowOverheadText.Builder> {
    private NetMessageShowOverheadText() { }
    private static readonly NetMessageShowOverheadText defaultInstance = new NetMessageShowOverheadText().MakeReadOnly();
    private static readonly string[] _netMessageShowOverheadTextFieldNames = new string[] { "duration", "idAgent", "idText" };
    private static readonly uint[] _netMessageShowOverheadTextFieldTags = new uint[] { 29, 8, 16 };
    public static NetMessageShowOverheadText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowOverheadText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowOverheadText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowOverheadText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowOverheadText, NetMessageShowOverheadText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowOverheadText__FieldAccessorTable; }
    }
    
    public const int IdAgentFieldNumber = 1;
    private bool hasIdAgent;
    private ulong idAgent_;
    public bool HasIdAgent {
      get { return hasIdAgent; }
    }
    public ulong IdAgent {
      get { return idAgent_; }
    }
    
    public const int IdTextFieldNumber = 2;
    private bool hasIdText;
    private ulong idText_;
    public bool HasIdText {
      get { return hasIdText; }
    }
    public ulong IdText {
      get { return idText_; }
    }
    
    public const int DurationFieldNumber = 3;
    private bool hasDuration;
    private float duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdAgent) return false;
        if (!hasIdText) return false;
        if (!hasDuration) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowOverheadTextFieldNames;
      if (hasIdAgent) {
        output.WriteUInt64(1, field_names[1], IdAgent);
      }
      if (hasIdText) {
        output.WriteUInt64(2, field_names[2], IdText);
      }
      if (hasDuration) {
        output.WriteFloat(3, field_names[0], Duration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdAgent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdAgent);
      }
      if (hasIdText) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, IdText);
      }
      if (hasDuration) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Duration);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowOverheadText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowOverheadText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowOverheadText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowOverheadText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowOverheadText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowOverheadText result;
      
      private NetMessageShowOverheadText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowOverheadText original = result;
          result = new NetMessageShowOverheadText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowOverheadText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowOverheadText.Descriptor; }
      }
      
      public override NetMessageShowOverheadText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowOverheadText.DefaultInstance; }
      }
      
      public override NetMessageShowOverheadText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowOverheadText) {
          return MergeFrom((NetMessageShowOverheadText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowOverheadText other) {
        if (other == global::Gazillion.NetMessageShowOverheadText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdAgent) {
          IdAgent = other.IdAgent;
        }
        if (other.HasIdText) {
          IdText = other.IdText;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowOverheadTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowOverheadTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdAgent = input.ReadUInt64(ref result.idAgent_);
              break;
            }
            case 16: {
              result.hasIdText = input.ReadUInt64(ref result.idText_);
              break;
            }
            case 29: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdAgent {
        get { return result.hasIdAgent; }
      }
      public ulong IdAgent {
        get { return result.IdAgent; }
        set { SetIdAgent(value); }
      }
      public Builder SetIdAgent(ulong value) {
        PrepareBuilder();
        result.hasIdAgent = true;
        result.idAgent_ = value;
        return this;
      }
      public Builder ClearIdAgent() {
        PrepareBuilder();
        result.hasIdAgent = false;
        result.idAgent_ = 0UL;
        return this;
      }
      
      public bool HasIdText {
        get { return result.hasIdText; }
      }
      public ulong IdText {
        get { return result.IdText; }
        set { SetIdText(value); }
      }
      public Builder SetIdText(ulong value) {
        PrepareBuilder();
        result.hasIdText = true;
        result.idText_ = value;
        return this;
      }
      public Builder ClearIdText() {
        PrepareBuilder();
        result.hasIdText = false;
        result.idText_ = 0UL;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0F;
        return this;
      }
    }
    static NetMessageShowOverheadText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowXPAwardedText : pb::GeneratedMessage<NetMessageShowXPAwardedText, NetMessageShowXPAwardedText.Builder> {
    private NetMessageShowXPAwardedText() { }
    private static readonly NetMessageShowXPAwardedText defaultInstance = new NetMessageShowXPAwardedText().MakeReadOnly();
    private static readonly string[] _netMessageShowXPAwardedTextFieldNames = new string[] { "agentId", "xpAwarded" };
    private static readonly uint[] _netMessageShowXPAwardedTextFieldTags = new uint[] { 8, 16 };
    public static NetMessageShowXPAwardedText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowXPAwardedText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowXPAwardedText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowXPAwardedText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowXPAwardedText, NetMessageShowXPAwardedText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowXPAwardedText__FieldAccessorTable; }
    }
    
    public const int AgentIdFieldNumber = 1;
    private bool hasAgentId;
    private ulong agentId_;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public ulong AgentId {
      get { return agentId_; }
    }
    
    public const int XpAwardedFieldNumber = 2;
    private bool hasXpAwarded;
    private long xpAwarded_;
    public bool HasXpAwarded {
      get { return hasXpAwarded; }
    }
    public long XpAwarded {
      get { return xpAwarded_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAgentId) return false;
        if (!hasXpAwarded) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowXPAwardedTextFieldNames;
      if (hasAgentId) {
        output.WriteUInt64(1, field_names[0], AgentId);
      }
      if (hasXpAwarded) {
        output.WriteInt64(2, field_names[1], XpAwarded);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AgentId);
      }
      if (hasXpAwarded) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, XpAwarded);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowXPAwardedText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowXPAwardedText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowXPAwardedText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowXPAwardedText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowXPAwardedText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowXPAwardedText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowXPAwardedText result;
      
      private NetMessageShowXPAwardedText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowXPAwardedText original = result;
          result = new NetMessageShowXPAwardedText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowXPAwardedText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowXPAwardedText.Descriptor; }
      }
      
      public override NetMessageShowXPAwardedText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowXPAwardedText.DefaultInstance; }
      }
      
      public override NetMessageShowXPAwardedText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowXPAwardedText) {
          return MergeFrom((NetMessageShowXPAwardedText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowXPAwardedText other) {
        if (other == global::Gazillion.NetMessageShowXPAwardedText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentId) {
          AgentId = other.AgentId;
        }
        if (other.HasXpAwarded) {
          XpAwarded = other.XpAwarded;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowXPAwardedTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowXPAwardedTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAgentId = input.ReadUInt64(ref result.agentId_);
              break;
            }
            case 16: {
              result.hasXpAwarded = input.ReadInt64(ref result.xpAwarded_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentId {
        get { return result.hasAgentId; }
      }
      public ulong AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(ulong value) {
        PrepareBuilder();
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder ClearAgentId() {
        PrepareBuilder();
        result.hasAgentId = false;
        result.agentId_ = 0UL;
        return this;
      }
      
      public bool HasXpAwarded {
        get { return result.hasXpAwarded; }
      }
      public long XpAwarded {
        get { return result.XpAwarded; }
        set { SetXpAwarded(value); }
      }
      public Builder SetXpAwarded(long value) {
        PrepareBuilder();
        result.hasXpAwarded = true;
        result.xpAwarded_ = value;
        return this;
      }
      public Builder ClearXpAwarded() {
        PrepareBuilder();
        result.hasXpAwarded = false;
        result.xpAwarded_ = 0L;
        return this;
      }
    }
    static NetMessageShowXPAwardedText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIToggleState : pb::GeneratedMessage<NetMessageAIToggleState, NetMessageAIToggleState.Builder> {
    private NetMessageAIToggleState() { }
    private static readonly NetMessageAIToggleState defaultInstance = new NetMessageAIToggleState().MakeReadOnly();
    private static readonly string[] _netMessageAIToggleStateFieldNames = new string[] { "state" };
    private static readonly uint[] _netMessageAIToggleStateFieldTags = new uint[] { 8 };
    public static NetMessageAIToggleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIToggleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIToggleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIToggleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIToggleState, NetMessageAIToggleState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIToggleState__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIToggleStateFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIToggleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIToggleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIToggleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIToggleState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIToggleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIToggleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIToggleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIToggleState result;
      
      private NetMessageAIToggleState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIToggleState original = result;
          result = new NetMessageAIToggleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIToggleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIToggleState.Descriptor; }
      }
      
      public override NetMessageAIToggleState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIToggleState.DefaultInstance; }
      }
      
      public override NetMessageAIToggleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIToggleState) {
          return MergeFrom((NetMessageAIToggleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIToggleState other) {
        if (other == global::Gazillion.NetMessageAIToggleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIToggleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIToggleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static NetMessageAIToggleState() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDamageToggleState : pb::GeneratedMessage<NetMessageDamageToggleState, NetMessageDamageToggleState.Builder> {
    private NetMessageDamageToggleState() { }
    private static readonly NetMessageDamageToggleState defaultInstance = new NetMessageDamageToggleState().MakeReadOnly();
    private static readonly string[] _netMessageDamageToggleStateFieldNames = new string[] { "state" };
    private static readonly uint[] _netMessageDamageToggleStateFieldTags = new uint[] { 8 };
    public static NetMessageDamageToggleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDamageToggleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDamageToggleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDamageToggleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDamageToggleState, NetMessageDamageToggleState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDamageToggleState__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDamageToggleStateFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDamageToggleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDamageToggleState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDamageToggleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDamageToggleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDamageToggleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDamageToggleState result;
      
      private NetMessageDamageToggleState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDamageToggleState original = result;
          result = new NetMessageDamageToggleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDamageToggleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDamageToggleState.Descriptor; }
      }
      
      public override NetMessageDamageToggleState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDamageToggleState.DefaultInstance; }
      }
      
      public override NetMessageDamageToggleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDamageToggleState) {
          return MergeFrom((NetMessageDamageToggleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDamageToggleState other) {
        if (other == global::Gazillion.NetMessageDamageToggleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDamageToggleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDamageToggleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static NetMessageDamageToggleState() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDynamicCombatLevelToggleState : pb::GeneratedMessage<NetMessageDynamicCombatLevelToggleState, NetMessageDynamicCombatLevelToggleState.Builder> {
    private NetMessageDynamicCombatLevelToggleState() { }
    private static readonly NetMessageDynamicCombatLevelToggleState defaultInstance = new NetMessageDynamicCombatLevelToggleState().MakeReadOnly();
    private static readonly string[] _netMessageDynamicCombatLevelToggleStateFieldNames = new string[] { "state" };
    private static readonly uint[] _netMessageDynamicCombatLevelToggleStateFieldTags = new uint[] { 8 };
    public static NetMessageDynamicCombatLevelToggleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDynamicCombatLevelToggleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDynamicCombatLevelToggleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDynamicCombatLevelToggleState, NetMessageDynamicCombatLevelToggleState.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDynamicCombatLevelToggleState__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDynamicCombatLevelToggleStateFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDynamicCombatLevelToggleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDynamicCombatLevelToggleState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDynamicCombatLevelToggleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDynamicCombatLevelToggleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDynamicCombatLevelToggleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDynamicCombatLevelToggleState result;
      
      private NetMessageDynamicCombatLevelToggleState PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDynamicCombatLevelToggleState original = result;
          result = new NetMessageDynamicCombatLevelToggleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDynamicCombatLevelToggleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDynamicCombatLevelToggleState.Descriptor; }
      }
      
      public override NetMessageDynamicCombatLevelToggleState DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDynamicCombatLevelToggleState.DefaultInstance; }
      }
      
      public override NetMessageDynamicCombatLevelToggleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDynamicCombatLevelToggleState) {
          return MergeFrom((NetMessageDynamicCombatLevelToggleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDynamicCombatLevelToggleState other) {
        if (other == global::Gazillion.NetMessageDynamicCombatLevelToggleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDynamicCombatLevelToggleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDynamicCombatLevelToggleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static NetMessageDynamicCombatLevelToggleState() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchTeamRosterNotification : pb::GeneratedMessage<NetMessageMatchTeamRosterNotification, NetMessageMatchTeamRosterNotification.Builder> {
    private NetMessageMatchTeamRosterNotification() { }
    private static readonly NetMessageMatchTeamRosterNotification defaultInstance = new NetMessageMatchTeamRosterNotification().MakeReadOnly();
    private static readonly string[] _netMessageMatchTeamRosterNotificationFieldNames = new string[] { "metaGameEntityId", "playerDbGuids", "teamPrototypeId" };
    private static readonly uint[] _netMessageMatchTeamRosterNotificationFieldTags = new uint[] { 8, 24, 16 };
    public static NetMessageMatchTeamRosterNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchTeamRosterNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchTeamRosterNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamRosterNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchTeamRosterNotification, NetMessageMatchTeamRosterNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamRosterNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public const int TeamPrototypeIdFieldNumber = 2;
    private bool hasTeamPrototypeId;
    private ulong teamPrototypeId_;
    public bool HasTeamPrototypeId {
      get { return hasTeamPrototypeId; }
    }
    public ulong TeamPrototypeId {
      get { return teamPrototypeId_; }
    }
    
    public const int PlayerDbGuidsFieldNumber = 3;
    private pbc::PopsicleList<ulong> playerDbGuids_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> PlayerDbGuidsList {
      get { return pbc::Lists.AsReadOnly(playerDbGuids_); }
    }
    public int PlayerDbGuidsCount {
      get { return playerDbGuids_.Count; }
    }
    public ulong GetPlayerDbGuids(int index) {
      return playerDbGuids_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        if (!hasTeamPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchTeamRosterNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      if (hasTeamPrototypeId) {
        output.WriteUInt64(2, field_names[2], TeamPrototypeId);
      }
      if (playerDbGuids_.Count > 0) {
        output.WriteUInt64Array(3, field_names[1], playerDbGuids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      if (hasTeamPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TeamPrototypeId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in PlayerDbGuidsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerDbGuids_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamRosterNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchTeamRosterNotification MakeReadOnly() {
      playerDbGuids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchTeamRosterNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchTeamRosterNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchTeamRosterNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchTeamRosterNotification result;
      
      private NetMessageMatchTeamRosterNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchTeamRosterNotification original = result;
          result = new NetMessageMatchTeamRosterNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchTeamRosterNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchTeamRosterNotification.Descriptor; }
      }
      
      public override NetMessageMatchTeamRosterNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchTeamRosterNotification.DefaultInstance; }
      }
      
      public override NetMessageMatchTeamRosterNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchTeamRosterNotification) {
          return MergeFrom((NetMessageMatchTeamRosterNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchTeamRosterNotification other) {
        if (other == global::Gazillion.NetMessageMatchTeamRosterNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        if (other.HasTeamPrototypeId) {
          TeamPrototypeId = other.TeamPrototypeId;
        }
        if (other.playerDbGuids_.Count != 0) {
          result.playerDbGuids_.Add(other.playerDbGuids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchTeamRosterNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchTeamRosterNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
            case 16: {
              result.hasTeamPrototypeId = input.ReadUInt64(ref result.teamPrototypeId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.playerDbGuids_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
      
      public bool HasTeamPrototypeId {
        get { return result.hasTeamPrototypeId; }
      }
      public ulong TeamPrototypeId {
        get { return result.TeamPrototypeId; }
        set { SetTeamPrototypeId(value); }
      }
      public Builder SetTeamPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasTeamPrototypeId = true;
        result.teamPrototypeId_ = value;
        return this;
      }
      public Builder ClearTeamPrototypeId() {
        PrepareBuilder();
        result.hasTeamPrototypeId = false;
        result.teamPrototypeId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> PlayerDbGuidsList {
        get { return PrepareBuilder().playerDbGuids_; }
      }
      public int PlayerDbGuidsCount {
        get { return result.PlayerDbGuidsCount; }
      }
      public ulong GetPlayerDbGuids(int index) {
        return result.GetPlayerDbGuids(index);
      }
      public Builder SetPlayerDbGuids(int index, ulong value) {
        PrepareBuilder();
        result.playerDbGuids_[index] = value;
        return this;
      }
      public Builder AddPlayerDbGuids(ulong value) {
        PrepareBuilder();
        result.playerDbGuids_.Add(value);
        return this;
      }
      public Builder AddRangePlayerDbGuids(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.playerDbGuids_.Add(values);
        return this;
      }
      public Builder ClearPlayerDbGuids() {
        PrepareBuilder();
        result.playerDbGuids_.Clear();
        return this;
      }
    }
    static NetMessageMatchTeamRosterNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchTeamSizeNotification : pb::GeneratedMessage<NetMessageMatchTeamSizeNotification, NetMessageMatchTeamSizeNotification.Builder> {
    private NetMessageMatchTeamSizeNotification() { }
    private static readonly NetMessageMatchTeamSizeNotification defaultInstance = new NetMessageMatchTeamSizeNotification().MakeReadOnly();
    private static readonly string[] _netMessageMatchTeamSizeNotificationFieldNames = new string[] { "metaGameEntityId", "teamSize" };
    private static readonly uint[] _netMessageMatchTeamSizeNotificationFieldTags = new uint[] { 8, 16 };
    public static NetMessageMatchTeamSizeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchTeamSizeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchTeamSizeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamSizeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchTeamSizeNotification, NetMessageMatchTeamSizeNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchTeamSizeNotification__FieldAccessorTable; }
    }
    
    public const int MetaGameEntityIdFieldNumber = 1;
    private bool hasMetaGameEntityId;
    private ulong metaGameEntityId_;
    public bool HasMetaGameEntityId {
      get { return hasMetaGameEntityId; }
    }
    public ulong MetaGameEntityId {
      get { return metaGameEntityId_; }
    }
    
    public const int TeamSizeFieldNumber = 2;
    private bool hasTeamSize;
    private uint teamSize_;
    public bool HasTeamSize {
      get { return hasTeamSize; }
    }
    public uint TeamSize {
      get { return teamSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameEntityId) return false;
        if (!hasTeamSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchTeamSizeNotificationFieldNames;
      if (hasMetaGameEntityId) {
        output.WriteUInt64(1, field_names[0], MetaGameEntityId);
      }
      if (hasTeamSize) {
        output.WriteUInt32(2, field_names[1], TeamSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameEntityId);
      }
      if (hasTeamSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TeamSize);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchTeamSizeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchTeamSizeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchTeamSizeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchTeamSizeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchTeamSizeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchTeamSizeNotification result;
      
      private NetMessageMatchTeamSizeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchTeamSizeNotification original = result;
          result = new NetMessageMatchTeamSizeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchTeamSizeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchTeamSizeNotification.Descriptor; }
      }
      
      public override NetMessageMatchTeamSizeNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchTeamSizeNotification.DefaultInstance; }
      }
      
      public override NetMessageMatchTeamSizeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchTeamSizeNotification) {
          return MergeFrom((NetMessageMatchTeamSizeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchTeamSizeNotification other) {
        if (other == global::Gazillion.NetMessageMatchTeamSizeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameEntityId) {
          MetaGameEntityId = other.MetaGameEntityId;
        }
        if (other.HasTeamSize) {
          TeamSize = other.TeamSize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchTeamSizeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchTeamSizeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameEntityId = input.ReadUInt64(ref result.metaGameEntityId_);
              break;
            }
            case 16: {
              result.hasTeamSize = input.ReadUInt32(ref result.teamSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameEntityId {
        get { return result.hasMetaGameEntityId; }
      }
      public ulong MetaGameEntityId {
        get { return result.MetaGameEntityId; }
        set { SetMetaGameEntityId(value); }
      }
      public Builder SetMetaGameEntityId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameEntityId = true;
        result.metaGameEntityId_ = value;
        return this;
      }
      public Builder ClearMetaGameEntityId() {
        PrepareBuilder();
        result.hasMetaGameEntityId = false;
        result.metaGameEntityId_ = 0UL;
        return this;
      }
      
      public bool HasTeamSize {
        get { return result.hasTeamSize; }
      }
      public uint TeamSize {
        get { return result.TeamSize; }
        set { SetTeamSize(value); }
      }
      public Builder SetTeamSize(uint value) {
        PrepareBuilder();
        result.hasTeamSize = true;
        result.teamSize_ = value;
        return this;
      }
      public Builder ClearTeamSize() {
        PrepareBuilder();
        result.hasTeamSize = false;
        result.teamSize_ = 0;
        return this;
      }
    }
    static NetMessageMatchTeamSizeNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatFromGameSystem : pb::GeneratedMessage<NetMessageChatFromGameSystem, NetMessageChatFromGameSystem.Builder> {
    private NetMessageChatFromGameSystem() { }
    private static readonly NetMessageChatFromGameSystem defaultInstance = new NetMessageChatFromGameSystem().MakeReadOnly();
    private static readonly string[] _netMessageChatFromGameSystemFieldNames = new string[] { "argStringIds", "messageStringId", "sourceStringId" };
    private static readonly uint[] _netMessageChatFromGameSystemFieldTags = new uint[] { 24, 16, 8 };
    public static NetMessageChatFromGameSystem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatFromGameSystem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatFromGameSystem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromGameSystem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatFromGameSystem, NetMessageChatFromGameSystem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromGameSystem__FieldAccessorTable; }
    }
    
    public const int SourceStringIdFieldNumber = 1;
    private bool hasSourceStringId;
    private ulong sourceStringId_;
    public bool HasSourceStringId {
      get { return hasSourceStringId; }
    }
    public ulong SourceStringId {
      get { return sourceStringId_; }
    }
    
    public const int MessageStringIdFieldNumber = 2;
    private bool hasMessageStringId;
    private ulong messageStringId_;
    public bool HasMessageStringId {
      get { return hasMessageStringId; }
    }
    public ulong MessageStringId {
      get { return messageStringId_; }
    }
    
    public const int ArgStringIdsFieldNumber = 3;
    private pbc::PopsicleList<ulong> argStringIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ArgStringIdsList {
      get { return pbc::Lists.AsReadOnly(argStringIds_); }
    }
    public int ArgStringIdsCount {
      get { return argStringIds_.Count; }
    }
    public ulong GetArgStringIds(int index) {
      return argStringIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourceStringId) return false;
        if (!hasMessageStringId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatFromGameSystemFieldNames;
      if (hasSourceStringId) {
        output.WriteUInt64(1, field_names[2], SourceStringId);
      }
      if (hasMessageStringId) {
        output.WriteUInt64(2, field_names[1], MessageStringId);
      }
      if (argStringIds_.Count > 0) {
        output.WriteUInt64Array(3, field_names[0], argStringIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSourceStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SourceStringId);
      }
      if (hasMessageStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MessageStringId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ArgStringIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * argStringIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromGameSystem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatFromGameSystem MakeReadOnly() {
      argStringIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatFromGameSystem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatFromGameSystem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatFromGameSystem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatFromGameSystem result;
      
      private NetMessageChatFromGameSystem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatFromGameSystem original = result;
          result = new NetMessageChatFromGameSystem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatFromGameSystem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatFromGameSystem.Descriptor; }
      }
      
      public override NetMessageChatFromGameSystem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatFromGameSystem.DefaultInstance; }
      }
      
      public override NetMessageChatFromGameSystem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatFromGameSystem) {
          return MergeFrom((NetMessageChatFromGameSystem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatFromGameSystem other) {
        if (other == global::Gazillion.NetMessageChatFromGameSystem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSourceStringId) {
          SourceStringId = other.SourceStringId;
        }
        if (other.HasMessageStringId) {
          MessageStringId = other.MessageStringId;
        }
        if (other.argStringIds_.Count != 0) {
          result.argStringIds_.Add(other.argStringIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatFromGameSystemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatFromGameSystemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSourceStringId = input.ReadUInt64(ref result.sourceStringId_);
              break;
            }
            case 16: {
              result.hasMessageStringId = input.ReadUInt64(ref result.messageStringId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.argStringIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSourceStringId {
        get { return result.hasSourceStringId; }
      }
      public ulong SourceStringId {
        get { return result.SourceStringId; }
        set { SetSourceStringId(value); }
      }
      public Builder SetSourceStringId(ulong value) {
        PrepareBuilder();
        result.hasSourceStringId = true;
        result.sourceStringId_ = value;
        return this;
      }
      public Builder ClearSourceStringId() {
        PrepareBuilder();
        result.hasSourceStringId = false;
        result.sourceStringId_ = 0UL;
        return this;
      }
      
      public bool HasMessageStringId {
        get { return result.hasMessageStringId; }
      }
      public ulong MessageStringId {
        get { return result.MessageStringId; }
        set { SetMessageStringId(value); }
      }
      public Builder SetMessageStringId(ulong value) {
        PrepareBuilder();
        result.hasMessageStringId = true;
        result.messageStringId_ = value;
        return this;
      }
      public Builder ClearMessageStringId() {
        PrepareBuilder();
        result.hasMessageStringId = false;
        result.messageStringId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ArgStringIdsList {
        get { return PrepareBuilder().argStringIds_; }
      }
      public int ArgStringIdsCount {
        get { return result.ArgStringIdsCount; }
      }
      public ulong GetArgStringIds(int index) {
        return result.GetArgStringIds(index);
      }
      public Builder SetArgStringIds(int index, ulong value) {
        PrepareBuilder();
        result.argStringIds_[index] = value;
        return this;
      }
      public Builder AddArgStringIds(ulong value) {
        PrepareBuilder();
        result.argStringIds_.Add(value);
        return this;
      }
      public Builder AddRangeArgStringIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.argStringIds_.Add(values);
        return this;
      }
      public Builder ClearArgStringIds() {
        PrepareBuilder();
        result.argStringIds_.Clear();
        return this;
      }
    }
    static NetMessageChatFromGameSystem() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatFromMetaGame : pb::GeneratedMessage<NetMessageChatFromMetaGame, NetMessageChatFromMetaGame.Builder> {
    private NetMessageChatFromMetaGame() { }
    private static readonly NetMessageChatFromMetaGame defaultInstance = new NetMessageChatFromMetaGame().MakeReadOnly();
    private static readonly string[] _netMessageChatFromMetaGameFieldNames = new string[] { "argStringIds", "messageStringId", "playerName1", "playerName2", "sourceStringId" };
    private static readonly uint[] _netMessageChatFromMetaGameFieldTags = new uint[] { 40, 16, 26, 34, 8 };
    public static NetMessageChatFromMetaGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatFromMetaGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatFromMetaGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromMetaGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatFromMetaGame, NetMessageChatFromMetaGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatFromMetaGame__FieldAccessorTable; }
    }
    
    public const int SourceStringIdFieldNumber = 1;
    private bool hasSourceStringId;
    private ulong sourceStringId_;
    public bool HasSourceStringId {
      get { return hasSourceStringId; }
    }
    public ulong SourceStringId {
      get { return sourceStringId_; }
    }
    
    public const int MessageStringIdFieldNumber = 2;
    private bool hasMessageStringId;
    private ulong messageStringId_;
    public bool HasMessageStringId {
      get { return hasMessageStringId; }
    }
    public ulong MessageStringId {
      get { return messageStringId_; }
    }
    
    public const int PlayerName1FieldNumber = 3;
    private bool hasPlayerName1;
    private string playerName1_ = "";
    public bool HasPlayerName1 {
      get { return hasPlayerName1; }
    }
    public string PlayerName1 {
      get { return playerName1_; }
    }
    
    public const int PlayerName2FieldNumber = 4;
    private bool hasPlayerName2;
    private string playerName2_ = "";
    public bool HasPlayerName2 {
      get { return hasPlayerName2; }
    }
    public string PlayerName2 {
      get { return playerName2_; }
    }
    
    public const int ArgStringIdsFieldNumber = 5;
    private pbc::PopsicleList<ulong> argStringIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ArgStringIdsList {
      get { return pbc::Lists.AsReadOnly(argStringIds_); }
    }
    public int ArgStringIdsCount {
      get { return argStringIds_.Count; }
    }
    public ulong GetArgStringIds(int index) {
      return argStringIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSourceStringId) return false;
        if (!hasMessageStringId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatFromMetaGameFieldNames;
      if (hasSourceStringId) {
        output.WriteUInt64(1, field_names[4], SourceStringId);
      }
      if (hasMessageStringId) {
        output.WriteUInt64(2, field_names[1], MessageStringId);
      }
      if (hasPlayerName1) {
        output.WriteString(3, field_names[2], PlayerName1);
      }
      if (hasPlayerName2) {
        output.WriteString(4, field_names[3], PlayerName2);
      }
      if (argStringIds_.Count > 0) {
        output.WriteUInt64Array(5, field_names[0], argStringIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSourceStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SourceStringId);
      }
      if (hasMessageStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MessageStringId);
      }
      if (hasPlayerName1) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName1);
      }
      if (hasPlayerName2) {
        size += pb::CodedOutputStream.ComputeStringSize(4, PlayerName2);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ArgStringIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * argStringIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatFromMetaGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatFromMetaGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatFromMetaGame MakeReadOnly() {
      argStringIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatFromMetaGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatFromMetaGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatFromMetaGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatFromMetaGame result;
      
      private NetMessageChatFromMetaGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatFromMetaGame original = result;
          result = new NetMessageChatFromMetaGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatFromMetaGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatFromMetaGame.Descriptor; }
      }
      
      public override NetMessageChatFromMetaGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatFromMetaGame.DefaultInstance; }
      }
      
      public override NetMessageChatFromMetaGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatFromMetaGame) {
          return MergeFrom((NetMessageChatFromMetaGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatFromMetaGame other) {
        if (other == global::Gazillion.NetMessageChatFromMetaGame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSourceStringId) {
          SourceStringId = other.SourceStringId;
        }
        if (other.HasMessageStringId) {
          MessageStringId = other.MessageStringId;
        }
        if (other.HasPlayerName1) {
          PlayerName1 = other.PlayerName1;
        }
        if (other.HasPlayerName2) {
          PlayerName2 = other.PlayerName2;
        }
        if (other.argStringIds_.Count != 0) {
          result.argStringIds_.Add(other.argStringIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatFromMetaGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatFromMetaGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSourceStringId = input.ReadUInt64(ref result.sourceStringId_);
              break;
            }
            case 16: {
              result.hasMessageStringId = input.ReadUInt64(ref result.messageStringId_);
              break;
            }
            case 26: {
              result.hasPlayerName1 = input.ReadString(ref result.playerName1_);
              break;
            }
            case 34: {
              result.hasPlayerName2 = input.ReadString(ref result.playerName2_);
              break;
            }
            case 42:
            case 40: {
              input.ReadUInt64Array(tag, field_name, result.argStringIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSourceStringId {
        get { return result.hasSourceStringId; }
      }
      public ulong SourceStringId {
        get { return result.SourceStringId; }
        set { SetSourceStringId(value); }
      }
      public Builder SetSourceStringId(ulong value) {
        PrepareBuilder();
        result.hasSourceStringId = true;
        result.sourceStringId_ = value;
        return this;
      }
      public Builder ClearSourceStringId() {
        PrepareBuilder();
        result.hasSourceStringId = false;
        result.sourceStringId_ = 0UL;
        return this;
      }
      
      public bool HasMessageStringId {
        get { return result.hasMessageStringId; }
      }
      public ulong MessageStringId {
        get { return result.MessageStringId; }
        set { SetMessageStringId(value); }
      }
      public Builder SetMessageStringId(ulong value) {
        PrepareBuilder();
        result.hasMessageStringId = true;
        result.messageStringId_ = value;
        return this;
      }
      public Builder ClearMessageStringId() {
        PrepareBuilder();
        result.hasMessageStringId = false;
        result.messageStringId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName1 {
        get { return result.hasPlayerName1; }
      }
      public string PlayerName1 {
        get { return result.PlayerName1; }
        set { SetPlayerName1(value); }
      }
      public Builder SetPlayerName1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName1 = true;
        result.playerName1_ = value;
        return this;
      }
      public Builder ClearPlayerName1() {
        PrepareBuilder();
        result.hasPlayerName1 = false;
        result.playerName1_ = "";
        return this;
      }
      
      public bool HasPlayerName2 {
        get { return result.hasPlayerName2; }
      }
      public string PlayerName2 {
        get { return result.PlayerName2; }
        set { SetPlayerName2(value); }
      }
      public Builder SetPlayerName2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName2 = true;
        result.playerName2_ = value;
        return this;
      }
      public Builder ClearPlayerName2() {
        PrepareBuilder();
        result.hasPlayerName2 = false;
        result.playerName2_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ArgStringIdsList {
        get { return PrepareBuilder().argStringIds_; }
      }
      public int ArgStringIdsCount {
        get { return result.ArgStringIdsCount; }
      }
      public ulong GetArgStringIds(int index) {
        return result.GetArgStringIds(index);
      }
      public Builder SetArgStringIds(int index, ulong value) {
        PrepareBuilder();
        result.argStringIds_[index] = value;
        return this;
      }
      public Builder AddArgStringIds(ulong value) {
        PrepareBuilder();
        result.argStringIds_.Add(value);
        return this;
      }
      public Builder AddRangeArgStringIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.argStringIds_.Add(values);
        return this;
      }
      public Builder ClearArgStringIds() {
        PrepareBuilder();
        result.argStringIds_.Clear();
        return this;
      }
    }
    static NetMessageChatFromMetaGame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBroadcastRareItem : pb::GeneratedMessage<NetMessageBroadcastRareItem, NetMessageBroadcastRareItem.Builder> {
    private NetMessageBroadcastRareItem() { }
    private static readonly NetMessageBroadcastRareItem defaultInstance = new NetMessageBroadcastRareItem().MakeReadOnly();
    private static readonly string[] _netMessageBroadcastRareItemFieldNames = new string[] { "item", "playerName", "roomType" };
    private static readonly uint[] _netMessageBroadcastRareItemFieldTags = new uint[] { 18, 10, 24 };
    public static NetMessageBroadcastRareItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBroadcastRareItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBroadcastRareItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBroadcastRareItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBroadcastRareItem, NetMessageBroadcastRareItem.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBroadcastRareItem__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::Gazillion.NetStructItemSpec item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::Gazillion.NetStructItemSpec Item {
      get { return item_ ?? global::Gazillion.NetStructItemSpec.DefaultInstance; }
    }
    
    public const int RoomTypeFieldNumber = 3;
    private bool hasRoomType;
    private global::Gazillion.ChatRoomTypes roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public global::Gazillion.ChatRoomTypes RoomType {
      get { return roomType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        if (!hasItem) return false;
        if (!hasRoomType) return false;
        if (!Item.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBroadcastRareItemFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[1], PlayerName);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[0], Item);
      }
      if (hasRoomType) {
        output.WriteEnum(3, field_names[2], (int) RoomType, RoomType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) RoomType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBroadcastRareItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBroadcastRareItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBroadcastRareItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBroadcastRareItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBroadcastRareItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBroadcastRareItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBroadcastRareItem result;
      
      private NetMessageBroadcastRareItem PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBroadcastRareItem original = result;
          result = new NetMessageBroadcastRareItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBroadcastRareItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBroadcastRareItem.Descriptor; }
      }
      
      public override NetMessageBroadcastRareItem DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBroadcastRareItem.DefaultInstance; }
      }
      
      public override NetMessageBroadcastRareItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBroadcastRareItem) {
          return MergeFrom((NetMessageBroadcastRareItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBroadcastRareItem other) {
        if (other == global::Gazillion.NetMessageBroadcastRareItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBroadcastRareItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBroadcastRareItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructItemSpec.Builder subBuilder = global::Gazillion.NetStructItemSpec.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.roomType_, out unknown)) {
                result.hasRoomType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::Gazillion.NetStructItemSpec Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::Gazillion.NetStructItemSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::Gazillion.NetStructItemSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::Gazillion.NetStructItemSpec.DefaultInstance) {
            result.item_ = global::Gazillion.NetStructItemSpec.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasRoomType {
       get { return result.hasRoomType; }
      }
      public global::Gazillion.ChatRoomTypes RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(global::Gazillion.ChatRoomTypes value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = global::Gazillion.ChatRoomTypes.CHAT_ROOM_TYPE_LOCAL;
        return this;
      }
    }
    static NetMessageBroadcastRareItem() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChatError : pb::GeneratedMessage<NetMessageChatError, NetMessageChatError.Builder> {
    private NetMessageChatError() { }
    private static readonly NetMessageChatError defaultInstance = new NetMessageChatError().MakeReadOnly();
    private static readonly string[] _netMessageChatErrorFieldNames = new string[] { "errorMessage" };
    private static readonly uint[] _netMessageChatErrorFieldTags = new uint[] { 8 };
    public static NetMessageChatError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChatError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChatError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChatError, NetMessageChatError.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChatError__FieldAccessorTable; }
    }
    
    public const int ErrorMessageFieldNumber = 1;
    private bool hasErrorMessage;
    private global::Gazillion.ChatErrorMessages errorMessage_ = global::Gazillion.ChatErrorMessages.CHAT_ERROR_NO_SUCH_USER;
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public global::Gazillion.ChatErrorMessages ErrorMessage {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChatErrorFieldNames;
      if (hasErrorMessage) {
        output.WriteEnum(1, field_names[0], (int) ErrorMessage, ErrorMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasErrorMessage) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ErrorMessage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChatError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChatError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChatError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChatError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChatError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChatError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChatError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChatError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChatError result;
      
      private NetMessageChatError PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChatError original = result;
          result = new NetMessageChatError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChatError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChatError.Descriptor; }
      }
      
      public override NetMessageChatError DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChatError.DefaultInstance; }
      }
      
      public override NetMessageChatError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChatError) {
          return MergeFrom((NetMessageChatError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChatError other) {
        if (other == global::Gazillion.NetMessageChatError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChatErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChatErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.errorMessage_, out unknown)) {
                result.hasErrorMessage = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorMessage {
       get { return result.hasErrorMessage; }
      }
      public global::Gazillion.ChatErrorMessages ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(global::Gazillion.ChatErrorMessages value) {
        PrepareBuilder();
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        PrepareBuilder();
        result.hasErrorMessage = false;
        result.errorMessage_ = global::Gazillion.ChatErrorMessages.CHAT_ERROR_NO_SUCH_USER;
        return this;
      }
    }
    static NetMessageChatError() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCatalogItems : pb::GeneratedMessage<NetMessageCatalogItems, NetMessageCatalogItems.Builder> {
    private NetMessageCatalogItems() { }
    private static readonly NetMessageCatalogItems defaultInstance = new NetMessageCatalogItems().MakeReadOnly();
    private static readonly string[] _netMessageCatalogItemsFieldNames = new string[] { "clientmustdownloadimages", "entries", "timestamp_microseconds", "timestamp_seconds", "urls" };
    private static readonly uint[] _netMessageCatalogItemsFieldTags = new uint[] { 40, 26, 16, 8, 34 };
    public static NetMessageCatalogItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCatalogItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCatalogItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCatalogItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCatalogItems, NetMessageCatalogItems.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCatalogItems__FieldAccessorTable; }
    }
    
    public const int TimestampSecondsFieldNumber = 1;
    private bool hasTimestampSeconds;
    private long timestampSeconds_;
    public bool HasTimestampSeconds {
      get { return hasTimestampSeconds; }
    }
    public long TimestampSeconds {
      get { return timestampSeconds_; }
    }
    
    public const int TimestampMicrosecondsFieldNumber = 2;
    private bool hasTimestampMicroseconds;
    private long timestampMicroseconds_;
    public bool HasTimestampMicroseconds {
      get { return hasTimestampMicroseconds; }
    }
    public long TimestampMicroseconds {
      get { return timestampMicroseconds_; }
    }
    
    public const int EntriesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.MarvelHeroesCatalogEntry> entries_ = new pbc::PopsicleList<global::Gazillion.MarvelHeroesCatalogEntry>();
    public scg::IList<global::Gazillion.MarvelHeroesCatalogEntry> EntriesList {
      get { return entries_; }
    }
    public int EntriesCount {
      get { return entries_.Count; }
    }
    public global::Gazillion.MarvelHeroesCatalogEntry GetEntries(int index) {
      return entries_[index];
    }
    
    public const int UrlsFieldNumber = 4;
    private pbc::PopsicleList<global::Gazillion.MHLocalizedCatalogUrls> urls_ = new pbc::PopsicleList<global::Gazillion.MHLocalizedCatalogUrls>();
    public scg::IList<global::Gazillion.MHLocalizedCatalogUrls> UrlsList {
      get { return urls_; }
    }
    public int UrlsCount {
      get { return urls_.Count; }
    }
    public global::Gazillion.MHLocalizedCatalogUrls GetUrls(int index) {
      return urls_[index];
    }
    
    public const int ClientmustdownloadimagesFieldNumber = 5;
    private bool hasClientmustdownloadimages;
    private bool clientmustdownloadimages_;
    public bool HasClientmustdownloadimages {
      get { return hasClientmustdownloadimages; }
    }
    public bool Clientmustdownloadimages {
      get { return clientmustdownloadimages_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.MarvelHeroesCatalogEntry element in EntriesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.MHLocalizedCatalogUrls element in UrlsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCatalogItemsFieldNames;
      if (hasTimestampSeconds) {
        output.WriteInt64(1, field_names[3], TimestampSeconds);
      }
      if (hasTimestampMicroseconds) {
        output.WriteInt64(2, field_names[2], TimestampMicroseconds);
      }
      if (entries_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], entries_);
      }
      if (urls_.Count > 0) {
        output.WriteMessageArray(4, field_names[4], urls_);
      }
      if (hasClientmustdownloadimages) {
        output.WriteBool(5, field_names[0], Clientmustdownloadimages);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestampSeconds) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, TimestampSeconds);
      }
      if (hasTimestampMicroseconds) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, TimestampMicroseconds);
      }
      foreach (global::Gazillion.MarvelHeroesCatalogEntry element in EntriesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::Gazillion.MHLocalizedCatalogUrls element in UrlsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasClientmustdownloadimages) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Clientmustdownloadimages);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCatalogItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCatalogItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCatalogItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCatalogItems MakeReadOnly() {
      entries_.MakeReadOnly();
      urls_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCatalogItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCatalogItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCatalogItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCatalogItems result;
      
      private NetMessageCatalogItems PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCatalogItems original = result;
          result = new NetMessageCatalogItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCatalogItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCatalogItems.Descriptor; }
      }
      
      public override NetMessageCatalogItems DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCatalogItems.DefaultInstance; }
      }
      
      public override NetMessageCatalogItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCatalogItems) {
          return MergeFrom((NetMessageCatalogItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCatalogItems other) {
        if (other == global::Gazillion.NetMessageCatalogItems.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestampSeconds) {
          TimestampSeconds = other.TimestampSeconds;
        }
        if (other.HasTimestampMicroseconds) {
          TimestampMicroseconds = other.TimestampMicroseconds;
        }
        if (other.entries_.Count != 0) {
          result.entries_.Add(other.entries_);
        }
        if (other.urls_.Count != 0) {
          result.urls_.Add(other.urls_);
        }
        if (other.HasClientmustdownloadimages) {
          Clientmustdownloadimages = other.Clientmustdownloadimages;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCatalogItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCatalogItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestampSeconds = input.ReadInt64(ref result.timestampSeconds_);
              break;
            }
            case 16: {
              result.hasTimestampMicroseconds = input.ReadInt64(ref result.timestampMicroseconds_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entries_, global::Gazillion.MarvelHeroesCatalogEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.urls_, global::Gazillion.MHLocalizedCatalogUrls.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasClientmustdownloadimages = input.ReadBool(ref result.clientmustdownloadimages_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestampSeconds {
        get { return result.hasTimestampSeconds; }
      }
      public long TimestampSeconds {
        get { return result.TimestampSeconds; }
        set { SetTimestampSeconds(value); }
      }
      public Builder SetTimestampSeconds(long value) {
        PrepareBuilder();
        result.hasTimestampSeconds = true;
        result.timestampSeconds_ = value;
        return this;
      }
      public Builder ClearTimestampSeconds() {
        PrepareBuilder();
        result.hasTimestampSeconds = false;
        result.timestampSeconds_ = 0L;
        return this;
      }
      
      public bool HasTimestampMicroseconds {
        get { return result.hasTimestampMicroseconds; }
      }
      public long TimestampMicroseconds {
        get { return result.TimestampMicroseconds; }
        set { SetTimestampMicroseconds(value); }
      }
      public Builder SetTimestampMicroseconds(long value) {
        PrepareBuilder();
        result.hasTimestampMicroseconds = true;
        result.timestampMicroseconds_ = value;
        return this;
      }
      public Builder ClearTimestampMicroseconds() {
        PrepareBuilder();
        result.hasTimestampMicroseconds = false;
        result.timestampMicroseconds_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MarvelHeroesCatalogEntry> EntriesList {
        get { return PrepareBuilder().entries_; }
      }
      public int EntriesCount {
        get { return result.EntriesCount; }
      }
      public global::Gazillion.MarvelHeroesCatalogEntry GetEntries(int index) {
        return result.GetEntries(index);
      }
      public Builder SetEntries(int index, global::Gazillion.MarvelHeroesCatalogEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_[index] = value;
        return this;
      }
      public Builder SetEntries(int index, global::Gazillion.MarvelHeroesCatalogEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntries(global::Gazillion.MarvelHeroesCatalogEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_.Add(value);
        return this;
      }
      public Builder AddEntries(global::Gazillion.MarvelHeroesCatalogEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntries(scg::IEnumerable<global::Gazillion.MarvelHeroesCatalogEntry> values) {
        PrepareBuilder();
        result.entries_.Add(values);
        return this;
      }
      public Builder ClearEntries() {
        PrepareBuilder();
        result.entries_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.MHLocalizedCatalogUrls> UrlsList {
        get { return PrepareBuilder().urls_; }
      }
      public int UrlsCount {
        get { return result.UrlsCount; }
      }
      public global::Gazillion.MHLocalizedCatalogUrls GetUrls(int index) {
        return result.GetUrls(index);
      }
      public Builder SetUrls(int index, global::Gazillion.MHLocalizedCatalogUrls value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urls_[index] = value;
        return this;
      }
      public Builder SetUrls(int index, global::Gazillion.MHLocalizedCatalogUrls.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUrls(global::Gazillion.MHLocalizedCatalogUrls value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urls_.Add(value);
        return this;
      }
      public Builder AddUrls(global::Gazillion.MHLocalizedCatalogUrls.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUrls(scg::IEnumerable<global::Gazillion.MHLocalizedCatalogUrls> values) {
        PrepareBuilder();
        result.urls_.Add(values);
        return this;
      }
      public Builder ClearUrls() {
        PrepareBuilder();
        result.urls_.Clear();
        return this;
      }
      
      public bool HasClientmustdownloadimages {
        get { return result.hasClientmustdownloadimages; }
      }
      public bool Clientmustdownloadimages {
        get { return result.Clientmustdownloadimages; }
        set { SetClientmustdownloadimages(value); }
      }
      public Builder SetClientmustdownloadimages(bool value) {
        PrepareBuilder();
        result.hasClientmustdownloadimages = true;
        result.clientmustdownloadimages_ = value;
        return this;
      }
      public Builder ClearClientmustdownloadimages() {
        PrepareBuilder();
        result.hasClientmustdownloadimages = false;
        result.clientmustdownloadimages_ = false;
        return this;
      }
    }
    static NetMessageCatalogItems() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AwardCouponEntryDesc : pb::GeneratedMessage<AwardCouponEntryDesc, AwardCouponEntryDesc.Builder> {
    private AwardCouponEntryDesc() { }
    private static readonly AwardCouponEntryDesc defaultInstance = new AwardCouponEntryDesc().MakeReadOnly();
    private static readonly string[] _awardCouponEntryDescFieldNames = new string[] { "description", "localeId" };
    private static readonly uint[] _awardCouponEntryDescFieldTags = new uint[] { 18, 10 };
    public static AwardCouponEntryDesc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AwardCouponEntryDesc DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AwardCouponEntryDesc ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardCouponEntryDesc__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AwardCouponEntryDesc, AwardCouponEntryDesc.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardCouponEntryDesc__FieldAccessorTable; }
    }
    
    public const int LocaleIdFieldNumber = 1;
    private bool hasLocaleId;
    private string localeId_ = "";
    public bool HasLocaleId {
      get { return hasLocaleId; }
    }
    public string LocaleId {
      get { return localeId_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocaleId) return false;
        if (!hasDescription) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _awardCouponEntryDescFieldNames;
      if (hasLocaleId) {
        output.WriteString(1, field_names[1], LocaleId);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLocaleId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, LocaleId);
      }
      if (hasDescription) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Description);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AwardCouponEntryDesc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardCouponEntryDesc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AwardCouponEntryDesc MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AwardCouponEntryDesc prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AwardCouponEntryDesc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AwardCouponEntryDesc cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AwardCouponEntryDesc result;
      
      private AwardCouponEntryDesc PrepareBuilder() {
        if (resultIsReadOnly) {
          AwardCouponEntryDesc original = result;
          result = new AwardCouponEntryDesc();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AwardCouponEntryDesc MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.AwardCouponEntryDesc.Descriptor; }
      }
      
      public override AwardCouponEntryDesc DefaultInstanceForType {
        get { return global::Gazillion.AwardCouponEntryDesc.DefaultInstance; }
      }
      
      public override AwardCouponEntryDesc BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AwardCouponEntryDesc) {
          return MergeFrom((AwardCouponEntryDesc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AwardCouponEntryDesc other) {
        if (other == global::Gazillion.AwardCouponEntryDesc.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocaleId) {
          LocaleId = other.LocaleId;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_awardCouponEntryDescFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _awardCouponEntryDescFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLocaleId = input.ReadString(ref result.localeId_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocaleId {
        get { return result.hasLocaleId; }
      }
      public string LocaleId {
        get { return result.LocaleId; }
        set { SetLocaleId(value); }
      }
      public Builder SetLocaleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocaleId = true;
        result.localeId_ = value;
        return this;
      }
      public Builder ClearLocaleId() {
        PrepareBuilder();
        result.hasLocaleId = false;
        result.localeId_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
    }
    static AwardCouponEntryDesc() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AwardCouponEntry : pb::GeneratedMessage<AwardCouponEntry, AwardCouponEntry.Builder> {
    private AwardCouponEntry() { }
    private static readonly AwardCouponEntry defaultInstance = new AwardCouponEntry().MakeReadOnly();
    private static readonly string[] _awardCouponEntryFieldNames = new string[] { "couponId", "couponState", "descriptions", "discount", "expirationDateUtc", "wsec" };
    private static readonly uint[] _awardCouponEntryFieldTags = new uint[] { 10, 26, 42, 21, 32, 48 };
    public static AwardCouponEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AwardCouponEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AwardCouponEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardCouponEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AwardCouponEntry, AwardCouponEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardCouponEntry__FieldAccessorTable; }
    }
    
    public const int CouponIdFieldNumber = 1;
    private bool hasCouponId;
    private string couponId_ = "";
    public bool HasCouponId {
      get { return hasCouponId; }
    }
    public string CouponId {
      get { return couponId_; }
    }
    
    public const int DiscountFieldNumber = 2;
    private bool hasDiscount;
    private float discount_;
    public bool HasDiscount {
      get { return hasDiscount; }
    }
    public float Discount {
      get { return discount_; }
    }
    
    public const int CouponStateFieldNumber = 3;
    private bool hasCouponState;
    private string couponState_ = "";
    public bool HasCouponState {
      get { return hasCouponState; }
    }
    public string CouponState {
      get { return couponState_; }
    }
    
    public const int ExpirationDateUtcFieldNumber = 4;
    private bool hasExpirationDateUtc;
    private long expirationDateUtc_;
    public bool HasExpirationDateUtc {
      get { return hasExpirationDateUtc; }
    }
    public long ExpirationDateUtc {
      get { return expirationDateUtc_; }
    }
    
    public const int DescriptionsFieldNumber = 5;
    private pbc::PopsicleList<global::Gazillion.AwardCouponEntryDesc> descriptions_ = new pbc::PopsicleList<global::Gazillion.AwardCouponEntryDesc>();
    public scg::IList<global::Gazillion.AwardCouponEntryDesc> DescriptionsList {
      get { return descriptions_; }
    }
    public int DescriptionsCount {
      get { return descriptions_.Count; }
    }
    public global::Gazillion.AwardCouponEntryDesc GetDescriptions(int index) {
      return descriptions_[index];
    }
    
    public const int WsecFieldNumber = 6;
    private bool hasWsec;
    private long wsec_;
    public bool HasWsec {
      get { return hasWsec; }
    }
    public long Wsec {
      get { return wsec_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCouponId) return false;
        if (!hasDiscount) return false;
        if (!hasCouponState) return false;
        if (!hasExpirationDateUtc) return false;
        if (!hasWsec) return false;
        foreach (global::Gazillion.AwardCouponEntryDesc element in DescriptionsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _awardCouponEntryFieldNames;
      if (hasCouponId) {
        output.WriteString(1, field_names[0], CouponId);
      }
      if (hasDiscount) {
        output.WriteFloat(2, field_names[3], Discount);
      }
      if (hasCouponState) {
        output.WriteString(3, field_names[1], CouponState);
      }
      if (hasExpirationDateUtc) {
        output.WriteInt64(4, field_names[4], ExpirationDateUtc);
      }
      if (descriptions_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], descriptions_);
      }
      if (hasWsec) {
        output.WriteInt64(6, field_names[5], Wsec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCouponId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, CouponId);
      }
      if (hasDiscount) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Discount);
      }
      if (hasCouponState) {
        size += pb::CodedOutputStream.ComputeStringSize(3, CouponState);
      }
      if (hasExpirationDateUtc) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, ExpirationDateUtc);
      }
      foreach (global::Gazillion.AwardCouponEntryDesc element in DescriptionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasWsec) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, Wsec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AwardCouponEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AwardCouponEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AwardCouponEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardCouponEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AwardCouponEntry MakeReadOnly() {
      descriptions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AwardCouponEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AwardCouponEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AwardCouponEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AwardCouponEntry result;
      
      private AwardCouponEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          AwardCouponEntry original = result;
          result = new AwardCouponEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AwardCouponEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.AwardCouponEntry.Descriptor; }
      }
      
      public override AwardCouponEntry DefaultInstanceForType {
        get { return global::Gazillion.AwardCouponEntry.DefaultInstance; }
      }
      
      public override AwardCouponEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AwardCouponEntry) {
          return MergeFrom((AwardCouponEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AwardCouponEntry other) {
        if (other == global::Gazillion.AwardCouponEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCouponId) {
          CouponId = other.CouponId;
        }
        if (other.HasDiscount) {
          Discount = other.Discount;
        }
        if (other.HasCouponState) {
          CouponState = other.CouponState;
        }
        if (other.HasExpirationDateUtc) {
          ExpirationDateUtc = other.ExpirationDateUtc;
        }
        if (other.descriptions_.Count != 0) {
          result.descriptions_.Add(other.descriptions_);
        }
        if (other.HasWsec) {
          Wsec = other.Wsec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_awardCouponEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _awardCouponEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCouponId = input.ReadString(ref result.couponId_);
              break;
            }
            case 21: {
              result.hasDiscount = input.ReadFloat(ref result.discount_);
              break;
            }
            case 26: {
              result.hasCouponState = input.ReadString(ref result.couponState_);
              break;
            }
            case 32: {
              result.hasExpirationDateUtc = input.ReadInt64(ref result.expirationDateUtc_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.descriptions_, global::Gazillion.AwardCouponEntryDesc.DefaultInstance, extensionRegistry);
              break;
            }
            case 48: {
              result.hasWsec = input.ReadInt64(ref result.wsec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCouponId {
        get { return result.hasCouponId; }
      }
      public string CouponId {
        get { return result.CouponId; }
        set { SetCouponId(value); }
      }
      public Builder SetCouponId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCouponId = true;
        result.couponId_ = value;
        return this;
      }
      public Builder ClearCouponId() {
        PrepareBuilder();
        result.hasCouponId = false;
        result.couponId_ = "";
        return this;
      }
      
      public bool HasDiscount {
        get { return result.hasDiscount; }
      }
      public float Discount {
        get { return result.Discount; }
        set { SetDiscount(value); }
      }
      public Builder SetDiscount(float value) {
        PrepareBuilder();
        result.hasDiscount = true;
        result.discount_ = value;
        return this;
      }
      public Builder ClearDiscount() {
        PrepareBuilder();
        result.hasDiscount = false;
        result.discount_ = 0F;
        return this;
      }
      
      public bool HasCouponState {
        get { return result.hasCouponState; }
      }
      public string CouponState {
        get { return result.CouponState; }
        set { SetCouponState(value); }
      }
      public Builder SetCouponState(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCouponState = true;
        result.couponState_ = value;
        return this;
      }
      public Builder ClearCouponState() {
        PrepareBuilder();
        result.hasCouponState = false;
        result.couponState_ = "";
        return this;
      }
      
      public bool HasExpirationDateUtc {
        get { return result.hasExpirationDateUtc; }
      }
      public long ExpirationDateUtc {
        get { return result.ExpirationDateUtc; }
        set { SetExpirationDateUtc(value); }
      }
      public Builder SetExpirationDateUtc(long value) {
        PrepareBuilder();
        result.hasExpirationDateUtc = true;
        result.expirationDateUtc_ = value;
        return this;
      }
      public Builder ClearExpirationDateUtc() {
        PrepareBuilder();
        result.hasExpirationDateUtc = false;
        result.expirationDateUtc_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.AwardCouponEntryDesc> DescriptionsList {
        get { return PrepareBuilder().descriptions_; }
      }
      public int DescriptionsCount {
        get { return result.DescriptionsCount; }
      }
      public global::Gazillion.AwardCouponEntryDesc GetDescriptions(int index) {
        return result.GetDescriptions(index);
      }
      public Builder SetDescriptions(int index, global::Gazillion.AwardCouponEntryDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.descriptions_[index] = value;
        return this;
      }
      public Builder SetDescriptions(int index, global::Gazillion.AwardCouponEntryDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.descriptions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDescriptions(global::Gazillion.AwardCouponEntryDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.descriptions_.Add(value);
        return this;
      }
      public Builder AddDescriptions(global::Gazillion.AwardCouponEntryDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.descriptions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDescriptions(scg::IEnumerable<global::Gazillion.AwardCouponEntryDesc> values) {
        PrepareBuilder();
        result.descriptions_.Add(values);
        return this;
      }
      public Builder ClearDescriptions() {
        PrepareBuilder();
        result.descriptions_.Clear();
        return this;
      }
      
      public bool HasWsec {
        get { return result.hasWsec; }
      }
      public long Wsec {
        get { return result.Wsec; }
        set { SetWsec(value); }
      }
      public Builder SetWsec(long value) {
        PrepareBuilder();
        result.hasWsec = true;
        result.wsec_ = value;
        return this;
      }
      public Builder ClearWsec() {
        PrepareBuilder();
        result.hasWsec = false;
        result.wsec_ = 0L;
        return this;
      }
    }
    static AwardCouponEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AwardItemEntry : pb::GeneratedMessage<AwardItemEntry, AwardItemEntry.Builder> {
    private AwardItemEntry() { }
    private static readonly AwardItemEntry defaultInstance = new AwardItemEntry().MakeReadOnly();
    private static readonly string[] _awardItemEntryFieldNames = new string[] { "quantity", "skuId" };
    private static readonly uint[] _awardItemEntryFieldTags = new uint[] { 16, 8 };
    public static AwardItemEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AwardItemEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AwardItemEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardItemEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AwardItemEntry, AwardItemEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AwardItemEntry__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int QuantityFieldNumber = 2;
    private bool hasQuantity;
    private long quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public long Quantity {
      get { return quantity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkuId) return false;
        if (!hasQuantity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _awardItemEntryFieldNames;
      if (hasSkuId) {
        output.WriteInt64(1, field_names[1], SkuId);
      }
      if (hasQuantity) {
        output.WriteInt64(2, field_names[0], Quantity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, SkuId);
      }
      if (hasQuantity) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Quantity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AwardItemEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AwardItemEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AwardItemEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AwardItemEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AwardItemEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AwardItemEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AwardItemEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AwardItemEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AwardItemEntry result;
      
      private AwardItemEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          AwardItemEntry original = result;
          result = new AwardItemEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AwardItemEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.AwardItemEntry.Descriptor; }
      }
      
      public override AwardItemEntry DefaultInstanceForType {
        get { return global::Gazillion.AwardItemEntry.DefaultInstance; }
      }
      
      public override AwardItemEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AwardItemEntry) {
          return MergeFrom((AwardItemEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AwardItemEntry other) {
        if (other == global::Gazillion.AwardItemEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_awardItemEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _awardItemEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 16: {
              result.hasQuantity = input.ReadInt64(ref result.quantity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public long Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(long value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0L;
        return this;
      }
    }
    static AwardItemEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGetCurrencyBalanceResponse : pb::GeneratedMessage<NetMessageGetCurrencyBalanceResponse, NetMessageGetCurrencyBalanceResponse.Builder> {
    private NetMessageGetCurrencyBalanceResponse() { }
    private static readonly NetMessageGetCurrencyBalanceResponse defaultInstance = new NetMessageGetCurrencyBalanceResponse().MakeReadOnly();
    private static readonly string[] _netMessageGetCurrencyBalanceResponseFieldNames = new string[] { "coupon", "currencyBalance" };
    private static readonly uint[] _netMessageGetCurrencyBalanceResponseFieldTags = new uint[] { 18, 8 };
    public static NetMessageGetCurrencyBalanceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGetCurrencyBalanceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGetCurrencyBalanceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGetCurrencyBalanceResponse, NetMessageGetCurrencyBalanceResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGetCurrencyBalanceResponse__FieldAccessorTable; }
    }
    
    public const int CurrencyBalanceFieldNumber = 1;
    private bool hasCurrencyBalance;
    private long currencyBalance_;
    public bool HasCurrencyBalance {
      get { return hasCurrencyBalance; }
    }
    public long CurrencyBalance {
      get { return currencyBalance_; }
    }
    
    public const int CouponFieldNumber = 2;
    private bool hasCoupon;
    private global::Gazillion.AwardCouponEntry coupon_;
    public bool HasCoupon {
      get { return hasCoupon; }
    }
    public global::Gazillion.AwardCouponEntry Coupon {
      get { return coupon_ ?? global::Gazillion.AwardCouponEntry.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrencyBalance) return false;
        if (HasCoupon) {
          if (!Coupon.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGetCurrencyBalanceResponseFieldNames;
      if (hasCurrencyBalance) {
        output.WriteInt64(1, field_names[1], CurrencyBalance);
      }
      if (hasCoupon) {
        output.WriteMessage(2, field_names[0], Coupon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, CurrencyBalance);
      }
      if (hasCoupon) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Coupon);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGetCurrencyBalanceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGetCurrencyBalanceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGetCurrencyBalanceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGetCurrencyBalanceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGetCurrencyBalanceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGetCurrencyBalanceResponse result;
      
      private NetMessageGetCurrencyBalanceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGetCurrencyBalanceResponse original = result;
          result = new NetMessageGetCurrencyBalanceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGetCurrencyBalanceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalanceResponse.Descriptor; }
      }
      
      public override NetMessageGetCurrencyBalanceResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGetCurrencyBalanceResponse.DefaultInstance; }
      }
      
      public override NetMessageGetCurrencyBalanceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGetCurrencyBalanceResponse) {
          return MergeFrom((NetMessageGetCurrencyBalanceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGetCurrencyBalanceResponse other) {
        if (other == global::Gazillion.NetMessageGetCurrencyBalanceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrencyBalance) {
          CurrencyBalance = other.CurrencyBalance;
        }
        if (other.HasCoupon) {
          MergeCoupon(other.Coupon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGetCurrencyBalanceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGetCurrencyBalanceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrencyBalance = input.ReadInt64(ref result.currencyBalance_);
              break;
            }
            case 18: {
              global::Gazillion.AwardCouponEntry.Builder subBuilder = global::Gazillion.AwardCouponEntry.CreateBuilder();
              if (result.hasCoupon) {
                subBuilder.MergeFrom(Coupon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coupon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrencyBalance {
        get { return result.hasCurrencyBalance; }
      }
      public long CurrencyBalance {
        get { return result.CurrencyBalance; }
        set { SetCurrencyBalance(value); }
      }
      public Builder SetCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrencyBalance = true;
        result.currencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrencyBalance = false;
        result.currencyBalance_ = 0L;
        return this;
      }
      
      public bool HasCoupon {
       get { return result.hasCoupon; }
      }
      public global::Gazillion.AwardCouponEntry Coupon {
        get { return result.Coupon; }
        set { SetCoupon(value); }
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = value;
        return this;
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoupon &&
            result.coupon_ != global::Gazillion.AwardCouponEntry.DefaultInstance) {
            result.coupon_ = global::Gazillion.AwardCouponEntry.CreateBuilder(result.coupon_).MergeFrom(value).BuildPartial();
        } else {
          result.coupon_ = value;
        }
        result.hasCoupon = true;
        return this;
      }
      public Builder ClearCoupon() {
        PrepareBuilder();
        result.hasCoupon = false;
        result.coupon_ = null;
        return this;
      }
    }
    static NetMessageGetCurrencyBalanceResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyItemFromCatalogResponse : pb::GeneratedMessage<NetMessageBuyItemFromCatalogResponse, NetMessageBuyItemFromCatalogResponse.Builder> {
    private NetMessageBuyItemFromCatalogResponse() { }
    private static readonly NetMessageBuyItemFromCatalogResponse defaultInstance = new NetMessageBuyItemFromCatalogResponse().MakeReadOnly();
    private static readonly string[] _netMessageBuyItemFromCatalogResponseFieldNames = new string[] { "coupon", "currentCurrencyBalance", "didSucceed", "errorcode", "errormessage", "isWebPurchase", "protototypeIds", "skuId" };
    private static readonly uint[] _netMessageBuyItemFromCatalogResponseFieldTags = new uint[] { 66, 16, 8, 32, 26, 48, 56, 40 };
    public static NetMessageBuyItemFromCatalogResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyItemFromCatalogResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyItemFromCatalogResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyItemFromCatalogResponse, NetMessageBuyItemFromCatalogResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyItemFromCatalogResponse__FieldAccessorTable; }
    }
    
    public const int DidSucceedFieldNumber = 1;
    private bool hasDidSucceed;
    private bool didSucceed_;
    public bool HasDidSucceed {
      get { return hasDidSucceed; }
    }
    public bool DidSucceed {
      get { return didSucceed_; }
    }
    
    public const int CurrentCurrencyBalanceFieldNumber = 2;
    private bool hasCurrentCurrencyBalance;
    private long currentCurrencyBalance_;
    public bool HasCurrentCurrencyBalance {
      get { return hasCurrentCurrencyBalance; }
    }
    public long CurrentCurrencyBalance {
      get { return currentCurrencyBalance_; }
    }
    
    public const int ErrormessageFieldNumber = 3;
    private bool hasErrormessage;
    private string errormessage_ = "";
    public bool HasErrormessage {
      get { return hasErrormessage; }
    }
    public string Errormessage {
      get { return errormessage_; }
    }
    
    public const int ErrorcodeFieldNumber = 4;
    private bool hasErrorcode;
    private global::Gazillion.BuyItemResultErrorCodes errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
    public bool HasErrorcode {
      get { return hasErrorcode; }
    }
    public global::Gazillion.BuyItemResultErrorCodes Errorcode {
      get { return errorcode_; }
    }
    
    public const int SkuIdFieldNumber = 5;
    private bool hasSkuId;
    private long skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public long SkuId {
      get { return skuId_; }
    }
    
    public const int IsWebPurchaseFieldNumber = 6;
    private bool hasIsWebPurchase;
    private bool isWebPurchase_;
    public bool HasIsWebPurchase {
      get { return hasIsWebPurchase; }
    }
    public bool IsWebPurchase {
      get { return isWebPurchase_; }
    }
    
    public const int ProtototypeIdsFieldNumber = 7;
    private pbc::PopsicleList<ulong> protototypeIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ProtototypeIdsList {
      get { return pbc::Lists.AsReadOnly(protototypeIds_); }
    }
    public int ProtototypeIdsCount {
      get { return protototypeIds_.Count; }
    }
    public ulong GetProtototypeIds(int index) {
      return protototypeIds_[index];
    }
    
    public const int CouponFieldNumber = 8;
    private bool hasCoupon;
    private global::Gazillion.AwardCouponEntry coupon_;
    public bool HasCoupon {
      get { return hasCoupon; }
    }
    public global::Gazillion.AwardCouponEntry Coupon {
      get { return coupon_ ?? global::Gazillion.AwardCouponEntry.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDidSucceed) return false;
        if (!hasCurrentCurrencyBalance) return false;
        if (!hasErrorcode) return false;
        if (!hasSkuId) return false;
        if (HasCoupon) {
          if (!Coupon.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyItemFromCatalogResponseFieldNames;
      if (hasDidSucceed) {
        output.WriteBool(1, field_names[2], DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        output.WriteInt64(2, field_names[1], CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        output.WriteString(3, field_names[4], Errormessage);
      }
      if (hasErrorcode) {
        output.WriteEnum(4, field_names[3], (int) Errorcode, Errorcode);
      }
      if (hasSkuId) {
        output.WriteInt64(5, field_names[7], SkuId);
      }
      if (hasIsWebPurchase) {
        output.WriteBool(6, field_names[5], IsWebPurchase);
      }
      if (protototypeIds_.Count > 0) {
        output.WriteUInt64Array(7, field_names[6], protototypeIds_);
      }
      if (hasCoupon) {
        output.WriteMessage(8, field_names[0], Coupon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDidSucceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Errormessage);
      }
      if (hasErrorcode) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Errorcode);
      }
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, SkuId);
      }
      if (hasIsWebPurchase) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsWebPurchase);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ProtototypeIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * protototypeIds_.Count;
      }
      if (hasCoupon) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, Coupon);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyItemFromCatalogResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyItemFromCatalogResponse MakeReadOnly() {
      protototypeIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyItemFromCatalogResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyItemFromCatalogResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyItemFromCatalogResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyItemFromCatalogResponse result;
      
      private NetMessageBuyItemFromCatalogResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyItemFromCatalogResponse original = result;
          result = new NetMessageBuyItemFromCatalogResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyItemFromCatalogResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalogResponse.Descriptor; }
      }
      
      public override NetMessageBuyItemFromCatalogResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyItemFromCatalogResponse.DefaultInstance; }
      }
      
      public override NetMessageBuyItemFromCatalogResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyItemFromCatalogResponse) {
          return MergeFrom((NetMessageBuyItemFromCatalogResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyItemFromCatalogResponse other) {
        if (other == global::Gazillion.NetMessageBuyItemFromCatalogResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDidSucceed) {
          DidSucceed = other.DidSucceed;
        }
        if (other.HasCurrentCurrencyBalance) {
          CurrentCurrencyBalance = other.CurrentCurrencyBalance;
        }
        if (other.HasErrormessage) {
          Errormessage = other.Errormessage;
        }
        if (other.HasErrorcode) {
          Errorcode = other.Errorcode;
        }
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasIsWebPurchase) {
          IsWebPurchase = other.IsWebPurchase;
        }
        if (other.protototypeIds_.Count != 0) {
          result.protototypeIds_.Add(other.protototypeIds_);
        }
        if (other.HasCoupon) {
          MergeCoupon(other.Coupon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyItemFromCatalogResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyItemFromCatalogResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDidSucceed = input.ReadBool(ref result.didSucceed_);
              break;
            }
            case 16: {
              result.hasCurrentCurrencyBalance = input.ReadInt64(ref result.currentCurrencyBalance_);
              break;
            }
            case 26: {
              result.hasErrormessage = input.ReadString(ref result.errormessage_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.errorcode_, out unknown)) {
                result.hasErrorcode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasSkuId = input.ReadInt64(ref result.skuId_);
              break;
            }
            case 48: {
              result.hasIsWebPurchase = input.ReadBool(ref result.isWebPurchase_);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt64Array(tag, field_name, result.protototypeIds_);
              break;
            }
            case 66: {
              global::Gazillion.AwardCouponEntry.Builder subBuilder = global::Gazillion.AwardCouponEntry.CreateBuilder();
              if (result.hasCoupon) {
                subBuilder.MergeFrom(Coupon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coupon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDidSucceed {
        get { return result.hasDidSucceed; }
      }
      public bool DidSucceed {
        get { return result.DidSucceed; }
        set { SetDidSucceed(value); }
      }
      public Builder SetDidSucceed(bool value) {
        PrepareBuilder();
        result.hasDidSucceed = true;
        result.didSucceed_ = value;
        return this;
      }
      public Builder ClearDidSucceed() {
        PrepareBuilder();
        result.hasDidSucceed = false;
        result.didSucceed_ = false;
        return this;
      }
      
      public bool HasCurrentCurrencyBalance {
        get { return result.hasCurrentCurrencyBalance; }
      }
      public long CurrentCurrencyBalance {
        get { return result.CurrentCurrencyBalance; }
        set { SetCurrentCurrencyBalance(value); }
      }
      public Builder SetCurrentCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = true;
        result.currentCurrencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrentCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = false;
        result.currentCurrencyBalance_ = 0L;
        return this;
      }
      
      public bool HasErrormessage {
        get { return result.hasErrormessage; }
      }
      public string Errormessage {
        get { return result.Errormessage; }
        set { SetErrormessage(value); }
      }
      public Builder SetErrormessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrormessage = true;
        result.errormessage_ = value;
        return this;
      }
      public Builder ClearErrormessage() {
        PrepareBuilder();
        result.hasErrormessage = false;
        result.errormessage_ = "";
        return this;
      }
      
      public bool HasErrorcode {
       get { return result.hasErrorcode; }
      }
      public global::Gazillion.BuyItemResultErrorCodes Errorcode {
        get { return result.Errorcode; }
        set { SetErrorcode(value); }
      }
      public Builder SetErrorcode(global::Gazillion.BuyItemResultErrorCodes value) {
        PrepareBuilder();
        result.hasErrorcode = true;
        result.errorcode_ = value;
        return this;
      }
      public Builder ClearErrorcode() {
        PrepareBuilder();
        result.hasErrorcode = false;
        result.errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
        return this;
      }
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public long SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(long value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0L;
        return this;
      }
      
      public bool HasIsWebPurchase {
        get { return result.hasIsWebPurchase; }
      }
      public bool IsWebPurchase {
        get { return result.IsWebPurchase; }
        set { SetIsWebPurchase(value); }
      }
      public Builder SetIsWebPurchase(bool value) {
        PrepareBuilder();
        result.hasIsWebPurchase = true;
        result.isWebPurchase_ = value;
        return this;
      }
      public Builder ClearIsWebPurchase() {
        PrepareBuilder();
        result.hasIsWebPurchase = false;
        result.isWebPurchase_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ProtototypeIdsList {
        get { return PrepareBuilder().protototypeIds_; }
      }
      public int ProtototypeIdsCount {
        get { return result.ProtototypeIdsCount; }
      }
      public ulong GetProtototypeIds(int index) {
        return result.GetProtototypeIds(index);
      }
      public Builder SetProtototypeIds(int index, ulong value) {
        PrepareBuilder();
        result.protototypeIds_[index] = value;
        return this;
      }
      public Builder AddProtototypeIds(ulong value) {
        PrepareBuilder();
        result.protototypeIds_.Add(value);
        return this;
      }
      public Builder AddRangeProtototypeIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.protototypeIds_.Add(values);
        return this;
      }
      public Builder ClearProtototypeIds() {
        PrepareBuilder();
        result.protototypeIds_.Clear();
        return this;
      }
      
      public bool HasCoupon {
       get { return result.hasCoupon; }
      }
      public global::Gazillion.AwardCouponEntry Coupon {
        get { return result.Coupon; }
        set { SetCoupon(value); }
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = value;
        return this;
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoupon &&
            result.coupon_ != global::Gazillion.AwardCouponEntry.DefaultInstance) {
            result.coupon_ = global::Gazillion.AwardCouponEntry.CreateBuilder(result.coupon_).MergeFrom(value).BuildPartial();
        } else {
          result.coupon_ = value;
        }
        result.hasCoupon = true;
        return this;
      }
      public Builder ClearCoupon() {
        PrepareBuilder();
        result.hasCoupon = false;
        result.coupon_ = null;
        return this;
      }
    }
    static NetMessageBuyItemFromCatalogResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBuyGiftForOtherPlayerResponse : pb::GeneratedMessage<NetMessageBuyGiftForOtherPlayerResponse, NetMessageBuyGiftForOtherPlayerResponse.Builder> {
    private NetMessageBuyGiftForOtherPlayerResponse() { }
    private static readonly NetMessageBuyGiftForOtherPlayerResponse defaultInstance = new NetMessageBuyGiftForOtherPlayerResponse().MakeReadOnly();
    private static readonly string[] _netMessageBuyGiftForOtherPlayerResponseFieldNames = new string[] { "coupon", "currentCurrencyBalance", "didSucceed", "errorcode", "errormessage", "skuid" };
    private static readonly uint[] _netMessageBuyGiftForOtherPlayerResponseFieldTags = new uint[] { 50, 16, 8, 32, 26, 40 };
    public static NetMessageBuyGiftForOtherPlayerResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBuyGiftForOtherPlayerResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBuyGiftForOtherPlayerResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBuyGiftForOtherPlayerResponse, NetMessageBuyGiftForOtherPlayerResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBuyGiftForOtherPlayerResponse__FieldAccessorTable; }
    }
    
    public const int DidSucceedFieldNumber = 1;
    private bool hasDidSucceed;
    private bool didSucceed_;
    public bool HasDidSucceed {
      get { return hasDidSucceed; }
    }
    public bool DidSucceed {
      get { return didSucceed_; }
    }
    
    public const int CurrentCurrencyBalanceFieldNumber = 2;
    private bool hasCurrentCurrencyBalance;
    private long currentCurrencyBalance_;
    public bool HasCurrentCurrencyBalance {
      get { return hasCurrentCurrencyBalance; }
    }
    public long CurrentCurrencyBalance {
      get { return currentCurrencyBalance_; }
    }
    
    public const int ErrormessageFieldNumber = 3;
    private bool hasErrormessage;
    private string errormessage_ = "";
    public bool HasErrormessage {
      get { return hasErrormessage; }
    }
    public string Errormessage {
      get { return errormessage_; }
    }
    
    public const int ErrorcodeFieldNumber = 4;
    private bool hasErrorcode;
    private global::Gazillion.BuyItemResultErrorCodes errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
    public bool HasErrorcode {
      get { return hasErrorcode; }
    }
    public global::Gazillion.BuyItemResultErrorCodes Errorcode {
      get { return errorcode_; }
    }
    
    public const int SkuidFieldNumber = 5;
    private bool hasSkuid;
    private long skuid_;
    public bool HasSkuid {
      get { return hasSkuid; }
    }
    public long Skuid {
      get { return skuid_; }
    }
    
    public const int CouponFieldNumber = 6;
    private bool hasCoupon;
    private global::Gazillion.AwardCouponEntry coupon_;
    public bool HasCoupon {
      get { return hasCoupon; }
    }
    public global::Gazillion.AwardCouponEntry Coupon {
      get { return coupon_ ?? global::Gazillion.AwardCouponEntry.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDidSucceed) return false;
        if (!hasErrorcode) return false;
        if (HasCoupon) {
          if (!Coupon.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBuyGiftForOtherPlayerResponseFieldNames;
      if (hasDidSucceed) {
        output.WriteBool(1, field_names[2], DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        output.WriteInt64(2, field_names[1], CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        output.WriteString(3, field_names[4], Errormessage);
      }
      if (hasErrorcode) {
        output.WriteEnum(4, field_names[3], (int) Errorcode, Errorcode);
      }
      if (hasSkuid) {
        output.WriteInt64(5, field_names[5], Skuid);
      }
      if (hasCoupon) {
        output.WriteMessage(6, field_names[0], Coupon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDidSucceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, CurrentCurrencyBalance);
      }
      if (hasErrormessage) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Errormessage);
      }
      if (hasErrorcode) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Errorcode);
      }
      if (hasSkuid) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, Skuid);
      }
      if (hasCoupon) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Coupon);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBuyGiftForOtherPlayerResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBuyGiftForOtherPlayerResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBuyGiftForOtherPlayerResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBuyGiftForOtherPlayerResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBuyGiftForOtherPlayerResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBuyGiftForOtherPlayerResponse result;
      
      private NetMessageBuyGiftForOtherPlayerResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBuyGiftForOtherPlayerResponse original = result;
          result = new NetMessageBuyGiftForOtherPlayerResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBuyGiftForOtherPlayerResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse.Descriptor; }
      }
      
      public override NetMessageBuyGiftForOtherPlayerResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse.DefaultInstance; }
      }
      
      public override NetMessageBuyGiftForOtherPlayerResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBuyGiftForOtherPlayerResponse) {
          return MergeFrom((NetMessageBuyGiftForOtherPlayerResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBuyGiftForOtherPlayerResponse other) {
        if (other == global::Gazillion.NetMessageBuyGiftForOtherPlayerResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDidSucceed) {
          DidSucceed = other.DidSucceed;
        }
        if (other.HasCurrentCurrencyBalance) {
          CurrentCurrencyBalance = other.CurrentCurrencyBalance;
        }
        if (other.HasErrormessage) {
          Errormessage = other.Errormessage;
        }
        if (other.HasErrorcode) {
          Errorcode = other.Errorcode;
        }
        if (other.HasSkuid) {
          Skuid = other.Skuid;
        }
        if (other.HasCoupon) {
          MergeCoupon(other.Coupon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBuyGiftForOtherPlayerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBuyGiftForOtherPlayerResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDidSucceed = input.ReadBool(ref result.didSucceed_);
              break;
            }
            case 16: {
              result.hasCurrentCurrencyBalance = input.ReadInt64(ref result.currentCurrencyBalance_);
              break;
            }
            case 26: {
              result.hasErrormessage = input.ReadString(ref result.errormessage_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.errorcode_, out unknown)) {
                result.hasErrorcode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasSkuid = input.ReadInt64(ref result.skuid_);
              break;
            }
            case 50: {
              global::Gazillion.AwardCouponEntry.Builder subBuilder = global::Gazillion.AwardCouponEntry.CreateBuilder();
              if (result.hasCoupon) {
                subBuilder.MergeFrom(Coupon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coupon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDidSucceed {
        get { return result.hasDidSucceed; }
      }
      public bool DidSucceed {
        get { return result.DidSucceed; }
        set { SetDidSucceed(value); }
      }
      public Builder SetDidSucceed(bool value) {
        PrepareBuilder();
        result.hasDidSucceed = true;
        result.didSucceed_ = value;
        return this;
      }
      public Builder ClearDidSucceed() {
        PrepareBuilder();
        result.hasDidSucceed = false;
        result.didSucceed_ = false;
        return this;
      }
      
      public bool HasCurrentCurrencyBalance {
        get { return result.hasCurrentCurrencyBalance; }
      }
      public long CurrentCurrencyBalance {
        get { return result.CurrentCurrencyBalance; }
        set { SetCurrentCurrencyBalance(value); }
      }
      public Builder SetCurrentCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = true;
        result.currentCurrencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrentCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = false;
        result.currentCurrencyBalance_ = 0L;
        return this;
      }
      
      public bool HasErrormessage {
        get { return result.hasErrormessage; }
      }
      public string Errormessage {
        get { return result.Errormessage; }
        set { SetErrormessage(value); }
      }
      public Builder SetErrormessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrormessage = true;
        result.errormessage_ = value;
        return this;
      }
      public Builder ClearErrormessage() {
        PrepareBuilder();
        result.hasErrormessage = false;
        result.errormessage_ = "";
        return this;
      }
      
      public bool HasErrorcode {
       get { return result.hasErrorcode; }
      }
      public global::Gazillion.BuyItemResultErrorCodes Errorcode {
        get { return result.Errorcode; }
        set { SetErrorcode(value); }
      }
      public Builder SetErrorcode(global::Gazillion.BuyItemResultErrorCodes value) {
        PrepareBuilder();
        result.hasErrorcode = true;
        result.errorcode_ = value;
        return this;
      }
      public Builder ClearErrorcode() {
        PrepareBuilder();
        result.hasErrorcode = false;
        result.errorcode_ = global::Gazillion.BuyItemResultErrorCodes.BUY_RESULT_ERROR_SUCCESS;
        return this;
      }
      
      public bool HasSkuid {
        get { return result.hasSkuid; }
      }
      public long Skuid {
        get { return result.Skuid; }
        set { SetSkuid(value); }
      }
      public Builder SetSkuid(long value) {
        PrepareBuilder();
        result.hasSkuid = true;
        result.skuid_ = value;
        return this;
      }
      public Builder ClearSkuid() {
        PrepareBuilder();
        result.hasSkuid = false;
        result.skuid_ = 0L;
        return this;
      }
      
      public bool HasCoupon {
       get { return result.hasCoupon; }
      }
      public global::Gazillion.AwardCouponEntry Coupon {
        get { return result.Coupon; }
        set { SetCoupon(value); }
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = value;
        return this;
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoupon &&
            result.coupon_ != global::Gazillion.AwardCouponEntry.DefaultInstance) {
            result.coupon_ = global::Gazillion.AwardCouponEntry.CreateBuilder(result.coupon_).MergeFrom(value).BuildPartial();
        } else {
          result.coupon_ = value;
        }
        result.hasCoupon = true;
        return this;
      }
      public Builder ClearCoupon() {
        PrepareBuilder();
        result.hasCoupon = false;
        result.coupon_ = null;
        return this;
      }
    }
    static NetMessageBuyGiftForOtherPlayerResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGrantGToPlayerNotification : pb::GeneratedMessage<NetMessageGrantGToPlayerNotification, NetMessageGrantGToPlayerNotification.Builder> {
    private NetMessageGrantGToPlayerNotification() { }
    private static readonly NetMessageGrantGToPlayerNotification defaultInstance = new NetMessageGrantGToPlayerNotification().MakeReadOnly();
    private static readonly string[] _netMessageGrantGToPlayerNotificationFieldNames = new string[] { "coupon", "currentCurrencyBalance", "didSucceed" };
    private static readonly uint[] _netMessageGrantGToPlayerNotificationFieldTags = new uint[] { 26, 16, 8 };
    public static NetMessageGrantGToPlayerNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGrantGToPlayerNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGrantGToPlayerNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGrantGToPlayerNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGrantGToPlayerNotification, NetMessageGrantGToPlayerNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGrantGToPlayerNotification__FieldAccessorTable; }
    }
    
    public const int DidSucceedFieldNumber = 1;
    private bool hasDidSucceed;
    private bool didSucceed_;
    public bool HasDidSucceed {
      get { return hasDidSucceed; }
    }
    public bool DidSucceed {
      get { return didSucceed_; }
    }
    
    public const int CurrentCurrencyBalanceFieldNumber = 2;
    private bool hasCurrentCurrencyBalance;
    private long currentCurrencyBalance_;
    public bool HasCurrentCurrencyBalance {
      get { return hasCurrentCurrencyBalance; }
    }
    public long CurrentCurrencyBalance {
      get { return currentCurrencyBalance_; }
    }
    
    public const int CouponFieldNumber = 3;
    private bool hasCoupon;
    private global::Gazillion.AwardCouponEntry coupon_;
    public bool HasCoupon {
      get { return hasCoupon; }
    }
    public global::Gazillion.AwardCouponEntry Coupon {
      get { return coupon_ ?? global::Gazillion.AwardCouponEntry.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDidSucceed) return false;
        if (!hasCurrentCurrencyBalance) return false;
        if (HasCoupon) {
          if (!Coupon.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGrantGToPlayerNotificationFieldNames;
      if (hasDidSucceed) {
        output.WriteBool(1, field_names[2], DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        output.WriteInt64(2, field_names[1], CurrentCurrencyBalance);
      }
      if (hasCoupon) {
        output.WriteMessage(3, field_names[0], Coupon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDidSucceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, DidSucceed);
      }
      if (hasCurrentCurrencyBalance) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, CurrentCurrencyBalance);
      }
      if (hasCoupon) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Coupon);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGrantGToPlayerNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGrantGToPlayerNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGrantGToPlayerNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGrantGToPlayerNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGrantGToPlayerNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGrantGToPlayerNotification result;
      
      private NetMessageGrantGToPlayerNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGrantGToPlayerNotification original = result;
          result = new NetMessageGrantGToPlayerNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGrantGToPlayerNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGrantGToPlayerNotification.Descriptor; }
      }
      
      public override NetMessageGrantGToPlayerNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGrantGToPlayerNotification.DefaultInstance; }
      }
      
      public override NetMessageGrantGToPlayerNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGrantGToPlayerNotification) {
          return MergeFrom((NetMessageGrantGToPlayerNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGrantGToPlayerNotification other) {
        if (other == global::Gazillion.NetMessageGrantGToPlayerNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDidSucceed) {
          DidSucceed = other.DidSucceed;
        }
        if (other.HasCurrentCurrencyBalance) {
          CurrentCurrencyBalance = other.CurrentCurrencyBalance;
        }
        if (other.HasCoupon) {
          MergeCoupon(other.Coupon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGrantGToPlayerNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGrantGToPlayerNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDidSucceed = input.ReadBool(ref result.didSucceed_);
              break;
            }
            case 16: {
              result.hasCurrentCurrencyBalance = input.ReadInt64(ref result.currentCurrencyBalance_);
              break;
            }
            case 26: {
              global::Gazillion.AwardCouponEntry.Builder subBuilder = global::Gazillion.AwardCouponEntry.CreateBuilder();
              if (result.hasCoupon) {
                subBuilder.MergeFrom(Coupon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coupon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDidSucceed {
        get { return result.hasDidSucceed; }
      }
      public bool DidSucceed {
        get { return result.DidSucceed; }
        set { SetDidSucceed(value); }
      }
      public Builder SetDidSucceed(bool value) {
        PrepareBuilder();
        result.hasDidSucceed = true;
        result.didSucceed_ = value;
        return this;
      }
      public Builder ClearDidSucceed() {
        PrepareBuilder();
        result.hasDidSucceed = false;
        result.didSucceed_ = false;
        return this;
      }
      
      public bool HasCurrentCurrencyBalance {
        get { return result.hasCurrentCurrencyBalance; }
      }
      public long CurrentCurrencyBalance {
        get { return result.CurrentCurrencyBalance; }
        set { SetCurrentCurrencyBalance(value); }
      }
      public Builder SetCurrentCurrencyBalance(long value) {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = true;
        result.currentCurrencyBalance_ = value;
        return this;
      }
      public Builder ClearCurrentCurrencyBalance() {
        PrepareBuilder();
        result.hasCurrentCurrencyBalance = false;
        result.currentCurrencyBalance_ = 0L;
        return this;
      }
      
      public bool HasCoupon {
       get { return result.hasCoupon; }
      }
      public global::Gazillion.AwardCouponEntry Coupon {
        get { return result.Coupon; }
        set { SetCoupon(value); }
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = value;
        return this;
      }
      public Builder SetCoupon(global::Gazillion.AwardCouponEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCoupon = true;
        result.coupon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoupon(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCoupon &&
            result.coupon_ != global::Gazillion.AwardCouponEntry.DefaultInstance) {
            result.coupon_ = global::Gazillion.AwardCouponEntry.CreateBuilder(result.coupon_).MergeFrom(value).BuildPartial();
        } else {
          result.coupon_ = value;
        }
        result.hasCoupon = true;
        return this;
      }
      public Builder ClearCoupon() {
        PrepareBuilder();
        result.hasCoupon = false;
        result.coupon_ = null;
        return this;
      }
    }
    static NetMessageGrantGToPlayerNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePurchaseUnlockResponse : pb::GeneratedMessage<NetMessagePurchaseUnlockResponse, NetMessagePurchaseUnlockResponse.Builder> {
    private NetMessagePurchaseUnlockResponse() { }
    private static readonly NetMessagePurchaseUnlockResponse defaultInstance = new NetMessagePurchaseUnlockResponse().MakeReadOnly();
    private static readonly string[] _netMessagePurchaseUnlockResponseFieldNames = new string[] { "purchaseUnlockResult" };
    private static readonly uint[] _netMessagePurchaseUnlockResponseFieldTags = new uint[] { 8 };
    public static NetMessagePurchaseUnlockResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePurchaseUnlockResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePurchaseUnlockResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePurchaseUnlockResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePurchaseUnlockResponse, NetMessagePurchaseUnlockResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePurchaseUnlockResponse__FieldAccessorTable; }
    }
    
    public const int PurchaseUnlockResultFieldNumber = 1;
    private bool hasPurchaseUnlockResult;
    private uint purchaseUnlockResult_;
    public bool HasPurchaseUnlockResult {
      get { return hasPurchaseUnlockResult; }
    }
    public uint PurchaseUnlockResult {
      get { return purchaseUnlockResult_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPurchaseUnlockResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePurchaseUnlockResponseFieldNames;
      if (hasPurchaseUnlockResult) {
        output.WriteUInt32(1, field_names[0], PurchaseUnlockResult);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPurchaseUnlockResult) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PurchaseUnlockResult);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePurchaseUnlockResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePurchaseUnlockResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePurchaseUnlockResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePurchaseUnlockResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePurchaseUnlockResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePurchaseUnlockResponse result;
      
      private NetMessagePurchaseUnlockResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePurchaseUnlockResponse original = result;
          result = new NetMessagePurchaseUnlockResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePurchaseUnlockResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePurchaseUnlockResponse.Descriptor; }
      }
      
      public override NetMessagePurchaseUnlockResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePurchaseUnlockResponse.DefaultInstance; }
      }
      
      public override NetMessagePurchaseUnlockResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePurchaseUnlockResponse) {
          return MergeFrom((NetMessagePurchaseUnlockResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePurchaseUnlockResponse other) {
        if (other == global::Gazillion.NetMessagePurchaseUnlockResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPurchaseUnlockResult) {
          PurchaseUnlockResult = other.PurchaseUnlockResult;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePurchaseUnlockResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePurchaseUnlockResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPurchaseUnlockResult = input.ReadUInt32(ref result.purchaseUnlockResult_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPurchaseUnlockResult {
        get { return result.hasPurchaseUnlockResult; }
      }
      public uint PurchaseUnlockResult {
        get { return result.PurchaseUnlockResult; }
        set { SetPurchaseUnlockResult(value); }
      }
      public Builder SetPurchaseUnlockResult(uint value) {
        PrepareBuilder();
        result.hasPurchaseUnlockResult = true;
        result.purchaseUnlockResult_ = value;
        return this;
      }
      public Builder ClearPurchaseUnlockResult() {
        PrepareBuilder();
        result.hasPurchaseUnlockResult = false;
        result.purchaseUnlockResult_ = 0;
        return this;
      }
    }
    static NetMessagePurchaseUnlockResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityPreviewerNewTarget : pb::GeneratedMessage<NetMessageEntityPreviewerNewTarget, NetMessageEntityPreviewerNewTarget.Builder> {
    private NetMessageEntityPreviewerNewTarget() { }
    private static readonly NetMessageEntityPreviewerNewTarget defaultInstance = new NetMessageEntityPreviewerNewTarget().MakeReadOnly();
    private static readonly string[] _netMessageEntityPreviewerNewTargetFieldNames = new string[] { "entityId" };
    private static readonly uint[] _netMessageEntityPreviewerNewTargetFieldTags = new uint[] { 8 };
    public static NetMessageEntityPreviewerNewTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityPreviewerNewTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityPreviewerNewTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityPreviewerNewTarget, NetMessageEntityPreviewerNewTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityPreviewerNewTarget__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityPreviewerNewTargetFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityPreviewerNewTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityPreviewerNewTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityPreviewerNewTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityPreviewerNewTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityPreviewerNewTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityPreviewerNewTarget result;
      
      private NetMessageEntityPreviewerNewTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityPreviewerNewTarget original = result;
          result = new NetMessageEntityPreviewerNewTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityPreviewerNewTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTarget.Descriptor; }
      }
      
      public override NetMessageEntityPreviewerNewTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityPreviewerNewTarget.DefaultInstance; }
      }
      
      public override NetMessageEntityPreviewerNewTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityPreviewerNewTarget) {
          return MergeFrom((NetMessageEntityPreviewerNewTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityPreviewerNewTarget other) {
        if (other == global::Gazillion.NetMessageEntityPreviewerNewTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityPreviewerNewTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityPreviewerNewTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
    }
    static NetMessageEntityPreviewerNewTarget() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoteMissionNotification : pb::GeneratedMessage<NetMessageRemoteMissionNotification, NetMessageRemoteMissionNotification.Builder> {
    private NetMessageRemoteMissionNotification() { }
    private static readonly NetMessageRemoteMissionNotification defaultInstance = new NetMessageRemoteMissionNotification().MakeReadOnly();
    private static readonly string[] _netMessageRemoteMissionNotificationFieldNames = new string[] { "dialogTextStringId", "entityPrototypeId", "iconPathOverrideId", "missionPrototypeId", "voTriggerAssetId" };
    private static readonly uint[] _netMessageRemoteMissionNotificationFieldTags = new uint[] { 16, 8, 32, 24, 40 };
    public static NetMessageRemoteMissionNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoteMissionNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoteMissionNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoteMissionNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoteMissionNotification, NetMessageRemoteMissionNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoteMissionNotification__FieldAccessorTable; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 1;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public const int DialogTextStringIdFieldNumber = 2;
    private bool hasDialogTextStringId;
    private ulong dialogTextStringId_;
    public bool HasDialogTextStringId {
      get { return hasDialogTextStringId; }
    }
    public ulong DialogTextStringId {
      get { return dialogTextStringId_; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 3;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public const int IconPathOverrideIdFieldNumber = 4;
    private bool hasIconPathOverrideId;
    private ulong iconPathOverrideId_;
    public bool HasIconPathOverrideId {
      get { return hasIconPathOverrideId; }
    }
    public ulong IconPathOverrideId {
      get { return iconPathOverrideId_; }
    }
    
    public const int VoTriggerAssetIdFieldNumber = 5;
    private bool hasVoTriggerAssetId;
    private ulong voTriggerAssetId_;
    public bool HasVoTriggerAssetId {
      get { return hasVoTriggerAssetId; }
    }
    public ulong VoTriggerAssetId {
      get { return voTriggerAssetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDialogTextStringId) return false;
        if (!hasMissionPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemoteMissionNotificationFieldNames;
      if (hasEntityPrototypeId) {
        output.WriteUInt64(1, field_names[1], EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        output.WriteUInt64(2, field_names[0], DialogTextStringId);
      }
      if (hasMissionPrototypeId) {
        output.WriteUInt64(3, field_names[3], MissionPrototypeId);
      }
      if (hasIconPathOverrideId) {
        output.WriteUInt64(4, field_names[2], IconPathOverrideId);
      }
      if (hasVoTriggerAssetId) {
        output.WriteUInt64(5, field_names[4], VoTriggerAssetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, DialogTextStringId);
      }
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MissionPrototypeId);
      }
      if (hasIconPathOverrideId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, IconPathOverrideId);
      }
      if (hasVoTriggerAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, VoTriggerAssetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoteMissionNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoteMissionNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoteMissionNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoteMissionNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoteMissionNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoteMissionNotification result;
      
      private NetMessageRemoteMissionNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoteMissionNotification original = result;
          result = new NetMessageRemoteMissionNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoteMissionNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoteMissionNotification.Descriptor; }
      }
      
      public override NetMessageRemoteMissionNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoteMissionNotification.DefaultInstance; }
      }
      
      public override NetMessageRemoteMissionNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoteMissionNotification) {
          return MergeFrom((NetMessageRemoteMissionNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoteMissionNotification other) {
        if (other == global::Gazillion.NetMessageRemoteMissionNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        if (other.HasDialogTextStringId) {
          DialogTextStringId = other.DialogTextStringId;
        }
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        if (other.HasIconPathOverrideId) {
          IconPathOverrideId = other.IconPathOverrideId;
        }
        if (other.HasVoTriggerAssetId) {
          VoTriggerAssetId = other.VoTriggerAssetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemoteMissionNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemoteMissionNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
            case 16: {
              result.hasDialogTextStringId = input.ReadUInt64(ref result.dialogTextStringId_);
              break;
            }
            case 24: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
            case 32: {
              result.hasIconPathOverrideId = input.ReadUInt64(ref result.iconPathOverrideId_);
              break;
            }
            case 40: {
              result.hasVoTriggerAssetId = input.ReadUInt64(ref result.voTriggerAssetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasDialogTextStringId {
        get { return result.hasDialogTextStringId; }
      }
      public ulong DialogTextStringId {
        get { return result.DialogTextStringId; }
        set { SetDialogTextStringId(value); }
      }
      public Builder SetDialogTextStringId(ulong value) {
        PrepareBuilder();
        result.hasDialogTextStringId = true;
        result.dialogTextStringId_ = value;
        return this;
      }
      public Builder ClearDialogTextStringId() {
        PrepareBuilder();
        result.hasDialogTextStringId = false;
        result.dialogTextStringId_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasIconPathOverrideId {
        get { return result.hasIconPathOverrideId; }
      }
      public ulong IconPathOverrideId {
        get { return result.IconPathOverrideId; }
        set { SetIconPathOverrideId(value); }
      }
      public Builder SetIconPathOverrideId(ulong value) {
        PrepareBuilder();
        result.hasIconPathOverrideId = true;
        result.iconPathOverrideId_ = value;
        return this;
      }
      public Builder ClearIconPathOverrideId() {
        PrepareBuilder();
        result.hasIconPathOverrideId = false;
        result.iconPathOverrideId_ = 0UL;
        return this;
      }
      
      public bool HasVoTriggerAssetId {
        get { return result.hasVoTriggerAssetId; }
      }
      public ulong VoTriggerAssetId {
        get { return result.VoTriggerAssetId; }
        set { SetVoTriggerAssetId(value); }
      }
      public Builder SetVoTriggerAssetId(ulong value) {
        PrepareBuilder();
        result.hasVoTriggerAssetId = true;
        result.voTriggerAssetId_ = value;
        return this;
      }
      public Builder ClearVoTriggerAssetId() {
        PrepareBuilder();
        result.hasVoTriggerAssetId = false;
        result.voTriggerAssetId_ = 0UL;
        return this;
      }
    }
    static NetMessageRemoteMissionNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameInfoNotification : pb::GeneratedMessage<NetMessageMetaGameInfoNotification, NetMessageMetaGameInfoNotification.Builder> {
    private NetMessageMetaGameInfoNotification() { }
    private static readonly NetMessageMetaGameInfoNotification defaultInstance = new NetMessageMetaGameInfoNotification().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameInfoNotificationFieldNames = new string[] { "dialogTextStringId", "entityPrototypeId", "iconPathOverrideId" };
    private static readonly uint[] _netMessageMetaGameInfoNotificationFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageMetaGameInfoNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameInfoNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameInfoNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameInfoNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameInfoNotification, NetMessageMetaGameInfoNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameInfoNotification__FieldAccessorTable; }
    }
    
    public const int EntityPrototypeIdFieldNumber = 1;
    private bool hasEntityPrototypeId;
    private ulong entityPrototypeId_;
    public bool HasEntityPrototypeId {
      get { return hasEntityPrototypeId; }
    }
    public ulong EntityPrototypeId {
      get { return entityPrototypeId_; }
    }
    
    public const int DialogTextStringIdFieldNumber = 2;
    private bool hasDialogTextStringId;
    private ulong dialogTextStringId_;
    public bool HasDialogTextStringId {
      get { return hasDialogTextStringId; }
    }
    public ulong DialogTextStringId {
      get { return dialogTextStringId_; }
    }
    
    public const int IconPathOverrideIdFieldNumber = 3;
    private bool hasIconPathOverrideId;
    private ulong iconPathOverrideId_;
    public bool HasIconPathOverrideId {
      get { return hasIconPathOverrideId; }
    }
    public ulong IconPathOverrideId {
      get { return iconPathOverrideId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityPrototypeId) return false;
        if (!hasDialogTextStringId) return false;
        if (!hasIconPathOverrideId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameInfoNotificationFieldNames;
      if (hasEntityPrototypeId) {
        output.WriteUInt64(1, field_names[1], EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        output.WriteUInt64(2, field_names[0], DialogTextStringId);
      }
      if (hasIconPathOverrideId) {
        output.WriteUInt64(3, field_names[2], IconPathOverrideId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityPrototypeId);
      }
      if (hasDialogTextStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, DialogTextStringId);
      }
      if (hasIconPathOverrideId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, IconPathOverrideId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameInfoNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameInfoNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameInfoNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameInfoNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameInfoNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameInfoNotification result;
      
      private NetMessageMetaGameInfoNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameInfoNotification original = result;
          result = new NetMessageMetaGameInfoNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameInfoNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameInfoNotification.Descriptor; }
      }
      
      public override NetMessageMetaGameInfoNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameInfoNotification.DefaultInstance; }
      }
      
      public override NetMessageMetaGameInfoNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameInfoNotification) {
          return MergeFrom((NetMessageMetaGameInfoNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameInfoNotification other) {
        if (other == global::Gazillion.NetMessageMetaGameInfoNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityPrototypeId) {
          EntityPrototypeId = other.EntityPrototypeId;
        }
        if (other.HasDialogTextStringId) {
          DialogTextStringId = other.DialogTextStringId;
        }
        if (other.HasIconPathOverrideId) {
          IconPathOverrideId = other.IconPathOverrideId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameInfoNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameInfoNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityPrototypeId = input.ReadUInt64(ref result.entityPrototypeId_);
              break;
            }
            case 16: {
              result.hasDialogTextStringId = input.ReadUInt64(ref result.dialogTextStringId_);
              break;
            }
            case 24: {
              result.hasIconPathOverrideId = input.ReadUInt64(ref result.iconPathOverrideId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityPrototypeId {
        get { return result.hasEntityPrototypeId; }
      }
      public ulong EntityPrototypeId {
        get { return result.EntityPrototypeId; }
        set { SetEntityPrototypeId(value); }
      }
      public Builder SetEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasEntityPrototypeId = true;
        result.entityPrototypeId_ = value;
        return this;
      }
      public Builder ClearEntityPrototypeId() {
        PrepareBuilder();
        result.hasEntityPrototypeId = false;
        result.entityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasDialogTextStringId {
        get { return result.hasDialogTextStringId; }
      }
      public ulong DialogTextStringId {
        get { return result.DialogTextStringId; }
        set { SetDialogTextStringId(value); }
      }
      public Builder SetDialogTextStringId(ulong value) {
        PrepareBuilder();
        result.hasDialogTextStringId = true;
        result.dialogTextStringId_ = value;
        return this;
      }
      public Builder ClearDialogTextStringId() {
        PrepareBuilder();
        result.hasDialogTextStringId = false;
        result.dialogTextStringId_ = 0UL;
        return this;
      }
      
      public bool HasIconPathOverrideId {
        get { return result.hasIconPathOverrideId; }
      }
      public ulong IconPathOverrideId {
        get { return result.IconPathOverrideId; }
        set { SetIconPathOverrideId(value); }
      }
      public Builder SetIconPathOverrideId(ulong value) {
        PrepareBuilder();
        result.hasIconPathOverrideId = true;
        result.iconPathOverrideId_ = value;
        return this;
      }
      public Builder ClearIconPathOverrideId() {
        PrepareBuilder();
        result.hasIconPathOverrideId = false;
        result.iconPathOverrideId_ = 0UL;
        return this;
      }
    }
    static NetMessageMetaGameInfoNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageClearMetaGameInfoNotification : pb::GeneratedMessage<NetMessageClearMetaGameInfoNotification, NetMessageClearMetaGameInfoNotification.Builder> {
    private NetMessageClearMetaGameInfoNotification() { }
    private static readonly NetMessageClearMetaGameInfoNotification defaultInstance = new NetMessageClearMetaGameInfoNotification().MakeReadOnly();
    private static readonly string[] _netMessageClearMetaGameInfoNotificationFieldNames = new string[] {  };
    private static readonly uint[] _netMessageClearMetaGameInfoNotificationFieldTags = new uint[] {  };
    public static NetMessageClearMetaGameInfoNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageClearMetaGameInfoNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageClearMetaGameInfoNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageClearMetaGameInfoNotification, NetMessageClearMetaGameInfoNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageClearMetaGameInfoNotification__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageClearMetaGameInfoNotificationFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageClearMetaGameInfoNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageClearMetaGameInfoNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageClearMetaGameInfoNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageClearMetaGameInfoNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageClearMetaGameInfoNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageClearMetaGameInfoNotification result;
      
      private NetMessageClearMetaGameInfoNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageClearMetaGameInfoNotification original = result;
          result = new NetMessageClearMetaGameInfoNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageClearMetaGameInfoNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageClearMetaGameInfoNotification.Descriptor; }
      }
      
      public override NetMessageClearMetaGameInfoNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageClearMetaGameInfoNotification.DefaultInstance; }
      }
      
      public override NetMessageClearMetaGameInfoNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageClearMetaGameInfoNotification) {
          return MergeFrom((NetMessageClearMetaGameInfoNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageClearMetaGameInfoNotification other) {
        if (other == global::Gazillion.NetMessageClearMetaGameInfoNotification.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageClearMetaGameInfoNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageClearMetaGameInfoNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageClearMetaGameInfoNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUINotificationMessage : pb::GeneratedMessage<NetMessageUINotificationMessage, NetMessageUINotificationMessage.Builder> {
    private NetMessageUINotificationMessage() { }
    private static readonly NetMessageUINotificationMessage defaultInstance = new NetMessageUINotificationMessage().MakeReadOnly();
    private static readonly string[] _netMessageUINotificationMessageFieldNames = new string[] { "uiNotificationRef" };
    private static readonly uint[] _netMessageUINotificationMessageFieldTags = new uint[] { 8 };
    public static NetMessageUINotificationMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUINotificationMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUINotificationMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUINotificationMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUINotificationMessage, NetMessageUINotificationMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUINotificationMessage__FieldAccessorTable; }
    }
    
    public const int UiNotificationRefFieldNumber = 1;
    private bool hasUiNotificationRef;
    private ulong uiNotificationRef_;
    public bool HasUiNotificationRef {
      get { return hasUiNotificationRef; }
    }
    public ulong UiNotificationRef {
      get { return uiNotificationRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUiNotificationRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUINotificationMessageFieldNames;
      if (hasUiNotificationRef) {
        output.WriteUInt64(1, field_names[0], UiNotificationRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUiNotificationRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, UiNotificationRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUINotificationMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUINotificationMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUINotificationMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUINotificationMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUINotificationMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUINotificationMessage result;
      
      private NetMessageUINotificationMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUINotificationMessage original = result;
          result = new NetMessageUINotificationMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUINotificationMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUINotificationMessage.Descriptor; }
      }
      
      public override NetMessageUINotificationMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUINotificationMessage.DefaultInstance; }
      }
      
      public override NetMessageUINotificationMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUINotificationMessage) {
          return MergeFrom((NetMessageUINotificationMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUINotificationMessage other) {
        if (other == global::Gazillion.NetMessageUINotificationMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiNotificationRef) {
          UiNotificationRef = other.UiNotificationRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUINotificationMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUINotificationMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiNotificationRef = input.ReadUInt64(ref result.uiNotificationRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiNotificationRef {
        get { return result.hasUiNotificationRef; }
      }
      public ulong UiNotificationRef {
        get { return result.UiNotificationRef; }
        set { SetUiNotificationRef(value); }
      }
      public Builder SetUiNotificationRef(ulong value) {
        PrepareBuilder();
        result.hasUiNotificationRef = true;
        result.uiNotificationRef_ = value;
        return this;
      }
      public Builder ClearUiNotificationRef() {
        PrepareBuilder();
        result.hasUiNotificationRef = false;
        result.uiNotificationRef_ = 0UL;
        return this;
      }
    }
    static NetMessageUINotificationMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowPvPScoreboard : pb::GeneratedMessage<NetMessageShowPvPScoreboard, NetMessageShowPvPScoreboard.Builder> {
    private NetMessageShowPvPScoreboard() { }
    private static readonly NetMessageShowPvPScoreboard defaultInstance = new NetMessageShowPvPScoreboard().MakeReadOnly();
    private static readonly string[] _netMessageShowPvPScoreboardFieldNames = new string[] {  };
    private static readonly uint[] _netMessageShowPvPScoreboardFieldTags = new uint[] {  };
    public static NetMessageShowPvPScoreboard DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowPvPScoreboard DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowPvPScoreboard ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowPvPScoreboard__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowPvPScoreboard, NetMessageShowPvPScoreboard.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowPvPScoreboard__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowPvPScoreboardFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowPvPScoreboard ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowPvPScoreboard ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowPvPScoreboard MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowPvPScoreboard prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowPvPScoreboard, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowPvPScoreboard cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowPvPScoreboard result;
      
      private NetMessageShowPvPScoreboard PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowPvPScoreboard original = result;
          result = new NetMessageShowPvPScoreboard();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowPvPScoreboard MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowPvPScoreboard.Descriptor; }
      }
      
      public override NetMessageShowPvPScoreboard DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowPvPScoreboard.DefaultInstance; }
      }
      
      public override NetMessageShowPvPScoreboard BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowPvPScoreboard) {
          return MergeFrom((NetMessageShowPvPScoreboard) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowPvPScoreboard other) {
        if (other == global::Gazillion.NetMessageShowPvPScoreboard.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowPvPScoreboardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowPvPScoreboardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageShowPvPScoreboard() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStartPvPTimer : pb::GeneratedMessage<NetMessageStartPvPTimer, NetMessageStartPvPTimer.Builder> {
    private NetMessageStartPvPTimer() { }
    private static readonly NetMessageStartPvPTimer defaultInstance = new NetMessageStartPvPTimer().MakeReadOnly();
    private static readonly string[] _netMessageStartPvPTimerFieldNames = new string[] { "criticalTimeWarning", "endTime", "labelOverrideTextId", "lowTimeWarning", "metaGameId", "startTime" };
    private static readonly uint[] _netMessageStartPvPTimerFieldTags = new uint[] { 32, 16, 48, 24, 40, 8 };
    public static NetMessageStartPvPTimer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStartPvPTimer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStartPvPTimer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStartPvPTimer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStartPvPTimer, NetMessageStartPvPTimer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStartPvPTimer__FieldAccessorTable; }
    }
    
    public const int StartTimeFieldNumber = 1;
    private bool hasStartTime;
    private uint startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public uint StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 2;
    private bool hasEndTime;
    private uint endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public uint EndTime {
      get { return endTime_; }
    }
    
    public const int LowTimeWarningFieldNumber = 3;
    private bool hasLowTimeWarning;
    private uint lowTimeWarning_;
    public bool HasLowTimeWarning {
      get { return hasLowTimeWarning; }
    }
    public uint LowTimeWarning {
      get { return lowTimeWarning_; }
    }
    
    public const int CriticalTimeWarningFieldNumber = 4;
    private bool hasCriticalTimeWarning;
    private uint criticalTimeWarning_;
    public bool HasCriticalTimeWarning {
      get { return hasCriticalTimeWarning; }
    }
    public uint CriticalTimeWarning {
      get { return criticalTimeWarning_; }
    }
    
    public const int MetaGameIdFieldNumber = 5;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public const int LabelOverrideTextIdFieldNumber = 6;
    private bool hasLabelOverrideTextId;
    private ulong labelOverrideTextId_;
    public bool HasLabelOverrideTextId {
      get { return hasLabelOverrideTextId; }
    }
    public ulong LabelOverrideTextId {
      get { return labelOverrideTextId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartTime) return false;
        if (!hasEndTime) return false;
        if (!hasLowTimeWarning) return false;
        if (!hasCriticalTimeWarning) return false;
        if (!hasMetaGameId) return false;
        if (!hasLabelOverrideTextId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStartPvPTimerFieldNames;
      if (hasStartTime) {
        output.WriteUInt32(1, field_names[5], StartTime);
      }
      if (hasEndTime) {
        output.WriteUInt32(2, field_names[1], EndTime);
      }
      if (hasLowTimeWarning) {
        output.WriteUInt32(3, field_names[3], LowTimeWarning);
      }
      if (hasCriticalTimeWarning) {
        output.WriteUInt32(4, field_names[0], CriticalTimeWarning);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(5, field_names[4], MetaGameId);
      }
      if (hasLabelOverrideTextId) {
        output.WriteUInt64(6, field_names[2], LabelOverrideTextId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StartTime);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, EndTime);
      }
      if (hasLowTimeWarning) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, LowTimeWarning);
      }
      if (hasCriticalTimeWarning) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, CriticalTimeWarning);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, MetaGameId);
      }
      if (hasLabelOverrideTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, LabelOverrideTextId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStartPvPTimer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStartPvPTimer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStartPvPTimer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStartPvPTimer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStartPvPTimer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStartPvPTimer result;
      
      private NetMessageStartPvPTimer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStartPvPTimer original = result;
          result = new NetMessageStartPvPTimer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStartPvPTimer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStartPvPTimer.Descriptor; }
      }
      
      public override NetMessageStartPvPTimer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStartPvPTimer.DefaultInstance; }
      }
      
      public override NetMessageStartPvPTimer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStartPvPTimer) {
          return MergeFrom((NetMessageStartPvPTimer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStartPvPTimer other) {
        if (other == global::Gazillion.NetMessageStartPvPTimer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasLowTimeWarning) {
          LowTimeWarning = other.LowTimeWarning;
        }
        if (other.HasCriticalTimeWarning) {
          CriticalTimeWarning = other.CriticalTimeWarning;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        if (other.HasLabelOverrideTextId) {
          LabelOverrideTextId = other.LabelOverrideTextId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStartPvPTimerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStartPvPTimerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartTime = input.ReadUInt32(ref result.startTime_);
              break;
            }
            case 16: {
              result.hasEndTime = input.ReadUInt32(ref result.endTime_);
              break;
            }
            case 24: {
              result.hasLowTimeWarning = input.ReadUInt32(ref result.lowTimeWarning_);
              break;
            }
            case 32: {
              result.hasCriticalTimeWarning = input.ReadUInt32(ref result.criticalTimeWarning_);
              break;
            }
            case 40: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
            case 48: {
              result.hasLabelOverrideTextId = input.ReadUInt64(ref result.labelOverrideTextId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public uint StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(uint value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public uint EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(uint value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0;
        return this;
      }
      
      public bool HasLowTimeWarning {
        get { return result.hasLowTimeWarning; }
      }
      public uint LowTimeWarning {
        get { return result.LowTimeWarning; }
        set { SetLowTimeWarning(value); }
      }
      public Builder SetLowTimeWarning(uint value) {
        PrepareBuilder();
        result.hasLowTimeWarning = true;
        result.lowTimeWarning_ = value;
        return this;
      }
      public Builder ClearLowTimeWarning() {
        PrepareBuilder();
        result.hasLowTimeWarning = false;
        result.lowTimeWarning_ = 0;
        return this;
      }
      
      public bool HasCriticalTimeWarning {
        get { return result.hasCriticalTimeWarning; }
      }
      public uint CriticalTimeWarning {
        get { return result.CriticalTimeWarning; }
        set { SetCriticalTimeWarning(value); }
      }
      public Builder SetCriticalTimeWarning(uint value) {
        PrepareBuilder();
        result.hasCriticalTimeWarning = true;
        result.criticalTimeWarning_ = value;
        return this;
      }
      public Builder ClearCriticalTimeWarning() {
        PrepareBuilder();
        result.hasCriticalTimeWarning = false;
        result.criticalTimeWarning_ = 0;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
      
      public bool HasLabelOverrideTextId {
        get { return result.hasLabelOverrideTextId; }
      }
      public ulong LabelOverrideTextId {
        get { return result.LabelOverrideTextId; }
        set { SetLabelOverrideTextId(value); }
      }
      public Builder SetLabelOverrideTextId(ulong value) {
        PrepareBuilder();
        result.hasLabelOverrideTextId = true;
        result.labelOverrideTextId_ = value;
        return this;
      }
      public Builder ClearLabelOverrideTextId() {
        PrepareBuilder();
        result.hasLabelOverrideTextId = false;
        result.labelOverrideTextId_ = 0UL;
        return this;
      }
    }
    static NetMessageStartPvPTimer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStopPvPTimer : pb::GeneratedMessage<NetMessageStopPvPTimer, NetMessageStopPvPTimer.Builder> {
    private NetMessageStopPvPTimer() { }
    private static readonly NetMessageStopPvPTimer defaultInstance = new NetMessageStopPvPTimer().MakeReadOnly();
    private static readonly string[] _netMessageStopPvPTimerFieldNames = new string[] { "metaGameId" };
    private static readonly uint[] _netMessageStopPvPTimerFieldTags = new uint[] { 8 };
    public static NetMessageStopPvPTimer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStopPvPTimer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStopPvPTimer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStopPvPTimer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStopPvPTimer, NetMessageStopPvPTimer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStopPvPTimer__FieldAccessorTable; }
    }
    
    public const int MetaGameIdFieldNumber = 1;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStopPvPTimerFieldNames;
      if (hasMetaGameId) {
        output.WriteUInt64(1, field_names[0], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStopPvPTimer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStopPvPTimer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStopPvPTimer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStopPvPTimer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStopPvPTimer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStopPvPTimer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStopPvPTimer result;
      
      private NetMessageStopPvPTimer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStopPvPTimer original = result;
          result = new NetMessageStopPvPTimer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStopPvPTimer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStopPvPTimer.Descriptor; }
      }
      
      public override NetMessageStopPvPTimer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStopPvPTimer.DefaultInstance; }
      }
      
      public override NetMessageStopPvPTimer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStopPvPTimer) {
          return MergeFrom((NetMessageStopPvPTimer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStopPvPTimer other) {
        if (other == global::Gazillion.NetMessageStopPvPTimer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStopPvPTimerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStopPvPTimerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageStopPvPTimer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetDifficultyThresholds : pb::GeneratedMessage<NetMessageSetDifficultyThresholds, NetMessageSetDifficultyThresholds.Builder> {
    private NetMessageSetDifficultyThresholds() { }
    private static readonly NetMessageSetDifficultyThresholds defaultInstance = new NetMessageSetDifficultyThresholds().MakeReadOnly();
    private static readonly string[] _netMessageSetDifficultyThresholdsFieldNames = new string[] { "failureThreshold", "warningThreshold" };
    private static readonly uint[] _netMessageSetDifficultyThresholdsFieldTags = new uint[] { 16, 8 };
    public static NetMessageSetDifficultyThresholds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetDifficultyThresholds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetDifficultyThresholds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDifficultyThresholds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetDifficultyThresholds, NetMessageSetDifficultyThresholds.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDifficultyThresholds__FieldAccessorTable; }
    }
    
    public const int WarningThresholdFieldNumber = 1;
    private bool hasWarningThreshold;
    private uint warningThreshold_;
    public bool HasWarningThreshold {
      get { return hasWarningThreshold; }
    }
    public uint WarningThreshold {
      get { return warningThreshold_; }
    }
    
    public const int FailureThresholdFieldNumber = 2;
    private bool hasFailureThreshold;
    private uint failureThreshold_;
    public bool HasFailureThreshold {
      get { return hasFailureThreshold; }
    }
    public uint FailureThreshold {
      get { return failureThreshold_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWarningThreshold) return false;
        if (!hasFailureThreshold) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetDifficultyThresholdsFieldNames;
      if (hasWarningThreshold) {
        output.WriteUInt32(1, field_names[1], WarningThreshold);
      }
      if (hasFailureThreshold) {
        output.WriteUInt32(2, field_names[0], FailureThreshold);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWarningThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, WarningThreshold);
      }
      if (hasFailureThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, FailureThreshold);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDifficultyThresholds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetDifficultyThresholds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetDifficultyThresholds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetDifficultyThresholds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetDifficultyThresholds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetDifficultyThresholds result;
      
      private NetMessageSetDifficultyThresholds PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetDifficultyThresholds original = result;
          result = new NetMessageSetDifficultyThresholds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetDifficultyThresholds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetDifficultyThresholds.Descriptor; }
      }
      
      public override NetMessageSetDifficultyThresholds DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetDifficultyThresholds.DefaultInstance; }
      }
      
      public override NetMessageSetDifficultyThresholds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetDifficultyThresholds) {
          return MergeFrom((NetMessageSetDifficultyThresholds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetDifficultyThresholds other) {
        if (other == global::Gazillion.NetMessageSetDifficultyThresholds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWarningThreshold) {
          WarningThreshold = other.WarningThreshold;
        }
        if (other.HasFailureThreshold) {
          FailureThreshold = other.FailureThreshold;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetDifficultyThresholdsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetDifficultyThresholdsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWarningThreshold = input.ReadUInt32(ref result.warningThreshold_);
              break;
            }
            case 16: {
              result.hasFailureThreshold = input.ReadUInt32(ref result.failureThreshold_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWarningThreshold {
        get { return result.hasWarningThreshold; }
      }
      public uint WarningThreshold {
        get { return result.WarningThreshold; }
        set { SetWarningThreshold(value); }
      }
      public Builder SetWarningThreshold(uint value) {
        PrepareBuilder();
        result.hasWarningThreshold = true;
        result.warningThreshold_ = value;
        return this;
      }
      public Builder ClearWarningThreshold() {
        PrepareBuilder();
        result.hasWarningThreshold = false;
        result.warningThreshold_ = 0;
        return this;
      }
      
      public bool HasFailureThreshold {
        get { return result.hasFailureThreshold; }
      }
      public uint FailureThreshold {
        get { return result.FailureThreshold; }
        set { SetFailureThreshold(value); }
      }
      public Builder SetFailureThreshold(uint value) {
        PrepareBuilder();
        result.hasFailureThreshold = true;
        result.failureThreshold_ = value;
        return this;
      }
      public Builder ClearFailureThreshold() {
        PrepareBuilder();
        result.hasFailureThreshold = false;
        result.failureThreshold_ = 0;
        return this;
      }
    }
    static NetMessageSetDifficultyThresholds() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetUITrackedEntityId : pb::GeneratedMessage<NetMessageSetUITrackedEntityId, NetMessageSetUITrackedEntityId.Builder> {
    private NetMessageSetUITrackedEntityId() { }
    private static readonly NetMessageSetUITrackedEntityId defaultInstance = new NetMessageSetUITrackedEntityId().MakeReadOnly();
    private static readonly string[] _netMessageSetUITrackedEntityIdFieldNames = new string[] { "entityId" };
    private static readonly uint[] _netMessageSetUITrackedEntityIdFieldTags = new uint[] { 8 };
    public static NetMessageSetUITrackedEntityId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetUITrackedEntityId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetUITrackedEntityId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetUITrackedEntityId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetUITrackedEntityId, NetMessageSetUITrackedEntityId.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetUITrackedEntityId__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetUITrackedEntityIdFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetUITrackedEntityId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetUITrackedEntityId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetUITrackedEntityId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetUITrackedEntityId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetUITrackedEntityId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetUITrackedEntityId result;
      
      private NetMessageSetUITrackedEntityId PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetUITrackedEntityId original = result;
          result = new NetMessageSetUITrackedEntityId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetUITrackedEntityId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetUITrackedEntityId.Descriptor; }
      }
      
      public override NetMessageSetUITrackedEntityId DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetUITrackedEntityId.DefaultInstance; }
      }
      
      public override NetMessageSetUITrackedEntityId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetUITrackedEntityId) {
          return MergeFrom((NetMessageSetUITrackedEntityId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetUITrackedEntityId other) {
        if (other == global::Gazillion.NetMessageSetUITrackedEntityId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetUITrackedEntityIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetUITrackedEntityIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetUITrackedEntityId() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetTimerText : pb::GeneratedMessage<NetMessageSetTimerText, NetMessageSetTimerText.Builder> {
    private NetMessageSetTimerText() { }
    private static readonly NetMessageSetTimerText defaultInstance = new NetMessageSetTimerText().MakeReadOnly();
    private static readonly string[] _netMessageSetTimerTextFieldNames = new string[] { "arg1", "timerTextId" };
    private static readonly uint[] _netMessageSetTimerTextFieldTags = new uint[] { 24, 8 };
    public static NetMessageSetTimerText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetTimerText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetTimerText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetTimerText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetTimerText, NetMessageSetTimerText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetTimerText__FieldAccessorTable; }
    }
    
    public const int TimerTextIdFieldNumber = 1;
    private bool hasTimerTextId;
    private ulong timerTextId_;
    public bool HasTimerTextId {
      get { return hasTimerTextId; }
    }
    public ulong TimerTextId {
      get { return timerTextId_; }
    }
    
    public const int Arg1FieldNumber = 3;
    private bool hasArg1;
    private long arg1_;
    public bool HasArg1 {
      get { return hasArg1; }
    }
    public long Arg1 {
      get { return arg1_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimerTextId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetTimerTextFieldNames;
      if (hasTimerTextId) {
        output.WriteUInt64(1, field_names[1], TimerTextId);
      }
      if (hasArg1) {
        output.WriteInt64(3, field_names[0], Arg1);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimerTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TimerTextId);
      }
      if (hasArg1) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Arg1);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetTimerText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetTimerText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetTimerText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetTimerText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetTimerText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetTimerText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetTimerText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetTimerText result;
      
      private NetMessageSetTimerText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetTimerText original = result;
          result = new NetMessageSetTimerText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetTimerText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetTimerText.Descriptor; }
      }
      
      public override NetMessageSetTimerText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetTimerText.DefaultInstance; }
      }
      
      public override NetMessageSetTimerText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetTimerText) {
          return MergeFrom((NetMessageSetTimerText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetTimerText other) {
        if (other == global::Gazillion.NetMessageSetTimerText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimerTextId) {
          TimerTextId = other.TimerTextId;
        }
        if (other.HasArg1) {
          Arg1 = other.Arg1;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetTimerTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetTimerTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimerTextId = input.ReadUInt64(ref result.timerTextId_);
              break;
            }
            case 24: {
              result.hasArg1 = input.ReadInt64(ref result.arg1_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimerTextId {
        get { return result.hasTimerTextId; }
      }
      public ulong TimerTextId {
        get { return result.TimerTextId; }
        set { SetTimerTextId(value); }
      }
      public Builder SetTimerTextId(ulong value) {
        PrepareBuilder();
        result.hasTimerTextId = true;
        result.timerTextId_ = value;
        return this;
      }
      public Builder ClearTimerTextId() {
        PrepareBuilder();
        result.hasTimerTextId = false;
        result.timerTextId_ = 0UL;
        return this;
      }
      
      public bool HasArg1 {
        get { return result.hasArg1; }
      }
      public long Arg1 {
        get { return result.Arg1; }
        set { SetArg1(value); }
      }
      public Builder SetArg1(long value) {
        PrepareBuilder();
        result.hasArg1 = true;
        result.arg1_ = value;
        return this;
      }
      public Builder ClearArg1() {
        PrepareBuilder();
        result.hasArg1 = false;
        result.arg1_ = 0L;
        return this;
      }
    }
    static NetMessageSetTimerText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetModeText : pb::GeneratedMessage<NetMessageSetModeText, NetMessageSetModeText.Builder> {
    private NetMessageSetModeText() { }
    private static readonly NetMessageSetModeText defaultInstance = new NetMessageSetModeText().MakeReadOnly();
    private static readonly string[] _netMessageSetModeTextFieldNames = new string[] { "metaGameId", "modeRef", "modeTextId" };
    private static readonly uint[] _netMessageSetModeTextFieldTags = new uint[] { 24, 16, 8 };
    public static NetMessageSetModeText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetModeText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetModeText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetModeText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetModeText, NetMessageSetModeText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetModeText__FieldAccessorTable; }
    }
    
    public const int ModeTextIdFieldNumber = 1;
    private bool hasModeTextId;
    private ulong modeTextId_;
    public bool HasModeTextId {
      get { return hasModeTextId; }
    }
    public ulong ModeTextId {
      get { return modeTextId_; }
    }
    
    public const int ModeRefFieldNumber = 2;
    private bool hasModeRef;
    private ulong modeRef_;
    public bool HasModeRef {
      get { return hasModeRef; }
    }
    public ulong ModeRef {
      get { return modeRef_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasModeTextId) return false;
        if (!hasModeRef) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetModeTextFieldNames;
      if (hasModeTextId) {
        output.WriteUInt64(1, field_names[2], ModeTextId);
      }
      if (hasModeRef) {
        output.WriteUInt64(2, field_names[1], ModeRef);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[0], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModeTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ModeTextId);
      }
      if (hasModeRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ModeRef);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetModeText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetModeText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetModeText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetModeText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetModeText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetModeText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetModeText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetModeText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetModeText result;
      
      private NetMessageSetModeText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetModeText original = result;
          result = new NetMessageSetModeText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetModeText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetModeText.Descriptor; }
      }
      
      public override NetMessageSetModeText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetModeText.DefaultInstance; }
      }
      
      public override NetMessageSetModeText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetModeText) {
          return MergeFrom((NetMessageSetModeText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetModeText other) {
        if (other == global::Gazillion.NetMessageSetModeText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModeTextId) {
          ModeTextId = other.ModeTextId;
        }
        if (other.HasModeRef) {
          ModeRef = other.ModeRef;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetModeTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetModeTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModeTextId = input.ReadUInt64(ref result.modeTextId_);
              break;
            }
            case 16: {
              result.hasModeRef = input.ReadUInt64(ref result.modeRef_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasModeTextId {
        get { return result.hasModeTextId; }
      }
      public ulong ModeTextId {
        get { return result.ModeTextId; }
        set { SetModeTextId(value); }
      }
      public Builder SetModeTextId(ulong value) {
        PrepareBuilder();
        result.hasModeTextId = true;
        result.modeTextId_ = value;
        return this;
      }
      public Builder ClearModeTextId() {
        PrepareBuilder();
        result.hasModeTextId = false;
        result.modeTextId_ = 0UL;
        return this;
      }
      
      public bool HasModeRef {
        get { return result.hasModeRef; }
      }
      public ulong ModeRef {
        get { return result.ModeRef; }
        set { SetModeRef(value); }
      }
      public Builder SetModeRef(ulong value) {
        PrepareBuilder();
        result.hasModeRef = true;
        result.modeRef_ = value;
        return this;
      }
      public Builder ClearModeRef() {
        PrepareBuilder();
        result.hasModeRef = false;
        result.modeRef_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetModeText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetExtraText : pb::GeneratedMessage<NetMessageSetExtraText, NetMessageSetExtraText.Builder> {
    private NetMessageSetExtraText() { }
    private static readonly NetMessageSetExtraText defaultInstance = new NetMessageSetExtraText().MakeReadOnly();
    private static readonly string[] _netMessageSetExtraTextFieldNames = new string[] { "extraTextId" };
    private static readonly uint[] _netMessageSetExtraTextFieldTags = new uint[] { 8 };
    public static NetMessageSetExtraText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetExtraText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetExtraText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetExtraText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetExtraText, NetMessageSetExtraText.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetExtraText__FieldAccessorTable; }
    }
    
    public const int ExtraTextIdFieldNumber = 1;
    private bool hasExtraTextId;
    private ulong extraTextId_;
    public bool HasExtraTextId {
      get { return hasExtraTextId; }
    }
    public ulong ExtraTextId {
      get { return extraTextId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExtraTextId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetExtraTextFieldNames;
      if (hasExtraTextId) {
        output.WriteUInt64(1, field_names[0], ExtraTextId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasExtraTextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ExtraTextId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetExtraText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetExtraText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetExtraText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetExtraText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetExtraText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetExtraText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetExtraText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetExtraText result;
      
      private NetMessageSetExtraText PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetExtraText original = result;
          result = new NetMessageSetExtraText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetExtraText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetExtraText.Descriptor; }
      }
      
      public override NetMessageSetExtraText DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetExtraText.DefaultInstance; }
      }
      
      public override NetMessageSetExtraText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetExtraText) {
          return MergeFrom((NetMessageSetExtraText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetExtraText other) {
        if (other == global::Gazillion.NetMessageSetExtraText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExtraTextId) {
          ExtraTextId = other.ExtraTextId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetExtraTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetExtraTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExtraTextId = input.ReadUInt64(ref result.extraTextId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExtraTextId {
        get { return result.hasExtraTextId; }
      }
      public ulong ExtraTextId {
        get { return result.ExtraTextId; }
        set { SetExtraTextId(value); }
      }
      public Builder SetExtraTextId(ulong value) {
        PrepareBuilder();
        result.hasExtraTextId = true;
        result.extraTextId_ = value;
        return this;
      }
      public Builder ClearExtraTextId() {
        PrepareBuilder();
        result.hasExtraTextId = false;
        result.extraTextId_ = 0UL;
        return this;
      }
    }
    static NetMessageSetExtraText() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageBannerMessage : pb::GeneratedMessage<NetMessageBannerMessage, NetMessageBannerMessage.Builder> {
    private NetMessageBannerMessage() { }
    private static readonly NetMessageBannerMessage defaultInstance = new NetMessageBannerMessage().MakeReadOnly();
    private static readonly string[] _netMessageBannerMessageFieldNames = new string[] { "bannerText", "doNotQueue", "messageStyle", "showImmediately", "textStyle", "timeToLiveMS" };
    private static readonly uint[] _netMessageBannerMessageFieldTags = new uint[] { 8, 40, 32, 48, 16, 24 };
    public static NetMessageBannerMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageBannerMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageBannerMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBannerMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageBannerMessage, NetMessageBannerMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageBannerMessage__FieldAccessorTable; }
    }
    
    public const int BannerTextFieldNumber = 1;
    private bool hasBannerText;
    private ulong bannerText_;
    public bool HasBannerText {
      get { return hasBannerText; }
    }
    public ulong BannerText {
      get { return bannerText_; }
    }
    
    public const int TextStyleFieldNumber = 2;
    private bool hasTextStyle;
    private ulong textStyle_;
    public bool HasTextStyle {
      get { return hasTextStyle; }
    }
    public ulong TextStyle {
      get { return textStyle_; }
    }
    
    public const int TimeToLiveMSFieldNumber = 3;
    private bool hasTimeToLiveMS;
    private uint timeToLiveMS_;
    public bool HasTimeToLiveMS {
      get { return hasTimeToLiveMS; }
    }
    public uint TimeToLiveMS {
      get { return timeToLiveMS_; }
    }
    
    public const int MessageStyleFieldNumber = 4;
    private bool hasMessageStyle;
    private uint messageStyle_;
    public bool HasMessageStyle {
      get { return hasMessageStyle; }
    }
    public uint MessageStyle {
      get { return messageStyle_; }
    }
    
    public const int DoNotQueueFieldNumber = 5;
    private bool hasDoNotQueue;
    private bool doNotQueue_;
    public bool HasDoNotQueue {
      get { return hasDoNotQueue; }
    }
    public bool DoNotQueue {
      get { return doNotQueue_; }
    }
    
    public const int ShowImmediatelyFieldNumber = 6;
    private bool hasShowImmediately;
    private bool showImmediately_;
    public bool HasShowImmediately {
      get { return hasShowImmediately; }
    }
    public bool ShowImmediately {
      get { return showImmediately_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerText) return false;
        if (!hasTextStyle) return false;
        if (!hasTimeToLiveMS) return false;
        if (!hasMessageStyle) return false;
        if (!hasDoNotQueue) return false;
        if (!hasShowImmediately) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageBannerMessageFieldNames;
      if (hasBannerText) {
        output.WriteUInt64(1, field_names[0], BannerText);
      }
      if (hasTextStyle) {
        output.WriteUInt64(2, field_names[4], TextStyle);
      }
      if (hasTimeToLiveMS) {
        output.WriteUInt32(3, field_names[5], TimeToLiveMS);
      }
      if (hasMessageStyle) {
        output.WriteUInt32(4, field_names[2], MessageStyle);
      }
      if (hasDoNotQueue) {
        output.WriteBool(5, field_names[1], DoNotQueue);
      }
      if (hasShowImmediately) {
        output.WriteBool(6, field_names[3], ShowImmediately);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBannerText) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BannerText);
      }
      if (hasTextStyle) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TextStyle);
      }
      if (hasTimeToLiveMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimeToLiveMS);
      }
      if (hasMessageStyle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MessageStyle);
      }
      if (hasDoNotQueue) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, DoNotQueue);
      }
      if (hasShowImmediately) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, ShowImmediately);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageBannerMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageBannerMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageBannerMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageBannerMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageBannerMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageBannerMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageBannerMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageBannerMessage result;
      
      private NetMessageBannerMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageBannerMessage original = result;
          result = new NetMessageBannerMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageBannerMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageBannerMessage.Descriptor; }
      }
      
      public override NetMessageBannerMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageBannerMessage.DefaultInstance; }
      }
      
      public override NetMessageBannerMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageBannerMessage) {
          return MergeFrom((NetMessageBannerMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageBannerMessage other) {
        if (other == global::Gazillion.NetMessageBannerMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerText) {
          BannerText = other.BannerText;
        }
        if (other.HasTextStyle) {
          TextStyle = other.TextStyle;
        }
        if (other.HasTimeToLiveMS) {
          TimeToLiveMS = other.TimeToLiveMS;
        }
        if (other.HasMessageStyle) {
          MessageStyle = other.MessageStyle;
        }
        if (other.HasDoNotQueue) {
          DoNotQueue = other.DoNotQueue;
        }
        if (other.HasShowImmediately) {
          ShowImmediately = other.ShowImmediately;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageBannerMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageBannerMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerText = input.ReadUInt64(ref result.bannerText_);
              break;
            }
            case 16: {
              result.hasTextStyle = input.ReadUInt64(ref result.textStyle_);
              break;
            }
            case 24: {
              result.hasTimeToLiveMS = input.ReadUInt32(ref result.timeToLiveMS_);
              break;
            }
            case 32: {
              result.hasMessageStyle = input.ReadUInt32(ref result.messageStyle_);
              break;
            }
            case 40: {
              result.hasDoNotQueue = input.ReadBool(ref result.doNotQueue_);
              break;
            }
            case 48: {
              result.hasShowImmediately = input.ReadBool(ref result.showImmediately_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerText {
        get { return result.hasBannerText; }
      }
      public ulong BannerText {
        get { return result.BannerText; }
        set { SetBannerText(value); }
      }
      public Builder SetBannerText(ulong value) {
        PrepareBuilder();
        result.hasBannerText = true;
        result.bannerText_ = value;
        return this;
      }
      public Builder ClearBannerText() {
        PrepareBuilder();
        result.hasBannerText = false;
        result.bannerText_ = 0UL;
        return this;
      }
      
      public bool HasTextStyle {
        get { return result.hasTextStyle; }
      }
      public ulong TextStyle {
        get { return result.TextStyle; }
        set { SetTextStyle(value); }
      }
      public Builder SetTextStyle(ulong value) {
        PrepareBuilder();
        result.hasTextStyle = true;
        result.textStyle_ = value;
        return this;
      }
      public Builder ClearTextStyle() {
        PrepareBuilder();
        result.hasTextStyle = false;
        result.textStyle_ = 0UL;
        return this;
      }
      
      public bool HasTimeToLiveMS {
        get { return result.hasTimeToLiveMS; }
      }
      public uint TimeToLiveMS {
        get { return result.TimeToLiveMS; }
        set { SetTimeToLiveMS(value); }
      }
      public Builder SetTimeToLiveMS(uint value) {
        PrepareBuilder();
        result.hasTimeToLiveMS = true;
        result.timeToLiveMS_ = value;
        return this;
      }
      public Builder ClearTimeToLiveMS() {
        PrepareBuilder();
        result.hasTimeToLiveMS = false;
        result.timeToLiveMS_ = 0;
        return this;
      }
      
      public bool HasMessageStyle {
        get { return result.hasMessageStyle; }
      }
      public uint MessageStyle {
        get { return result.MessageStyle; }
        set { SetMessageStyle(value); }
      }
      public Builder SetMessageStyle(uint value) {
        PrepareBuilder();
        result.hasMessageStyle = true;
        result.messageStyle_ = value;
        return this;
      }
      public Builder ClearMessageStyle() {
        PrepareBuilder();
        result.hasMessageStyle = false;
        result.messageStyle_ = 0;
        return this;
      }
      
      public bool HasDoNotQueue {
        get { return result.hasDoNotQueue; }
      }
      public bool DoNotQueue {
        get { return result.DoNotQueue; }
        set { SetDoNotQueue(value); }
      }
      public Builder SetDoNotQueue(bool value) {
        PrepareBuilder();
        result.hasDoNotQueue = true;
        result.doNotQueue_ = value;
        return this;
      }
      public Builder ClearDoNotQueue() {
        PrepareBuilder();
        result.hasDoNotQueue = false;
        result.doNotQueue_ = false;
        return this;
      }
      
      public bool HasShowImmediately {
        get { return result.hasShowImmediately; }
      }
      public bool ShowImmediately {
        get { return result.ShowImmediately; }
        set { SetShowImmediately(value); }
      }
      public Builder SetShowImmediately(bool value) {
        PrepareBuilder();
        result.hasShowImmediately = true;
        result.showImmediately_ = value;
        return this;
      }
      public Builder ClearShowImmediately() {
        PrepareBuilder();
        result.hasShowImmediately = false;
        result.showImmediately_ = false;
        return this;
      }
    }
    static NetMessageBannerMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageHUDTutorial : pb::GeneratedMessage<NetMessageHUDTutorial, NetMessageHUDTutorial.Builder> {
    private NetMessageHUDTutorial() { }
    private static readonly NetMessageHUDTutorial defaultInstance = new NetMessageHUDTutorial().MakeReadOnly();
    private static readonly string[] _netMessageHUDTutorialFieldNames = new string[] { "hudTutorialProtoId" };
    private static readonly uint[] _netMessageHUDTutorialFieldTags = new uint[] { 8 };
    public static NetMessageHUDTutorial DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageHUDTutorial DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageHUDTutorial ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHUDTutorial__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageHUDTutorial, NetMessageHUDTutorial.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageHUDTutorial__FieldAccessorTable; }
    }
    
    public const int HudTutorialProtoIdFieldNumber = 1;
    private bool hasHudTutorialProtoId;
    private ulong hudTutorialProtoId_;
    public bool HasHudTutorialProtoId {
      get { return hasHudTutorialProtoId; }
    }
    public ulong HudTutorialProtoId {
      get { return hudTutorialProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHudTutorialProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageHUDTutorialFieldNames;
      if (hasHudTutorialProtoId) {
        output.WriteUInt64(1, field_names[0], HudTutorialProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHudTutorialProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, HudTutorialProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageHUDTutorial ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageHUDTutorial ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageHUDTutorial MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageHUDTutorial prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageHUDTutorial, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageHUDTutorial cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageHUDTutorial result;
      
      private NetMessageHUDTutorial PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageHUDTutorial original = result;
          result = new NetMessageHUDTutorial();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageHUDTutorial MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageHUDTutorial.Descriptor; }
      }
      
      public override NetMessageHUDTutorial DefaultInstanceForType {
        get { return global::Gazillion.NetMessageHUDTutorial.DefaultInstance; }
      }
      
      public override NetMessageHUDTutorial BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageHUDTutorial) {
          return MergeFrom((NetMessageHUDTutorial) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageHUDTutorial other) {
        if (other == global::Gazillion.NetMessageHUDTutorial.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHudTutorialProtoId) {
          HudTutorialProtoId = other.HudTutorialProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageHUDTutorialFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageHUDTutorialFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHudTutorialProtoId = input.ReadUInt64(ref result.hudTutorialProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHudTutorialProtoId {
        get { return result.hasHudTutorialProtoId; }
      }
      public ulong HudTutorialProtoId {
        get { return result.HudTutorialProtoId; }
        set { SetHudTutorialProtoId(value); }
      }
      public Builder SetHudTutorialProtoId(ulong value) {
        PrepareBuilder();
        result.hasHudTutorialProtoId = true;
        result.hudTutorialProtoId_ = value;
        return this;
      }
      public Builder ClearHudTutorialProtoId() {
        PrepareBuilder();
        result.hasHudTutorialProtoId = false;
        result.hudTutorialProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageHUDTutorial() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionAvatarSwapUpdate : pb::GeneratedMessage<NetMessageRegionAvatarSwapUpdate, NetMessageRegionAvatarSwapUpdate.Builder> {
    private NetMessageRegionAvatarSwapUpdate() { }
    private static readonly NetMessageRegionAvatarSwapUpdate defaultInstance = new NetMessageRegionAvatarSwapUpdate().MakeReadOnly();
    private static readonly string[] _netMessageRegionAvatarSwapUpdateFieldNames = new string[] { "enabled" };
    private static readonly uint[] _netMessageRegionAvatarSwapUpdateFieldTags = new uint[] { 8 };
    public static NetMessageRegionAvatarSwapUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionAvatarSwapUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionAvatarSwapUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionAvatarSwapUpdate, NetMessageRegionAvatarSwapUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionAvatarSwapUpdate__FieldAccessorTable; }
    }
    
    public const int EnabledFieldNumber = 1;
    private bool hasEnabled;
    private bool enabled_;
    public bool HasEnabled {
      get { return hasEnabled; }
    }
    public bool Enabled {
      get { return enabled_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEnabled) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionAvatarSwapUpdateFieldNames;
      if (hasEnabled) {
        output.WriteBool(1, field_names[0], Enabled);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Enabled);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionAvatarSwapUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionAvatarSwapUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionAvatarSwapUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionAvatarSwapUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionAvatarSwapUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionAvatarSwapUpdate result;
      
      private NetMessageRegionAvatarSwapUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionAvatarSwapUpdate original = result;
          result = new NetMessageRegionAvatarSwapUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionAvatarSwapUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionAvatarSwapUpdate.Descriptor; }
      }
      
      public override NetMessageRegionAvatarSwapUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionAvatarSwapUpdate.DefaultInstance; }
      }
      
      public override NetMessageRegionAvatarSwapUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionAvatarSwapUpdate) {
          return MergeFrom((NetMessageRegionAvatarSwapUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionAvatarSwapUpdate other) {
        if (other == global::Gazillion.NetMessageRegionAvatarSwapUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnabled) {
          Enabled = other.Enabled;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionAvatarSwapUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionAvatarSwapUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnabled = input.ReadBool(ref result.enabled_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnabled {
        get { return result.hasEnabled; }
      }
      public bool Enabled {
        get { return result.Enabled; }
        set { SetEnabled(value); }
      }
      public Builder SetEnabled(bool value) {
        PrepareBuilder();
        result.hasEnabled = true;
        result.enabled_ = value;
        return this;
      }
      public Builder ClearEnabled() {
        PrepareBuilder();
        result.hasEnabled = false;
        result.enabled_ = false;
        return this;
      }
    }
    static NetMessageRegionAvatarSwapUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionRestrictedRosterUpdate : pb::GeneratedMessage<NetMessageRegionRestrictedRosterUpdate, NetMessageRegionRestrictedRosterUpdate.Builder> {
    private NetMessageRegionRestrictedRosterUpdate() { }
    private static readonly NetMessageRegionRestrictedRosterUpdate defaultInstance = new NetMessageRegionRestrictedRosterUpdate().MakeReadOnly();
    private static readonly string[] _netMessageRegionRestrictedRosterUpdateFieldNames = new string[] { "enabled" };
    private static readonly uint[] _netMessageRegionRestrictedRosterUpdateFieldTags = new uint[] { 8 };
    public static NetMessageRegionRestrictedRosterUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionRestrictedRosterUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionRestrictedRosterUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionRestrictedRosterUpdate, NetMessageRegionRestrictedRosterUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionRestrictedRosterUpdate__FieldAccessorTable; }
    }
    
    public const int EnabledFieldNumber = 1;
    private bool hasEnabled;
    private bool enabled_;
    public bool HasEnabled {
      get { return hasEnabled; }
    }
    public bool Enabled {
      get { return enabled_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEnabled) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionRestrictedRosterUpdateFieldNames;
      if (hasEnabled) {
        output.WriteBool(1, field_names[0], Enabled);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEnabled) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Enabled);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionRestrictedRosterUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionRestrictedRosterUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionRestrictedRosterUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionRestrictedRosterUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionRestrictedRosterUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionRestrictedRosterUpdate result;
      
      private NetMessageRegionRestrictedRosterUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionRestrictedRosterUpdate original = result;
          result = new NetMessageRegionRestrictedRosterUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionRestrictedRosterUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionRestrictedRosterUpdate.Descriptor; }
      }
      
      public override NetMessageRegionRestrictedRosterUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionRestrictedRosterUpdate.DefaultInstance; }
      }
      
      public override NetMessageRegionRestrictedRosterUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionRestrictedRosterUpdate) {
          return MergeFrom((NetMessageRegionRestrictedRosterUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionRestrictedRosterUpdate other) {
        if (other == global::Gazillion.NetMessageRegionRestrictedRosterUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnabled) {
          Enabled = other.Enabled;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionRestrictedRosterUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionRestrictedRosterUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnabled = input.ReadBool(ref result.enabled_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnabled {
        get { return result.hasEnabled; }
      }
      public bool Enabled {
        get { return result.Enabled; }
        set { SetEnabled(value); }
      }
      public Builder SetEnabled(bool value) {
        PrepareBuilder();
        result.hasEnabled = true;
        result.enabled_ = value;
        return this;
      }
      public Builder ClearEnabled() {
        PrepareBuilder();
        result.hasEnabled = false;
        result.enabled_ = false;
        return this;
      }
    }
    static NetMessageRegionRestrictedRosterUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTeamSelectDialog : pb::GeneratedMessage<NetMessageTeamSelectDialog, NetMessageTeamSelectDialog.Builder> {
    private NetMessageTeamSelectDialog() { }
    private static readonly NetMessageTeamSelectDialog defaultInstance = new NetMessageTeamSelectDialog().MakeReadOnly();
    private static readonly string[] _netMessageTeamSelectDialogFieldNames = new string[] { "publicEventProtoId" };
    private static readonly uint[] _netMessageTeamSelectDialogFieldTags = new uint[] { 8 };
    public static NetMessageTeamSelectDialog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTeamSelectDialog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTeamSelectDialog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeamSelectDialog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTeamSelectDialog, NetMessageTeamSelectDialog.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTeamSelectDialog__FieldAccessorTable; }
    }
    
    public const int PublicEventProtoIdFieldNumber = 1;
    private bool hasPublicEventProtoId;
    private ulong publicEventProtoId_;
    public bool HasPublicEventProtoId {
      get { return hasPublicEventProtoId; }
    }
    public ulong PublicEventProtoId {
      get { return publicEventProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPublicEventProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTeamSelectDialogFieldNames;
      if (hasPublicEventProtoId) {
        output.WriteUInt64(1, field_names[0], PublicEventProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPublicEventProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PublicEventProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTeamSelectDialog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTeamSelectDialog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTeamSelectDialog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTeamSelectDialog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTeamSelectDialog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTeamSelectDialog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTeamSelectDialog result;
      
      private NetMessageTeamSelectDialog PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTeamSelectDialog original = result;
          result = new NetMessageTeamSelectDialog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTeamSelectDialog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTeamSelectDialog.Descriptor; }
      }
      
      public override NetMessageTeamSelectDialog DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTeamSelectDialog.DefaultInstance; }
      }
      
      public override NetMessageTeamSelectDialog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTeamSelectDialog) {
          return MergeFrom((NetMessageTeamSelectDialog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTeamSelectDialog other) {
        if (other == global::Gazillion.NetMessageTeamSelectDialog.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPublicEventProtoId) {
          PublicEventProtoId = other.PublicEventProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTeamSelectDialogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTeamSelectDialogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPublicEventProtoId = input.ReadUInt64(ref result.publicEventProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPublicEventProtoId {
        get { return result.hasPublicEventProtoId; }
      }
      public ulong PublicEventProtoId {
        get { return result.PublicEventProtoId; }
        set { SetPublicEventProtoId(value); }
      }
      public Builder SetPublicEventProtoId(ulong value) {
        PrepareBuilder();
        result.hasPublicEventProtoId = true;
        result.publicEventProtoId_ = value;
        return this;
      }
      public Builder ClearPublicEventProtoId() {
        PrepareBuilder();
        result.hasPublicEventProtoId = false;
        result.publicEventProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageTeamSelectDialog() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAIAggroNotification : pb::GeneratedMessage<NetMessageAIAggroNotification, NetMessageAIAggroNotification.Builder> {
    private NetMessageAIAggroNotification() { }
    private static readonly NetMessageAIAggroNotification defaultInstance = new NetMessageAIAggroNotification().MakeReadOnly();
    private static readonly string[] _netMessageAIAggroNotificationFieldNames = new string[] { "aiRef", "bannerMessageRef", "playerId" };
    private static readonly uint[] _netMessageAIAggroNotificationFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageAIAggroNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAIAggroNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAIAggroNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIAggroNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAIAggroNotification, NetMessageAIAggroNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAIAggroNotification__FieldAccessorTable; }
    }
    
    public const int BannerMessageRefFieldNumber = 1;
    private bool hasBannerMessageRef;
    private ulong bannerMessageRef_;
    public bool HasBannerMessageRef {
      get { return hasBannerMessageRef; }
    }
    public ulong BannerMessageRef {
      get { return bannerMessageRef_; }
    }
    
    public const int AiRefFieldNumber = 2;
    private bool hasAiRef;
    private ulong aiRef_;
    public bool HasAiRef {
      get { return hasAiRef; }
    }
    public ulong AiRef {
      get { return aiRef_; }
    }
    
    public const int PlayerIdFieldNumber = 3;
    private bool hasPlayerId;
    private ulong playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public ulong PlayerId {
      get { return playerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerMessageRef) return false;
        if (!hasAiRef) return false;
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAIAggroNotificationFieldNames;
      if (hasBannerMessageRef) {
        output.WriteUInt64(1, field_names[1], BannerMessageRef);
      }
      if (hasAiRef) {
        output.WriteUInt64(2, field_names[0], AiRef);
      }
      if (hasPlayerId) {
        output.WriteUInt64(3, field_names[2], PlayerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBannerMessageRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BannerMessageRef);
      }
      if (hasAiRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AiRef);
      }
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, PlayerId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAIAggroNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAIAggroNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAIAggroNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAIAggroNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAIAggroNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAIAggroNotification result;
      
      private NetMessageAIAggroNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAIAggroNotification original = result;
          result = new NetMessageAIAggroNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAIAggroNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAIAggroNotification.Descriptor; }
      }
      
      public override NetMessageAIAggroNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAIAggroNotification.DefaultInstance; }
      }
      
      public override NetMessageAIAggroNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAIAggroNotification) {
          return MergeFrom((NetMessageAIAggroNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAIAggroNotification other) {
        if (other == global::Gazillion.NetMessageAIAggroNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerMessageRef) {
          BannerMessageRef = other.BannerMessageRef;
        }
        if (other.HasAiRef) {
          AiRef = other.AiRef;
        }
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAIAggroNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAIAggroNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerMessageRef = input.ReadUInt64(ref result.bannerMessageRef_);
              break;
            }
            case 16: {
              result.hasAiRef = input.ReadUInt64(ref result.aiRef_);
              break;
            }
            case 24: {
              result.hasPlayerId = input.ReadUInt64(ref result.playerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerMessageRef {
        get { return result.hasBannerMessageRef; }
      }
      public ulong BannerMessageRef {
        get { return result.BannerMessageRef; }
        set { SetBannerMessageRef(value); }
      }
      public Builder SetBannerMessageRef(ulong value) {
        PrepareBuilder();
        result.hasBannerMessageRef = true;
        result.bannerMessageRef_ = value;
        return this;
      }
      public Builder ClearBannerMessageRef() {
        PrepareBuilder();
        result.hasBannerMessageRef = false;
        result.bannerMessageRef_ = 0UL;
        return this;
      }
      
      public bool HasAiRef {
        get { return result.hasAiRef; }
      }
      public ulong AiRef {
        get { return result.AiRef; }
        set { SetAiRef(value); }
      }
      public Builder SetAiRef(ulong value) {
        PrepareBuilder();
        result.hasAiRef = true;
        result.aiRef_ = value;
        return this;
      }
      public Builder ClearAiRef() {
        PrepareBuilder();
        result.hasAiRef = false;
        result.aiRef_ = 0UL;
        return this;
      }
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public ulong PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(ulong value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0UL;
        return this;
      }
    }
    static NetMessageAIAggroNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAITargetChangeNotification : pb::GeneratedMessage<NetMessageAITargetChangeNotification, NetMessageAITargetChangeNotification.Builder> {
    private NetMessageAITargetChangeNotification() { }
    private static readonly NetMessageAITargetChangeNotification defaultInstance = new NetMessageAITargetChangeNotification().MakeReadOnly();
    private static readonly string[] _netMessageAITargetChangeNotificationFieldNames = new string[] { "aiId", "newTargetid", "oldTargetid" };
    private static readonly uint[] _netMessageAITargetChangeNotificationFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageAITargetChangeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAITargetChangeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAITargetChangeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAITargetChangeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAITargetChangeNotification, NetMessageAITargetChangeNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAITargetChangeNotification__FieldAccessorTable; }
    }
    
    public const int NewTargetidFieldNumber = 1;
    private bool hasNewTargetid;
    private ulong newTargetid_;
    public bool HasNewTargetid {
      get { return hasNewTargetid; }
    }
    public ulong NewTargetid {
      get { return newTargetid_; }
    }
    
    public const int OldTargetidFieldNumber = 2;
    private bool hasOldTargetid;
    private ulong oldTargetid_;
    public bool HasOldTargetid {
      get { return hasOldTargetid; }
    }
    public ulong OldTargetid {
      get { return oldTargetid_; }
    }
    
    public const int AiIdFieldNumber = 3;
    private bool hasAiId;
    private ulong aiId_;
    public bool HasAiId {
      get { return hasAiId; }
    }
    public ulong AiId {
      get { return aiId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNewTargetid) return false;
        if (!hasOldTargetid) return false;
        if (!hasAiId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAITargetChangeNotificationFieldNames;
      if (hasNewTargetid) {
        output.WriteUInt64(1, field_names[1], NewTargetid);
      }
      if (hasOldTargetid) {
        output.WriteUInt64(2, field_names[2], OldTargetid);
      }
      if (hasAiId) {
        output.WriteUInt64(3, field_names[0], AiId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNewTargetid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, NewTargetid);
      }
      if (hasOldTargetid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, OldTargetid);
      }
      if (hasAiId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, AiId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAITargetChangeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAITargetChangeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAITargetChangeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAITargetChangeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAITargetChangeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAITargetChangeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAITargetChangeNotification result;
      
      private NetMessageAITargetChangeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAITargetChangeNotification original = result;
          result = new NetMessageAITargetChangeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAITargetChangeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAITargetChangeNotification.Descriptor; }
      }
      
      public override NetMessageAITargetChangeNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAITargetChangeNotification.DefaultInstance; }
      }
      
      public override NetMessageAITargetChangeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAITargetChangeNotification) {
          return MergeFrom((NetMessageAITargetChangeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAITargetChangeNotification other) {
        if (other == global::Gazillion.NetMessageAITargetChangeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNewTargetid) {
          NewTargetid = other.NewTargetid;
        }
        if (other.HasOldTargetid) {
          OldTargetid = other.OldTargetid;
        }
        if (other.HasAiId) {
          AiId = other.AiId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAITargetChangeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAITargetChangeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNewTargetid = input.ReadUInt64(ref result.newTargetid_);
              break;
            }
            case 16: {
              result.hasOldTargetid = input.ReadUInt64(ref result.oldTargetid_);
              break;
            }
            case 24: {
              result.hasAiId = input.ReadUInt64(ref result.aiId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNewTargetid {
        get { return result.hasNewTargetid; }
      }
      public ulong NewTargetid {
        get { return result.NewTargetid; }
        set { SetNewTargetid(value); }
      }
      public Builder SetNewTargetid(ulong value) {
        PrepareBuilder();
        result.hasNewTargetid = true;
        result.newTargetid_ = value;
        return this;
      }
      public Builder ClearNewTargetid() {
        PrepareBuilder();
        result.hasNewTargetid = false;
        result.newTargetid_ = 0UL;
        return this;
      }
      
      public bool HasOldTargetid {
        get { return result.hasOldTargetid; }
      }
      public ulong OldTargetid {
        get { return result.OldTargetid; }
        set { SetOldTargetid(value); }
      }
      public Builder SetOldTargetid(ulong value) {
        PrepareBuilder();
        result.hasOldTargetid = true;
        result.oldTargetid_ = value;
        return this;
      }
      public Builder ClearOldTargetid() {
        PrepareBuilder();
        result.hasOldTargetid = false;
        result.oldTargetid_ = 0UL;
        return this;
      }
      
      public bool HasAiId {
        get { return result.hasAiId; }
      }
      public ulong AiId {
        get { return result.AiId; }
        set { SetAiId(value); }
      }
      public Builder SetAiId(ulong value) {
        PrepareBuilder();
        result.hasAiId = true;
        result.aiId_ = value;
        return this;
      }
      public Builder ClearAiId() {
        PrepareBuilder();
        result.hasAiId = false;
        result.aiId_ = 0UL;
        return this;
      }
    }
    static NetMessageAITargetChangeNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStoryNotification : pb::GeneratedMessage<NetMessageStoryNotification, NetMessageStoryNotification.Builder> {
    private NetMessageStoryNotification() { }
    private static readonly NetMessageStoryNotification defaultInstance = new NetMessageStoryNotification().MakeReadOnly();
    private static readonly string[] _netMessageStoryNotificationFieldNames = new string[] { "displayTextStringId", "missionPrototypeId", "speakingEntityPrototypeId", "timeToLiveMS", "voTriggerAssetId" };
    private static readonly uint[] _netMessageStoryNotificationFieldTags = new uint[] { 8, 40, 16, 24, 32 };
    public static NetMessageStoryNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStoryNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStoryNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoryNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStoryNotification, NetMessageStoryNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoryNotification__FieldAccessorTable; }
    }
    
    public const int DisplayTextStringIdFieldNumber = 1;
    private bool hasDisplayTextStringId;
    private ulong displayTextStringId_;
    public bool HasDisplayTextStringId {
      get { return hasDisplayTextStringId; }
    }
    public ulong DisplayTextStringId {
      get { return displayTextStringId_; }
    }
    
    public const int SpeakingEntityPrototypeIdFieldNumber = 2;
    private bool hasSpeakingEntityPrototypeId;
    private ulong speakingEntityPrototypeId_;
    public bool HasSpeakingEntityPrototypeId {
      get { return hasSpeakingEntityPrototypeId; }
    }
    public ulong SpeakingEntityPrototypeId {
      get { return speakingEntityPrototypeId_; }
    }
    
    public const int TimeToLiveMSFieldNumber = 3;
    private bool hasTimeToLiveMS;
    private uint timeToLiveMS_;
    public bool HasTimeToLiveMS {
      get { return hasTimeToLiveMS; }
    }
    public uint TimeToLiveMS {
      get { return timeToLiveMS_; }
    }
    
    public const int VoTriggerAssetIdFieldNumber = 4;
    private bool hasVoTriggerAssetId;
    private ulong voTriggerAssetId_;
    public bool HasVoTriggerAssetId {
      get { return hasVoTriggerAssetId; }
    }
    public ulong VoTriggerAssetId {
      get { return voTriggerAssetId_; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 5;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDisplayTextStringId) return false;
        if (!hasTimeToLiveMS) return false;
        if (!hasVoTriggerAssetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStoryNotificationFieldNames;
      if (hasDisplayTextStringId) {
        output.WriteUInt64(1, field_names[0], DisplayTextStringId);
      }
      if (hasSpeakingEntityPrototypeId) {
        output.WriteUInt64(2, field_names[2], SpeakingEntityPrototypeId);
      }
      if (hasTimeToLiveMS) {
        output.WriteUInt32(3, field_names[3], TimeToLiveMS);
      }
      if (hasVoTriggerAssetId) {
        output.WriteUInt64(4, field_names[4], VoTriggerAssetId);
      }
      if (hasMissionPrototypeId) {
        output.WriteUInt64(5, field_names[1], MissionPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDisplayTextStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DisplayTextStringId);
      }
      if (hasSpeakingEntityPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SpeakingEntityPrototypeId);
      }
      if (hasTimeToLiveMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimeToLiveMS);
      }
      if (hasVoTriggerAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, VoTriggerAssetId);
      }
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, MissionPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStoryNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStoryNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoryNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStoryNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStoryNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStoryNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStoryNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStoryNotification result;
      
      private NetMessageStoryNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStoryNotification original = result;
          result = new NetMessageStoryNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStoryNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStoryNotification.Descriptor; }
      }
      
      public override NetMessageStoryNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStoryNotification.DefaultInstance; }
      }
      
      public override NetMessageStoryNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStoryNotification) {
          return MergeFrom((NetMessageStoryNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStoryNotification other) {
        if (other == global::Gazillion.NetMessageStoryNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDisplayTextStringId) {
          DisplayTextStringId = other.DisplayTextStringId;
        }
        if (other.HasSpeakingEntityPrototypeId) {
          SpeakingEntityPrototypeId = other.SpeakingEntityPrototypeId;
        }
        if (other.HasTimeToLiveMS) {
          TimeToLiveMS = other.TimeToLiveMS;
        }
        if (other.HasVoTriggerAssetId) {
          VoTriggerAssetId = other.VoTriggerAssetId;
        }
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStoryNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStoryNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDisplayTextStringId = input.ReadUInt64(ref result.displayTextStringId_);
              break;
            }
            case 16: {
              result.hasSpeakingEntityPrototypeId = input.ReadUInt64(ref result.speakingEntityPrototypeId_);
              break;
            }
            case 24: {
              result.hasTimeToLiveMS = input.ReadUInt32(ref result.timeToLiveMS_);
              break;
            }
            case 32: {
              result.hasVoTriggerAssetId = input.ReadUInt64(ref result.voTriggerAssetId_);
              break;
            }
            case 40: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDisplayTextStringId {
        get { return result.hasDisplayTextStringId; }
      }
      public ulong DisplayTextStringId {
        get { return result.DisplayTextStringId; }
        set { SetDisplayTextStringId(value); }
      }
      public Builder SetDisplayTextStringId(ulong value) {
        PrepareBuilder();
        result.hasDisplayTextStringId = true;
        result.displayTextStringId_ = value;
        return this;
      }
      public Builder ClearDisplayTextStringId() {
        PrepareBuilder();
        result.hasDisplayTextStringId = false;
        result.displayTextStringId_ = 0UL;
        return this;
      }
      
      public bool HasSpeakingEntityPrototypeId {
        get { return result.hasSpeakingEntityPrototypeId; }
      }
      public ulong SpeakingEntityPrototypeId {
        get { return result.SpeakingEntityPrototypeId; }
        set { SetSpeakingEntityPrototypeId(value); }
      }
      public Builder SetSpeakingEntityPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasSpeakingEntityPrototypeId = true;
        result.speakingEntityPrototypeId_ = value;
        return this;
      }
      public Builder ClearSpeakingEntityPrototypeId() {
        PrepareBuilder();
        result.hasSpeakingEntityPrototypeId = false;
        result.speakingEntityPrototypeId_ = 0UL;
        return this;
      }
      
      public bool HasTimeToLiveMS {
        get { return result.hasTimeToLiveMS; }
      }
      public uint TimeToLiveMS {
        get { return result.TimeToLiveMS; }
        set { SetTimeToLiveMS(value); }
      }
      public Builder SetTimeToLiveMS(uint value) {
        PrepareBuilder();
        result.hasTimeToLiveMS = true;
        result.timeToLiveMS_ = value;
        return this;
      }
      public Builder ClearTimeToLiveMS() {
        PrepareBuilder();
        result.hasTimeToLiveMS = false;
        result.timeToLiveMS_ = 0;
        return this;
      }
      
      public bool HasVoTriggerAssetId {
        get { return result.hasVoTriggerAssetId; }
      }
      public ulong VoTriggerAssetId {
        get { return result.VoTriggerAssetId; }
        set { SetVoTriggerAssetId(value); }
      }
      public Builder SetVoTriggerAssetId(ulong value) {
        PrepareBuilder();
        result.hasVoTriggerAssetId = true;
        result.voTriggerAssetId_ = value;
        return this;
      }
      public Builder ClearVoTriggerAssetId() {
        PrepareBuilder();
        result.hasVoTriggerAssetId = false;
        result.voTriggerAssetId_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageStoryNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSyncTimeReply : pb::GeneratedMessage<NetMessageSyncTimeReply, NetMessageSyncTimeReply.Builder> {
    private NetMessageSyncTimeReply() { }
    private static readonly NetMessageSyncTimeReply defaultInstance = new NetMessageSyncTimeReply().MakeReadOnly();
    private static readonly string[] _netMessageSyncTimeReplyFieldNames = new string[] { "dateTimeClientSent", "dateTimeServerReceived", "dateTimeServerSent", "datetimeDialationStarted", "dialation", "gameTimeClientSent", "gameTimeServerReceived", "gameTimeServerSent", "gametimeDialationStarted" };
    private static readonly uint[] _netMessageSyncTimeReplyFieldTags = new uint[] { 32, 40, 48, 72, 61, 8, 16, 24, 64 };
    public static NetMessageSyncTimeReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSyncTimeReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSyncTimeReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSyncTimeReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSyncTimeReply, NetMessageSyncTimeReply.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSyncTimeReply__FieldAccessorTable; }
    }
    
    public const int GameTimeClientSentFieldNumber = 1;
    private bool hasGameTimeClientSent;
    private long gameTimeClientSent_;
    public bool HasGameTimeClientSent {
      get { return hasGameTimeClientSent; }
    }
    public long GameTimeClientSent {
      get { return gameTimeClientSent_; }
    }
    
    public const int GameTimeServerReceivedFieldNumber = 2;
    private bool hasGameTimeServerReceived;
    private long gameTimeServerReceived_;
    public bool HasGameTimeServerReceived {
      get { return hasGameTimeServerReceived; }
    }
    public long GameTimeServerReceived {
      get { return gameTimeServerReceived_; }
    }
    
    public const int GameTimeServerSentFieldNumber = 3;
    private bool hasGameTimeServerSent;
    private long gameTimeServerSent_;
    public bool HasGameTimeServerSent {
      get { return hasGameTimeServerSent; }
    }
    public long GameTimeServerSent {
      get { return gameTimeServerSent_; }
    }
    
    public const int DateTimeClientSentFieldNumber = 4;
    private bool hasDateTimeClientSent;
    private long dateTimeClientSent_;
    public bool HasDateTimeClientSent {
      get { return hasDateTimeClientSent; }
    }
    public long DateTimeClientSent {
      get { return dateTimeClientSent_; }
    }
    
    public const int DateTimeServerReceivedFieldNumber = 5;
    private bool hasDateTimeServerReceived;
    private long dateTimeServerReceived_;
    public bool HasDateTimeServerReceived {
      get { return hasDateTimeServerReceived; }
    }
    public long DateTimeServerReceived {
      get { return dateTimeServerReceived_; }
    }
    
    public const int DateTimeServerSentFieldNumber = 6;
    private bool hasDateTimeServerSent;
    private long dateTimeServerSent_;
    public bool HasDateTimeServerSent {
      get { return hasDateTimeServerSent; }
    }
    public long DateTimeServerSent {
      get { return dateTimeServerSent_; }
    }
    
    public const int DialationFieldNumber = 7;
    private bool hasDialation;
    private float dialation_;
    public bool HasDialation {
      get { return hasDialation; }
    }
    public float Dialation {
      get { return dialation_; }
    }
    
    public const int GametimeDialationStartedFieldNumber = 8;
    private bool hasGametimeDialationStarted;
    private long gametimeDialationStarted_;
    public bool HasGametimeDialationStarted {
      get { return hasGametimeDialationStarted; }
    }
    public long GametimeDialationStarted {
      get { return gametimeDialationStarted_; }
    }
    
    public const int DatetimeDialationStartedFieldNumber = 9;
    private bool hasDatetimeDialationStarted;
    private long datetimeDialationStarted_;
    public bool HasDatetimeDialationStarted {
      get { return hasDatetimeDialationStarted; }
    }
    public long DatetimeDialationStarted {
      get { return datetimeDialationStarted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeClientSent) return false;
        if (!hasGameTimeServerReceived) return false;
        if (!hasGameTimeServerSent) return false;
        if (!hasDateTimeClientSent) return false;
        if (!hasDateTimeServerReceived) return false;
        if (!hasDateTimeServerSent) return false;
        if (!hasDialation) return false;
        if (!hasGametimeDialationStarted) return false;
        if (!hasDatetimeDialationStarted) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSyncTimeReplyFieldNames;
      if (hasGameTimeClientSent) {
        output.WriteInt64(1, field_names[5], GameTimeClientSent);
      }
      if (hasGameTimeServerReceived) {
        output.WriteInt64(2, field_names[6], GameTimeServerReceived);
      }
      if (hasGameTimeServerSent) {
        output.WriteInt64(3, field_names[7], GameTimeServerSent);
      }
      if (hasDateTimeClientSent) {
        output.WriteInt64(4, field_names[0], DateTimeClientSent);
      }
      if (hasDateTimeServerReceived) {
        output.WriteInt64(5, field_names[1], DateTimeServerReceived);
      }
      if (hasDateTimeServerSent) {
        output.WriteInt64(6, field_names[2], DateTimeServerSent);
      }
      if (hasDialation) {
        output.WriteFloat(7, field_names[4], Dialation);
      }
      if (hasGametimeDialationStarted) {
        output.WriteInt64(8, field_names[8], GametimeDialationStarted);
      }
      if (hasDatetimeDialationStarted) {
        output.WriteInt64(9, field_names[3], DatetimeDialationStarted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeClientSent);
      }
      if (hasGameTimeServerReceived) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, GameTimeServerReceived);
      }
      if (hasGameTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, GameTimeServerSent);
      }
      if (hasDateTimeClientSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, DateTimeClientSent);
      }
      if (hasDateTimeServerReceived) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, DateTimeServerReceived);
      }
      if (hasDateTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, DateTimeServerSent);
      }
      if (hasDialation) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, Dialation);
      }
      if (hasGametimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, GametimeDialationStarted);
      }
      if (hasDatetimeDialationStarted) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, DatetimeDialationStarted);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSyncTimeReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSyncTimeReply MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSyncTimeReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSyncTimeReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSyncTimeReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSyncTimeReply result;
      
      private NetMessageSyncTimeReply PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSyncTimeReply original = result;
          result = new NetMessageSyncTimeReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSyncTimeReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSyncTimeReply.Descriptor; }
      }
      
      public override NetMessageSyncTimeReply DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSyncTimeReply.DefaultInstance; }
      }
      
      public override NetMessageSyncTimeReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSyncTimeReply) {
          return MergeFrom((NetMessageSyncTimeReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSyncTimeReply other) {
        if (other == global::Gazillion.NetMessageSyncTimeReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeClientSent) {
          GameTimeClientSent = other.GameTimeClientSent;
        }
        if (other.HasGameTimeServerReceived) {
          GameTimeServerReceived = other.GameTimeServerReceived;
        }
        if (other.HasGameTimeServerSent) {
          GameTimeServerSent = other.GameTimeServerSent;
        }
        if (other.HasDateTimeClientSent) {
          DateTimeClientSent = other.DateTimeClientSent;
        }
        if (other.HasDateTimeServerReceived) {
          DateTimeServerReceived = other.DateTimeServerReceived;
        }
        if (other.HasDateTimeServerSent) {
          DateTimeServerSent = other.DateTimeServerSent;
        }
        if (other.HasDialation) {
          Dialation = other.Dialation;
        }
        if (other.HasGametimeDialationStarted) {
          GametimeDialationStarted = other.GametimeDialationStarted;
        }
        if (other.HasDatetimeDialationStarted) {
          DatetimeDialationStarted = other.DatetimeDialationStarted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSyncTimeReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSyncTimeReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeClientSent = input.ReadInt64(ref result.gameTimeClientSent_);
              break;
            }
            case 16: {
              result.hasGameTimeServerReceived = input.ReadInt64(ref result.gameTimeServerReceived_);
              break;
            }
            case 24: {
              result.hasGameTimeServerSent = input.ReadInt64(ref result.gameTimeServerSent_);
              break;
            }
            case 32: {
              result.hasDateTimeClientSent = input.ReadInt64(ref result.dateTimeClientSent_);
              break;
            }
            case 40: {
              result.hasDateTimeServerReceived = input.ReadInt64(ref result.dateTimeServerReceived_);
              break;
            }
            case 48: {
              result.hasDateTimeServerSent = input.ReadInt64(ref result.dateTimeServerSent_);
              break;
            }
            case 61: {
              result.hasDialation = input.ReadFloat(ref result.dialation_);
              break;
            }
            case 64: {
              result.hasGametimeDialationStarted = input.ReadInt64(ref result.gametimeDialationStarted_);
              break;
            }
            case 72: {
              result.hasDatetimeDialationStarted = input.ReadInt64(ref result.datetimeDialationStarted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeClientSent {
        get { return result.hasGameTimeClientSent; }
      }
      public long GameTimeClientSent {
        get { return result.GameTimeClientSent; }
        set { SetGameTimeClientSent(value); }
      }
      public Builder SetGameTimeClientSent(long value) {
        PrepareBuilder();
        result.hasGameTimeClientSent = true;
        result.gameTimeClientSent_ = value;
        return this;
      }
      public Builder ClearGameTimeClientSent() {
        PrepareBuilder();
        result.hasGameTimeClientSent = false;
        result.gameTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasGameTimeServerReceived {
        get { return result.hasGameTimeServerReceived; }
      }
      public long GameTimeServerReceived {
        get { return result.GameTimeServerReceived; }
        set { SetGameTimeServerReceived(value); }
      }
      public Builder SetGameTimeServerReceived(long value) {
        PrepareBuilder();
        result.hasGameTimeServerReceived = true;
        result.gameTimeServerReceived_ = value;
        return this;
      }
      public Builder ClearGameTimeServerReceived() {
        PrepareBuilder();
        result.hasGameTimeServerReceived = false;
        result.gameTimeServerReceived_ = 0L;
        return this;
      }
      
      public bool HasGameTimeServerSent {
        get { return result.hasGameTimeServerSent; }
      }
      public long GameTimeServerSent {
        get { return result.GameTimeServerSent; }
        set { SetGameTimeServerSent(value); }
      }
      public Builder SetGameTimeServerSent(long value) {
        PrepareBuilder();
        result.hasGameTimeServerSent = true;
        result.gameTimeServerSent_ = value;
        return this;
      }
      public Builder ClearGameTimeServerSent() {
        PrepareBuilder();
        result.hasGameTimeServerSent = false;
        result.gameTimeServerSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeClientSent {
        get { return result.hasDateTimeClientSent; }
      }
      public long DateTimeClientSent {
        get { return result.DateTimeClientSent; }
        set { SetDateTimeClientSent(value); }
      }
      public Builder SetDateTimeClientSent(long value) {
        PrepareBuilder();
        result.hasDateTimeClientSent = true;
        result.dateTimeClientSent_ = value;
        return this;
      }
      public Builder ClearDateTimeClientSent() {
        PrepareBuilder();
        result.hasDateTimeClientSent = false;
        result.dateTimeClientSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeServerReceived {
        get { return result.hasDateTimeServerReceived; }
      }
      public long DateTimeServerReceived {
        get { return result.DateTimeServerReceived; }
        set { SetDateTimeServerReceived(value); }
      }
      public Builder SetDateTimeServerReceived(long value) {
        PrepareBuilder();
        result.hasDateTimeServerReceived = true;
        result.dateTimeServerReceived_ = value;
        return this;
      }
      public Builder ClearDateTimeServerReceived() {
        PrepareBuilder();
        result.hasDateTimeServerReceived = false;
        result.dateTimeServerReceived_ = 0L;
        return this;
      }
      
      public bool HasDateTimeServerSent {
        get { return result.hasDateTimeServerSent; }
      }
      public long DateTimeServerSent {
        get { return result.DateTimeServerSent; }
        set { SetDateTimeServerSent(value); }
      }
      public Builder SetDateTimeServerSent(long value) {
        PrepareBuilder();
        result.hasDateTimeServerSent = true;
        result.dateTimeServerSent_ = value;
        return this;
      }
      public Builder ClearDateTimeServerSent() {
        PrepareBuilder();
        result.hasDateTimeServerSent = false;
        result.dateTimeServerSent_ = 0L;
        return this;
      }
      
      public bool HasDialation {
        get { return result.hasDialation; }
      }
      public float Dialation {
        get { return result.Dialation; }
        set { SetDialation(value); }
      }
      public Builder SetDialation(float value) {
        PrepareBuilder();
        result.hasDialation = true;
        result.dialation_ = value;
        return this;
      }
      public Builder ClearDialation() {
        PrepareBuilder();
        result.hasDialation = false;
        result.dialation_ = 0F;
        return this;
      }
      
      public bool HasGametimeDialationStarted {
        get { return result.hasGametimeDialationStarted; }
      }
      public long GametimeDialationStarted {
        get { return result.GametimeDialationStarted; }
        set { SetGametimeDialationStarted(value); }
      }
      public Builder SetGametimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasGametimeDialationStarted = true;
        result.gametimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearGametimeDialationStarted() {
        PrepareBuilder();
        result.hasGametimeDialationStarted = false;
        result.gametimeDialationStarted_ = 0L;
        return this;
      }
      
      public bool HasDatetimeDialationStarted {
        get { return result.hasDatetimeDialationStarted; }
      }
      public long DatetimeDialationStarted {
        get { return result.DatetimeDialationStarted; }
        set { SetDatetimeDialationStarted(value); }
      }
      public Builder SetDatetimeDialationStarted(long value) {
        PrepareBuilder();
        result.hasDatetimeDialationStarted = true;
        result.datetimeDialationStarted_ = value;
        return this;
      }
      public Builder ClearDatetimeDialationStarted() {
        PrepareBuilder();
        result.hasDatetimeDialationStarted = false;
        result.datetimeDialationStarted_ = 0L;
        return this;
      }
    }
    static NetMessageSyncTimeReply() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInitialTimeSync : pb::GeneratedMessage<NetMessageInitialTimeSync, NetMessageInitialTimeSync.Builder> {
    private NetMessageInitialTimeSync() { }
    private static readonly NetMessageInitialTimeSync defaultInstance = new NetMessageInitialTimeSync().MakeReadOnly();
    private static readonly string[] _netMessageInitialTimeSyncFieldNames = new string[] { "dateTimeServerSent", "gameTimeServerSent" };
    private static readonly uint[] _netMessageInitialTimeSyncFieldTags = new uint[] { 16, 8 };
    public static NetMessageInitialTimeSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInitialTimeSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInitialTimeSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInitialTimeSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInitialTimeSync, NetMessageInitialTimeSync.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInitialTimeSync__FieldAccessorTable; }
    }
    
    public const int GameTimeServerSentFieldNumber = 1;
    private bool hasGameTimeServerSent;
    private long gameTimeServerSent_;
    public bool HasGameTimeServerSent {
      get { return hasGameTimeServerSent; }
    }
    public long GameTimeServerSent {
      get { return gameTimeServerSent_; }
    }
    
    public const int DateTimeServerSentFieldNumber = 2;
    private bool hasDateTimeServerSent;
    private long dateTimeServerSent_;
    public bool HasDateTimeServerSent {
      get { return hasDateTimeServerSent; }
    }
    public long DateTimeServerSent {
      get { return dateTimeServerSent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameTimeServerSent) return false;
        if (!hasDateTimeServerSent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInitialTimeSyncFieldNames;
      if (hasGameTimeServerSent) {
        output.WriteInt64(1, field_names[1], GameTimeServerSent);
      }
      if (hasDateTimeServerSent) {
        output.WriteInt64(2, field_names[0], DateTimeServerSent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GameTimeServerSent);
      }
      if (hasDateTimeServerSent) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, DateTimeServerSent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInitialTimeSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInitialTimeSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInitialTimeSync MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInitialTimeSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInitialTimeSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInitialTimeSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInitialTimeSync result;
      
      private NetMessageInitialTimeSync PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInitialTimeSync original = result;
          result = new NetMessageInitialTimeSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInitialTimeSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInitialTimeSync.Descriptor; }
      }
      
      public override NetMessageInitialTimeSync DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInitialTimeSync.DefaultInstance; }
      }
      
      public override NetMessageInitialTimeSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInitialTimeSync) {
          return MergeFrom((NetMessageInitialTimeSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInitialTimeSync other) {
        if (other == global::Gazillion.NetMessageInitialTimeSync.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameTimeServerSent) {
          GameTimeServerSent = other.GameTimeServerSent;
        }
        if (other.HasDateTimeServerSent) {
          DateTimeServerSent = other.DateTimeServerSent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInitialTimeSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInitialTimeSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameTimeServerSent = input.ReadInt64(ref result.gameTimeServerSent_);
              break;
            }
            case 16: {
              result.hasDateTimeServerSent = input.ReadInt64(ref result.dateTimeServerSent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameTimeServerSent {
        get { return result.hasGameTimeServerSent; }
      }
      public long GameTimeServerSent {
        get { return result.GameTimeServerSent; }
        set { SetGameTimeServerSent(value); }
      }
      public Builder SetGameTimeServerSent(long value) {
        PrepareBuilder();
        result.hasGameTimeServerSent = true;
        result.gameTimeServerSent_ = value;
        return this;
      }
      public Builder ClearGameTimeServerSent() {
        PrepareBuilder();
        result.hasGameTimeServerSent = false;
        result.gameTimeServerSent_ = 0L;
        return this;
      }
      
      public bool HasDateTimeServerSent {
        get { return result.hasDateTimeServerSent; }
      }
      public long DateTimeServerSent {
        get { return result.DateTimeServerSent; }
        set { SetDateTimeServerSent(value); }
      }
      public Builder SetDateTimeServerSent(long value) {
        PrepareBuilder();
        result.hasDateTimeServerSent = true;
        result.dateTimeServerSent_ = value;
        return this;
      }
      public Builder ClearDateTimeServerSent() {
        PrepareBuilder();
        result.hasDateTimeServerSent = false;
        result.dateTimeServerSent_ = 0L;
        return this;
      }
    }
    static NetMessageInitialTimeSync() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSelectStartingAvatarForNewPlayer : pb::GeneratedMessage<NetMessageSelectStartingAvatarForNewPlayer, NetMessageSelectStartingAvatarForNewPlayer.Builder> {
    private NetMessageSelectStartingAvatarForNewPlayer() { }
    private static readonly NetMessageSelectStartingAvatarForNewPlayer defaultInstance = new NetMessageSelectStartingAvatarForNewPlayer().MakeReadOnly();
    private static readonly string[] _netMessageSelectStartingAvatarForNewPlayerFieldNames = new string[] { "showOpeningCinematic" };
    private static readonly uint[] _netMessageSelectStartingAvatarForNewPlayerFieldTags = new uint[] { 8 };
    public static NetMessageSelectStartingAvatarForNewPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSelectStartingAvatarForNewPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSelectStartingAvatarForNewPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSelectStartingAvatarForNewPlayer, NetMessageSelectStartingAvatarForNewPlayer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSelectStartingAvatarForNewPlayer__FieldAccessorTable; }
    }
    
    public const int ShowOpeningCinematicFieldNumber = 1;
    private bool hasShowOpeningCinematic;
    private bool showOpeningCinematic_;
    public bool HasShowOpeningCinematic {
      get { return hasShowOpeningCinematic; }
    }
    public bool ShowOpeningCinematic {
      get { return showOpeningCinematic_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasShowOpeningCinematic) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSelectStartingAvatarForNewPlayerFieldNames;
      if (hasShowOpeningCinematic) {
        output.WriteBool(1, field_names[0], ShowOpeningCinematic);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasShowOpeningCinematic) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, ShowOpeningCinematic);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSelectStartingAvatarForNewPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSelectStartingAvatarForNewPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSelectStartingAvatarForNewPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSelectStartingAvatarForNewPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSelectStartingAvatarForNewPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSelectStartingAvatarForNewPlayer result;
      
      private NetMessageSelectStartingAvatarForNewPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSelectStartingAvatarForNewPlayer original = result;
          result = new NetMessageSelectStartingAvatarForNewPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSelectStartingAvatarForNewPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.Descriptor; }
      }
      
      public override NetMessageSelectStartingAvatarForNewPlayer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.DefaultInstance; }
      }
      
      public override NetMessageSelectStartingAvatarForNewPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSelectStartingAvatarForNewPlayer) {
          return MergeFrom((NetMessageSelectStartingAvatarForNewPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSelectStartingAvatarForNewPlayer other) {
        if (other == global::Gazillion.NetMessageSelectStartingAvatarForNewPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasShowOpeningCinematic) {
          ShowOpeningCinematic = other.ShowOpeningCinematic;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSelectStartingAvatarForNewPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSelectStartingAvatarForNewPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasShowOpeningCinematic = input.ReadBool(ref result.showOpeningCinematic_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasShowOpeningCinematic {
        get { return result.hasShowOpeningCinematic; }
      }
      public bool ShowOpeningCinematic {
        get { return result.ShowOpeningCinematic; }
        set { SetShowOpeningCinematic(value); }
      }
      public Builder SetShowOpeningCinematic(bool value) {
        PrepareBuilder();
        result.hasShowOpeningCinematic = true;
        result.showOpeningCinematic_ = value;
        return this;
      }
      public Builder ClearShowOpeningCinematic() {
        PrepareBuilder();
        result.hasShowOpeningCinematic = false;
        result.showOpeningCinematic_ = false;
        return this;
      }
    }
    static NetMessageSelectStartingAvatarForNewPlayer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowKioskStartScreen : pb::GeneratedMessage<NetMessageShowKioskStartScreen, NetMessageShowKioskStartScreen.Builder> {
    private NetMessageShowKioskStartScreen() { }
    private static readonly NetMessageShowKioskStartScreen defaultInstance = new NetMessageShowKioskStartScreen().MakeReadOnly();
    private static readonly string[] _netMessageShowKioskStartScreenFieldNames = new string[] {  };
    private static readonly uint[] _netMessageShowKioskStartScreenFieldTags = new uint[] {  };
    public static NetMessageShowKioskStartScreen DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowKioskStartScreen DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowKioskStartScreen ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowKioskStartScreen__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowKioskStartScreen, NetMessageShowKioskStartScreen.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowKioskStartScreen__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowKioskStartScreenFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowKioskStartScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowKioskStartScreen MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowKioskStartScreen prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowKioskStartScreen, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowKioskStartScreen cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowKioskStartScreen result;
      
      private NetMessageShowKioskStartScreen PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowKioskStartScreen original = result;
          result = new NetMessageShowKioskStartScreen();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowKioskStartScreen MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowKioskStartScreen.Descriptor; }
      }
      
      public override NetMessageShowKioskStartScreen DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowKioskStartScreen.DefaultInstance; }
      }
      
      public override NetMessageShowKioskStartScreen BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowKioskStartScreen) {
          return MergeFrom((NetMessageShowKioskStartScreen) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowKioskStartScreen other) {
        if (other == global::Gazillion.NetMessageShowKioskStartScreen.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowKioskStartScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowKioskStartScreenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageShowKioskStartScreen() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryFull : pb::GeneratedMessage<NetMessageInventoryFull, NetMessageInventoryFull.Builder> {
    private NetMessageInventoryFull() { }
    private static readonly NetMessageInventoryFull defaultInstance = new NetMessageInventoryFull().MakeReadOnly();
    private static readonly string[] _netMessageInventoryFullFieldNames = new string[] { "itemID", "playerID" };
    private static readonly uint[] _netMessageInventoryFullFieldTags = new uint[] { 16, 8 };
    public static NetMessageInventoryFull DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryFull DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryFull ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryFull__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryFull, NetMessageInventoryFull.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryFull__FieldAccessorTable; }
    }
    
    public const int PlayerIDFieldNumber = 1;
    private bool hasPlayerID;
    private ulong playerID_;
    public bool HasPlayerID {
      get { return hasPlayerID; }
    }
    public ulong PlayerID {
      get { return playerID_; }
    }
    
    public const int ItemIDFieldNumber = 2;
    private bool hasItemID;
    private ulong itemID_;
    public bool HasItemID {
      get { return hasItemID; }
    }
    public ulong ItemID {
      get { return itemID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerID) return false;
        if (!hasItemID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryFullFieldNames;
      if (hasPlayerID) {
        output.WriteUInt64(1, field_names[1], PlayerID);
      }
      if (hasItemID) {
        output.WriteUInt64(2, field_names[0], ItemID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerID);
      }
      if (hasItemID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ItemID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryFull ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryFull ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryFull ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryFull MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryFull prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryFull, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryFull cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryFull result;
      
      private NetMessageInventoryFull PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryFull original = result;
          result = new NetMessageInventoryFull();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryFull MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryFull.Descriptor; }
      }
      
      public override NetMessageInventoryFull DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryFull.DefaultInstance; }
      }
      
      public override NetMessageInventoryFull BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryFull) {
          return MergeFrom((NetMessageInventoryFull) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryFull other) {
        if (other == global::Gazillion.NetMessageInventoryFull.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerID) {
          PlayerID = other.PlayerID;
        }
        if (other.HasItemID) {
          ItemID = other.ItemID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryFullFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryFullFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerID = input.ReadUInt64(ref result.playerID_);
              break;
            }
            case 16: {
              result.hasItemID = input.ReadUInt64(ref result.itemID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerID {
        get { return result.hasPlayerID; }
      }
      public ulong PlayerID {
        get { return result.PlayerID; }
        set { SetPlayerID(value); }
      }
      public Builder SetPlayerID(ulong value) {
        PrepareBuilder();
        result.hasPlayerID = true;
        result.playerID_ = value;
        return this;
      }
      public Builder ClearPlayerID() {
        PrepareBuilder();
        result.hasPlayerID = false;
        result.playerID_ = 0UL;
        return this;
      }
      
      public bool HasItemID {
        get { return result.hasItemID; }
      }
      public ulong ItemID {
        get { return result.ItemID; }
        set { SetItemID(value); }
      }
      public Builder SetItemID(ulong value) {
        PrepareBuilder();
        result.hasItemID = true;
        result.itemID_ = value;
        return this;
      }
      public Builder ClearItemID() {
        PrepareBuilder();
        result.hasItemID = false;
        result.itemID_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryFull() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnloadPackagesStart : pb::GeneratedMessage<NetMessageUnloadPackagesStart, NetMessageUnloadPackagesStart.Builder> {
    private NetMessageUnloadPackagesStart() { }
    private static readonly NetMessageUnloadPackagesStart defaultInstance = new NetMessageUnloadPackagesStart().MakeReadOnly();
    private static readonly string[] _netMessageUnloadPackagesStartFieldNames = new string[] {  };
    private static readonly uint[] _netMessageUnloadPackagesStartFieldTags = new uint[] {  };
    public static NetMessageUnloadPackagesStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnloadPackagesStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnloadPackagesStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnloadPackagesStart, NetMessageUnloadPackagesStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesStart__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnloadPackagesStartFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnloadPackagesStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnloadPackagesStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnloadPackagesStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnloadPackagesStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnloadPackagesStart result;
      
      private NetMessageUnloadPackagesStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnloadPackagesStart original = result;
          result = new NetMessageUnloadPackagesStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnloadPackagesStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnloadPackagesStart.Descriptor; }
      }
      
      public override NetMessageUnloadPackagesStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnloadPackagesStart.DefaultInstance; }
      }
      
      public override NetMessageUnloadPackagesStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnloadPackagesStart) {
          return MergeFrom((NetMessageUnloadPackagesStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnloadPackagesStart other) {
        if (other == global::Gazillion.NetMessageUnloadPackagesStart.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnloadPackagesStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnloadPackagesStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageUnloadPackagesStart() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnloadPackagesEnd : pb::GeneratedMessage<NetMessageUnloadPackagesEnd, NetMessageUnloadPackagesEnd.Builder> {
    private NetMessageUnloadPackagesEnd() { }
    private static readonly NetMessageUnloadPackagesEnd defaultInstance = new NetMessageUnloadPackagesEnd().MakeReadOnly();
    private static readonly string[] _netMessageUnloadPackagesEndFieldNames = new string[] {  };
    private static readonly uint[] _netMessageUnloadPackagesEndFieldTags = new uint[] {  };
    public static NetMessageUnloadPackagesEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnloadPackagesEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnloadPackagesEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnloadPackagesEnd, NetMessageUnloadPackagesEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnloadPackagesEnd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnloadPackagesEndFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnloadPackagesEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnloadPackagesEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnloadPackagesEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnloadPackagesEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnloadPackagesEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnloadPackagesEnd result;
      
      private NetMessageUnloadPackagesEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnloadPackagesEnd original = result;
          result = new NetMessageUnloadPackagesEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnloadPackagesEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnloadPackagesEnd.Descriptor; }
      }
      
      public override NetMessageUnloadPackagesEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnloadPackagesEnd.DefaultInstance; }
      }
      
      public override NetMessageUnloadPackagesEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnloadPackagesEnd) {
          return MergeFrom((NetMessageUnloadPackagesEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnloadPackagesEnd other) {
        if (other == global::Gazillion.NetMessageUnloadPackagesEnd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnloadPackagesEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnloadPackagesEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageUnloadPackagesEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageForceDisconnect : pb::GeneratedMessage<NetMessageForceDisconnect, NetMessageForceDisconnect.Builder> {
    private NetMessageForceDisconnect() { }
    private static readonly NetMessageForceDisconnect defaultInstance = new NetMessageForceDisconnect().MakeReadOnly();
    private static readonly string[] _netMessageForceDisconnectFieldNames = new string[] { "reason" };
    private static readonly uint[] _netMessageForceDisconnectFieldTags = new uint[] { 8 };
    public static NetMessageForceDisconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageForceDisconnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageForceDisconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageForceDisconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageForceDisconnect, NetMessageForceDisconnect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageForceDisconnect__FieldAccessorTable; }
    }
    
    public const int ReasonFieldNumber = 1;
    private bool hasReason;
    private global::Gazillion.ForceDisconnectReason reason_ = global::Gazillion.ForceDisconnectReason.eFDR_None;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::Gazillion.ForceDisconnectReason Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageForceDisconnectFieldNames;
      if (hasReason) {
        output.WriteEnum(1, field_names[0], (int) Reason, Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageForceDisconnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageForceDisconnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageForceDisconnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageForceDisconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageForceDisconnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageForceDisconnect result;
      
      private NetMessageForceDisconnect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageForceDisconnect original = result;
          result = new NetMessageForceDisconnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageForceDisconnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageForceDisconnect.Descriptor; }
      }
      
      public override NetMessageForceDisconnect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageForceDisconnect.DefaultInstance; }
      }
      
      public override NetMessageForceDisconnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageForceDisconnect) {
          return MergeFrom((NetMessageForceDisconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageForceDisconnect other) {
        if (other == global::Gazillion.NetMessageForceDisconnect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageForceDisconnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageForceDisconnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::Gazillion.ForceDisconnectReason Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::Gazillion.ForceDisconnectReason value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::Gazillion.ForceDisconnectReason.eFDR_None;
        return this;
      }
    }
    static NetMessageForceDisconnect() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLevelUp : pb::GeneratedMessage<NetMessageLevelUp, NetMessageLevelUp.Builder> {
    private NetMessageLevelUp() { }
    private static readonly NetMessageLevelUp defaultInstance = new NetMessageLevelUp().MakeReadOnly();
    private static readonly string[] _netMessageLevelUpFieldNames = new string[] { "entityID" };
    private static readonly uint[] _netMessageLevelUpFieldTags = new uint[] { 8 };
    public static NetMessageLevelUp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLevelUp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLevelUp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLevelUp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLevelUp, NetMessageLevelUp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLevelUp__FieldAccessorTable; }
    }
    
    public const int EntityIDFieldNumber = 1;
    private bool hasEntityID;
    private ulong entityID_;
    public bool HasEntityID {
      get { return hasEntityID; }
    }
    public ulong EntityID {
      get { return entityID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLevelUpFieldNames;
      if (hasEntityID) {
        output.WriteUInt64(1, field_names[0], EntityID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLevelUp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLevelUp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLevelUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLevelUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLevelUp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLevelUp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLevelUp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLevelUp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLevelUp result;
      
      private NetMessageLevelUp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLevelUp original = result;
          result = new NetMessageLevelUp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLevelUp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLevelUp.Descriptor; }
      }
      
      public override NetMessageLevelUp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLevelUp.DefaultInstance; }
      }
      
      public override NetMessageLevelUp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLevelUp) {
          return MergeFrom((NetMessageLevelUp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLevelUp other) {
        if (other == global::Gazillion.NetMessageLevelUp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityID) {
          EntityID = other.EntityID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLevelUpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLevelUpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityID = input.ReadUInt64(ref result.entityID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityID {
        get { return result.hasEntityID; }
      }
      public ulong EntityID {
        get { return result.EntityID; }
        set { SetEntityID(value); }
      }
      public Builder SetEntityID(ulong value) {
        PrepareBuilder();
        result.hasEntityID = true;
        result.entityID_ = value;
        return this;
      }
      public Builder ClearEntityID() {
        PrepareBuilder();
        result.hasEntityID = false;
        result.entityID_ = 0UL;
        return this;
      }
    }
    static NetMessageLevelUp() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOmegaPointGain : pb::GeneratedMessage<NetMessageOmegaPointGain, NetMessageOmegaPointGain.Builder> {
    private NetMessageOmegaPointGain() { }
    private static readonly NetMessageOmegaPointGain defaultInstance = new NetMessageOmegaPointGain().MakeReadOnly();
    private static readonly string[] _netMessageOmegaPointGainFieldNames = new string[] { "avatarId", "numPointsGained" };
    private static readonly uint[] _netMessageOmegaPointGainFieldTags = new uint[] { 16, 8 };
    public static NetMessageOmegaPointGain DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOmegaPointGain DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOmegaPointGain ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOmegaPointGain__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOmegaPointGain, NetMessageOmegaPointGain.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOmegaPointGain__FieldAccessorTable; }
    }
    
    public const int NumPointsGainedFieldNumber = 1;
    private bool hasNumPointsGained;
    private uint numPointsGained_;
    public bool HasNumPointsGained {
      get { return hasNumPointsGained; }
    }
    public uint NumPointsGained {
      get { return numPointsGained_; }
    }
    
    public const int AvatarIdFieldNumber = 2;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNumPointsGained) return false;
        if (!hasAvatarId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOmegaPointGainFieldNames;
      if (hasNumPointsGained) {
        output.WriteUInt32(1, field_names[1], NumPointsGained);
      }
      if (hasAvatarId) {
        output.WriteUInt64(2, field_names[0], AvatarId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNumPointsGained) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, NumPointsGained);
      }
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AvatarId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOmegaPointGain ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOmegaPointGain ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOmegaPointGain MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOmegaPointGain prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOmegaPointGain, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOmegaPointGain cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOmegaPointGain result;
      
      private NetMessageOmegaPointGain PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOmegaPointGain original = result;
          result = new NetMessageOmegaPointGain();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOmegaPointGain MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOmegaPointGain.Descriptor; }
      }
      
      public override NetMessageOmegaPointGain DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOmegaPointGain.DefaultInstance; }
      }
      
      public override NetMessageOmegaPointGain BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOmegaPointGain) {
          return MergeFrom((NetMessageOmegaPointGain) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOmegaPointGain other) {
        if (other == global::Gazillion.NetMessageOmegaPointGain.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNumPointsGained) {
          NumPointsGained = other.NumPointsGained;
        }
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOmegaPointGainFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOmegaPointGainFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNumPointsGained = input.ReadUInt32(ref result.numPointsGained_);
              break;
            }
            case 16: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNumPointsGained {
        get { return result.hasNumPointsGained; }
      }
      public uint NumPointsGained {
        get { return result.NumPointsGained; }
        set { SetNumPointsGained(value); }
      }
      public Builder SetNumPointsGained(uint value) {
        PrepareBuilder();
        result.hasNumPointsGained = true;
        result.numPointsGained_ = value;
        return this;
      }
      public Builder ClearNumPointsGained() {
        PrepareBuilder();
        result.hasNumPointsGained = false;
        result.numPointsGained_ = 0;
        return this;
      }
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
    }
    static NetMessageOmegaPointGain() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorLevelUp : pb::GeneratedMessage<NetMessageVendorLevelUp, NetMessageVendorLevelUp.Builder> {
    private NetMessageVendorLevelUp() { }
    private static readonly NetMessageVendorLevelUp defaultInstance = new NetMessageVendorLevelUp().MakeReadOnly();
    private static readonly string[] _netMessageVendorLevelUpFieldNames = new string[] { "vendorID", "vendorTypeProtoId" };
    private static readonly uint[] _netMessageVendorLevelUpFieldTags = new uint[] { 16, 8 };
    public static NetMessageVendorLevelUp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorLevelUp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorLevelUp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorLevelUp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorLevelUp, NetMessageVendorLevelUp.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorLevelUp__FieldAccessorTable; }
    }
    
    public const int VendorTypeProtoIdFieldNumber = 1;
    private bool hasVendorTypeProtoId;
    private ulong vendorTypeProtoId_;
    public bool HasVendorTypeProtoId {
      get { return hasVendorTypeProtoId; }
    }
    public ulong VendorTypeProtoId {
      get { return vendorTypeProtoId_; }
    }
    
    public const int VendorIDFieldNumber = 2;
    private bool hasVendorID;
    private ulong vendorID_;
    public bool HasVendorID {
      get { return hasVendorID; }
    }
    public ulong VendorID {
      get { return vendorID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorTypeProtoId) return false;
        if (!hasVendorID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorLevelUpFieldNames;
      if (hasVendorTypeProtoId) {
        output.WriteUInt64(1, field_names[1], VendorTypeProtoId);
      }
      if (hasVendorID) {
        output.WriteUInt64(2, field_names[0], VendorID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorTypeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorTypeProtoId);
      }
      if (hasVendorID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, VendorID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorLevelUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorLevelUp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorLevelUp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorLevelUp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorLevelUp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorLevelUp result;
      
      private NetMessageVendorLevelUp PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorLevelUp original = result;
          result = new NetMessageVendorLevelUp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorLevelUp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorLevelUp.Descriptor; }
      }
      
      public override NetMessageVendorLevelUp DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorLevelUp.DefaultInstance; }
      }
      
      public override NetMessageVendorLevelUp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorLevelUp) {
          return MergeFrom((NetMessageVendorLevelUp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorLevelUp other) {
        if (other == global::Gazillion.NetMessageVendorLevelUp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorTypeProtoId) {
          VendorTypeProtoId = other.VendorTypeProtoId;
        }
        if (other.HasVendorID) {
          VendorID = other.VendorID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorLevelUpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorLevelUpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorTypeProtoId = input.ReadUInt64(ref result.vendorTypeProtoId_);
              break;
            }
            case 16: {
              result.hasVendorID = input.ReadUInt64(ref result.vendorID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorTypeProtoId {
        get { return result.hasVendorTypeProtoId; }
      }
      public ulong VendorTypeProtoId {
        get { return result.VendorTypeProtoId; }
        set { SetVendorTypeProtoId(value); }
      }
      public Builder SetVendorTypeProtoId(ulong value) {
        PrepareBuilder();
        result.hasVendorTypeProtoId = true;
        result.vendorTypeProtoId_ = value;
        return this;
      }
      public Builder ClearVendorTypeProtoId() {
        PrepareBuilder();
        result.hasVendorTypeProtoId = false;
        result.vendorTypeProtoId_ = 0UL;
        return this;
      }
      
      public bool HasVendorID {
        get { return result.hasVendorID; }
      }
      public ulong VendorID {
        get { return result.VendorID; }
        set { SetVendorID(value); }
      }
      public Builder SetVendorID(ulong value) {
        PrepareBuilder();
        result.hasVendorID = true;
        result.vendorID_ = value;
        return this;
      }
      public Builder ClearVendorID() {
        PrepareBuilder();
        result.hasVendorID = false;
        result.vendorID_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorLevelUp() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVendorRefresh : pb::GeneratedMessage<NetMessageVendorRefresh, NetMessageVendorRefresh.Builder> {
    private NetMessageVendorRefresh() { }
    private static readonly NetMessageVendorRefresh defaultInstance = new NetMessageVendorRefresh().MakeReadOnly();
    private static readonly string[] _netMessageVendorRefreshFieldNames = new string[] { "vendorTypeProtoId" };
    private static readonly uint[] _netMessageVendorRefreshFieldTags = new uint[] { 8 };
    public static NetMessageVendorRefresh DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVendorRefresh DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVendorRefresh ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorRefresh__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVendorRefresh, NetMessageVendorRefresh.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVendorRefresh__FieldAccessorTable; }
    }
    
    public const int VendorTypeProtoIdFieldNumber = 1;
    private bool hasVendorTypeProtoId;
    private ulong vendorTypeProtoId_;
    public bool HasVendorTypeProtoId {
      get { return hasVendorTypeProtoId; }
    }
    public ulong VendorTypeProtoId {
      get { return vendorTypeProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVendorTypeProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVendorRefreshFieldNames;
      if (hasVendorTypeProtoId) {
        output.WriteUInt64(1, field_names[0], VendorTypeProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVendorTypeProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, VendorTypeProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVendorRefresh ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVendorRefresh MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVendorRefresh prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVendorRefresh, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVendorRefresh cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVendorRefresh result;
      
      private NetMessageVendorRefresh PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVendorRefresh original = result;
          result = new NetMessageVendorRefresh();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVendorRefresh MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVendorRefresh.Descriptor; }
      }
      
      public override NetMessageVendorRefresh DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVendorRefresh.DefaultInstance; }
      }
      
      public override NetMessageVendorRefresh BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVendorRefresh) {
          return MergeFrom((NetMessageVendorRefresh) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVendorRefresh other) {
        if (other == global::Gazillion.NetMessageVendorRefresh.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVendorTypeProtoId) {
          VendorTypeProtoId = other.VendorTypeProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVendorRefreshFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVendorRefreshFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVendorTypeProtoId = input.ReadUInt64(ref result.vendorTypeProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVendorTypeProtoId {
        get { return result.hasVendorTypeProtoId; }
      }
      public ulong VendorTypeProtoId {
        get { return result.VendorTypeProtoId; }
        set { SetVendorTypeProtoId(value); }
      }
      public Builder SetVendorTypeProtoId(ulong value) {
        PrepareBuilder();
        result.hasVendorTypeProtoId = true;
        result.vendorTypeProtoId_ = value;
        return this;
      }
      public Builder ClearVendorTypeProtoId() {
        PrepareBuilder();
        result.hasVendorTypeProtoId = false;
        result.vendorTypeProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageVendorRefresh() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCraftingSuccess : pb::GeneratedMessage<NetMessageCraftingSuccess, NetMessageCraftingSuccess.Builder> {
    private NetMessageCraftingSuccess() { }
    private static readonly NetMessageCraftingSuccess defaultInstance = new NetMessageCraftingSuccess().MakeReadOnly();
    private static readonly string[] _netMessageCraftingSuccessFieldNames = new string[] {  };
    private static readonly uint[] _netMessageCraftingSuccessFieldTags = new uint[] {  };
    public static NetMessageCraftingSuccess DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCraftingSuccess DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCraftingSuccess ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingSuccess__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCraftingSuccess, NetMessageCraftingSuccess.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingSuccess__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCraftingSuccessFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCraftingSuccess ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingSuccess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCraftingSuccess MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCraftingSuccess prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCraftingSuccess, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCraftingSuccess cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCraftingSuccess result;
      
      private NetMessageCraftingSuccess PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCraftingSuccess original = result;
          result = new NetMessageCraftingSuccess();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCraftingSuccess MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCraftingSuccess.Descriptor; }
      }
      
      public override NetMessageCraftingSuccess DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCraftingSuccess.DefaultInstance; }
      }
      
      public override NetMessageCraftingSuccess BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCraftingSuccess) {
          return MergeFrom((NetMessageCraftingSuccess) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCraftingSuccess other) {
        if (other == global::Gazillion.NetMessageCraftingSuccess.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCraftingSuccessFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCraftingSuccessFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageCraftingSuccess() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCraftingFailure : pb::GeneratedMessage<NetMessageCraftingFailure, NetMessageCraftingFailure.Builder> {
    private NetMessageCraftingFailure() { }
    private static readonly NetMessageCraftingFailure defaultInstance = new NetMessageCraftingFailure().MakeReadOnly();
    private static readonly string[] _netMessageCraftingFailureFieldNames = new string[] { "craftingResult" };
    private static readonly uint[] _netMessageCraftingFailureFieldTags = new uint[] { 8 };
    public static NetMessageCraftingFailure DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCraftingFailure DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCraftingFailure ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFailure__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCraftingFailure, NetMessageCraftingFailure.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCraftingFailure__FieldAccessorTable; }
    }
    
    public const int CraftingResultFieldNumber = 1;
    private bool hasCraftingResult;
    private uint craftingResult_;
    public bool HasCraftingResult {
      get { return hasCraftingResult; }
    }
    public uint CraftingResult {
      get { return craftingResult_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCraftingResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCraftingFailureFieldNames;
      if (hasCraftingResult) {
        output.WriteUInt32(1, field_names[0], CraftingResult);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCraftingResult) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CraftingResult);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCraftingFailure ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCraftingFailure ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCraftingFailure MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCraftingFailure prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCraftingFailure, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCraftingFailure cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCraftingFailure result;
      
      private NetMessageCraftingFailure PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCraftingFailure original = result;
          result = new NetMessageCraftingFailure();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCraftingFailure MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCraftingFailure.Descriptor; }
      }
      
      public override NetMessageCraftingFailure DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCraftingFailure.DefaultInstance; }
      }
      
      public override NetMessageCraftingFailure BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCraftingFailure) {
          return MergeFrom((NetMessageCraftingFailure) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCraftingFailure other) {
        if (other == global::Gazillion.NetMessageCraftingFailure.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCraftingResult) {
          CraftingResult = other.CraftingResult;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCraftingFailureFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCraftingFailureFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCraftingResult = input.ReadUInt32(ref result.craftingResult_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCraftingResult {
        get { return result.hasCraftingResult; }
      }
      public uint CraftingResult {
        get { return result.CraftingResult; }
        set { SetCraftingResult(value); }
      }
      public Builder SetCraftingResult(uint value) {
        PrepareBuilder();
        result.hasCraftingResult = true;
        result.craftingResult_ = value;
        return this;
      }
      public Builder ClearCraftingResult() {
        PrepareBuilder();
        result.hasCraftingResult = false;
        result.craftingResult_ = 0;
        return this;
      }
    }
    static NetMessageCraftingFailure() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayPowerVisuals : pb::GeneratedMessage<NetMessagePlayPowerVisuals, NetMessagePlayPowerVisuals.Builder> {
    private NetMessagePlayPowerVisuals() { }
    private static readonly NetMessagePlayPowerVisuals defaultInstance = new NetMessagePlayPowerVisuals().MakeReadOnly();
    private static readonly string[] _netMessagePlayPowerVisualsFieldNames = new string[] { "entityId", "powerAssetRef" };
    private static readonly uint[] _netMessagePlayPowerVisualsFieldTags = new uint[] { 8, 16 };
    public static NetMessagePlayPowerVisuals DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayPowerVisuals DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayPowerVisuals ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayPowerVisuals__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayPowerVisuals, NetMessagePlayPowerVisuals.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayPowerVisuals__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerAssetRefFieldNumber = 2;
    private bool hasPowerAssetRef;
    private ulong powerAssetRef_;
    public bool HasPowerAssetRef {
      get { return hasPowerAssetRef; }
    }
    public ulong PowerAssetRef {
      get { return powerAssetRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerAssetRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayPowerVisualsFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPowerAssetRef) {
        output.WriteUInt64(2, field_names[1], PowerAssetRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerAssetRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerAssetRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayPowerVisuals ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayPowerVisuals ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayPowerVisuals MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayPowerVisuals prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayPowerVisuals, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayPowerVisuals cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayPowerVisuals result;
      
      private NetMessagePlayPowerVisuals PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayPowerVisuals original = result;
          result = new NetMessagePlayPowerVisuals();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayPowerVisuals MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayPowerVisuals.Descriptor; }
      }
      
      public override NetMessagePlayPowerVisuals DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayPowerVisuals.DefaultInstance; }
      }
      
      public override NetMessagePlayPowerVisuals BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayPowerVisuals) {
          return MergeFrom((NetMessagePlayPowerVisuals) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayPowerVisuals other) {
        if (other == global::Gazillion.NetMessagePlayPowerVisuals.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerAssetRef) {
          PowerAssetRef = other.PowerAssetRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayPowerVisualsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayPowerVisualsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerAssetRef = input.ReadUInt64(ref result.powerAssetRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerAssetRef {
        get { return result.hasPowerAssetRef; }
      }
      public ulong PowerAssetRef {
        get { return result.PowerAssetRef; }
        set { SetPowerAssetRef(value); }
      }
      public Builder SetPowerAssetRef(ulong value) {
        PrepareBuilder();
        result.hasPowerAssetRef = true;
        result.powerAssetRef_ = value;
        return this;
      }
      public Builder ClearPowerAssetRef() {
        PrepareBuilder();
        result.hasPowerAssetRef = false;
        result.powerAssetRef_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayPowerVisuals() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageWaypointUnlocked : pb::GeneratedMessage<NetMessageWaypointUnlocked, NetMessageWaypointUnlocked.Builder> {
    private NetMessageWaypointUnlocked() { }
    private static readonly NetMessageWaypointUnlocked defaultInstance = new NetMessageWaypointUnlocked().MakeReadOnly();
    private static readonly string[] _netMessageWaypointUnlockedFieldNames = new string[] { "waypointPrototypeID" };
    private static readonly uint[] _netMessageWaypointUnlockedFieldTags = new uint[] { 8 };
    public static NetMessageWaypointUnlocked DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageWaypointUnlocked DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageWaypointUnlocked ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageWaypointUnlocked__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageWaypointUnlocked, NetMessageWaypointUnlocked.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageWaypointUnlocked__FieldAccessorTable; }
    }
    
    public const int WaypointPrototypeIDFieldNumber = 1;
    private bool hasWaypointPrototypeID;
    private ulong waypointPrototypeID_;
    public bool HasWaypointPrototypeID {
      get { return hasWaypointPrototypeID; }
    }
    public ulong WaypointPrototypeID {
      get { return waypointPrototypeID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWaypointPrototypeID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageWaypointUnlockedFieldNames;
      if (hasWaypointPrototypeID) {
        output.WriteUInt64(1, field_names[0], WaypointPrototypeID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWaypointPrototypeID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, WaypointPrototypeID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageWaypointUnlocked ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageWaypointUnlocked MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageWaypointUnlocked prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageWaypointUnlocked, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageWaypointUnlocked cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageWaypointUnlocked result;
      
      private NetMessageWaypointUnlocked PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageWaypointUnlocked original = result;
          result = new NetMessageWaypointUnlocked();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageWaypointUnlocked MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageWaypointUnlocked.Descriptor; }
      }
      
      public override NetMessageWaypointUnlocked DefaultInstanceForType {
        get { return global::Gazillion.NetMessageWaypointUnlocked.DefaultInstance; }
      }
      
      public override NetMessageWaypointUnlocked BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageWaypointUnlocked) {
          return MergeFrom((NetMessageWaypointUnlocked) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageWaypointUnlocked other) {
        if (other == global::Gazillion.NetMessageWaypointUnlocked.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWaypointPrototypeID) {
          WaypointPrototypeID = other.WaypointPrototypeID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageWaypointUnlockedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageWaypointUnlockedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWaypointPrototypeID = input.ReadUInt64(ref result.waypointPrototypeID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWaypointPrototypeID {
        get { return result.hasWaypointPrototypeID; }
      }
      public ulong WaypointPrototypeID {
        get { return result.WaypointPrototypeID; }
        set { SetWaypointPrototypeID(value); }
      }
      public Builder SetWaypointPrototypeID(ulong value) {
        PrepareBuilder();
        result.hasWaypointPrototypeID = true;
        result.waypointPrototypeID_ = value;
        return this;
      }
      public Builder ClearWaypointPrototypeID() {
        PrepareBuilder();
        result.hasWaypointPrototypeID = false;
        result.waypointPrototypeID_ = 0UL;
        return this;
      }
    }
    static NetMessageWaypointUnlocked() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReplicationArchive : pb::GeneratedMessage<NetMessageReplicationArchive, NetMessageReplicationArchive.Builder> {
    private NetMessageReplicationArchive() { }
    private static readonly NetMessageReplicationArchive defaultInstance = new NetMessageReplicationArchive().MakeReadOnly();
    private static readonly string[] _netMessageReplicationArchiveFieldNames = new string[] { "archiveData", "archiveDataType", "debugstring", "replicationId" };
    private static readonly uint[] _netMessageReplicationArchiveFieldTags = new uint[] { 26, 16, 34, 8 };
    public static NetMessageReplicationArchive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReplicationArchive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReplicationArchive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReplicationArchive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReplicationArchive, NetMessageReplicationArchive.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReplicationArchive__FieldAccessorTable; }
    }
    
    public const int ReplicationIdFieldNumber = 1;
    private bool hasReplicationId;
    private ulong replicationId_;
    public bool HasReplicationId {
      get { return hasReplicationId; }
    }
    public ulong ReplicationId {
      get { return replicationId_; }
    }
    
    public const int ArchiveDataTypeFieldNumber = 2;
    private bool hasArchiveDataType;
    private uint archiveDataType_;
    public bool HasArchiveDataType {
      get { return hasArchiveDataType; }
    }
    public uint ArchiveDataType {
      get { return archiveDataType_; }
    }
    
    public const int ArchiveDataFieldNumber = 3;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public const int DebugstringFieldNumber = 4;
    private bool hasDebugstring;
    private string debugstring_ = "";
    public bool HasDebugstring {
      get { return hasDebugstring; }
    }
    public string Debugstring {
      get { return debugstring_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationId) return false;
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReplicationArchiveFieldNames;
      if (hasReplicationId) {
        output.WriteUInt64(1, field_names[3], ReplicationId);
      }
      if (hasArchiveDataType) {
        output.WriteUInt32(2, field_names[1], ArchiveDataType);
      }
      if (hasArchiveData) {
        output.WriteBytes(3, field_names[0], ArchiveData);
      }
      if (hasDebugstring) {
        output.WriteString(4, field_names[2], Debugstring);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReplicationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ReplicationId);
      }
      if (hasArchiveDataType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ArchiveDataType);
      }
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, ArchiveData);
      }
      if (hasDebugstring) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Debugstring);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReplicationArchive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReplicationArchive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReplicationArchive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReplicationArchive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReplicationArchive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReplicationArchive result;
      
      private NetMessageReplicationArchive PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReplicationArchive original = result;
          result = new NetMessageReplicationArchive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReplicationArchive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReplicationArchive.Descriptor; }
      }
      
      public override NetMessageReplicationArchive DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReplicationArchive.DefaultInstance; }
      }
      
      public override NetMessageReplicationArchive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReplicationArchive) {
          return MergeFrom((NetMessageReplicationArchive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReplicationArchive other) {
        if (other == global::Gazillion.NetMessageReplicationArchive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReplicationId) {
          ReplicationId = other.ReplicationId;
        }
        if (other.HasArchiveDataType) {
          ArchiveDataType = other.ArchiveDataType;
        }
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        if (other.HasDebugstring) {
          Debugstring = other.Debugstring;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReplicationArchiveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReplicationArchiveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReplicationId = input.ReadUInt64(ref result.replicationId_);
              break;
            }
            case 16: {
              result.hasArchiveDataType = input.ReadUInt32(ref result.archiveDataType_);
              break;
            }
            case 26: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
            case 34: {
              result.hasDebugstring = input.ReadString(ref result.debugstring_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReplicationId {
        get { return result.hasReplicationId; }
      }
      public ulong ReplicationId {
        get { return result.ReplicationId; }
        set { SetReplicationId(value); }
      }
      public Builder SetReplicationId(ulong value) {
        PrepareBuilder();
        result.hasReplicationId = true;
        result.replicationId_ = value;
        return this;
      }
      public Builder ClearReplicationId() {
        PrepareBuilder();
        result.hasReplicationId = false;
        result.replicationId_ = 0UL;
        return this;
      }
      
      public bool HasArchiveDataType {
        get { return result.hasArchiveDataType; }
      }
      public uint ArchiveDataType {
        get { return result.ArchiveDataType; }
        set { SetArchiveDataType(value); }
      }
      public Builder SetArchiveDataType(uint value) {
        PrepareBuilder();
        result.hasArchiveDataType = true;
        result.archiveDataType_ = value;
        return this;
      }
      public Builder ClearArchiveDataType() {
        PrepareBuilder();
        result.hasArchiveDataType = false;
        result.archiveDataType_ = 0;
        return this;
      }
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasDebugstring {
        get { return result.hasDebugstring; }
      }
      public string Debugstring {
        get { return result.Debugstring; }
        set { SetDebugstring(value); }
      }
      public Builder SetDebugstring(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugstring = true;
        result.debugstring_ = value;
        return this;
      }
      public Builder ClearDebugstring() {
        PrepareBuilder();
        result.hasDebugstring = false;
        result.debugstring_ = "";
        return this;
      }
    }
    static NetMessageReplicationArchive() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetProperty : pb::GeneratedMessage<NetMessageSetProperty, NetMessageSetProperty.Builder> {
    private NetMessageSetProperty() { }
    private static readonly NetMessageSetProperty defaultInstance = new NetMessageSetProperty().MakeReadOnly();
    private static readonly string[] _netMessageSetPropertyFieldNames = new string[] { "propertyId", "replicationId", "valueBits" };
    private static readonly uint[] _netMessageSetPropertyFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessageSetProperty DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetProperty DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetProperty ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetProperty__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetProperty, NetMessageSetProperty.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetProperty__FieldAccessorTable; }
    }
    
    public const int ReplicationIdFieldNumber = 1;
    private bool hasReplicationId;
    private ulong replicationId_;
    public bool HasReplicationId {
      get { return hasReplicationId; }
    }
    public ulong ReplicationId {
      get { return replicationId_; }
    }
    
    public const int PropertyIdFieldNumber = 2;
    private bool hasPropertyId;
    private ulong propertyId_;
    public bool HasPropertyId {
      get { return hasPropertyId; }
    }
    public ulong PropertyId {
      get { return propertyId_; }
    }
    
    public const int ValueBitsFieldNumber = 3;
    private bool hasValueBits;
    private ulong valueBits_;
    public bool HasValueBits {
      get { return hasValueBits; }
    }
    public ulong ValueBits {
      get { return valueBits_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationId) return false;
        if (!hasPropertyId) return false;
        if (!hasValueBits) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetPropertyFieldNames;
      if (hasReplicationId) {
        output.WriteUInt64(1, field_names[1], ReplicationId);
      }
      if (hasPropertyId) {
        output.WriteUInt64(2, field_names[0], PropertyId);
      }
      if (hasValueBits) {
        output.WriteUInt64(3, field_names[2], ValueBits);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReplicationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ReplicationId);
      }
      if (hasPropertyId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PropertyId);
      }
      if (hasValueBits) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ValueBits);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetProperty ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetProperty ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetProperty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetProperty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetProperty MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetProperty prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetProperty, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetProperty cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetProperty result;
      
      private NetMessageSetProperty PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetProperty original = result;
          result = new NetMessageSetProperty();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetProperty MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetProperty.Descriptor; }
      }
      
      public override NetMessageSetProperty DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetProperty.DefaultInstance; }
      }
      
      public override NetMessageSetProperty BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetProperty) {
          return MergeFrom((NetMessageSetProperty) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetProperty other) {
        if (other == global::Gazillion.NetMessageSetProperty.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReplicationId) {
          ReplicationId = other.ReplicationId;
        }
        if (other.HasPropertyId) {
          PropertyId = other.PropertyId;
        }
        if (other.HasValueBits) {
          ValueBits = other.ValueBits;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetPropertyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetPropertyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReplicationId = input.ReadUInt64(ref result.replicationId_);
              break;
            }
            case 16: {
              result.hasPropertyId = input.ReadUInt64(ref result.propertyId_);
              break;
            }
            case 24: {
              result.hasValueBits = input.ReadUInt64(ref result.valueBits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReplicationId {
        get { return result.hasReplicationId; }
      }
      public ulong ReplicationId {
        get { return result.ReplicationId; }
        set { SetReplicationId(value); }
      }
      public Builder SetReplicationId(ulong value) {
        PrepareBuilder();
        result.hasReplicationId = true;
        result.replicationId_ = value;
        return this;
      }
      public Builder ClearReplicationId() {
        PrepareBuilder();
        result.hasReplicationId = false;
        result.replicationId_ = 0UL;
        return this;
      }
      
      public bool HasPropertyId {
        get { return result.hasPropertyId; }
      }
      public ulong PropertyId {
        get { return result.PropertyId; }
        set { SetPropertyId(value); }
      }
      public Builder SetPropertyId(ulong value) {
        PrepareBuilder();
        result.hasPropertyId = true;
        result.propertyId_ = value;
        return this;
      }
      public Builder ClearPropertyId() {
        PrepareBuilder();
        result.hasPropertyId = false;
        result.propertyId_ = 0UL;
        return this;
      }
      
      public bool HasValueBits {
        get { return result.hasValueBits; }
      }
      public ulong ValueBits {
        get { return result.ValueBits; }
        set { SetValueBits(value); }
      }
      public Builder SetValueBits(ulong value) {
        PrepareBuilder();
        result.hasValueBits = true;
        result.valueBits_ = value;
        return this;
      }
      public Builder ClearValueBits() {
        PrepareBuilder();
        result.hasValueBits = false;
        result.valueBits_ = 0UL;
        return this;
      }
    }
    static NetMessageSetProperty() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoveProperty : pb::GeneratedMessage<NetMessageRemoveProperty, NetMessageRemoveProperty.Builder> {
    private NetMessageRemoveProperty() { }
    private static readonly NetMessageRemoveProperty defaultInstance = new NetMessageRemoveProperty().MakeReadOnly();
    private static readonly string[] _netMessageRemovePropertyFieldNames = new string[] { "propertyId", "replicationId" };
    private static readonly uint[] _netMessageRemovePropertyFieldTags = new uint[] { 16, 8 };
    public static NetMessageRemoveProperty DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoveProperty DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoveProperty ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveProperty__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoveProperty, NetMessageRemoveProperty.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveProperty__FieldAccessorTable; }
    }
    
    public const int ReplicationIdFieldNumber = 1;
    private bool hasReplicationId;
    private ulong replicationId_;
    public bool HasReplicationId {
      get { return hasReplicationId; }
    }
    public ulong ReplicationId {
      get { return replicationId_; }
    }
    
    public const int PropertyIdFieldNumber = 2;
    private bool hasPropertyId;
    private ulong propertyId_;
    public bool HasPropertyId {
      get { return hasPropertyId; }
    }
    public ulong PropertyId {
      get { return propertyId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReplicationId) return false;
        if (!hasPropertyId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemovePropertyFieldNames;
      if (hasReplicationId) {
        output.WriteUInt64(1, field_names[1], ReplicationId);
      }
      if (hasPropertyId) {
        output.WriteUInt64(2, field_names[0], PropertyId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReplicationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ReplicationId);
      }
      if (hasPropertyId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PropertyId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoveProperty ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveProperty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoveProperty MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoveProperty prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoveProperty, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoveProperty cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoveProperty result;
      
      private NetMessageRemoveProperty PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoveProperty original = result;
          result = new NetMessageRemoveProperty();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoveProperty MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoveProperty.Descriptor; }
      }
      
      public override NetMessageRemoveProperty DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoveProperty.DefaultInstance; }
      }
      
      public override NetMessageRemoveProperty BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoveProperty) {
          return MergeFrom((NetMessageRemoveProperty) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoveProperty other) {
        if (other == global::Gazillion.NetMessageRemoveProperty.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReplicationId) {
          ReplicationId = other.ReplicationId;
        }
        if (other.HasPropertyId) {
          PropertyId = other.PropertyId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemovePropertyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemovePropertyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasReplicationId = input.ReadUInt64(ref result.replicationId_);
              break;
            }
            case 16: {
              result.hasPropertyId = input.ReadUInt64(ref result.propertyId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReplicationId {
        get { return result.hasReplicationId; }
      }
      public ulong ReplicationId {
        get { return result.ReplicationId; }
        set { SetReplicationId(value); }
      }
      public Builder SetReplicationId(ulong value) {
        PrepareBuilder();
        result.hasReplicationId = true;
        result.replicationId_ = value;
        return this;
      }
      public Builder ClearReplicationId() {
        PrepareBuilder();
        result.hasReplicationId = false;
        result.replicationId_ = 0UL;
        return this;
      }
      
      public bool HasPropertyId {
        get { return result.hasPropertyId; }
      }
      public ulong PropertyId {
        get { return result.PropertyId; }
        set { SetPropertyId(value); }
      }
      public Builder SetPropertyId(ulong value) {
        PrepareBuilder();
        result.hasPropertyId = true;
        result.propertyId_ = value;
        return this;
      }
      public Builder ClearPropertyId() {
        PrepareBuilder();
        result.hasPropertyId = false;
        result.propertyId_ = 0UL;
        return this;
      }
    }
    static NetMessageRemoveProperty() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScoreScoreUpdateEntry : pb::GeneratedMessage<NetMessagePvPScoreScoreUpdateEntry, NetMessagePvPScoreScoreUpdateEntry.Builder> {
    private NetMessagePvPScoreScoreUpdateEntry() { }
    private static readonly NetMessagePvPScoreScoreUpdateEntry defaultInstance = new NetMessagePvPScoreScoreUpdateEntry().MakeReadOnly();
    private static readonly string[] _netMessagePvPScoreScoreUpdateEntryFieldNames = new string[] { "category", "fvalue", "ivalue" };
    private static readonly uint[] _netMessagePvPScoreScoreUpdateEntryFieldTags = new uint[] { 8, 29, 16 };
    public static NetMessagePvPScoreScoreUpdateEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScoreScoreUpdateEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScoreScoreUpdateEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScoreScoreUpdateEntry, NetMessagePvPScoreScoreUpdateEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScoreScoreUpdateEntry__FieldAccessorTable; }
    }
    
    public const int CategoryFieldNumber = 1;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int IvalueFieldNumber = 2;
    private bool hasIvalue;
    private int ivalue_;
    public bool HasIvalue {
      get { return hasIvalue; }
    }
    public int Ivalue {
      get { return ivalue_; }
    }
    
    public const int FvalueFieldNumber = 3;
    private bool hasFvalue;
    private float fvalue_;
    public bool HasFvalue {
      get { return hasFvalue; }
    }
    public float Fvalue {
      get { return fvalue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCategory) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScoreScoreUpdateEntryFieldNames;
      if (hasCategory) {
        output.WriteUInt32(1, field_names[0], Category);
      }
      if (hasIvalue) {
        output.WriteInt32(2, field_names[2], Ivalue);
      }
      if (hasFvalue) {
        output.WriteFloat(3, field_names[1], Fvalue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCategory) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Category);
      }
      if (hasIvalue) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Ivalue);
      }
      if (hasFvalue) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Fvalue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScoreScoreUpdateEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScoreScoreUpdateEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScoreScoreUpdateEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScoreScoreUpdateEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScoreScoreUpdateEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScoreScoreUpdateEntry result;
      
      private NetMessagePvPScoreScoreUpdateEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScoreScoreUpdateEntry original = result;
          result = new NetMessagePvPScoreScoreUpdateEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScoreScoreUpdateEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Descriptor; }
      }
      
      public override NetMessagePvPScoreScoreUpdateEntry DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance; }
      }
      
      public override NetMessagePvPScoreScoreUpdateEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScoreScoreUpdateEntry) {
          return MergeFrom((NetMessagePvPScoreScoreUpdateEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScoreScoreUpdateEntry other) {
        if (other == global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasIvalue) {
          Ivalue = other.Ivalue;
        }
        if (other.HasFvalue) {
          Fvalue = other.Fvalue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScoreScoreUpdateEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScoreScoreUpdateEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 16: {
              result.hasIvalue = input.ReadInt32(ref result.ivalue_);
              break;
            }
            case 29: {
              result.hasFvalue = input.ReadFloat(ref result.fvalue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasIvalue {
        get { return result.hasIvalue; }
      }
      public int Ivalue {
        get { return result.Ivalue; }
        set { SetIvalue(value); }
      }
      public Builder SetIvalue(int value) {
        PrepareBuilder();
        result.hasIvalue = true;
        result.ivalue_ = value;
        return this;
      }
      public Builder ClearIvalue() {
        PrepareBuilder();
        result.hasIvalue = false;
        result.ivalue_ = 0;
        return this;
      }
      
      public bool HasFvalue {
        get { return result.hasFvalue; }
      }
      public float Fvalue {
        get { return result.Fvalue; }
        set { SetFvalue(value); }
      }
      public Builder SetFvalue(float value) {
        PrepareBuilder();
        result.hasFvalue = true;
        result.fvalue_ = value;
        return this;
      }
      public Builder ClearFvalue() {
        PrepareBuilder();
        result.hasFvalue = false;
        result.fvalue_ = 0F;
        return this;
      }
    }
    static NetMessagePvPScoreScoreUpdateEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerNewId : pb::GeneratedMessage<NetMessagePvPScorePlayerNewId, NetMessagePvPScorePlayerNewId.Builder> {
    private NetMessagePvPScorePlayerNewId() { }
    private static readonly NetMessagePvPScorePlayerNewId defaultInstance = new NetMessagePvPScorePlayerNewId().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerNewIdFieldNames = new string[] { "avatarProtoId", "playerDbGuid", "playerName", "pvpEntityId", "teamProtoId" };
    private static readonly uint[] _netMessagePvPScorePlayerNewIdFieldTags = new uint[] { 40, 16, 26, 8, 32 };
    public static NetMessagePvPScorePlayerNewId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerNewId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerNewId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerNewId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerNewId, NetMessagePvPScorePlayerNewId.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerNewId__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int PlayerNameFieldNumber = 3;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int TeamProtoIdFieldNumber = 4;
    private bool hasTeamProtoId;
    private ulong teamProtoId_;
    public bool HasTeamProtoId {
      get { return hasTeamProtoId; }
    }
    public ulong TeamProtoId {
      get { return teamProtoId_; }
    }
    
    public const int AvatarProtoIdFieldNumber = 5;
    private bool hasAvatarProtoId;
    private ulong avatarProtoId_;
    public bool HasAvatarProtoId {
      get { return hasAvatarProtoId; }
    }
    public ulong AvatarProtoId {
      get { return avatarProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        if (!hasPlayerName) return false;
        if (!hasTeamProtoId) return false;
        if (!hasAvatarProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerNewIdFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[3], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[1], PlayerDbGuid);
      }
      if (hasPlayerName) {
        output.WriteString(3, field_names[2], PlayerName);
      }
      if (hasTeamProtoId) {
        output.WriteUInt64(4, field_names[4], TeamProtoId);
      }
      if (hasAvatarProtoId) {
        output.WriteUInt64(5, field_names[0], AvatarProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      if (hasTeamProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, TeamProtoId);
      }
      if (hasAvatarProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, AvatarProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerNewId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerNewId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerNewId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerNewId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerNewId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerNewId result;
      
      private NetMessagePvPScorePlayerNewId PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerNewId original = result;
          result = new NetMessagePvPScorePlayerNewId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerNewId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerNewId.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerNewId DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerNewId.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerNewId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerNewId) {
          return MergeFrom((NetMessagePvPScorePlayerNewId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerNewId other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerNewId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasTeamProtoId) {
          TeamProtoId = other.TeamProtoId;
        }
        if (other.HasAvatarProtoId) {
          AvatarProtoId = other.AvatarProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerNewIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerNewIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 26: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 32: {
              result.hasTeamProtoId = input.ReadUInt64(ref result.teamProtoId_);
              break;
            }
            case 40: {
              result.hasAvatarProtoId = input.ReadUInt64(ref result.avatarProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasTeamProtoId {
        get { return result.hasTeamProtoId; }
      }
      public ulong TeamProtoId {
        get { return result.TeamProtoId; }
        set { SetTeamProtoId(value); }
      }
      public Builder SetTeamProtoId(ulong value) {
        PrepareBuilder();
        result.hasTeamProtoId = true;
        result.teamProtoId_ = value;
        return this;
      }
      public Builder ClearTeamProtoId() {
        PrepareBuilder();
        result.hasTeamProtoId = false;
        result.teamProtoId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarProtoId {
        get { return result.hasAvatarProtoId; }
      }
      public ulong AvatarProtoId {
        get { return result.AvatarProtoId; }
        set { SetAvatarProtoId(value); }
      }
      public Builder SetAvatarProtoId(ulong value) {
        PrepareBuilder();
        result.hasAvatarProtoId = true;
        result.avatarProtoId_ = value;
        return this;
      }
      public Builder ClearAvatarProtoId() {
        PrepareBuilder();
        result.hasAvatarProtoId = false;
        result.avatarProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvPScorePlayerNewId() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerTeamChange : pb::GeneratedMessage<NetMessagePvPScorePlayerTeamChange, NetMessagePvPScorePlayerTeamChange.Builder> {
    private NetMessagePvPScorePlayerTeamChange() { }
    private static readonly NetMessagePvPScorePlayerTeamChange defaultInstance = new NetMessagePvPScorePlayerTeamChange().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerTeamChangeFieldNames = new string[] { "playerDbGuid", "pvpEntityId", "teamProtoId" };
    private static readonly uint[] _netMessagePvPScorePlayerTeamChangeFieldTags = new uint[] { 16, 8, 24 };
    public static NetMessagePvPScorePlayerTeamChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerTeamChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerTeamChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerTeamChange, NetMessagePvPScorePlayerTeamChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerTeamChange__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int TeamProtoIdFieldNumber = 3;
    private bool hasTeamProtoId;
    private ulong teamProtoId_;
    public bool HasTeamProtoId {
      get { return hasTeamProtoId; }
    }
    public ulong TeamProtoId {
      get { return teamProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        if (!hasTeamProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerTeamChangeFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[1], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[0], PlayerDbGuid);
      }
      if (hasTeamProtoId) {
        output.WriteUInt64(3, field_names[2], TeamProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      if (hasTeamProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, TeamProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerTeamChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerTeamChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerTeamChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerTeamChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerTeamChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerTeamChange result;
      
      private NetMessagePvPScorePlayerTeamChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerTeamChange original = result;
          result = new NetMessagePvPScorePlayerTeamChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerTeamChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerTeamChange.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerTeamChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerTeamChange.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerTeamChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerTeamChange) {
          return MergeFrom((NetMessagePvPScorePlayerTeamChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerTeamChange other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerTeamChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.HasTeamProtoId) {
          TeamProtoId = other.TeamProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerTeamChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerTeamChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 24: {
              result.hasTeamProtoId = input.ReadUInt64(ref result.teamProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public bool HasTeamProtoId {
        get { return result.hasTeamProtoId; }
      }
      public ulong TeamProtoId {
        get { return result.TeamProtoId; }
        set { SetTeamProtoId(value); }
      }
      public Builder SetTeamProtoId(ulong value) {
        PrepareBuilder();
        result.hasTeamProtoId = true;
        result.teamProtoId_ = value;
        return this;
      }
      public Builder ClearTeamProtoId() {
        PrepareBuilder();
        result.hasTeamProtoId = false;
        result.teamProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvPScorePlayerTeamChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvPScorePlayerUpdate : pb::GeneratedMessage<NetMessagePvPScorePlayerUpdate, NetMessagePvPScorePlayerUpdate.Builder> {
    private NetMessagePvPScorePlayerUpdate() { }
    private static readonly NetMessagePvPScorePlayerUpdate defaultInstance = new NetMessagePvPScorePlayerUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvPScorePlayerUpdateFieldNames = new string[] { "playerDbGuid", "pvpEntityId", "updates" };
    private static readonly uint[] _netMessagePvPScorePlayerUpdateFieldTags = new uint[] { 16, 8, 26 };
    public static NetMessagePvPScorePlayerUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvPScorePlayerUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvPScorePlayerUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvPScorePlayerUpdate, NetMessagePvPScorePlayerUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvPScorePlayerUpdate__FieldAccessorTable; }
    }
    
    public const int PvpEntityIdFieldNumber = 1;
    private bool hasPvpEntityId;
    private ulong pvpEntityId_;
    public bool HasPvpEntityId {
      get { return hasPvpEntityId; }
    }
    public ulong PvpEntityId {
      get { return pvpEntityId_; }
    }
    
    public const int PlayerDbGuidFieldNumber = 2;
    private bool hasPlayerDbGuid;
    private ulong playerDbGuid_;
    public bool HasPlayerDbGuid {
      get { return hasPlayerDbGuid; }
    }
    public ulong PlayerDbGuid {
      get { return playerDbGuid_; }
    }
    
    public const int UpdatesFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> updates_ = new pbc::PopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry>();
    public scg::IList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> UpdatesList {
      get { return updates_; }
    }
    public int UpdatesCount {
      get { return updates_.Count; }
    }
    public global::Gazillion.NetMessagePvPScoreScoreUpdateEntry GetUpdates(int index) {
      return updates_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPvpEntityId) return false;
        if (!hasPlayerDbGuid) return false;
        foreach (global::Gazillion.NetMessagePvPScoreScoreUpdateEntry element in UpdatesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvPScorePlayerUpdateFieldNames;
      if (hasPvpEntityId) {
        output.WriteUInt64(1, field_names[1], PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        output.WriteUInt64(2, field_names[0], PlayerDbGuid);
      }
      if (updates_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], updates_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPvpEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PvpEntityId);
      }
      if (hasPlayerDbGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerDbGuid);
      }
      foreach (global::Gazillion.NetMessagePvPScoreScoreUpdateEntry element in UpdatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvPScorePlayerUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvPScorePlayerUpdate MakeReadOnly() {
      updates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvPScorePlayerUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvPScorePlayerUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvPScorePlayerUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvPScorePlayerUpdate result;
      
      private NetMessagePvPScorePlayerUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvPScorePlayerUpdate original = result;
          result = new NetMessagePvPScorePlayerUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvPScorePlayerUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerUpdate.Descriptor; }
      }
      
      public override NetMessagePvPScorePlayerUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvPScorePlayerUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvPScorePlayerUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvPScorePlayerUpdate) {
          return MergeFrom((NetMessagePvPScorePlayerUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvPScorePlayerUpdate other) {
        if (other == global::Gazillion.NetMessagePvPScorePlayerUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPvpEntityId) {
          PvpEntityId = other.PvpEntityId;
        }
        if (other.HasPlayerDbGuid) {
          PlayerDbGuid = other.PlayerDbGuid;
        }
        if (other.updates_.Count != 0) {
          result.updates_.Add(other.updates_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvPScorePlayerUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvPScorePlayerUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPvpEntityId = input.ReadUInt64(ref result.pvpEntityId_);
              break;
            }
            case 16: {
              result.hasPlayerDbGuid = input.ReadUInt64(ref result.playerDbGuid_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.updates_, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPvpEntityId {
        get { return result.hasPvpEntityId; }
      }
      public ulong PvpEntityId {
        get { return result.PvpEntityId; }
        set { SetPvpEntityId(value); }
      }
      public Builder SetPvpEntityId(ulong value) {
        PrepareBuilder();
        result.hasPvpEntityId = true;
        result.pvpEntityId_ = value;
        return this;
      }
      public Builder ClearPvpEntityId() {
        PrepareBuilder();
        result.hasPvpEntityId = false;
        result.pvpEntityId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerDbGuid {
        get { return result.hasPlayerDbGuid; }
      }
      public ulong PlayerDbGuid {
        get { return result.PlayerDbGuid; }
        set { SetPlayerDbGuid(value); }
      }
      public Builder SetPlayerDbGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerDbGuid = true;
        result.playerDbGuid_ = value;
        return this;
      }
      public Builder ClearPlayerDbGuid() {
        PrepareBuilder();
        result.hasPlayerDbGuid = false;
        result.playerDbGuid_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> UpdatesList {
        get { return PrepareBuilder().updates_; }
      }
      public int UpdatesCount {
        get { return result.UpdatesCount; }
      }
      public global::Gazillion.NetMessagePvPScoreScoreUpdateEntry GetUpdates(int index) {
        return result.GetUpdates(index);
      }
      public Builder SetUpdates(int index, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.updates_[index] = value;
        return this;
      }
      public Builder SetUpdates(int index, global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.updates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUpdates(global::Gazillion.NetMessagePvPScoreScoreUpdateEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.updates_.Add(value);
        return this;
      }
      public Builder AddUpdates(global::Gazillion.NetMessagePvPScoreScoreUpdateEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.updates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUpdates(scg::IEnumerable<global::Gazillion.NetMessagePvPScoreScoreUpdateEntry> values) {
        PrepareBuilder();
        result.updates_.Add(values);
        return this;
      }
      public Builder ClearUpdates() {
        PrepareBuilder();
        result.updates_.Clear();
        return this;
      }
    }
    static NetMessagePvPScorePlayerUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageTransitionUpdate : pb::GeneratedMessage<NetMessageTransitionUpdate, NetMessageTransitionUpdate.Builder> {
    private NetMessageTransitionUpdate() { }
    private static readonly NetMessageTransitionUpdate defaultInstance = new NetMessageTransitionUpdate().MakeReadOnly();
    private static readonly string[] _netMessageTransitionUpdateFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageTransitionUpdateFieldTags = new uint[] { 8 };
    public static NetMessageTransitionUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageTransitionUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageTransitionUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTransitionUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageTransitionUpdate, NetMessageTransitionUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageTransitionUpdate__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageTransitionUpdateFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageTransitionUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageTransitionUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageTransitionUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageTransitionUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageTransitionUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageTransitionUpdate result;
      
      private NetMessageTransitionUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageTransitionUpdate original = result;
          result = new NetMessageTransitionUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageTransitionUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageTransitionUpdate.Descriptor; }
      }
      
      public override NetMessageTransitionUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageTransitionUpdate.DefaultInstance; }
      }
      
      public override NetMessageTransitionUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageTransitionUpdate) {
          return MergeFrom((NetMessageTransitionUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageTransitionUpdate other) {
        if (other == global::Gazillion.NetMessageTransitionUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageTransitionUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageTransitionUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageTransitionUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAvatarNameChange : pb::GeneratedMessage<NetMessageAvatarNameChange, NetMessageAvatarNameChange.Builder> {
    private NetMessageAvatarNameChange() { }
    private static readonly NetMessageAvatarNameChange defaultInstance = new NetMessageAvatarNameChange().MakeReadOnly();
    private static readonly string[] _netMessageAvatarNameChangeFieldNames = new string[] { "idEntity" };
    private static readonly uint[] _netMessageAvatarNameChangeFieldTags = new uint[] { 8 };
    public static NetMessageAvatarNameChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAvatarNameChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAvatarNameChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarNameChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAvatarNameChange, NetMessageAvatarNameChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarNameChange__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAvatarNameChangeFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarNameChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAvatarNameChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAvatarNameChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAvatarNameChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAvatarNameChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAvatarNameChange result;
      
      private NetMessageAvatarNameChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAvatarNameChange original = result;
          result = new NetMessageAvatarNameChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAvatarNameChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAvatarNameChange.Descriptor; }
      }
      
      public override NetMessageAvatarNameChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAvatarNameChange.DefaultInstance; }
      }
      
      public override NetMessageAvatarNameChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAvatarNameChange) {
          return MergeFrom((NetMessageAvatarNameChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAvatarNameChange other) {
        if (other == global::Gazillion.NetMessageAvatarNameChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAvatarNameChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAvatarNameChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
    }
    static NetMessageAvatarNameChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionInteractRepeat : pb::GeneratedMessage<NetMessageMissionInteractRepeat, NetMessageMissionInteractRepeat.Builder> {
    private NetMessageMissionInteractRepeat() { }
    private static readonly NetMessageMissionInteractRepeat defaultInstance = new NetMessageMissionInteractRepeat().MakeReadOnly();
    private static readonly string[] _netMessageMissionInteractRepeatFieldNames = new string[] { "missionPrototypeId", "targetEntityId" };
    private static readonly uint[] _netMessageMissionInteractRepeatFieldTags = new uint[] { 16, 8 };
    public static NetMessageMissionInteractRepeat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionInteractRepeat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionInteractRepeat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRepeat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionInteractRepeat, NetMessageMissionInteractRepeat.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRepeat__FieldAccessorTable; }
    }
    
    public const int TargetEntityIdFieldNumber = 1;
    private bool hasTargetEntityId;
    private ulong targetEntityId_;
    public bool HasTargetEntityId {
      get { return hasTargetEntityId; }
    }
    public ulong TargetEntityId {
      get { return targetEntityId_; }
    }
    
    public const int MissionPrototypeIdFieldNumber = 2;
    private bool hasMissionPrototypeId;
    private ulong missionPrototypeId_;
    public bool HasMissionPrototypeId {
      get { return hasMissionPrototypeId; }
    }
    public ulong MissionPrototypeId {
      get { return missionPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetEntityId) return false;
        if (!hasMissionPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionInteractRepeatFieldNames;
      if (hasTargetEntityId) {
        output.WriteUInt64(1, field_names[1], TargetEntityId);
      }
      if (hasMissionPrototypeId) {
        output.WriteUInt64(2, field_names[0], MissionPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetEntityId);
      }
      if (hasMissionPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRepeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionInteractRepeat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionInteractRepeat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionInteractRepeat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionInteractRepeat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionInteractRepeat result;
      
      private NetMessageMissionInteractRepeat PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionInteractRepeat original = result;
          result = new NetMessageMissionInteractRepeat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionInteractRepeat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionInteractRepeat.Descriptor; }
      }
      
      public override NetMessageMissionInteractRepeat DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionInteractRepeat.DefaultInstance; }
      }
      
      public override NetMessageMissionInteractRepeat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionInteractRepeat) {
          return MergeFrom((NetMessageMissionInteractRepeat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionInteractRepeat other) {
        if (other == global::Gazillion.NetMessageMissionInteractRepeat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetEntityId) {
          TargetEntityId = other.TargetEntityId;
        }
        if (other.HasMissionPrototypeId) {
          MissionPrototypeId = other.MissionPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionInteractRepeatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionInteractRepeatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetEntityId = input.ReadUInt64(ref result.targetEntityId_);
              break;
            }
            case 16: {
              result.hasMissionPrototypeId = input.ReadUInt64(ref result.missionPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetEntityId {
        get { return result.hasTargetEntityId; }
      }
      public ulong TargetEntityId {
        get { return result.TargetEntityId; }
        set { SetTargetEntityId(value); }
      }
      public Builder SetTargetEntityId(ulong value) {
        PrepareBuilder();
        result.hasTargetEntityId = true;
        result.targetEntityId_ = value;
        return this;
      }
      public Builder ClearTargetEntityId() {
        PrepareBuilder();
        result.hasTargetEntityId = false;
        result.targetEntityId_ = 0UL;
        return this;
      }
      
      public bool HasMissionPrototypeId {
        get { return result.hasMissionPrototypeId; }
      }
      public ulong MissionPrototypeId {
        get { return result.MissionPrototypeId; }
        set { SetMissionPrototypeId(value); }
      }
      public Builder SetMissionPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasMissionPrototypeId = true;
        result.missionPrototypeId_ = value;
        return this;
      }
      public Builder ClearMissionPrototypeId() {
        PrepareBuilder();
        result.hasMissionPrototypeId = false;
        result.missionPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageMissionInteractRepeat() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMissionInteractRelease : pb::GeneratedMessage<NetMessageMissionInteractRelease, NetMessageMissionInteractRelease.Builder> {
    private NetMessageMissionInteractRelease() { }
    private static readonly NetMessageMissionInteractRelease defaultInstance = new NetMessageMissionInteractRelease().MakeReadOnly();
    private static readonly string[] _netMessageMissionInteractReleaseFieldNames = new string[] {  };
    private static readonly uint[] _netMessageMissionInteractReleaseFieldTags = new uint[] {  };
    public static NetMessageMissionInteractRelease DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMissionInteractRelease DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMissionInteractRelease ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRelease__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMissionInteractRelease, NetMessageMissionInteractRelease.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMissionInteractRelease__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMissionInteractReleaseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMissionInteractRelease ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMissionInteractRelease MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMissionInteractRelease prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMissionInteractRelease, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMissionInteractRelease cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMissionInteractRelease result;
      
      private NetMessageMissionInteractRelease PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMissionInteractRelease original = result;
          result = new NetMessageMissionInteractRelease();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMissionInteractRelease MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMissionInteractRelease.Descriptor; }
      }
      
      public override NetMessageMissionInteractRelease DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMissionInteractRelease.DefaultInstance; }
      }
      
      public override NetMessageMissionInteractRelease BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMissionInteractRelease) {
          return MergeFrom((NetMessageMissionInteractRelease) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMissionInteractRelease other) {
        if (other == global::Gazillion.NetMessageMissionInteractRelease.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMissionInteractReleaseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMissionInteractReleaseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageMissionInteractRelease() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAddCondition : pb::GeneratedMessage<NetMessageAddCondition, NetMessageAddCondition.Builder> {
    private NetMessageAddCondition() { }
    private static readonly NetMessageAddCondition defaultInstance = new NetMessageAddCondition().MakeReadOnly();
    private static readonly string[] _netMessageAddConditionFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageAddConditionFieldTags = new uint[] { 10 };
    public static NetMessageAddCondition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAddCondition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAddCondition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddCondition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAddCondition, NetMessageAddCondition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAddCondition__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAddConditionFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAddCondition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAddCondition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAddCondition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAddCondition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAddCondition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAddCondition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAddCondition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAddCondition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAddCondition result;
      
      private NetMessageAddCondition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAddCondition original = result;
          result = new NetMessageAddCondition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAddCondition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAddCondition.Descriptor; }
      }
      
      public override NetMessageAddCondition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAddCondition.DefaultInstance; }
      }
      
      public override NetMessageAddCondition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAddCondition) {
          return MergeFrom((NetMessageAddCondition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAddCondition other) {
        if (other == global::Gazillion.NetMessageAddCondition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAddConditionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAddConditionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageAddCondition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDeleteCondition : pb::GeneratedMessage<NetMessageDeleteCondition, NetMessageDeleteCondition.Builder> {
    private NetMessageDeleteCondition() { }
    private static readonly NetMessageDeleteCondition defaultInstance = new NetMessageDeleteCondition().MakeReadOnly();
    private static readonly string[] _netMessageDeleteConditionFieldNames = new string[] { "idEntity", "key" };
    private static readonly uint[] _netMessageDeleteConditionFieldTags = new uint[] { 8, 16 };
    public static NetMessageDeleteCondition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDeleteCondition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDeleteCondition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDeleteCondition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDeleteCondition, NetMessageDeleteCondition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDeleteCondition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDeleteConditionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[1], Key);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDeleteCondition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDeleteCondition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDeleteCondition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDeleteCondition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDeleteCondition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDeleteCondition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDeleteCondition result;
      
      private NetMessageDeleteCondition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDeleteCondition original = result;
          result = new NetMessageDeleteCondition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDeleteCondition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDeleteCondition.Descriptor; }
      }
      
      public override NetMessageDeleteCondition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDeleteCondition.DefaultInstance; }
      }
      
      public override NetMessageDeleteCondition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDeleteCondition) {
          return MergeFrom((NetMessageDeleteCondition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDeleteCondition other) {
        if (other == global::Gazillion.NetMessageDeleteCondition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDeleteConditionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDeleteConditionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
    }
    static NetMessageDeleteCondition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEnableCondition : pb::GeneratedMessage<NetMessageEnableCondition, NetMessageEnableCondition.Builder> {
    private NetMessageEnableCondition() { }
    private static readonly NetMessageEnableCondition defaultInstance = new NetMessageEnableCondition().MakeReadOnly();
    private static readonly string[] _netMessageEnableConditionFieldNames = new string[] { "enable", "idEntity", "key" };
    private static readonly uint[] _netMessageEnableConditionFieldTags = new uint[] { 24, 8, 16 };
    public static NetMessageEnableCondition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEnableCondition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEnableCondition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnableCondition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEnableCondition, NetMessageEnableCondition.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEnableCondition__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public const int EnableFieldNumber = 3;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        if (!hasEnable) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEnableConditionFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[2], Key);
      }
      if (hasEnable) {
        output.WriteBool(3, field_names[0], Enable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Enable);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEnableCondition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEnableCondition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEnableCondition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEnableCondition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEnableCondition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEnableCondition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEnableCondition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEnableCondition result;
      
      private NetMessageEnableCondition PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEnableCondition original = result;
          result = new NetMessageEnableCondition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEnableCondition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEnableCondition.Descriptor; }
      }
      
      public override NetMessageEnableCondition DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEnableCondition.DefaultInstance; }
      }
      
      public override NetMessageEnableCondition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEnableCondition) {
          return MergeFrom((NetMessageEnableCondition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEnableCondition other) {
        if (other == global::Gazillion.NetMessageEnableCondition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEnableConditionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEnableConditionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
            case 24: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
    }
    static NetMessageEnableCondition() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeConditionPauseTime : pb::GeneratedMessage<NetMessageChangeConditionPauseTime, NetMessageChangeConditionPauseTime.Builder> {
    private NetMessageChangeConditionPauseTime() { }
    private static readonly NetMessageChangeConditionPauseTime defaultInstance = new NetMessageChangeConditionPauseTime().MakeReadOnly();
    private static readonly string[] _netMessageChangeConditionPauseTimeFieldNames = new string[] { "idEntity", "key", "pauseTime", "startTime" };
    private static readonly uint[] _netMessageChangeConditionPauseTimeFieldTags = new uint[] { 8, 16, 24, 32 };
    public static NetMessageChangeConditionPauseTime DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeConditionPauseTime DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeConditionPauseTime ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeConditionPauseTime__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeConditionPauseTime, NetMessageChangeConditionPauseTime.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeConditionPauseTime__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public const int PauseTimeFieldNumber = 3;
    private bool hasPauseTime;
    private ulong pauseTime_;
    public bool HasPauseTime {
      get { return hasPauseTime; }
    }
    public ulong PauseTime {
      get { return pauseTime_; }
    }
    
    public const int StartTimeFieldNumber = 4;
    private bool hasStartTime;
    private ulong startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public ulong StartTime {
      get { return startTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        if (!hasPauseTime) return false;
        if (!hasStartTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeConditionPauseTimeFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[1], Key);
      }
      if (hasPauseTime) {
        output.WriteUInt64(3, field_names[2], PauseTime);
      }
      if (hasStartTime) {
        output.WriteUInt64(4, field_names[3], StartTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      if (hasPauseTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, PauseTime);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, StartTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeConditionPauseTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeConditionPauseTime MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeConditionPauseTime prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeConditionPauseTime, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeConditionPauseTime cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeConditionPauseTime result;
      
      private NetMessageChangeConditionPauseTime PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeConditionPauseTime original = result;
          result = new NetMessageChangeConditionPauseTime();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeConditionPauseTime MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeConditionPauseTime.Descriptor; }
      }
      
      public override NetMessageChangeConditionPauseTime DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeConditionPauseTime.DefaultInstance; }
      }
      
      public override NetMessageChangeConditionPauseTime BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeConditionPauseTime) {
          return MergeFrom((NetMessageChangeConditionPauseTime) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeConditionPauseTime other) {
        if (other == global::Gazillion.NetMessageChangeConditionPauseTime.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasPauseTime) {
          PauseTime = other.PauseTime;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeConditionPauseTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeConditionPauseTimeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
            case 24: {
              result.hasPauseTime = input.ReadUInt64(ref result.pauseTime_);
              break;
            }
            case 32: {
              result.hasStartTime = input.ReadUInt64(ref result.startTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
      
      public bool HasPauseTime {
        get { return result.hasPauseTime; }
      }
      public ulong PauseTime {
        get { return result.PauseTime; }
        set { SetPauseTime(value); }
      }
      public Builder SetPauseTime(ulong value) {
        PrepareBuilder();
        result.hasPauseTime = true;
        result.pauseTime_ = value;
        return this;
      }
      public Builder ClearPauseTime() {
        PrepareBuilder();
        result.hasPauseTime = false;
        result.pauseTime_ = 0UL;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public ulong StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(ulong value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeConditionPauseTime() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageChangeConditionDuration : pb::GeneratedMessage<NetMessageChangeConditionDuration, NetMessageChangeConditionDuration.Builder> {
    private NetMessageChangeConditionDuration() { }
    private static readonly NetMessageChangeConditionDuration defaultInstance = new NetMessageChangeConditionDuration().MakeReadOnly();
    private static readonly string[] _netMessageChangeConditionDurationFieldNames = new string[] { "duration", "idEntity", "key", "startTime" };
    private static readonly uint[] _netMessageChangeConditionDurationFieldTags = new uint[] { 24, 8, 16, 32 };
    public static NetMessageChangeConditionDuration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageChangeConditionDuration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageChangeConditionDuration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeConditionDuration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageChangeConditionDuration, NetMessageChangeConditionDuration.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageChangeConditionDuration__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private ulong key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public ulong Key {
      get { return key_; }
    }
    
    public const int DurationFieldNumber = 3;
    private bool hasDuration;
    private long duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public long Duration {
      get { return duration_; }
    }
    
    public const int StartTimeFieldNumber = 4;
    private bool hasStartTime;
    private ulong startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public ulong StartTime {
      get { return startTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasKey) return false;
        if (!hasDuration) return false;
        if (!hasStartTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageChangeConditionDurationFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[1], IdEntity);
      }
      if (hasKey) {
        output.WriteUInt64(2, field_names[2], Key);
      }
      if (hasDuration) {
        output.WriteInt64(3, field_names[0], Duration);
      }
      if (hasStartTime) {
        output.WriteUInt64(4, field_names[3], StartTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Key);
      }
      if (hasDuration) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Duration);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, StartTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageChangeConditionDuration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageChangeConditionDuration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageChangeConditionDuration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageChangeConditionDuration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageChangeConditionDuration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageChangeConditionDuration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageChangeConditionDuration result;
      
      private NetMessageChangeConditionDuration PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageChangeConditionDuration original = result;
          result = new NetMessageChangeConditionDuration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageChangeConditionDuration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageChangeConditionDuration.Descriptor; }
      }
      
      public override NetMessageChangeConditionDuration DefaultInstanceForType {
        get { return global::Gazillion.NetMessageChangeConditionDuration.DefaultInstance; }
      }
      
      public override NetMessageChangeConditionDuration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageChangeConditionDuration) {
          return MergeFrom((NetMessageChangeConditionDuration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageChangeConditionDuration other) {
        if (other == global::Gazillion.NetMessageChangeConditionDuration.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageChangeConditionDurationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageChangeConditionDurationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 16: {
              result.hasKey = input.ReadUInt64(ref result.key_);
              break;
            }
            case 24: {
              result.hasDuration = input.ReadInt64(ref result.duration_);
              break;
            }
            case 32: {
              result.hasStartTime = input.ReadUInt64(ref result.startTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public ulong Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(ulong value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0UL;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public long Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(long value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0L;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public ulong StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(ulong value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0UL;
        return this;
      }
    }
    static NetMessageChangeConditionDuration() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilitySlotToAbilityBarFromServer : pb::GeneratedMessage<NetMessageAbilitySlotToAbilityBarFromServer, NetMessageAbilitySlotToAbilityBarFromServer.Builder> {
    private NetMessageAbilitySlotToAbilityBarFromServer() { }
    private static readonly NetMessageAbilitySlotToAbilityBarFromServer defaultInstance = new NetMessageAbilitySlotToAbilityBarFromServer().MakeReadOnly();
    private static readonly string[] _netMessageAbilitySlotToAbilityBarFromServerFieldNames = new string[] { "avatarId", "keyMappingIndex", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAbilitySlotToAbilityBarFromServerFieldTags = new uint[] { 8, 32, 16, 24 };
    public static NetMessageAbilitySlotToAbilityBarFromServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilitySlotToAbilityBarFromServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilitySlotToAbilityBarFromServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilitySlotToAbilityBarFromServer, NetMessageAbilitySlotToAbilityBarFromServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySlotToAbilityBarFromServer__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 4;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasSlotNumber) return false;
        if (!hasKeyMappingIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilitySlotToAbilityBarFromServerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[2], PrototypeRefId);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[3], SlotNumber);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(4, field_names[1], KeyMappingIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, KeyMappingIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySlotToAbilityBarFromServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilitySlotToAbilityBarFromServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilitySlotToAbilityBarFromServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilitySlotToAbilityBarFromServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilitySlotToAbilityBarFromServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilitySlotToAbilityBarFromServer result;
      
      private NetMessageAbilitySlotToAbilityBarFromServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilitySlotToAbilityBarFromServer original = result;
          result = new NetMessageAbilitySlotToAbilityBarFromServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilitySlotToAbilityBarFromServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer.Descriptor; }
      }
      
      public override NetMessageAbilitySlotToAbilityBarFromServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer.DefaultInstance; }
      }
      
      public override NetMessageAbilitySlotToAbilityBarFromServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilitySlotToAbilityBarFromServer) {
          return MergeFrom((NetMessageAbilitySlotToAbilityBarFromServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilitySlotToAbilityBarFromServer other) {
        if (other == global::Gazillion.NetMessageAbilitySlotToAbilityBarFromServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilitySlotToAbilityBarFromServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilitySlotToAbilityBarFromServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
            case 32: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
    }
    static NetMessageAbilitySlotToAbilityBarFromServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilityUnslotFromAbilityBarFromServer : pb::GeneratedMessage<NetMessageAbilityUnslotFromAbilityBarFromServer, NetMessageAbilityUnslotFromAbilityBarFromServer.Builder> {
    private NetMessageAbilityUnslotFromAbilityBarFromServer() { }
    private static readonly NetMessageAbilityUnslotFromAbilityBarFromServer defaultInstance = new NetMessageAbilityUnslotFromAbilityBarFromServer().MakeReadOnly();
    private static readonly string[] _netMessageAbilityUnslotFromAbilityBarFromServerFieldNames = new string[] { "avatarId", "keyMappingIndex", "slotNumber" };
    private static readonly uint[] _netMessageAbilityUnslotFromAbilityBarFromServerFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAbilityUnslotFromAbilityBarFromServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilityUnslotFromAbilityBarFromServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilityUnslotFromAbilityBarFromServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilityUnslotFromAbilityBarFromServer, NetMessageAbilityUnslotFromAbilityBarFromServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilityUnslotFromAbilityBarFromServer__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 2;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilityUnslotFromAbilityBarFromServerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(2, field_names[1], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[2], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilityUnslotFromAbilityBarFromServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilityUnslotFromAbilityBarFromServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilityUnslotFromAbilityBarFromServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilityUnslotFromAbilityBarFromServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilityUnslotFromAbilityBarFromServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilityUnslotFromAbilityBarFromServer result;
      
      private NetMessageAbilityUnslotFromAbilityBarFromServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilityUnslotFromAbilityBarFromServer original = result;
          result = new NetMessageAbilityUnslotFromAbilityBarFromServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilityUnslotFromAbilityBarFromServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer.Descriptor; }
      }
      
      public override NetMessageAbilityUnslotFromAbilityBarFromServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer.DefaultInstance; }
      }
      
      public override NetMessageAbilityUnslotFromAbilityBarFromServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilityUnslotFromAbilityBarFromServer) {
          return MergeFrom((NetMessageAbilityUnslotFromAbilityBarFromServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilityUnslotFromAbilityBarFromServer other) {
        if (other == global::Gazillion.NetMessageAbilityUnslotFromAbilityBarFromServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilityUnslotFromAbilityBarFromServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilityUnslotFromAbilityBarFromServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAbilityUnslotFromAbilityBarFromServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAbilitySwapInAbilityBarFromServer : pb::GeneratedMessage<NetMessageAbilitySwapInAbilityBarFromServer, NetMessageAbilitySwapInAbilityBarFromServer.Builder> {
    private NetMessageAbilitySwapInAbilityBarFromServer() { }
    private static readonly NetMessageAbilitySwapInAbilityBarFromServer defaultInstance = new NetMessageAbilitySwapInAbilityBarFromServer().MakeReadOnly();
    private static readonly string[] _netMessageAbilitySwapInAbilityBarFromServerFieldNames = new string[] { "avatarId", "slotNumberA", "slotNumberB" };
    private static readonly uint[] _netMessageAbilitySwapInAbilityBarFromServerFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageAbilitySwapInAbilityBarFromServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAbilitySwapInAbilityBarFromServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAbilitySwapInAbilityBarFromServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAbilitySwapInAbilityBarFromServer, NetMessageAbilitySwapInAbilityBarFromServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAbilitySwapInAbilityBarFromServer__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int SlotNumberAFieldNumber = 2;
    private bool hasSlotNumberA;
    private uint slotNumberA_;
    public bool HasSlotNumberA {
      get { return hasSlotNumberA; }
    }
    public uint SlotNumberA {
      get { return slotNumberA_; }
    }
    
    public const int SlotNumberBFieldNumber = 3;
    private bool hasSlotNumberB;
    private uint slotNumberB_;
    public bool HasSlotNumberB {
      get { return hasSlotNumberB; }
    }
    public uint SlotNumberB {
      get { return slotNumberB_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasSlotNumberA) return false;
        if (!hasSlotNumberB) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAbilitySwapInAbilityBarFromServerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasSlotNumberA) {
        output.WriteUInt32(2, field_names[1], SlotNumberA);
      }
      if (hasSlotNumberB) {
        output.WriteUInt32(3, field_names[2], SlotNumberB);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasSlotNumberA) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotNumberA);
      }
      if (hasSlotNumberB) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumberB);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAbilitySwapInAbilityBarFromServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAbilitySwapInAbilityBarFromServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAbilitySwapInAbilityBarFromServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAbilitySwapInAbilityBarFromServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAbilitySwapInAbilityBarFromServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAbilitySwapInAbilityBarFromServer result;
      
      private NetMessageAbilitySwapInAbilityBarFromServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAbilitySwapInAbilityBarFromServer original = result;
          result = new NetMessageAbilitySwapInAbilityBarFromServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAbilitySwapInAbilityBarFromServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer.Descriptor; }
      }
      
      public override NetMessageAbilitySwapInAbilityBarFromServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer.DefaultInstance; }
      }
      
      public override NetMessageAbilitySwapInAbilityBarFromServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAbilitySwapInAbilityBarFromServer) {
          return MergeFrom((NetMessageAbilitySwapInAbilityBarFromServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAbilitySwapInAbilityBarFromServer other) {
        if (other == global::Gazillion.NetMessageAbilitySwapInAbilityBarFromServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasSlotNumberA) {
          SlotNumberA = other.SlotNumberA;
        }
        if (other.HasSlotNumberB) {
          SlotNumberB = other.SlotNumberB;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAbilitySwapInAbilityBarFromServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAbilitySwapInAbilityBarFromServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasSlotNumberA = input.ReadUInt32(ref result.slotNumberA_);
              break;
            }
            case 24: {
              result.hasSlotNumberB = input.ReadUInt32(ref result.slotNumberB_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasSlotNumberA {
        get { return result.hasSlotNumberA; }
      }
      public uint SlotNumberA {
        get { return result.SlotNumberA; }
        set { SetSlotNumberA(value); }
      }
      public Builder SetSlotNumberA(uint value) {
        PrepareBuilder();
        result.hasSlotNumberA = true;
        result.slotNumberA_ = value;
        return this;
      }
      public Builder ClearSlotNumberA() {
        PrepareBuilder();
        result.hasSlotNumberA = false;
        result.slotNumberA_ = 0;
        return this;
      }
      
      public bool HasSlotNumberB {
        get { return result.hasSlotNumberB; }
      }
      public uint SlotNumberB {
        get { return result.SlotNumberB; }
        set { SetSlotNumberB(value); }
      }
      public Builder SetSlotNumberB(uint value) {
        PrepareBuilder();
        result.hasSlotNumberB = true;
        result.slotNumberB_ = value;
        return this;
      }
      public Builder ClearSlotNumberB() {
        PrepareBuilder();
        result.hasSlotNumberB = false;
        result.slotNumberB_ = 0;
        return this;
      }
    }
    static NetMessageAbilitySwapInAbilityBarFromServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignHotkeyFromServer : pb::GeneratedMessage<NetMessageAssignHotkeyFromServer, NetMessageAssignHotkeyFromServer.Builder> {
    private NetMessageAssignHotkeyFromServer() { }
    private static readonly NetMessageAssignHotkeyFromServer defaultInstance = new NetMessageAssignHotkeyFromServer().MakeReadOnly();
    private static readonly string[] _netMessageAssignHotkeyFromServerFieldNames = new string[] { "avatarId", "destinationSlotNumber", "keyMappingIndex", "prototypeRefId", "slotNumber" };
    private static readonly uint[] _netMessageAssignHotkeyFromServerFieldTags = new uint[] { 8, 40, 24, 16, 32 };
    public static NetMessageAssignHotkeyFromServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignHotkeyFromServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignHotkeyFromServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignHotkeyFromServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignHotkeyFromServer, NetMessageAssignHotkeyFromServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignHotkeyFromServer__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int PrototypeRefIdFieldNumber = 2;
    private bool hasPrototypeRefId;
    private ulong prototypeRefId_;
    public bool HasPrototypeRefId {
      get { return hasPrototypeRefId; }
    }
    public ulong PrototypeRefId {
      get { return prototypeRefId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 3;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 4;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public const int DestinationSlotNumberFieldNumber = 5;
    private bool hasDestinationSlotNumber;
    private uint destinationSlotNumber_;
    public bool HasDestinationSlotNumber {
      get { return hasDestinationSlotNumber; }
    }
    public uint DestinationSlotNumber {
      get { return destinationSlotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasPrototypeRefId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        if (!hasDestinationSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignHotkeyFromServerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasPrototypeRefId) {
        output.WriteUInt64(2, field_names[3], PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(3, field_names[2], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(4, field_names[4], SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        output.WriteUInt32(5, field_names[1], DestinationSlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasPrototypeRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PrototypeRefId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SlotNumber);
      }
      if (hasDestinationSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, DestinationSlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignHotkeyFromServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignHotkeyFromServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignHotkeyFromServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignHotkeyFromServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignHotkeyFromServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignHotkeyFromServer result;
      
      private NetMessageAssignHotkeyFromServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignHotkeyFromServer original = result;
          result = new NetMessageAssignHotkeyFromServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignHotkeyFromServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignHotkeyFromServer.Descriptor; }
      }
      
      public override NetMessageAssignHotkeyFromServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignHotkeyFromServer.DefaultInstance; }
      }
      
      public override NetMessageAssignHotkeyFromServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignHotkeyFromServer) {
          return MergeFrom((NetMessageAssignHotkeyFromServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignHotkeyFromServer other) {
        if (other == global::Gazillion.NetMessageAssignHotkeyFromServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasPrototypeRefId) {
          PrototypeRefId = other.PrototypeRefId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        if (other.HasDestinationSlotNumber) {
          DestinationSlotNumber = other.DestinationSlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignHotkeyFromServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignHotkeyFromServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasPrototypeRefId = input.ReadUInt64(ref result.prototypeRefId_);
              break;
            }
            case 24: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 32: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
            case 40: {
              result.hasDestinationSlotNumber = input.ReadUInt32(ref result.destinationSlotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasPrototypeRefId {
        get { return result.hasPrototypeRefId; }
      }
      public ulong PrototypeRefId {
        get { return result.PrototypeRefId; }
        set { SetPrototypeRefId(value); }
      }
      public Builder SetPrototypeRefId(ulong value) {
        PrepareBuilder();
        result.hasPrototypeRefId = true;
        result.prototypeRefId_ = value;
        return this;
      }
      public Builder ClearPrototypeRefId() {
        PrepareBuilder();
        result.hasPrototypeRefId = false;
        result.prototypeRefId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
      
      public bool HasDestinationSlotNumber {
        get { return result.hasDestinationSlotNumber; }
      }
      public uint DestinationSlotNumber {
        get { return result.DestinationSlotNumber; }
        set { SetDestinationSlotNumber(value); }
      }
      public Builder SetDestinationSlotNumber(uint value) {
        PrepareBuilder();
        result.hasDestinationSlotNumber = true;
        result.destinationSlotNumber_ = value;
        return this;
      }
      public Builder ClearDestinationSlotNumber() {
        PrepareBuilder();
        result.hasDestinationSlotNumber = false;
        result.destinationSlotNumber_ = 0;
        return this;
      }
    }
    static NetMessageAssignHotkeyFromServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUnassignHotkeyFromServer : pb::GeneratedMessage<NetMessageUnassignHotkeyFromServer, NetMessageUnassignHotkeyFromServer.Builder> {
    private NetMessageUnassignHotkeyFromServer() { }
    private static readonly NetMessageUnassignHotkeyFromServer defaultInstance = new NetMessageUnassignHotkeyFromServer().MakeReadOnly();
    private static readonly string[] _netMessageUnassignHotkeyFromServerFieldNames = new string[] { "avatarId", "keyMappingIndex", "slotNumber" };
    private static readonly uint[] _netMessageUnassignHotkeyFromServerFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageUnassignHotkeyFromServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUnassignHotkeyFromServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUnassignHotkeyFromServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUnassignHotkeyFromServer, NetMessageUnassignHotkeyFromServer.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUnassignHotkeyFromServer__FieldAccessorTable; }
    }
    
    public const int AvatarIdFieldNumber = 1;
    private bool hasAvatarId;
    private ulong avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public ulong AvatarId {
      get { return avatarId_; }
    }
    
    public const int KeyMappingIndexFieldNumber = 2;
    private bool hasKeyMappingIndex;
    private uint keyMappingIndex_;
    public bool HasKeyMappingIndex {
      get { return hasKeyMappingIndex; }
    }
    public uint KeyMappingIndex {
      get { return keyMappingIndex_; }
    }
    
    public const int SlotNumberFieldNumber = 3;
    private bool hasSlotNumber;
    private uint slotNumber_;
    public bool HasSlotNumber {
      get { return hasSlotNumber; }
    }
    public uint SlotNumber {
      get { return slotNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarId) return false;
        if (!hasKeyMappingIndex) return false;
        if (!hasSlotNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUnassignHotkeyFromServerFieldNames;
      if (hasAvatarId) {
        output.WriteUInt64(1, field_names[0], AvatarId);
      }
      if (hasKeyMappingIndex) {
        output.WriteUInt32(2, field_names[1], KeyMappingIndex);
      }
      if (hasSlotNumber) {
        output.WriteUInt32(3, field_names[2], SlotNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, AvatarId);
      }
      if (hasKeyMappingIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyMappingIndex);
      }
      if (hasSlotNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SlotNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUnassignHotkeyFromServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUnassignHotkeyFromServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUnassignHotkeyFromServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUnassignHotkeyFromServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUnassignHotkeyFromServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUnassignHotkeyFromServer result;
      
      private NetMessageUnassignHotkeyFromServer PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUnassignHotkeyFromServer original = result;
          result = new NetMessageUnassignHotkeyFromServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUnassignHotkeyFromServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUnassignHotkeyFromServer.Descriptor; }
      }
      
      public override NetMessageUnassignHotkeyFromServer DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUnassignHotkeyFromServer.DefaultInstance; }
      }
      
      public override NetMessageUnassignHotkeyFromServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUnassignHotkeyFromServer) {
          return MergeFrom((NetMessageUnassignHotkeyFromServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUnassignHotkeyFromServer other) {
        if (other == global::Gazillion.NetMessageUnassignHotkeyFromServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasKeyMappingIndex) {
          KeyMappingIndex = other.KeyMappingIndex;
        }
        if (other.HasSlotNumber) {
          SlotNumber = other.SlotNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUnassignHotkeyFromServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUnassignHotkeyFromServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarId = input.ReadUInt64(ref result.avatarId_);
              break;
            }
            case 16: {
              result.hasKeyMappingIndex = input.ReadUInt32(ref result.keyMappingIndex_);
              break;
            }
            case 24: {
              result.hasSlotNumber = input.ReadUInt32(ref result.slotNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public ulong AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(ulong value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0UL;
        return this;
      }
      
      public bool HasKeyMappingIndex {
        get { return result.hasKeyMappingIndex; }
      }
      public uint KeyMappingIndex {
        get { return result.KeyMappingIndex; }
        set { SetKeyMappingIndex(value); }
      }
      public Builder SetKeyMappingIndex(uint value) {
        PrepareBuilder();
        result.hasKeyMappingIndex = true;
        result.keyMappingIndex_ = value;
        return this;
      }
      public Builder ClearKeyMappingIndex() {
        PrepareBuilder();
        result.hasKeyMappingIndex = false;
        result.keyMappingIndex_ = 0;
        return this;
      }
      
      public bool HasSlotNumber {
        get { return result.hasSlotNumber; }
      }
      public uint SlotNumber {
        get { return result.SlotNumber; }
        set { SetSlotNumber(value); }
      }
      public Builder SetSlotNumber(uint value) {
        PrepareBuilder();
        result.hasSlotNumber = true;
        result.slotNumber_ = value;
        return this;
      }
      public Builder ClearSlotNumber() {
        PrepareBuilder();
        result.hasSlotNumber = false;
        result.slotNumber_ = 0;
        return this;
      }
    }
    static NetMessageUnassignHotkeyFromServer() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerCollectionAssignPower : pb::GeneratedMessage<NetMessagePowerCollectionAssignPower, NetMessagePowerCollectionAssignPower.Builder> {
    private NetMessagePowerCollectionAssignPower() { }
    private static readonly NetMessagePowerCollectionAssignPower defaultInstance = new NetMessagePowerCollectionAssignPower().MakeReadOnly();
    private static readonly string[] _netMessagePowerCollectionAssignPowerFieldNames = new string[] { "characterLevel", "combatLevel", "entityId", "itemLevel", "itemVariation", "powerProtoId", "powerRank" };
    private static readonly uint[] _netMessagePowerCollectionAssignPowerFieldTags = new uint[] { 32, 40, 8, 48, 61, 16, 24 };
    public static NetMessagePowerCollectionAssignPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerCollectionAssignPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerCollectionAssignPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionAssignPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerCollectionAssignPower, NetMessagePowerCollectionAssignPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionAssignPower__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerProtoIdFieldNumber = 2;
    private bool hasPowerProtoId;
    private ulong powerProtoId_;
    public bool HasPowerProtoId {
      get { return hasPowerProtoId; }
    }
    public ulong PowerProtoId {
      get { return powerProtoId_; }
    }
    
    public const int PowerRankFieldNumber = 3;
    private bool hasPowerRank;
    private int powerRank_;
    public bool HasPowerRank {
      get { return hasPowerRank; }
    }
    public int PowerRank {
      get { return powerRank_; }
    }
    
    public const int CharacterLevelFieldNumber = 4;
    private bool hasCharacterLevel;
    private int characterLevel_;
    public bool HasCharacterLevel {
      get { return hasCharacterLevel; }
    }
    public int CharacterLevel {
      get { return characterLevel_; }
    }
    
    public const int CombatLevelFieldNumber = 5;
    private bool hasCombatLevel;
    private int combatLevel_;
    public bool HasCombatLevel {
      get { return hasCombatLevel; }
    }
    public int CombatLevel {
      get { return combatLevel_; }
    }
    
    public const int ItemLevelFieldNumber = 6;
    private bool hasItemLevel;
    private int itemLevel_;
    public bool HasItemLevel {
      get { return hasItemLevel; }
    }
    public int ItemLevel {
      get { return itemLevel_; }
    }
    
    public const int ItemVariationFieldNumber = 7;
    private bool hasItemVariation;
    private float itemVariation_;
    public bool HasItemVariation {
      get { return hasItemVariation; }
    }
    public float ItemVariation {
      get { return itemVariation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerProtoId) return false;
        if (!hasPowerRank) return false;
        if (!hasCharacterLevel) return false;
        if (!hasCombatLevel) return false;
        if (!hasItemLevel) return false;
        if (!hasItemVariation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerCollectionAssignPowerFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[2], EntityId);
      }
      if (hasPowerProtoId) {
        output.WriteUInt64(2, field_names[5], PowerProtoId);
      }
      if (hasPowerRank) {
        output.WriteInt32(3, field_names[6], PowerRank);
      }
      if (hasCharacterLevel) {
        output.WriteInt32(4, field_names[0], CharacterLevel);
      }
      if (hasCombatLevel) {
        output.WriteInt32(5, field_names[1], CombatLevel);
      }
      if (hasItemLevel) {
        output.WriteInt32(6, field_names[3], ItemLevel);
      }
      if (hasItemVariation) {
        output.WriteFloat(7, field_names[4], ItemVariation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerProtoId);
      }
      if (hasPowerRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, PowerRank);
      }
      if (hasCharacterLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CharacterLevel);
      }
      if (hasCombatLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, CombatLevel);
      }
      if (hasItemLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ItemLevel);
      }
      if (hasItemVariation) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, ItemVariation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionAssignPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerCollectionAssignPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerCollectionAssignPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerCollectionAssignPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerCollectionAssignPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerCollectionAssignPower result;
      
      private NetMessagePowerCollectionAssignPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerCollectionAssignPower original = result;
          result = new NetMessagePowerCollectionAssignPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerCollectionAssignPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerCollectionAssignPower.Descriptor; }
      }
      
      public override NetMessagePowerCollectionAssignPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance; }
      }
      
      public override NetMessagePowerCollectionAssignPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerCollectionAssignPower) {
          return MergeFrom((NetMessagePowerCollectionAssignPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerCollectionAssignPower other) {
        if (other == global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerProtoId) {
          PowerProtoId = other.PowerProtoId;
        }
        if (other.HasPowerRank) {
          PowerRank = other.PowerRank;
        }
        if (other.HasCharacterLevel) {
          CharacterLevel = other.CharacterLevel;
        }
        if (other.HasCombatLevel) {
          CombatLevel = other.CombatLevel;
        }
        if (other.HasItemLevel) {
          ItemLevel = other.ItemLevel;
        }
        if (other.HasItemVariation) {
          ItemVariation = other.ItemVariation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerCollectionAssignPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerCollectionAssignPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerProtoId = input.ReadUInt64(ref result.powerProtoId_);
              break;
            }
            case 24: {
              result.hasPowerRank = input.ReadInt32(ref result.powerRank_);
              break;
            }
            case 32: {
              result.hasCharacterLevel = input.ReadInt32(ref result.characterLevel_);
              break;
            }
            case 40: {
              result.hasCombatLevel = input.ReadInt32(ref result.combatLevel_);
              break;
            }
            case 48: {
              result.hasItemLevel = input.ReadInt32(ref result.itemLevel_);
              break;
            }
            case 61: {
              result.hasItemVariation = input.ReadFloat(ref result.itemVariation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerProtoId {
        get { return result.hasPowerProtoId; }
      }
      public ulong PowerProtoId {
        get { return result.PowerProtoId; }
        set { SetPowerProtoId(value); }
      }
      public Builder SetPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasPowerProtoId = true;
        result.powerProtoId_ = value;
        return this;
      }
      public Builder ClearPowerProtoId() {
        PrepareBuilder();
        result.hasPowerProtoId = false;
        result.powerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRank {
        get { return result.hasPowerRank; }
      }
      public int PowerRank {
        get { return result.PowerRank; }
        set { SetPowerRank(value); }
      }
      public Builder SetPowerRank(int value) {
        PrepareBuilder();
        result.hasPowerRank = true;
        result.powerRank_ = value;
        return this;
      }
      public Builder ClearPowerRank() {
        PrepareBuilder();
        result.hasPowerRank = false;
        result.powerRank_ = 0;
        return this;
      }
      
      public bool HasCharacterLevel {
        get { return result.hasCharacterLevel; }
      }
      public int CharacterLevel {
        get { return result.CharacterLevel; }
        set { SetCharacterLevel(value); }
      }
      public Builder SetCharacterLevel(int value) {
        PrepareBuilder();
        result.hasCharacterLevel = true;
        result.characterLevel_ = value;
        return this;
      }
      public Builder ClearCharacterLevel() {
        PrepareBuilder();
        result.hasCharacterLevel = false;
        result.characterLevel_ = 0;
        return this;
      }
      
      public bool HasCombatLevel {
        get { return result.hasCombatLevel; }
      }
      public int CombatLevel {
        get { return result.CombatLevel; }
        set { SetCombatLevel(value); }
      }
      public Builder SetCombatLevel(int value) {
        PrepareBuilder();
        result.hasCombatLevel = true;
        result.combatLevel_ = value;
        return this;
      }
      public Builder ClearCombatLevel() {
        PrepareBuilder();
        result.hasCombatLevel = false;
        result.combatLevel_ = 0;
        return this;
      }
      
      public bool HasItemLevel {
        get { return result.hasItemLevel; }
      }
      public int ItemLevel {
        get { return result.ItemLevel; }
        set { SetItemLevel(value); }
      }
      public Builder SetItemLevel(int value) {
        PrepareBuilder();
        result.hasItemLevel = true;
        result.itemLevel_ = value;
        return this;
      }
      public Builder ClearItemLevel() {
        PrepareBuilder();
        result.hasItemLevel = false;
        result.itemLevel_ = 0;
        return this;
      }
      
      public bool HasItemVariation {
        get { return result.hasItemVariation; }
      }
      public float ItemVariation {
        get { return result.ItemVariation; }
        set { SetItemVariation(value); }
      }
      public Builder SetItemVariation(float value) {
        PrepareBuilder();
        result.hasItemVariation = true;
        result.itemVariation_ = value;
        return this;
      }
      public Builder ClearItemVariation() {
        PrepareBuilder();
        result.hasItemVariation = false;
        result.itemVariation_ = 0F;
        return this;
      }
    }
    static NetMessagePowerCollectionAssignPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAssignPowerCollection : pb::GeneratedMessage<NetMessageAssignPowerCollection, NetMessageAssignPowerCollection.Builder> {
    private NetMessageAssignPowerCollection() { }
    private static readonly NetMessageAssignPowerCollection defaultInstance = new NetMessageAssignPowerCollection().MakeReadOnly();
    private static readonly string[] _netMessageAssignPowerCollectionFieldNames = new string[] { "power" };
    private static readonly uint[] _netMessageAssignPowerCollectionFieldTags = new uint[] { 10 };
    public static NetMessageAssignPowerCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAssignPowerCollection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAssignPowerCollection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignPowerCollection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAssignPowerCollection, NetMessageAssignPowerCollection.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAssignPowerCollection__FieldAccessorTable; }
    }
    
    public const int PowerFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower> power_ = new pbc::PopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower>();
    public scg::IList<global::Gazillion.NetMessagePowerCollectionAssignPower> PowerList {
      get { return power_; }
    }
    public int PowerCount {
      get { return power_.Count; }
    }
    public global::Gazillion.NetMessagePowerCollectionAssignPower GetPower(int index) {
      return power_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetMessagePowerCollectionAssignPower element in PowerList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAssignPowerCollectionFieldNames;
      if (power_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], power_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetMessagePowerCollectionAssignPower element in PowerList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAssignPowerCollection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAssignPowerCollection MakeReadOnly() {
      power_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAssignPowerCollection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAssignPowerCollection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAssignPowerCollection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAssignPowerCollection result;
      
      private NetMessageAssignPowerCollection PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAssignPowerCollection original = result;
          result = new NetMessageAssignPowerCollection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAssignPowerCollection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAssignPowerCollection.Descriptor; }
      }
      
      public override NetMessageAssignPowerCollection DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAssignPowerCollection.DefaultInstance; }
      }
      
      public override NetMessageAssignPowerCollection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAssignPowerCollection) {
          return MergeFrom((NetMessageAssignPowerCollection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAssignPowerCollection other) {
        if (other == global::Gazillion.NetMessageAssignPowerCollection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.power_.Count != 0) {
          result.power_.Add(other.power_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAssignPowerCollectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAssignPowerCollectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.power_, global::Gazillion.NetMessagePowerCollectionAssignPower.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetMessagePowerCollectionAssignPower> PowerList {
        get { return PrepareBuilder().power_; }
      }
      public int PowerCount {
        get { return result.PowerCount; }
      }
      public global::Gazillion.NetMessagePowerCollectionAssignPower GetPower(int index) {
        return result.GetPower(index);
      }
      public Builder SetPower(int index, global::Gazillion.NetMessagePowerCollectionAssignPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.power_[index] = value;
        return this;
      }
      public Builder SetPower(int index, global::Gazillion.NetMessagePowerCollectionAssignPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.power_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPower(global::Gazillion.NetMessagePowerCollectionAssignPower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.power_.Add(value);
        return this;
      }
      public Builder AddPower(global::Gazillion.NetMessagePowerCollectionAssignPower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.power_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePower(scg::IEnumerable<global::Gazillion.NetMessagePowerCollectionAssignPower> values) {
        PrepareBuilder();
        result.power_.Add(values);
        return this;
      }
      public Builder ClearPower() {
        PrepareBuilder();
        result.power_.Clear();
        return this;
      }
    }
    static NetMessageAssignPowerCollection() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePowerCollectionUnassignPower : pb::GeneratedMessage<NetMessagePowerCollectionUnassignPower, NetMessagePowerCollectionUnassignPower.Builder> {
    private NetMessagePowerCollectionUnassignPower() { }
    private static readonly NetMessagePowerCollectionUnassignPower defaultInstance = new NetMessagePowerCollectionUnassignPower().MakeReadOnly();
    private static readonly string[] _netMessagePowerCollectionUnassignPowerFieldNames = new string[] { "entityId", "powerProtoId" };
    private static readonly uint[] _netMessagePowerCollectionUnassignPowerFieldTags = new uint[] { 8, 16 };
    public static NetMessagePowerCollectionUnassignPower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePowerCollectionUnassignPower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePowerCollectionUnassignPower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePowerCollectionUnassignPower, NetMessagePowerCollectionUnassignPower.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePowerCollectionUnassignPower__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerProtoIdFieldNumber = 2;
    private bool hasPowerProtoId;
    private ulong powerProtoId_;
    public bool HasPowerProtoId {
      get { return hasPowerProtoId; }
    }
    public ulong PowerProtoId {
      get { return powerProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePowerCollectionUnassignPowerFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[0], EntityId);
      }
      if (hasPowerProtoId) {
        output.WriteUInt64(2, field_names[1], PowerProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePowerCollectionUnassignPower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePowerCollectionUnassignPower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePowerCollectionUnassignPower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePowerCollectionUnassignPower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePowerCollectionUnassignPower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePowerCollectionUnassignPower result;
      
      private NetMessagePowerCollectionUnassignPower PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePowerCollectionUnassignPower original = result;
          result = new NetMessagePowerCollectionUnassignPower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePowerCollectionUnassignPower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePowerCollectionUnassignPower.Descriptor; }
      }
      
      public override NetMessagePowerCollectionUnassignPower DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePowerCollectionUnassignPower.DefaultInstance; }
      }
      
      public override NetMessagePowerCollectionUnassignPower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePowerCollectionUnassignPower) {
          return MergeFrom((NetMessagePowerCollectionUnassignPower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePowerCollectionUnassignPower other) {
        if (other == global::Gazillion.NetMessagePowerCollectionUnassignPower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerProtoId) {
          PowerProtoId = other.PowerProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePowerCollectionUnassignPowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePowerCollectionUnassignPowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerProtoId = input.ReadUInt64(ref result.powerProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerProtoId {
        get { return result.hasPowerProtoId; }
      }
      public ulong PowerProtoId {
        get { return result.PowerProtoId; }
        set { SetPowerProtoId(value); }
      }
      public Builder SetPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasPowerProtoId = true;
        result.powerProtoId_ = value;
        return this;
      }
      public Builder ClearPowerProtoId() {
        PrepareBuilder();
        result.hasPowerProtoId = false;
        result.powerProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePowerCollectionUnassignPower() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdatePowerIndexProps : pb::GeneratedMessage<NetMessageUpdatePowerIndexProps, NetMessageUpdatePowerIndexProps.Builder> {
    private NetMessageUpdatePowerIndexProps() { }
    private static readonly NetMessageUpdatePowerIndexProps defaultInstance = new NetMessageUpdatePowerIndexProps().MakeReadOnly();
    private static readonly string[] _netMessageUpdatePowerIndexPropsFieldNames = new string[] { "characterLevel", "combatLevel", "entityId", "itemLevel", "itemVariation", "powerProtoId", "powerRank" };
    private static readonly uint[] _netMessageUpdatePowerIndexPropsFieldTags = new uint[] { 32, 40, 8, 48, 61, 16, 24 };
    public static NetMessageUpdatePowerIndexProps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdatePowerIndexProps DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdatePowerIndexProps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdatePowerIndexProps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdatePowerIndexProps, NetMessageUpdatePowerIndexProps.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdatePowerIndexProps__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int PowerProtoIdFieldNumber = 2;
    private bool hasPowerProtoId;
    private ulong powerProtoId_;
    public bool HasPowerProtoId {
      get { return hasPowerProtoId; }
    }
    public ulong PowerProtoId {
      get { return powerProtoId_; }
    }
    
    public const int PowerRankFieldNumber = 3;
    private bool hasPowerRank;
    private int powerRank_;
    public bool HasPowerRank {
      get { return hasPowerRank; }
    }
    public int PowerRank {
      get { return powerRank_; }
    }
    
    public const int CharacterLevelFieldNumber = 4;
    private bool hasCharacterLevel;
    private int characterLevel_;
    public bool HasCharacterLevel {
      get { return hasCharacterLevel; }
    }
    public int CharacterLevel {
      get { return characterLevel_; }
    }
    
    public const int CombatLevelFieldNumber = 5;
    private bool hasCombatLevel;
    private int combatLevel_;
    public bool HasCombatLevel {
      get { return hasCombatLevel; }
    }
    public int CombatLevel {
      get { return combatLevel_; }
    }
    
    public const int ItemLevelFieldNumber = 6;
    private bool hasItemLevel;
    private int itemLevel_;
    public bool HasItemLevel {
      get { return hasItemLevel; }
    }
    public int ItemLevel {
      get { return itemLevel_; }
    }
    
    public const int ItemVariationFieldNumber = 7;
    private bool hasItemVariation;
    private float itemVariation_;
    public bool HasItemVariation {
      get { return hasItemVariation; }
    }
    public float ItemVariation {
      get { return itemVariation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasPowerProtoId) return false;
        if (!hasPowerRank) return false;
        if (!hasCharacterLevel) return false;
        if (!hasCombatLevel) return false;
        if (!hasItemLevel) return false;
        if (!hasItemVariation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdatePowerIndexPropsFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[2], EntityId);
      }
      if (hasPowerProtoId) {
        output.WriteUInt64(2, field_names[5], PowerProtoId);
      }
      if (hasPowerRank) {
        output.WriteInt32(3, field_names[6], PowerRank);
      }
      if (hasCharacterLevel) {
        output.WriteInt32(4, field_names[0], CharacterLevel);
      }
      if (hasCombatLevel) {
        output.WriteInt32(5, field_names[1], CombatLevel);
      }
      if (hasItemLevel) {
        output.WriteInt32(6, field_names[3], ItemLevel);
      }
      if (hasItemVariation) {
        output.WriteFloat(7, field_names[4], ItemVariation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PowerProtoId);
      }
      if (hasPowerRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, PowerRank);
      }
      if (hasCharacterLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CharacterLevel);
      }
      if (hasCombatLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, CombatLevel);
      }
      if (hasItemLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ItemLevel);
      }
      if (hasItemVariation) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, ItemVariation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdatePowerIndexProps ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdatePowerIndexProps MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdatePowerIndexProps prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdatePowerIndexProps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdatePowerIndexProps cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdatePowerIndexProps result;
      
      private NetMessageUpdatePowerIndexProps PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdatePowerIndexProps original = result;
          result = new NetMessageUpdatePowerIndexProps();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdatePowerIndexProps MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdatePowerIndexProps.Descriptor; }
      }
      
      public override NetMessageUpdatePowerIndexProps DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdatePowerIndexProps.DefaultInstance; }
      }
      
      public override NetMessageUpdatePowerIndexProps BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdatePowerIndexProps) {
          return MergeFrom((NetMessageUpdatePowerIndexProps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdatePowerIndexProps other) {
        if (other == global::Gazillion.NetMessageUpdatePowerIndexProps.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasPowerProtoId) {
          PowerProtoId = other.PowerProtoId;
        }
        if (other.HasPowerRank) {
          PowerRank = other.PowerRank;
        }
        if (other.HasCharacterLevel) {
          CharacterLevel = other.CharacterLevel;
        }
        if (other.HasCombatLevel) {
          CombatLevel = other.CombatLevel;
        }
        if (other.HasItemLevel) {
          ItemLevel = other.ItemLevel;
        }
        if (other.HasItemVariation) {
          ItemVariation = other.ItemVariation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdatePowerIndexPropsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdatePowerIndexPropsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasPowerProtoId = input.ReadUInt64(ref result.powerProtoId_);
              break;
            }
            case 24: {
              result.hasPowerRank = input.ReadInt32(ref result.powerRank_);
              break;
            }
            case 32: {
              result.hasCharacterLevel = input.ReadInt32(ref result.characterLevel_);
              break;
            }
            case 40: {
              result.hasCombatLevel = input.ReadInt32(ref result.combatLevel_);
              break;
            }
            case 48: {
              result.hasItemLevel = input.ReadInt32(ref result.itemLevel_);
              break;
            }
            case 61: {
              result.hasItemVariation = input.ReadFloat(ref result.itemVariation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasPowerProtoId {
        get { return result.hasPowerProtoId; }
      }
      public ulong PowerProtoId {
        get { return result.PowerProtoId; }
        set { SetPowerProtoId(value); }
      }
      public Builder SetPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasPowerProtoId = true;
        result.powerProtoId_ = value;
        return this;
      }
      public Builder ClearPowerProtoId() {
        PrepareBuilder();
        result.hasPowerProtoId = false;
        result.powerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasPowerRank {
        get { return result.hasPowerRank; }
      }
      public int PowerRank {
        get { return result.PowerRank; }
        set { SetPowerRank(value); }
      }
      public Builder SetPowerRank(int value) {
        PrepareBuilder();
        result.hasPowerRank = true;
        result.powerRank_ = value;
        return this;
      }
      public Builder ClearPowerRank() {
        PrepareBuilder();
        result.hasPowerRank = false;
        result.powerRank_ = 0;
        return this;
      }
      
      public bool HasCharacterLevel {
        get { return result.hasCharacterLevel; }
      }
      public int CharacterLevel {
        get { return result.CharacterLevel; }
        set { SetCharacterLevel(value); }
      }
      public Builder SetCharacterLevel(int value) {
        PrepareBuilder();
        result.hasCharacterLevel = true;
        result.characterLevel_ = value;
        return this;
      }
      public Builder ClearCharacterLevel() {
        PrepareBuilder();
        result.hasCharacterLevel = false;
        result.characterLevel_ = 0;
        return this;
      }
      
      public bool HasCombatLevel {
        get { return result.hasCombatLevel; }
      }
      public int CombatLevel {
        get { return result.CombatLevel; }
        set { SetCombatLevel(value); }
      }
      public Builder SetCombatLevel(int value) {
        PrepareBuilder();
        result.hasCombatLevel = true;
        result.combatLevel_ = value;
        return this;
      }
      public Builder ClearCombatLevel() {
        PrepareBuilder();
        result.hasCombatLevel = false;
        result.combatLevel_ = 0;
        return this;
      }
      
      public bool HasItemLevel {
        get { return result.hasItemLevel; }
      }
      public int ItemLevel {
        get { return result.ItemLevel; }
        set { SetItemLevel(value); }
      }
      public Builder SetItemLevel(int value) {
        PrepareBuilder();
        result.hasItemLevel = true;
        result.itemLevel_ = value;
        return this;
      }
      public Builder ClearItemLevel() {
        PrepareBuilder();
        result.hasItemLevel = false;
        result.itemLevel_ = 0;
        return this;
      }
      
      public bool HasItemVariation {
        get { return result.hasItemVariation; }
      }
      public float ItemVariation {
        get { return result.ItemVariation; }
        set { SetItemVariation(value); }
      }
      public Builder SetItemVariation(float value) {
        PrepareBuilder();
        result.hasItemVariation = true;
        result.itemVariation_ = value;
        return this;
      }
      public Builder ClearItemVariation() {
        PrepareBuilder();
        result.hasItemVariation = false;
        result.itemVariation_ = 0F;
        return this;
      }
    }
    static NetMessageUpdatePowerIndexProps() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnWaypointUpdated : pb::GeneratedMessage<NetMessageOnWaypointUpdated, NetMessageOnWaypointUpdated.Builder> {
    private NetMessageOnWaypointUpdated() { }
    private static readonly NetMessageOnWaypointUpdated defaultInstance = new NetMessageOnWaypointUpdated().MakeReadOnly();
    private static readonly string[] _netMessageOnWaypointUpdatedFieldNames = new string[] { "idPlayer" };
    private static readonly uint[] _netMessageOnWaypointUpdatedFieldTags = new uint[] { 8 };
    public static NetMessageOnWaypointUpdated DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnWaypointUpdated DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnWaypointUpdated ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnWaypointUpdated__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnWaypointUpdated, NetMessageOnWaypointUpdated.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnWaypointUpdated__FieldAccessorTable; }
    }
    
    public const int IdPlayerFieldNumber = 1;
    private bool hasIdPlayer;
    private ulong idPlayer_;
    public bool HasIdPlayer {
      get { return hasIdPlayer; }
    }
    public ulong IdPlayer {
      get { return idPlayer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdPlayer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnWaypointUpdatedFieldNames;
      if (hasIdPlayer) {
        output.WriteUInt64(1, field_names[0], IdPlayer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdPlayer) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdPlayer);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnWaypointUpdated ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnWaypointUpdated MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnWaypointUpdated prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnWaypointUpdated, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnWaypointUpdated cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnWaypointUpdated result;
      
      private NetMessageOnWaypointUpdated PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnWaypointUpdated original = result;
          result = new NetMessageOnWaypointUpdated();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnWaypointUpdated MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnWaypointUpdated.Descriptor; }
      }
      
      public override NetMessageOnWaypointUpdated DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnWaypointUpdated.DefaultInstance; }
      }
      
      public override NetMessageOnWaypointUpdated BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnWaypointUpdated) {
          return MergeFrom((NetMessageOnWaypointUpdated) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnWaypointUpdated other) {
        if (other == global::Gazillion.NetMessageOnWaypointUpdated.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdPlayer) {
          IdPlayer = other.IdPlayer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnWaypointUpdatedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnWaypointUpdatedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdPlayer = input.ReadUInt64(ref result.idPlayer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdPlayer {
        get { return result.hasIdPlayer; }
      }
      public ulong IdPlayer {
        get { return result.IdPlayer; }
        set { SetIdPlayer(value); }
      }
      public Builder SetIdPlayer(ulong value) {
        PrepareBuilder();
        result.hasIdPlayer = true;
        result.idPlayer_ = value;
        return this;
      }
      public Builder ClearIdPlayer() {
        PrepareBuilder();
        result.hasIdPlayer = false;
        result.idPlayer_ = 0UL;
        return this;
      }
    }
    static NetMessageOnWaypointUpdated() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInternalReportPlayerLoadError : pb::GeneratedMessage<NetMessageInternalReportPlayerLoadError, NetMessageInternalReportPlayerLoadError.Builder> {
    private NetMessageInternalReportPlayerLoadError() { }
    private static readonly NetMessageInternalReportPlayerLoadError defaultInstance = new NetMessageInternalReportPlayerLoadError().MakeReadOnly();
    private static readonly string[] _netMessageInternalReportPlayerLoadErrorFieldNames = new string[] { "serverReport" };
    private static readonly uint[] _netMessageInternalReportPlayerLoadErrorFieldTags = new uint[] { 10 };
    public static NetMessageInternalReportPlayerLoadError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInternalReportPlayerLoadError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInternalReportPlayerLoadError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInternalReportPlayerLoadError, NetMessageInternalReportPlayerLoadError.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInternalReportPlayerLoadError__FieldAccessorTable; }
    }
    
    public const int ServerReportFieldNumber = 1;
    private bool hasServerReport;
    private string serverReport_ = "";
    public bool HasServerReport {
      get { return hasServerReport; }
    }
    public string ServerReport {
      get { return serverReport_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerReport) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInternalReportPlayerLoadErrorFieldNames;
      if (hasServerReport) {
        output.WriteString(1, field_names[0], ServerReport);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerReport) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ServerReport);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInternalReportPlayerLoadError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInternalReportPlayerLoadError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInternalReportPlayerLoadError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInternalReportPlayerLoadError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInternalReportPlayerLoadError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInternalReportPlayerLoadError result;
      
      private NetMessageInternalReportPlayerLoadError PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInternalReportPlayerLoadError original = result;
          result = new NetMessageInternalReportPlayerLoadError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInternalReportPlayerLoadError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInternalReportPlayerLoadError.Descriptor; }
      }
      
      public override NetMessageInternalReportPlayerLoadError DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInternalReportPlayerLoadError.DefaultInstance; }
      }
      
      public override NetMessageInternalReportPlayerLoadError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInternalReportPlayerLoadError) {
          return MergeFrom((NetMessageInternalReportPlayerLoadError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInternalReportPlayerLoadError other) {
        if (other == global::Gazillion.NetMessageInternalReportPlayerLoadError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerReport) {
          ServerReport = other.ServerReport;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInternalReportPlayerLoadErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInternalReportPlayerLoadErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasServerReport = input.ReadString(ref result.serverReport_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerReport {
        get { return result.hasServerReport; }
      }
      public string ServerReport {
        get { return result.ServerReport; }
        set { SetServerReport(value); }
      }
      public Builder SetServerReport(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerReport = true;
        result.serverReport_ = value;
        return this;
      }
      public Builder ClearServerReport() {
        PrepareBuilder();
        result.hasServerReport = false;
        result.serverReport_ = "";
        return this;
      }
    }
    static NetMessageInternalReportPlayerLoadError() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageReportEntry : pb::GeneratedMessage<MessageReportEntry, MessageReportEntry.Builder> {
    private MessageReportEntry() { }
    private static readonly MessageReportEntry defaultInstance = new MessageReportEntry().MakeReadOnly();
    private static readonly string[] _messageReportEntryFieldNames = new string[] { "messageName", "totalBytes", "totalCount" };
    private static readonly uint[] _messageReportEntryFieldTags = new uint[] { 10, 24, 16 };
    public static MessageReportEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageReportEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MessageReportEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_MessageReportEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageReportEntry, MessageReportEntry.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_MessageReportEntry__FieldAccessorTable; }
    }
    
    public const int MessageNameFieldNumber = 1;
    private bool hasMessageName;
    private string messageName_ = "";
    public bool HasMessageName {
      get { return hasMessageName; }
    }
    public string MessageName {
      get { return messageName_; }
    }
    
    public const int TotalCountFieldNumber = 2;
    private bool hasTotalCount;
    private ulong totalCount_;
    public bool HasTotalCount {
      get { return hasTotalCount; }
    }
    public ulong TotalCount {
      get { return totalCount_; }
    }
    
    public const int TotalBytesFieldNumber = 3;
    private bool hasTotalBytes;
    private ulong totalBytes_;
    public bool HasTotalBytes {
      get { return hasTotalBytes; }
    }
    public ulong TotalBytes {
      get { return totalBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageName) return false;
        if (!hasTotalCount) return false;
        if (!hasTotalBytes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageReportEntryFieldNames;
      if (hasMessageName) {
        output.WriteString(1, field_names[0], MessageName);
      }
      if (hasTotalCount) {
        output.WriteUInt64(2, field_names[2], TotalCount);
      }
      if (hasTotalBytes) {
        output.WriteUInt64(3, field_names[1], TotalBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageName);
      }
      if (hasTotalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TotalCount);
      }
      if (hasTotalBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, TotalBytes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MessageReportEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageReportEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageReportEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageReportEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MessageReportEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageReportEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MessageReportEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MessageReportEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MessageReportEntry result;
      
      private MessageReportEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          MessageReportEntry original = result;
          result = new MessageReportEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MessageReportEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.MessageReportEntry.Descriptor; }
      }
      
      public override MessageReportEntry DefaultInstanceForType {
        get { return global::Gazillion.MessageReportEntry.DefaultInstance; }
      }
      
      public override MessageReportEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageReportEntry) {
          return MergeFrom((MessageReportEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageReportEntry other) {
        if (other == global::Gazillion.MessageReportEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageName) {
          MessageName = other.MessageName;
        }
        if (other.HasTotalCount) {
          TotalCount = other.TotalCount;
        }
        if (other.HasTotalBytes) {
          TotalBytes = other.TotalBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageReportEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageReportEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageName = input.ReadString(ref result.messageName_);
              break;
            }
            case 16: {
              result.hasTotalCount = input.ReadUInt64(ref result.totalCount_);
              break;
            }
            case 24: {
              result.hasTotalBytes = input.ReadUInt64(ref result.totalBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageName {
        get { return result.hasMessageName; }
      }
      public string MessageName {
        get { return result.MessageName; }
        set { SetMessageName(value); }
      }
      public Builder SetMessageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageName = true;
        result.messageName_ = value;
        return this;
      }
      public Builder ClearMessageName() {
        PrepareBuilder();
        result.hasMessageName = false;
        result.messageName_ = "";
        return this;
      }
      
      public bool HasTotalCount {
        get { return result.hasTotalCount; }
      }
      public ulong TotalCount {
        get { return result.TotalCount; }
        set { SetTotalCount(value); }
      }
      public Builder SetTotalCount(ulong value) {
        PrepareBuilder();
        result.hasTotalCount = true;
        result.totalCount_ = value;
        return this;
      }
      public Builder ClearTotalCount() {
        PrepareBuilder();
        result.hasTotalCount = false;
        result.totalCount_ = 0UL;
        return this;
      }
      
      public bool HasTotalBytes {
        get { return result.hasTotalBytes; }
      }
      public ulong TotalBytes {
        get { return result.TotalBytes; }
        set { SetTotalBytes(value); }
      }
      public Builder SetTotalBytes(ulong value) {
        PrepareBuilder();
        result.hasTotalBytes = true;
        result.totalBytes_ = value;
        return this;
      }
      public Builder ClearTotalBytes() {
        PrepareBuilder();
        result.hasTotalBytes = false;
        result.totalBytes_ = 0UL;
        return this;
      }
    }
    static MessageReportEntry() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMessageReport : pb::GeneratedMessage<NetMessageMessageReport, NetMessageMessageReport.Builder> {
    private NetMessageMessageReport() { }
    private static readonly NetMessageMessageReport defaultInstance = new NetMessageMessageReport().MakeReadOnly();
    private static readonly string[] _netMessageMessageReportFieldNames = new string[] { "reportDirection", "reportSource", "reports" };
    private static readonly uint[] _netMessageMessageReportFieldTags = new uint[] { 24, 16, 10 };
    public static NetMessageMessageReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMessageReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMessageReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMessageReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMessageReport, NetMessageMessageReport.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMessageReport__FieldAccessorTable; }
    }
    
    public const int ReportsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.MessageReportEntry> reports_ = new pbc::PopsicleList<global::Gazillion.MessageReportEntry>();
    public scg::IList<global::Gazillion.MessageReportEntry> ReportsList {
      get { return reports_; }
    }
    public int ReportsCount {
      get { return reports_.Count; }
    }
    public global::Gazillion.MessageReportEntry GetReports(int index) {
      return reports_[index];
    }
    
    public const int ReportSourceFieldNumber = 2;
    private bool hasReportSource;
    private uint reportSource_;
    public bool HasReportSource {
      get { return hasReportSource; }
    }
    public uint ReportSource {
      get { return reportSource_; }
    }
    
    public const int ReportDirectionFieldNumber = 3;
    private bool hasReportDirection;
    private uint reportDirection_;
    public bool HasReportDirection {
      get { return hasReportDirection; }
    }
    public uint ReportDirection {
      get { return reportDirection_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReportSource) return false;
        if (!hasReportDirection) return false;
        foreach (global::Gazillion.MessageReportEntry element in ReportsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMessageReportFieldNames;
      if (reports_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], reports_);
      }
      if (hasReportSource) {
        output.WriteUInt32(2, field_names[1], ReportSource);
      }
      if (hasReportDirection) {
        output.WriteUInt32(3, field_names[0], ReportDirection);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.MessageReportEntry element in ReportsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasReportSource) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ReportSource);
      }
      if (hasReportDirection) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ReportDirection);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMessageReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMessageReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMessageReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMessageReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMessageReport MakeReadOnly() {
      reports_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMessageReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMessageReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMessageReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMessageReport result;
      
      private NetMessageMessageReport PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMessageReport original = result;
          result = new NetMessageMessageReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMessageReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMessageReport.Descriptor; }
      }
      
      public override NetMessageMessageReport DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMessageReport.DefaultInstance; }
      }
      
      public override NetMessageMessageReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMessageReport) {
          return MergeFrom((NetMessageMessageReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMessageReport other) {
        if (other == global::Gazillion.NetMessageMessageReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.reports_.Count != 0) {
          result.reports_.Add(other.reports_);
        }
        if (other.HasReportSource) {
          ReportSource = other.ReportSource;
        }
        if (other.HasReportDirection) {
          ReportDirection = other.ReportDirection;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMessageReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMessageReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.reports_, global::Gazillion.MessageReportEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasReportSource = input.ReadUInt32(ref result.reportSource_);
              break;
            }
            case 24: {
              result.hasReportDirection = input.ReadUInt32(ref result.reportDirection_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.MessageReportEntry> ReportsList {
        get { return PrepareBuilder().reports_; }
      }
      public int ReportsCount {
        get { return result.ReportsCount; }
      }
      public global::Gazillion.MessageReportEntry GetReports(int index) {
        return result.GetReports(index);
      }
      public Builder SetReports(int index, global::Gazillion.MessageReportEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reports_[index] = value;
        return this;
      }
      public Builder SetReports(int index, global::Gazillion.MessageReportEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reports_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReports(global::Gazillion.MessageReportEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reports_.Add(value);
        return this;
      }
      public Builder AddReports(global::Gazillion.MessageReportEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reports_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReports(scg::IEnumerable<global::Gazillion.MessageReportEntry> values) {
        PrepareBuilder();
        result.reports_.Add(values);
        return this;
      }
      public Builder ClearReports() {
        PrepareBuilder();
        result.reports_.Clear();
        return this;
      }
      
      public bool HasReportSource {
        get { return result.hasReportSource; }
      }
      public uint ReportSource {
        get { return result.ReportSource; }
        set { SetReportSource(value); }
      }
      public Builder SetReportSource(uint value) {
        PrepareBuilder();
        result.hasReportSource = true;
        result.reportSource_ = value;
        return this;
      }
      public Builder ClearReportSource() {
        PrepareBuilder();
        result.hasReportSource = false;
        result.reportSource_ = 0;
        return this;
      }
      
      public bool HasReportDirection {
        get { return result.hasReportDirection; }
      }
      public uint ReportDirection {
        get { return result.ReportDirection; }
        set { SetReportDirection(value); }
      }
      public Builder SetReportDirection(uint value) {
        PrepareBuilder();
        result.hasReportDirection = true;
        result.reportDirection_ = value;
        return this;
      }
      public Builder ClearReportDirection() {
        PrepareBuilder();
        result.hasReportDirection = false;
        result.reportDirection_ = 0;
        return this;
      }
    }
    static NetMessageMessageReport() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateMiniMap : pb::GeneratedMessage<NetMessageUpdateMiniMap, NetMessageUpdateMiniMap.Builder> {
    private NetMessageUpdateMiniMap() { }
    private static readonly NetMessageUpdateMiniMap defaultInstance = new NetMessageUpdateMiniMap().MakeReadOnly();
    private static readonly string[] _netMessageUpdateMiniMapFieldNames = new string[] { "archiveData" };
    private static readonly uint[] _netMessageUpdateMiniMapFieldTags = new uint[] { 10 };
    public static NetMessageUpdateMiniMap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateMiniMap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateMiniMap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateMiniMap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateMiniMap, NetMessageUpdateMiniMap.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateMiniMap__FieldAccessorTable; }
    }
    
    public const int ArchiveDataFieldNumber = 1;
    private bool hasArchiveData;
    private pb::ByteString archiveData_ = pb::ByteString.Empty;
    public bool HasArchiveData {
      get { return hasArchiveData; }
    }
    public pb::ByteString ArchiveData {
      get { return archiveData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasArchiveData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateMiniMapFieldNames;
      if (hasArchiveData) {
        output.WriteBytes(1, field_names[0], ArchiveData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasArchiveData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, ArchiveData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateMiniMap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateMiniMap MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateMiniMap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateMiniMap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateMiniMap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateMiniMap result;
      
      private NetMessageUpdateMiniMap PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateMiniMap original = result;
          result = new NetMessageUpdateMiniMap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateMiniMap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateMiniMap.Descriptor; }
      }
      
      public override NetMessageUpdateMiniMap DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateMiniMap.DefaultInstance; }
      }
      
      public override NetMessageUpdateMiniMap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateMiniMap) {
          return MergeFrom((NetMessageUpdateMiniMap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateMiniMap other) {
        if (other == global::Gazillion.NetMessageUpdateMiniMap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArchiveData) {
          ArchiveData = other.ArchiveData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateMiniMapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateMiniMapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasArchiveData = input.ReadBytes(ref result.archiveData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArchiveData {
        get { return result.hasArchiveData; }
      }
      public pb::ByteString ArchiveData {
        get { return result.ArchiveData; }
        set { SetArchiveData(value); }
      }
      public Builder SetArchiveData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArchiveData = true;
        result.archiveData_ = value;
        return this;
      }
      public Builder ClearArchiveData() {
        PrepareBuilder();
        result.hasArchiveData = false;
        result.archiveData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageUpdateMiniMap() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMoveToAlternateLandingSpot : pb::GeneratedMessage<NetMessageMoveToAlternateLandingSpot, NetMessageMoveToAlternateLandingSpot.Builder> {
    private NetMessageMoveToAlternateLandingSpot() { }
    private static readonly NetMessageMoveToAlternateLandingSpot defaultInstance = new NetMessageMoveToAlternateLandingSpot().MakeReadOnly();
    private static readonly string[] _netMessageMoveToAlternateLandingSpotFieldNames = new string[] { "idEntity", "landingPosition", "landingPowerprototypeId" };
    private static readonly uint[] _netMessageMoveToAlternateLandingSpotFieldTags = new uint[] { 8, 18, 24 };
    public static NetMessageMoveToAlternateLandingSpot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMoveToAlternateLandingSpot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMoveToAlternateLandingSpot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMoveToAlternateLandingSpot, NetMessageMoveToAlternateLandingSpot.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMoveToAlternateLandingSpot__FieldAccessorTable; }
    }
    
    public const int IdEntityFieldNumber = 1;
    private bool hasIdEntity;
    private ulong idEntity_;
    public bool HasIdEntity {
      get { return hasIdEntity; }
    }
    public ulong IdEntity {
      get { return idEntity_; }
    }
    
    public const int LandingPositionFieldNumber = 2;
    private bool hasLandingPosition;
    private global::Gazillion.NetStructPoint3 landingPosition_;
    public bool HasLandingPosition {
      get { return hasLandingPosition; }
    }
    public global::Gazillion.NetStructPoint3 LandingPosition {
      get { return landingPosition_ ?? global::Gazillion.NetStructPoint3.DefaultInstance; }
    }
    
    public const int LandingPowerprototypeIdFieldNumber = 3;
    private bool hasLandingPowerprototypeId;
    private ulong landingPowerprototypeId_;
    public bool HasLandingPowerprototypeId {
      get { return hasLandingPowerprototypeId; }
    }
    public ulong LandingPowerprototypeId {
      get { return landingPowerprototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdEntity) return false;
        if (!hasLandingPosition) return false;
        if (!hasLandingPowerprototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMoveToAlternateLandingSpotFieldNames;
      if (hasIdEntity) {
        output.WriteUInt64(1, field_names[0], IdEntity);
      }
      if (hasLandingPosition) {
        output.WriteMessage(2, field_names[1], LandingPosition);
      }
      if (hasLandingPowerprototypeId) {
        output.WriteUInt64(3, field_names[2], LandingPowerprototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdEntity) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, IdEntity);
      }
      if (hasLandingPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, LandingPosition);
      }
      if (hasLandingPowerprototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, LandingPowerprototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMoveToAlternateLandingSpot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMoveToAlternateLandingSpot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMoveToAlternateLandingSpot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMoveToAlternateLandingSpot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMoveToAlternateLandingSpot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMoveToAlternateLandingSpot result;
      
      private NetMessageMoveToAlternateLandingSpot PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMoveToAlternateLandingSpot original = result;
          result = new NetMessageMoveToAlternateLandingSpot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMoveToAlternateLandingSpot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMoveToAlternateLandingSpot.Descriptor; }
      }
      
      public override NetMessageMoveToAlternateLandingSpot DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMoveToAlternateLandingSpot.DefaultInstance; }
      }
      
      public override NetMessageMoveToAlternateLandingSpot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMoveToAlternateLandingSpot) {
          return MergeFrom((NetMessageMoveToAlternateLandingSpot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMoveToAlternateLandingSpot other) {
        if (other == global::Gazillion.NetMessageMoveToAlternateLandingSpot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdEntity) {
          IdEntity = other.IdEntity;
        }
        if (other.HasLandingPosition) {
          MergeLandingPosition(other.LandingPosition);
        }
        if (other.HasLandingPowerprototypeId) {
          LandingPowerprototypeId = other.LandingPowerprototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMoveToAlternateLandingSpotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMoveToAlternateLandingSpotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdEntity = input.ReadUInt64(ref result.idEntity_);
              break;
            }
            case 18: {
              global::Gazillion.NetStructPoint3.Builder subBuilder = global::Gazillion.NetStructPoint3.CreateBuilder();
              if (result.hasLandingPosition) {
                subBuilder.MergeFrom(LandingPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LandingPosition = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasLandingPowerprototypeId = input.ReadUInt64(ref result.landingPowerprototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdEntity {
        get { return result.hasIdEntity; }
      }
      public ulong IdEntity {
        get { return result.IdEntity; }
        set { SetIdEntity(value); }
      }
      public Builder SetIdEntity(ulong value) {
        PrepareBuilder();
        result.hasIdEntity = true;
        result.idEntity_ = value;
        return this;
      }
      public Builder ClearIdEntity() {
        PrepareBuilder();
        result.hasIdEntity = false;
        result.idEntity_ = 0UL;
        return this;
      }
      
      public bool HasLandingPosition {
       get { return result.hasLandingPosition; }
      }
      public global::Gazillion.NetStructPoint3 LandingPosition {
        get { return result.LandingPosition; }
        set { SetLandingPosition(value); }
      }
      public Builder SetLandingPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLandingPosition = true;
        result.landingPosition_ = value;
        return this;
      }
      public Builder SetLandingPosition(global::Gazillion.NetStructPoint3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLandingPosition = true;
        result.landingPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLandingPosition(global::Gazillion.NetStructPoint3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLandingPosition &&
            result.landingPosition_ != global::Gazillion.NetStructPoint3.DefaultInstance) {
            result.landingPosition_ = global::Gazillion.NetStructPoint3.CreateBuilder(result.landingPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.landingPosition_ = value;
        }
        result.hasLandingPosition = true;
        return this;
      }
      public Builder ClearLandingPosition() {
        PrepareBuilder();
        result.hasLandingPosition = false;
        result.landingPosition_ = null;
        return this;
      }
      
      public bool HasLandingPowerprototypeId {
        get { return result.hasLandingPowerprototypeId; }
      }
      public ulong LandingPowerprototypeId {
        get { return result.LandingPowerprototypeId; }
        set { SetLandingPowerprototypeId(value); }
      }
      public Builder SetLandingPowerprototypeId(ulong value) {
        PrepareBuilder();
        result.hasLandingPowerprototypeId = true;
        result.landingPowerprototypeId_ = value;
        return this;
      }
      public Builder ClearLandingPowerprototypeId() {
        PrepareBuilder();
        result.hasLandingPowerprototypeId = false;
        result.landingPowerprototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessageMoveToAlternateLandingSpot() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConsoleMessage : pb::GeneratedMessage<NetMessageConsoleMessage, NetMessageConsoleMessage.Builder> {
    private NetMessageConsoleMessage() { }
    private static readonly NetMessageConsoleMessage defaultInstance = new NetMessageConsoleMessage().MakeReadOnly();
    private static readonly string[] _netMessageConsoleMessageFieldNames = new string[] { "messageText" };
    private static readonly uint[] _netMessageConsoleMessageFieldTags = new uint[] { 10 };
    public static NetMessageConsoleMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConsoleMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConsoleMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConsoleMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConsoleMessage, NetMessageConsoleMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConsoleMessage__FieldAccessorTable; }
    }
    
    public const int MessageTextFieldNumber = 1;
    private bool hasMessageText;
    private string messageText_ = "";
    public bool HasMessageText {
      get { return hasMessageText; }
    }
    public string MessageText {
      get { return messageText_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConsoleMessageFieldNames;
      if (hasMessageText) {
        output.WriteString(1, field_names[0], MessageText);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageText);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConsoleMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConsoleMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConsoleMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConsoleMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConsoleMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConsoleMessage result;
      
      private NetMessageConsoleMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConsoleMessage original = result;
          result = new NetMessageConsoleMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConsoleMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConsoleMessage.Descriptor; }
      }
      
      public override NetMessageConsoleMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConsoleMessage.DefaultInstance; }
      }
      
      public override NetMessageConsoleMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConsoleMessage) {
          return MergeFrom((NetMessageConsoleMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConsoleMessage other) {
        if (other == global::Gazillion.NetMessageConsoleMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageText) {
          MessageText = other.MessageText;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConsoleMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConsoleMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageText = input.ReadString(ref result.messageText_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageText {
        get { return result.hasMessageText; }
      }
      public string MessageText {
        get { return result.MessageText; }
        set { SetMessageText(value); }
      }
      public Builder SetMessageText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageText = true;
        result.messageText_ = value;
        return this;
      }
      public Builder ClearMessageText() {
        PrepareBuilder();
        result.hasMessageText = false;
        result.messageText_ = "";
        return this;
      }
    }
    static NetMessageConsoleMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAvatarOnKilledInfoOverride : pb::GeneratedMessage<NetMessageAvatarOnKilledInfoOverride, NetMessageAvatarOnKilledInfoOverride.Builder> {
    private NetMessageAvatarOnKilledInfoOverride() { }
    private static readonly NetMessageAvatarOnKilledInfoOverride defaultInstance = new NetMessageAvatarOnKilledInfoOverride().MakeReadOnly();
    private static readonly string[] _netMessageAvatarOnKilledInfoOverrideFieldNames = new string[] { "avatarOnKilledInfoProtoId", "regionId" };
    private static readonly uint[] _netMessageAvatarOnKilledInfoOverrideFieldTags = new uint[] { 16, 8 };
    public static NetMessageAvatarOnKilledInfoOverride DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAvatarOnKilledInfoOverride DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAvatarOnKilledInfoOverride ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAvatarOnKilledInfoOverride, NetMessageAvatarOnKilledInfoOverride.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAvatarOnKilledInfoOverride__FieldAccessorTable; }
    }
    
    public const int RegionIdFieldNumber = 1;
    private bool hasRegionId;
    private ulong regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public ulong RegionId {
      get { return regionId_; }
    }
    
    public const int AvatarOnKilledInfoProtoIdFieldNumber = 2;
    private bool hasAvatarOnKilledInfoProtoId;
    private ulong avatarOnKilledInfoProtoId_;
    public bool HasAvatarOnKilledInfoProtoId {
      get { return hasAvatarOnKilledInfoProtoId; }
    }
    public ulong AvatarOnKilledInfoProtoId {
      get { return avatarOnKilledInfoProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegionId) return false;
        if (!hasAvatarOnKilledInfoProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAvatarOnKilledInfoOverrideFieldNames;
      if (hasRegionId) {
        output.WriteUInt64(1, field_names[1], RegionId);
      }
      if (hasAvatarOnKilledInfoProtoId) {
        output.WriteUInt64(2, field_names[0], AvatarOnKilledInfoProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RegionId);
      }
      if (hasAvatarOnKilledInfoProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, AvatarOnKilledInfoProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAvatarOnKilledInfoOverride ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAvatarOnKilledInfoOverride MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAvatarOnKilledInfoOverride prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAvatarOnKilledInfoOverride, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAvatarOnKilledInfoOverride cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAvatarOnKilledInfoOverride result;
      
      private NetMessageAvatarOnKilledInfoOverride PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAvatarOnKilledInfoOverride original = result;
          result = new NetMessageAvatarOnKilledInfoOverride();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAvatarOnKilledInfoOverride MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAvatarOnKilledInfoOverride.Descriptor; }
      }
      
      public override NetMessageAvatarOnKilledInfoOverride DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAvatarOnKilledInfoOverride.DefaultInstance; }
      }
      
      public override NetMessageAvatarOnKilledInfoOverride BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAvatarOnKilledInfoOverride) {
          return MergeFrom((NetMessageAvatarOnKilledInfoOverride) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAvatarOnKilledInfoOverride other) {
        if (other == global::Gazillion.NetMessageAvatarOnKilledInfoOverride.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasAvatarOnKilledInfoProtoId) {
          AvatarOnKilledInfoProtoId = other.AvatarOnKilledInfoProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAvatarOnKilledInfoOverrideFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAvatarOnKilledInfoOverrideFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegionId = input.ReadUInt64(ref result.regionId_);
              break;
            }
            case 16: {
              result.hasAvatarOnKilledInfoProtoId = input.ReadUInt64(ref result.avatarOnKilledInfoProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public ulong RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(ulong value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0UL;
        return this;
      }
      
      public bool HasAvatarOnKilledInfoProtoId {
        get { return result.hasAvatarOnKilledInfoProtoId; }
      }
      public ulong AvatarOnKilledInfoProtoId {
        get { return result.AvatarOnKilledInfoProtoId; }
        set { SetAvatarOnKilledInfoProtoId(value); }
      }
      public Builder SetAvatarOnKilledInfoProtoId(ulong value) {
        PrepareBuilder();
        result.hasAvatarOnKilledInfoProtoId = true;
        result.avatarOnKilledInfoProtoId_ = value;
        return this;
      }
      public Builder ClearAvatarOnKilledInfoProtoId() {
        PrepareBuilder();
        result.hasAvatarOnKilledInfoProtoId = false;
        result.avatarOnKilledInfoProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageAvatarOnKilledInfoOverride() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrect : pb::GeneratedMessage<NetMessageOnResurrect, NetMessageOnResurrect.Builder> {
    private NetMessageOnResurrect() { }
    private static readonly NetMessageOnResurrect defaultInstance = new NetMessageOnResurrect().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageOnResurrectFieldTags = new uint[] { 8 };
    public static NetMessageOnResurrect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrect, NetMessageOnResurrect.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrect__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrect result;
      
      private NetMessageOnResurrect PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrect original = result;
          result = new NetMessageOnResurrect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrect.Descriptor; }
      }
      
      public override NetMessageOnResurrect DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrect.DefaultInstance; }
      }
      
      public override NetMessageOnResurrect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrect) {
          return MergeFrom((NetMessageOnResurrect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrect other) {
        if (other == global::Gazillion.NetMessageOnResurrect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrect() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrectRequest : pb::GeneratedMessage<NetMessageOnResurrectRequest, NetMessageOnResurrectRequest.Builder> {
    private NetMessageOnResurrectRequest() { }
    private static readonly NetMessageOnResurrectRequest defaultInstance = new NetMessageOnResurrectRequest().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectRequestFieldNames = new string[] { "resurrectorId", "targetId" };
    private static readonly uint[] _netMessageOnResurrectRequestFieldTags = new uint[] { 16, 8 };
    public static NetMessageOnResurrectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrectRequest, NetMessageOnResurrectRequest.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int ResurrectorIdFieldNumber = 2;
    private bool hasResurrectorId;
    private ulong resurrectorId_;
    public bool HasResurrectorId {
      get { return hasResurrectorId; }
    }
    public ulong ResurrectorId {
      get { return resurrectorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasResurrectorId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectRequestFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasResurrectorId) {
        output.WriteUInt64(2, field_names[0], ResurrectorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasResurrectorId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ResurrectorId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrectRequest result;
      
      private NetMessageOnResurrectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrectRequest original = result;
          result = new NetMessageOnResurrectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrectRequest.Descriptor; }
      }
      
      public override NetMessageOnResurrectRequest DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrectRequest.DefaultInstance; }
      }
      
      public override NetMessageOnResurrectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrectRequest) {
          return MergeFrom((NetMessageOnResurrectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrectRequest other) {
        if (other == global::Gazillion.NetMessageOnResurrectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasResurrectorId) {
          ResurrectorId = other.ResurrectorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              result.hasResurrectorId = input.ReadUInt64(ref result.resurrectorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasResurrectorId {
        get { return result.hasResurrectorId; }
      }
      public ulong ResurrectorId {
        get { return result.ResurrectorId; }
        set { SetResurrectorId(value); }
      }
      public Builder SetResurrectorId(ulong value) {
        PrepareBuilder();
        result.hasResurrectorId = true;
        result.resurrectorId_ = value;
        return this;
      }
      public Builder ClearResurrectorId() {
        PrepareBuilder();
        result.hasResurrectorId = false;
        result.resurrectorId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrectRequest() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOnResurrectDecline : pb::GeneratedMessage<NetMessageOnResurrectDecline, NetMessageOnResurrectDecline.Builder> {
    private NetMessageOnResurrectDecline() { }
    private static readonly NetMessageOnResurrectDecline defaultInstance = new NetMessageOnResurrectDecline().MakeReadOnly();
    private static readonly string[] _netMessageOnResurrectDeclineFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageOnResurrectDeclineFieldTags = new uint[] { 8 };
    public static NetMessageOnResurrectDecline DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOnResurrectDecline DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOnResurrectDecline ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectDecline__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOnResurrectDecline, NetMessageOnResurrectDecline.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOnResurrectDecline__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOnResurrectDeclineFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOnResurrectDecline ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOnResurrectDecline MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOnResurrectDecline prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOnResurrectDecline, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOnResurrectDecline cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOnResurrectDecline result;
      
      private NetMessageOnResurrectDecline PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOnResurrectDecline original = result;
          result = new NetMessageOnResurrectDecline();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOnResurrectDecline MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOnResurrectDecline.Descriptor; }
      }
      
      public override NetMessageOnResurrectDecline DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOnResurrectDecline.DefaultInstance; }
      }
      
      public override NetMessageOnResurrectDecline BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOnResurrectDecline) {
          return MergeFrom((NetMessageOnResurrectDecline) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOnResurrectDecline other) {
        if (other == global::Gazillion.NetMessageOnResurrectDecline.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOnResurrectDeclineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOnResurrectDeclineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageOnResurrectDecline() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReloadPackagesStart : pb::GeneratedMessage<NetMessageReloadPackagesStart, NetMessageReloadPackagesStart.Builder> {
    private NetMessageReloadPackagesStart() { }
    private static readonly NetMessageReloadPackagesStart defaultInstance = new NetMessageReloadPackagesStart().MakeReadOnly();
    private static readonly string[] _netMessageReloadPackagesStartFieldNames = new string[] {  };
    private static readonly uint[] _netMessageReloadPackagesStartFieldTags = new uint[] {  };
    public static NetMessageReloadPackagesStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReloadPackagesStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReloadPackagesStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReloadPackagesStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReloadPackagesStart, NetMessageReloadPackagesStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReloadPackagesStart__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReloadPackagesStartFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReloadPackagesStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReloadPackagesStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReloadPackagesStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReloadPackagesStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReloadPackagesStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReloadPackagesStart result;
      
      private NetMessageReloadPackagesStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReloadPackagesStart original = result;
          result = new NetMessageReloadPackagesStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReloadPackagesStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReloadPackagesStart.Descriptor; }
      }
      
      public override NetMessageReloadPackagesStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReloadPackagesStart.DefaultInstance; }
      }
      
      public override NetMessageReloadPackagesStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReloadPackagesStart) {
          return MergeFrom((NetMessageReloadPackagesStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReloadPackagesStart other) {
        if (other == global::Gazillion.NetMessageReloadPackagesStart.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReloadPackagesStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReloadPackagesStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageReloadPackagesStart() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayStoryBanter : pb::GeneratedMessage<NetMessagePlayStoryBanter, NetMessagePlayStoryBanter.Builder> {
    private NetMessagePlayStoryBanter() { }
    private static readonly NetMessagePlayStoryBanter defaultInstance = new NetMessagePlayStoryBanter().MakeReadOnly();
    private static readonly string[] _netMessagePlayStoryBanterFieldNames = new string[] { "banterAssetId" };
    private static readonly uint[] _netMessagePlayStoryBanterFieldTags = new uint[] { 8 };
    public static NetMessagePlayStoryBanter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayStoryBanter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayStoryBanter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayStoryBanter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayStoryBanter, NetMessagePlayStoryBanter.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayStoryBanter__FieldAccessorTable; }
    }
    
    public const int BanterAssetIdFieldNumber = 1;
    private bool hasBanterAssetId;
    private ulong banterAssetId_;
    public bool HasBanterAssetId {
      get { return hasBanterAssetId; }
    }
    public ulong BanterAssetId {
      get { return banterAssetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBanterAssetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayStoryBanterFieldNames;
      if (hasBanterAssetId) {
        output.WriteUInt64(1, field_names[0], BanterAssetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBanterAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, BanterAssetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayStoryBanter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayStoryBanter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayStoryBanter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayStoryBanter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayStoryBanter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayStoryBanter result;
      
      private NetMessagePlayStoryBanter PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayStoryBanter original = result;
          result = new NetMessagePlayStoryBanter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayStoryBanter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayStoryBanter.Descriptor; }
      }
      
      public override NetMessagePlayStoryBanter DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayStoryBanter.DefaultInstance; }
      }
      
      public override NetMessagePlayStoryBanter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayStoryBanter) {
          return MergeFrom((NetMessagePlayStoryBanter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayStoryBanter other) {
        if (other == global::Gazillion.NetMessagePlayStoryBanter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBanterAssetId) {
          BanterAssetId = other.BanterAssetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayStoryBanterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayStoryBanterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBanterAssetId = input.ReadUInt64(ref result.banterAssetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBanterAssetId {
        get { return result.hasBanterAssetId; }
      }
      public ulong BanterAssetId {
        get { return result.BanterAssetId; }
        set { SetBanterAssetId(value); }
      }
      public Builder SetBanterAssetId(ulong value) {
        PrepareBuilder();
        result.hasBanterAssetId = true;
        result.banterAssetId_ = value;
        return this;
      }
      public Builder ClearBanterAssetId() {
        PrepareBuilder();
        result.hasBanterAssetId = false;
        result.banterAssetId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayStoryBanter() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayUISoundTheme : pb::GeneratedMessage<NetMessagePlayUISoundTheme, NetMessagePlayUISoundTheme.Builder> {
    private NetMessagePlayUISoundTheme() { }
    private static readonly NetMessagePlayUISoundTheme defaultInstance = new NetMessagePlayUISoundTheme().MakeReadOnly();
    private static readonly string[] _netMessagePlayUISoundThemeFieldNames = new string[] { "soundThemeAssetId" };
    private static readonly uint[] _netMessagePlayUISoundThemeFieldTags = new uint[] { 8 };
    public static NetMessagePlayUISoundTheme DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayUISoundTheme DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayUISoundTheme ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayUISoundTheme__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayUISoundTheme, NetMessagePlayUISoundTheme.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayUISoundTheme__FieldAccessorTable; }
    }
    
    public const int SoundThemeAssetIdFieldNumber = 1;
    private bool hasSoundThemeAssetId;
    private ulong soundThemeAssetId_;
    public bool HasSoundThemeAssetId {
      get { return hasSoundThemeAssetId; }
    }
    public ulong SoundThemeAssetId {
      get { return soundThemeAssetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSoundThemeAssetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayUISoundThemeFieldNames;
      if (hasSoundThemeAssetId) {
        output.WriteUInt64(1, field_names[0], SoundThemeAssetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSoundThemeAssetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SoundThemeAssetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayUISoundTheme ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayUISoundTheme ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayUISoundTheme MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayUISoundTheme prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayUISoundTheme, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayUISoundTheme cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayUISoundTheme result;
      
      private NetMessagePlayUISoundTheme PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayUISoundTheme original = result;
          result = new NetMessagePlayUISoundTheme();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayUISoundTheme MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayUISoundTheme.Descriptor; }
      }
      
      public override NetMessagePlayUISoundTheme DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayUISoundTheme.DefaultInstance; }
      }
      
      public override NetMessagePlayUISoundTheme BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayUISoundTheme) {
          return MergeFrom((NetMessagePlayUISoundTheme) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayUISoundTheme other) {
        if (other == global::Gazillion.NetMessagePlayUISoundTheme.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSoundThemeAssetId) {
          SoundThemeAssetId = other.SoundThemeAssetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayUISoundThemeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayUISoundThemeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSoundThemeAssetId = input.ReadUInt64(ref result.soundThemeAssetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSoundThemeAssetId {
        get { return result.hasSoundThemeAssetId; }
      }
      public ulong SoundThemeAssetId {
        get { return result.SoundThemeAssetId; }
        set { SetSoundThemeAssetId(value); }
      }
      public Builder SetSoundThemeAssetId(ulong value) {
        PrepareBuilder();
        result.hasSoundThemeAssetId = true;
        result.soundThemeAssetId_ = value;
        return this;
      }
      public Builder ClearSoundThemeAssetId() {
        PrepareBuilder();
        result.hasSoundThemeAssetId = false;
        result.soundThemeAssetId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayUISoundTheme() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayKismetSeq : pb::GeneratedMessage<NetMessagePlayKismetSeq, NetMessagePlayKismetSeq.Builder> {
    private NetMessagePlayKismetSeq() { }
    private static readonly NetMessagePlayKismetSeq defaultInstance = new NetMessagePlayKismetSeq().MakeReadOnly();
    private static readonly string[] _netMessagePlayKismetSeqFieldNames = new string[] { "kismetSeqPrototypeId" };
    private static readonly uint[] _netMessagePlayKismetSeqFieldTags = new uint[] { 8 };
    public static NetMessagePlayKismetSeq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayKismetSeq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayKismetSeq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayKismetSeq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayKismetSeq, NetMessagePlayKismetSeq.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayKismetSeq__FieldAccessorTable; }
    }
    
    public const int KismetSeqPrototypeIdFieldNumber = 1;
    private bool hasKismetSeqPrototypeId;
    private ulong kismetSeqPrototypeId_;
    public bool HasKismetSeqPrototypeId {
      get { return hasKismetSeqPrototypeId; }
    }
    public ulong KismetSeqPrototypeId {
      get { return kismetSeqPrototypeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKismetSeqPrototypeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayKismetSeqFieldNames;
      if (hasKismetSeqPrototypeId) {
        output.WriteUInt64(1, field_names[0], KismetSeqPrototypeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKismetSeqPrototypeId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, KismetSeqPrototypeId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayKismetSeq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayKismetSeq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayKismetSeq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayKismetSeq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayKismetSeq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayKismetSeq result;
      
      private NetMessagePlayKismetSeq PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayKismetSeq original = result;
          result = new NetMessagePlayKismetSeq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayKismetSeq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayKismetSeq.Descriptor; }
      }
      
      public override NetMessagePlayKismetSeq DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayKismetSeq.DefaultInstance; }
      }
      
      public override NetMessagePlayKismetSeq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayKismetSeq) {
          return MergeFrom((NetMessagePlayKismetSeq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayKismetSeq other) {
        if (other == global::Gazillion.NetMessagePlayKismetSeq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKismetSeqPrototypeId) {
          KismetSeqPrototypeId = other.KismetSeqPrototypeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayKismetSeqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayKismetSeqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKismetSeqPrototypeId = input.ReadUInt64(ref result.kismetSeqPrototypeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKismetSeqPrototypeId {
        get { return result.hasKismetSeqPrototypeId; }
      }
      public ulong KismetSeqPrototypeId {
        get { return result.KismetSeqPrototypeId; }
        set { SetKismetSeqPrototypeId(value); }
      }
      public Builder SetKismetSeqPrototypeId(ulong value) {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = true;
        result.kismetSeqPrototypeId_ = value;
        return this;
      }
      public Builder ClearKismetSeqPrototypeId() {
        PrepareBuilder();
        result.hasKismetSeqPrototypeId = false;
        result.kismetSeqPrototypeId_ = 0UL;
        return this;
      }
    }
    static NetMessagePlayKismetSeq() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGracefulDisconnectAck : pb::GeneratedMessage<NetMessageGracefulDisconnectAck, NetMessageGracefulDisconnectAck.Builder> {
    private NetMessageGracefulDisconnectAck() { }
    private static readonly NetMessageGracefulDisconnectAck defaultInstance = new NetMessageGracefulDisconnectAck().MakeReadOnly();
    private static readonly string[] _netMessageGracefulDisconnectAckFieldNames = new string[] {  };
    private static readonly uint[] _netMessageGracefulDisconnectAckFieldTags = new uint[] {  };
    public static NetMessageGracefulDisconnectAck DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGracefulDisconnectAck DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGracefulDisconnectAck ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGracefulDisconnectAck__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGracefulDisconnectAck, NetMessageGracefulDisconnectAck.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGracefulDisconnectAck__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGracefulDisconnectAckFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGracefulDisconnectAck ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGracefulDisconnectAck MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGracefulDisconnectAck prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGracefulDisconnectAck, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGracefulDisconnectAck cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGracefulDisconnectAck result;
      
      private NetMessageGracefulDisconnectAck PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGracefulDisconnectAck original = result;
          result = new NetMessageGracefulDisconnectAck();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGracefulDisconnectAck MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGracefulDisconnectAck.Descriptor; }
      }
      
      public override NetMessageGracefulDisconnectAck DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGracefulDisconnectAck.DefaultInstance; }
      }
      
      public override NetMessageGracefulDisconnectAck BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGracefulDisconnectAck) {
          return MergeFrom((NetMessageGracefulDisconnectAck) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGracefulDisconnectAck other) {
        if (other == global::Gazillion.NetMessageGracefulDisconnectAck.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGracefulDisconnectAckFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGracefulDisconnectAckFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageGracefulDisconnectAck() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLiveTuningUpdate : pb::GeneratedMessage<NetMessageLiveTuningUpdate, NetMessageLiveTuningUpdate.Builder> {
    private NetMessageLiveTuningUpdate() { }
    private static readonly NetMessageLiveTuningUpdate defaultInstance = new NetMessageLiveTuningUpdate().MakeReadOnly();
    private static readonly string[] _netMessageLiveTuningUpdateFieldNames = new string[] { "tuningTypeKeyValueSettings" };
    private static readonly uint[] _netMessageLiveTuningUpdateFieldTags = new uint[] { 10 };
    public static NetMessageLiveTuningUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLiveTuningUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLiveTuningUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLiveTuningUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLiveTuningUpdate, NetMessageLiveTuningUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLiveTuningUpdate__FieldAccessorTable; }
    }
    
    public const int TuningTypeKeyValueSettingsFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> tuningTypeKeyValueSettings_ = new pbc::PopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue>();
    public scg::IList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> TuningTypeKeyValueSettingsList {
      get { return tuningTypeKeyValueSettings_; }
    }
    public int TuningTypeKeyValueSettingsCount {
      get { return tuningTypeKeyValueSettings_.Count; }
    }
    public global::Gazillion.NetStructLiveTuningSettingProtoEnumValue GetTuningTypeKeyValueSettings(int index) {
      return tuningTypeKeyValueSettings_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.NetStructLiveTuningSettingProtoEnumValue element in TuningTypeKeyValueSettingsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLiveTuningUpdateFieldNames;
      if (tuningTypeKeyValueSettings_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], tuningTypeKeyValueSettings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetStructLiveTuningSettingProtoEnumValue element in TuningTypeKeyValueSettingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLiveTuningUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLiveTuningUpdate MakeReadOnly() {
      tuningTypeKeyValueSettings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLiveTuningUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLiveTuningUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLiveTuningUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLiveTuningUpdate result;
      
      private NetMessageLiveTuningUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLiveTuningUpdate original = result;
          result = new NetMessageLiveTuningUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLiveTuningUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLiveTuningUpdate.Descriptor; }
      }
      
      public override NetMessageLiveTuningUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLiveTuningUpdate.DefaultInstance; }
      }
      
      public override NetMessageLiveTuningUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLiveTuningUpdate) {
          return MergeFrom((NetMessageLiveTuningUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLiveTuningUpdate other) {
        if (other == global::Gazillion.NetMessageLiveTuningUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.tuningTypeKeyValueSettings_.Count != 0) {
          result.tuningTypeKeyValueSettings_.Add(other.tuningTypeKeyValueSettings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLiveTuningUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLiveTuningUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.tuningTypeKeyValueSettings_, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> TuningTypeKeyValueSettingsList {
        get { return PrepareBuilder().tuningTypeKeyValueSettings_; }
      }
      public int TuningTypeKeyValueSettingsCount {
        get { return result.TuningTypeKeyValueSettingsCount; }
      }
      public global::Gazillion.NetStructLiveTuningSettingProtoEnumValue GetTuningTypeKeyValueSettings(int index) {
        return result.GetTuningTypeKeyValueSettings(index);
      }
      public Builder SetTuningTypeKeyValueSettings(int index, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_[index] = value;
        return this;
      }
      public Builder SetTuningTypeKeyValueSettings(int index, global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTuningTypeKeyValueSettings(global::Gazillion.NetStructLiveTuningSettingProtoEnumValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_.Add(value);
        return this;
      }
      public Builder AddTuningTypeKeyValueSettings(global::Gazillion.NetStructLiveTuningSettingProtoEnumValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTuningTypeKeyValueSettings(scg::IEnumerable<global::Gazillion.NetStructLiveTuningSettingProtoEnumValue> values) {
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_.Add(values);
        return this;
      }
      public Builder ClearTuningTypeKeyValueSettings() {
        PrepareBuilder();
        result.tuningTypeKeyValueSettings_.Clear();
        return this;
      }
    }
    static NetMessageLiveTuningUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUpdateSituationalTarget : pb::GeneratedMessage<NetMessageUpdateSituationalTarget, NetMessageUpdateSituationalTarget.Builder> {
    private NetMessageUpdateSituationalTarget() { }
    private static readonly NetMessageUpdateSituationalTarget defaultInstance = new NetMessageUpdateSituationalTarget().MakeReadOnly();
    private static readonly string[] _netMessageUpdateSituationalTargetFieldNames = new string[] { "addTarget", "powerOwnerId", "situationalPowerProtoId", "situationalTargetId" };
    private static readonly uint[] _netMessageUpdateSituationalTargetFieldTags = new uint[] { 32, 8, 16, 24 };
    public static NetMessageUpdateSituationalTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUpdateSituationalTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUpdateSituationalTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateSituationalTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUpdateSituationalTarget, NetMessageUpdateSituationalTarget.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUpdateSituationalTarget__FieldAccessorTable; }
    }
    
    public const int PowerOwnerIdFieldNumber = 1;
    private bool hasPowerOwnerId;
    private ulong powerOwnerId_;
    public bool HasPowerOwnerId {
      get { return hasPowerOwnerId; }
    }
    public ulong PowerOwnerId {
      get { return powerOwnerId_; }
    }
    
    public const int SituationalPowerProtoIdFieldNumber = 2;
    private bool hasSituationalPowerProtoId;
    private ulong situationalPowerProtoId_;
    public bool HasSituationalPowerProtoId {
      get { return hasSituationalPowerProtoId; }
    }
    public ulong SituationalPowerProtoId {
      get { return situationalPowerProtoId_; }
    }
    
    public const int SituationalTargetIdFieldNumber = 3;
    private bool hasSituationalTargetId;
    private ulong situationalTargetId_;
    public bool HasSituationalTargetId {
      get { return hasSituationalTargetId; }
    }
    public ulong SituationalTargetId {
      get { return situationalTargetId_; }
    }
    
    public const int AddTargetFieldNumber = 4;
    private bool hasAddTarget;
    private bool addTarget_;
    public bool HasAddTarget {
      get { return hasAddTarget; }
    }
    public bool AddTarget {
      get { return addTarget_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPowerOwnerId) return false;
        if (!hasSituationalPowerProtoId) return false;
        if (!hasSituationalTargetId) return false;
        if (!hasAddTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUpdateSituationalTargetFieldNames;
      if (hasPowerOwnerId) {
        output.WriteUInt64(1, field_names[1], PowerOwnerId);
      }
      if (hasSituationalPowerProtoId) {
        output.WriteUInt64(2, field_names[2], SituationalPowerProtoId);
      }
      if (hasSituationalTargetId) {
        output.WriteUInt64(3, field_names[3], SituationalTargetId);
      }
      if (hasAddTarget) {
        output.WriteBool(4, field_names[0], AddTarget);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPowerOwnerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PowerOwnerId);
      }
      if (hasSituationalPowerProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, SituationalPowerProtoId);
      }
      if (hasSituationalTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SituationalTargetId);
      }
      if (hasAddTarget) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, AddTarget);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUpdateSituationalTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUpdateSituationalTarget MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUpdateSituationalTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUpdateSituationalTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUpdateSituationalTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUpdateSituationalTarget result;
      
      private NetMessageUpdateSituationalTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUpdateSituationalTarget original = result;
          result = new NetMessageUpdateSituationalTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUpdateSituationalTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUpdateSituationalTarget.Descriptor; }
      }
      
      public override NetMessageUpdateSituationalTarget DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUpdateSituationalTarget.DefaultInstance; }
      }
      
      public override NetMessageUpdateSituationalTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUpdateSituationalTarget) {
          return MergeFrom((NetMessageUpdateSituationalTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUpdateSituationalTarget other) {
        if (other == global::Gazillion.NetMessageUpdateSituationalTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPowerOwnerId) {
          PowerOwnerId = other.PowerOwnerId;
        }
        if (other.HasSituationalPowerProtoId) {
          SituationalPowerProtoId = other.SituationalPowerProtoId;
        }
        if (other.HasSituationalTargetId) {
          SituationalTargetId = other.SituationalTargetId;
        }
        if (other.HasAddTarget) {
          AddTarget = other.AddTarget;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUpdateSituationalTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUpdateSituationalTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPowerOwnerId = input.ReadUInt64(ref result.powerOwnerId_);
              break;
            }
            case 16: {
              result.hasSituationalPowerProtoId = input.ReadUInt64(ref result.situationalPowerProtoId_);
              break;
            }
            case 24: {
              result.hasSituationalTargetId = input.ReadUInt64(ref result.situationalTargetId_);
              break;
            }
            case 32: {
              result.hasAddTarget = input.ReadBool(ref result.addTarget_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPowerOwnerId {
        get { return result.hasPowerOwnerId; }
      }
      public ulong PowerOwnerId {
        get { return result.PowerOwnerId; }
        set { SetPowerOwnerId(value); }
      }
      public Builder SetPowerOwnerId(ulong value) {
        PrepareBuilder();
        result.hasPowerOwnerId = true;
        result.powerOwnerId_ = value;
        return this;
      }
      public Builder ClearPowerOwnerId() {
        PrepareBuilder();
        result.hasPowerOwnerId = false;
        result.powerOwnerId_ = 0UL;
        return this;
      }
      
      public bool HasSituationalPowerProtoId {
        get { return result.hasSituationalPowerProtoId; }
      }
      public ulong SituationalPowerProtoId {
        get { return result.SituationalPowerProtoId; }
        set { SetSituationalPowerProtoId(value); }
      }
      public Builder SetSituationalPowerProtoId(ulong value) {
        PrepareBuilder();
        result.hasSituationalPowerProtoId = true;
        result.situationalPowerProtoId_ = value;
        return this;
      }
      public Builder ClearSituationalPowerProtoId() {
        PrepareBuilder();
        result.hasSituationalPowerProtoId = false;
        result.situationalPowerProtoId_ = 0UL;
        return this;
      }
      
      public bool HasSituationalTargetId {
        get { return result.hasSituationalTargetId; }
      }
      public ulong SituationalTargetId {
        get { return result.SituationalTargetId; }
        set { SetSituationalTargetId(value); }
      }
      public Builder SetSituationalTargetId(ulong value) {
        PrepareBuilder();
        result.hasSituationalTargetId = true;
        result.situationalTargetId_ = value;
        return this;
      }
      public Builder ClearSituationalTargetId() {
        PrepareBuilder();
        result.hasSituationalTargetId = false;
        result.situationalTargetId_ = 0UL;
        return this;
      }
      
      public bool HasAddTarget {
        get { return result.hasAddTarget; }
      }
      public bool AddTarget {
        get { return result.AddTarget; }
        set { SetAddTarget(value); }
      }
      public Builder SetAddTarget(bool value) {
        PrepareBuilder();
        result.hasAddTarget = true;
        result.addTarget_ = value;
        return this;
      }
      public Builder ClearAddTarget() {
        PrepareBuilder();
        result.hasAddTarget = false;
        result.addTarget_ = false;
        return this;
      }
    }
    static NetMessageUpdateSituationalTarget() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageConfirmStartNewGame : pb::GeneratedMessage<NetMessageConfirmStartNewGame, NetMessageConfirmStartNewGame.Builder> {
    private NetMessageConfirmStartNewGame() { }
    private static readonly NetMessageConfirmStartNewGame defaultInstance = new NetMessageConfirmStartNewGame().MakeReadOnly();
    private static readonly string[] _netMessageConfirmStartNewGameFieldNames = new string[] {  };
    private static readonly uint[] _netMessageConfirmStartNewGameFieldTags = new uint[] {  };
    public static NetMessageConfirmStartNewGame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageConfirmStartNewGame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageConfirmStartNewGame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConfirmStartNewGame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageConfirmStartNewGame, NetMessageConfirmStartNewGame.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageConfirmStartNewGame__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageConfirmStartNewGameFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageConfirmStartNewGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageConfirmStartNewGame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageConfirmStartNewGame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageConfirmStartNewGame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageConfirmStartNewGame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageConfirmStartNewGame result;
      
      private NetMessageConfirmStartNewGame PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageConfirmStartNewGame original = result;
          result = new NetMessageConfirmStartNewGame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageConfirmStartNewGame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageConfirmStartNewGame.Descriptor; }
      }
      
      public override NetMessageConfirmStartNewGame DefaultInstanceForType {
        get { return global::Gazillion.NetMessageConfirmStartNewGame.DefaultInstance; }
      }
      
      public override NetMessageConfirmStartNewGame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageConfirmStartNewGame) {
          return MergeFrom((NetMessageConfirmStartNewGame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageConfirmStartNewGame other) {
        if (other == global::Gazillion.NetMessageConfirmStartNewGame.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageConfirmStartNewGameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageConfirmStartNewGameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageConfirmStartNewGame() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOneTimeSnapCamera : pb::GeneratedMessage<NetMessageOneTimeSnapCamera, NetMessageOneTimeSnapCamera.Builder> {
    private NetMessageOneTimeSnapCamera() { }
    private static readonly NetMessageOneTimeSnapCamera defaultInstance = new NetMessageOneTimeSnapCamera().MakeReadOnly();
    private static readonly string[] _netMessageOneTimeSnapCameraFieldNames = new string[] {  };
    private static readonly uint[] _netMessageOneTimeSnapCameraFieldTags = new uint[] {  };
    public static NetMessageOneTimeSnapCamera DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOneTimeSnapCamera DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOneTimeSnapCamera ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOneTimeSnapCamera__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOneTimeSnapCamera, NetMessageOneTimeSnapCamera.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOneTimeSnapCamera__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOneTimeSnapCameraFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOneTimeSnapCamera ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOneTimeSnapCamera MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOneTimeSnapCamera prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOneTimeSnapCamera, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOneTimeSnapCamera cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOneTimeSnapCamera result;
      
      private NetMessageOneTimeSnapCamera PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOneTimeSnapCamera original = result;
          result = new NetMessageOneTimeSnapCamera();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOneTimeSnapCamera MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOneTimeSnapCamera.Descriptor; }
      }
      
      public override NetMessageOneTimeSnapCamera DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOneTimeSnapCamera.DefaultInstance; }
      }
      
      public override NetMessageOneTimeSnapCamera BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOneTimeSnapCamera) {
          return MergeFrom((NetMessageOneTimeSnapCamera) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOneTimeSnapCamera other) {
        if (other == global::Gazillion.NetMessageOneTimeSnapCamera.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOneTimeSnapCameraFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOneTimeSnapCameraFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageOneTimeSnapCamera() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModifyCommunityMemberFailure : pb::GeneratedMessage<NetMessageModifyCommunityMemberFailure, NetMessageModifyCommunityMemberFailure.Builder> {
    private NetMessageModifyCommunityMemberFailure() { }
    private static readonly NetMessageModifyCommunityMemberFailure defaultInstance = new NetMessageModifyCommunityMemberFailure().MakeReadOnly();
    private static readonly string[] _netMessageModifyCommunityMemberFailureFieldNames = new string[] { "circleId", "failureCode", "memberToModifyName", "operation" };
    private static readonly uint[] _netMessageModifyCommunityMemberFailureFieldTags = new uint[] { 24, 16, 10, 32 };
    public static NetMessageModifyCommunityMemberFailure DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModifyCommunityMemberFailure DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModifyCommunityMemberFailure ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModifyCommunityMemberFailure, NetMessageModifyCommunityMemberFailure.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMemberFailure__FieldAccessorTable; }
    }
    
    public const int MemberToModifyNameFieldNumber = 1;
    private bool hasMemberToModifyName;
    private string memberToModifyName_ = "";
    public bool HasMemberToModifyName {
      get { return hasMemberToModifyName; }
    }
    public string MemberToModifyName {
      get { return memberToModifyName_; }
    }
    
    public const int FailureCodeFieldNumber = 2;
    private bool hasFailureCode;
    private global::Gazillion.CommunityModifyFailureCode failureCode_ = global::Gazillion.CommunityModifyFailureCode.eCMFC_Timeout;
    public bool HasFailureCode {
      get { return hasFailureCode; }
    }
    public global::Gazillion.CommunityModifyFailureCode FailureCode {
      get { return failureCode_; }
    }
    
    public const int CircleIdFieldNumber = 3;
    private bool hasCircleId;
    private ulong circleId_;
    public bool HasCircleId {
      get { return hasCircleId; }
    }
    public ulong CircleId {
      get { return circleId_; }
    }
    
    public const int OperationFieldNumber = 4;
    private bool hasOperation;
    private global::Gazillion.ModifyCircleOperation operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::Gazillion.ModifyCircleOperation Operation {
      get { return operation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMemberToModifyName) return false;
        if (!hasFailureCode) return false;
        if (!hasCircleId) return false;
        if (!hasOperation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModifyCommunityMemberFailureFieldNames;
      if (hasMemberToModifyName) {
        output.WriteString(1, field_names[2], MemberToModifyName);
      }
      if (hasFailureCode) {
        output.WriteEnum(2, field_names[1], (int) FailureCode, FailureCode);
      }
      if (hasCircleId) {
        output.WriteUInt64(3, field_names[0], CircleId);
      }
      if (hasOperation) {
        output.WriteEnum(4, field_names[3], (int) Operation, Operation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMemberToModifyName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MemberToModifyName);
      }
      if (hasFailureCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) FailureCode);
      }
      if (hasCircleId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, CircleId);
      }
      if (hasOperation) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Operation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMemberFailure ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModifyCommunityMemberFailure MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModifyCommunityMemberFailure prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModifyCommunityMemberFailure, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModifyCommunityMemberFailure cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModifyCommunityMemberFailure result;
      
      private NetMessageModifyCommunityMemberFailure PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModifyCommunityMemberFailure original = result;
          result = new NetMessageModifyCommunityMemberFailure();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModifyCommunityMemberFailure MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModifyCommunityMemberFailure.Descriptor; }
      }
      
      public override NetMessageModifyCommunityMemberFailure DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModifyCommunityMemberFailure.DefaultInstance; }
      }
      
      public override NetMessageModifyCommunityMemberFailure BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModifyCommunityMemberFailure) {
          return MergeFrom((NetMessageModifyCommunityMemberFailure) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModifyCommunityMemberFailure other) {
        if (other == global::Gazillion.NetMessageModifyCommunityMemberFailure.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMemberToModifyName) {
          MemberToModifyName = other.MemberToModifyName;
        }
        if (other.HasFailureCode) {
          FailureCode = other.FailureCode;
        }
        if (other.HasCircleId) {
          CircleId = other.CircleId;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModifyCommunityMemberFailureFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModifyCommunityMemberFailureFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMemberToModifyName = input.ReadString(ref result.memberToModifyName_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.failureCode_, out unknown)) {
                result.hasFailureCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasCircleId = input.ReadUInt64(ref result.circleId_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMemberToModifyName {
        get { return result.hasMemberToModifyName; }
      }
      public string MemberToModifyName {
        get { return result.MemberToModifyName; }
        set { SetMemberToModifyName(value); }
      }
      public Builder SetMemberToModifyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMemberToModifyName = true;
        result.memberToModifyName_ = value;
        return this;
      }
      public Builder ClearMemberToModifyName() {
        PrepareBuilder();
        result.hasMemberToModifyName = false;
        result.memberToModifyName_ = "";
        return this;
      }
      
      public bool HasFailureCode {
       get { return result.hasFailureCode; }
      }
      public global::Gazillion.CommunityModifyFailureCode FailureCode {
        get { return result.FailureCode; }
        set { SetFailureCode(value); }
      }
      public Builder SetFailureCode(global::Gazillion.CommunityModifyFailureCode value) {
        PrepareBuilder();
        result.hasFailureCode = true;
        result.failureCode_ = value;
        return this;
      }
      public Builder ClearFailureCode() {
        PrepareBuilder();
        result.hasFailureCode = false;
        result.failureCode_ = global::Gazillion.CommunityModifyFailureCode.eCMFC_Timeout;
        return this;
      }
      
      public bool HasCircleId {
        get { return result.hasCircleId; }
      }
      public ulong CircleId {
        get { return result.CircleId; }
        set { SetCircleId(value); }
      }
      public Builder SetCircleId(ulong value) {
        PrepareBuilder();
        result.hasCircleId = true;
        result.circleId_ = value;
        return this;
      }
      public Builder ClearCircleId() {
        PrepareBuilder();
        result.hasCircleId = false;
        result.circleId_ = 0UL;
        return this;
      }
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::Gazillion.ModifyCircleOperation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::Gazillion.ModifyCircleOperation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::Gazillion.ModifyCircleOperation.eMCO_Add;
        return this;
      }
    }
    static NetMessageModifyCommunityMemberFailure() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageModifyCommunityMember : pb::GeneratedMessage<NetMessageModifyCommunityMember, NetMessageModifyCommunityMember.Builder> {
    private NetMessageModifyCommunityMember() { }
    private static readonly NetMessageModifyCommunityMember defaultInstance = new NetMessageModifyCommunityMember().MakeReadOnly();
    private static readonly string[] _netMessageModifyCommunityMemberFieldNames = new string[] { "broadcast", "playerName", "systemCirclesBitSet" };
    private static readonly uint[] _netMessageModifyCommunityMemberFieldTags = new uint[] { 10, 18, 24 };
    public static NetMessageModifyCommunityMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageModifyCommunityMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageModifyCommunityMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageModifyCommunityMember, NetMessageModifyCommunityMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageModifyCommunityMember__FieldAccessorTable; }
    }
    
    public const int BroadcastFieldNumber = 1;
    private bool hasBroadcast;
    private global::Gazillion.CommunityMemberBroadcast broadcast_;
    public bool HasBroadcast {
      get { return hasBroadcast; }
    }
    public global::Gazillion.CommunityMemberBroadcast Broadcast {
      get { return broadcast_ ?? global::Gazillion.CommunityMemberBroadcast.DefaultInstance; }
    }
    
    public const int PlayerNameFieldNumber = 2;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int SystemCirclesBitSetFieldNumber = 3;
    private bool hasSystemCirclesBitSet;
    private ulong systemCirclesBitSet_;
    public bool HasSystemCirclesBitSet {
      get { return hasSystemCirclesBitSet; }
    }
    public ulong SystemCirclesBitSet {
      get { return systemCirclesBitSet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBroadcast) return false;
        if (!Broadcast.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageModifyCommunityMemberFieldNames;
      if (hasBroadcast) {
        output.WriteMessage(1, field_names[0], Broadcast);
      }
      if (hasPlayerName) {
        output.WriteString(2, field_names[1], PlayerName);
      }
      if (hasSystemCirclesBitSet) {
        output.WriteUInt64(3, field_names[2], SystemCirclesBitSet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBroadcast) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Broadcast);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
      }
      if (hasSystemCirclesBitSet) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SystemCirclesBitSet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageModifyCommunityMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageModifyCommunityMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageModifyCommunityMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageModifyCommunityMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageModifyCommunityMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageModifyCommunityMember result;
      
      private NetMessageModifyCommunityMember PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageModifyCommunityMember original = result;
          result = new NetMessageModifyCommunityMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageModifyCommunityMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageModifyCommunityMember.Descriptor; }
      }
      
      public override NetMessageModifyCommunityMember DefaultInstanceForType {
        get { return global::Gazillion.NetMessageModifyCommunityMember.DefaultInstance; }
      }
      
      public override NetMessageModifyCommunityMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageModifyCommunityMember) {
          return MergeFrom((NetMessageModifyCommunityMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageModifyCommunityMember other) {
        if (other == global::Gazillion.NetMessageModifyCommunityMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBroadcast) {
          MergeBroadcast(other.Broadcast);
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasSystemCirclesBitSet) {
          SystemCirclesBitSet = other.SystemCirclesBitSet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageModifyCommunityMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageModifyCommunityMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.CommunityMemberBroadcast.Builder subBuilder = global::Gazillion.CommunityMemberBroadcast.CreateBuilder();
              if (result.hasBroadcast) {
                subBuilder.MergeFrom(Broadcast);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Broadcast = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 24: {
              result.hasSystemCirclesBitSet = input.ReadUInt64(ref result.systemCirclesBitSet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBroadcast {
       get { return result.hasBroadcast; }
      }
      public global::Gazillion.CommunityMemberBroadcast Broadcast {
        get { return result.Broadcast; }
        set { SetBroadcast(value); }
      }
      public Builder SetBroadcast(global::Gazillion.CommunityMemberBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBroadcast = true;
        result.broadcast_ = value;
        return this;
      }
      public Builder SetBroadcast(global::Gazillion.CommunityMemberBroadcast.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBroadcast = true;
        result.broadcast_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBroadcast(global::Gazillion.CommunityMemberBroadcast value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBroadcast &&
            result.broadcast_ != global::Gazillion.CommunityMemberBroadcast.DefaultInstance) {
            result.broadcast_ = global::Gazillion.CommunityMemberBroadcast.CreateBuilder(result.broadcast_).MergeFrom(value).BuildPartial();
        } else {
          result.broadcast_ = value;
        }
        result.hasBroadcast = true;
        return this;
      }
      public Builder ClearBroadcast() {
        PrepareBuilder();
        result.hasBroadcast = false;
        result.broadcast_ = null;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasSystemCirclesBitSet {
        get { return result.hasSystemCirclesBitSet; }
      }
      public ulong SystemCirclesBitSet {
        get { return result.SystemCirclesBitSet; }
        set { SetSystemCirclesBitSet(value); }
      }
      public Builder SetSystemCirclesBitSet(ulong value) {
        PrepareBuilder();
        result.hasSystemCirclesBitSet = true;
        result.systemCirclesBitSet_ = value;
        return this;
      }
      public Builder ClearSystemCirclesBitSet() {
        PrepareBuilder();
        result.hasSystemCirclesBitSet = false;
        result.systemCirclesBitSet_ = 0UL;
        return this;
      }
    }
    static NetMessageModifyCommunityMember() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReceiveCommunityNotify : pb::GeneratedMessage<NetMessageReceiveCommunityNotify, NetMessageReceiveCommunityNotify.Builder> {
    private NetMessageReceiveCommunityNotify() { }
    private static readonly NetMessageReceiveCommunityNotify defaultInstance = new NetMessageReceiveCommunityNotify().MakeReadOnly();
    private static readonly string[] _netMessageReceiveCommunityNotifyFieldNames = new string[] { "notify" };
    private static readonly uint[] _netMessageReceiveCommunityNotifyFieldTags = new uint[] { 10 };
    public static NetMessageReceiveCommunityNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReceiveCommunityNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReceiveCommunityNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceiveCommunityNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReceiveCommunityNotify, NetMessageReceiveCommunityNotify.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceiveCommunityNotify__FieldAccessorTable; }
    }
    
    public const int NotifyFieldNumber = 1;
    private bool hasNotify;
    private global::Gazillion.CommunityNotify notify_;
    public bool HasNotify {
      get { return hasNotify; }
    }
    public global::Gazillion.CommunityNotify Notify {
      get { return notify_ ?? global::Gazillion.CommunityNotify.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNotify) return false;
        if (!Notify.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReceiveCommunityNotifyFieldNames;
      if (hasNotify) {
        output.WriteMessage(1, field_names[0], Notify);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNotify) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Notify);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceiveCommunityNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReceiveCommunityNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReceiveCommunityNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReceiveCommunityNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReceiveCommunityNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReceiveCommunityNotify result;
      
      private NetMessageReceiveCommunityNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReceiveCommunityNotify original = result;
          result = new NetMessageReceiveCommunityNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReceiveCommunityNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReceiveCommunityNotify.Descriptor; }
      }
      
      public override NetMessageReceiveCommunityNotify DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReceiveCommunityNotify.DefaultInstance; }
      }
      
      public override NetMessageReceiveCommunityNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReceiveCommunityNotify) {
          return MergeFrom((NetMessageReceiveCommunityNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReceiveCommunityNotify other) {
        if (other == global::Gazillion.NetMessageReceiveCommunityNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNotify) {
          MergeNotify(other.Notify);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReceiveCommunityNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReceiveCommunityNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.CommunityNotify.Builder subBuilder = global::Gazillion.CommunityNotify.CreateBuilder();
              if (result.hasNotify) {
                subBuilder.MergeFrom(Notify);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Notify = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNotify {
       get { return result.hasNotify; }
      }
      public global::Gazillion.CommunityNotify Notify {
        get { return result.Notify; }
        set { SetNotify(value); }
      }
      public Builder SetNotify(global::Gazillion.CommunityNotify value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotify = true;
        result.notify_ = value;
        return this;
      }
      public Builder SetNotify(global::Gazillion.CommunityNotify.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNotify = true;
        result.notify_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNotify(global::Gazillion.CommunityNotify value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNotify &&
            result.notify_ != global::Gazillion.CommunityNotify.DefaultInstance) {
            result.notify_ = global::Gazillion.CommunityNotify.CreateBuilder(result.notify_).MergeFrom(value).BuildPartial();
        } else {
          result.notify_ = value;
        }
        result.hasNotify = true;
        return this;
      }
      public Builder ClearNotify() {
        PrepareBuilder();
        result.hasNotify = false;
        result.notify_ = null;
        return this;
      }
    }
    static NetMessageReceiveCommunityNotify() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemBindingChanged : pb::GeneratedMessage<NetMessageItemBindingChanged, NetMessageItemBindingChanged.Builder> {
    private NetMessageItemBindingChanged() { }
    private static readonly NetMessageItemBindingChanged defaultInstance = new NetMessageItemBindingChanged().MakeReadOnly();
    private static readonly string[] _netMessageItemBindingChangedFieldNames = new string[] { "accountBound", "characterProtoId", "itemId", "tradeRestricted" };
    private static readonly uint[] _netMessageItemBindingChangedFieldTags = new uint[] { 16, 24, 8, 32 };
    public static NetMessageItemBindingChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemBindingChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemBindingChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemBindingChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemBindingChanged, NetMessageItemBindingChanged.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemBindingChanged__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public const int AccountBoundFieldNumber = 2;
    private bool hasAccountBound;
    private bool accountBound_;
    public bool HasAccountBound {
      get { return hasAccountBound; }
    }
    public bool AccountBound {
      get { return accountBound_; }
    }
    
    public const int CharacterProtoIdFieldNumber = 3;
    private bool hasCharacterProtoId;
    private ulong characterProtoId_;
    public bool HasCharacterProtoId {
      get { return hasCharacterProtoId; }
    }
    public ulong CharacterProtoId {
      get { return characterProtoId_; }
    }
    
    public const int TradeRestrictedFieldNumber = 4;
    private bool hasTradeRestricted;
    private bool tradeRestricted_;
    public bool HasTradeRestricted {
      get { return hasTradeRestricted; }
    }
    public bool TradeRestricted {
      get { return tradeRestricted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasAccountBound) return false;
        if (!hasCharacterProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemBindingChangedFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[2], ItemId);
      }
      if (hasAccountBound) {
        output.WriteBool(2, field_names[0], AccountBound);
      }
      if (hasCharacterProtoId) {
        output.WriteUInt64(3, field_names[1], CharacterProtoId);
      }
      if (hasTradeRestricted) {
        output.WriteBool(4, field_names[3], TradeRestricted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      if (hasAccountBound) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, AccountBound);
      }
      if (hasCharacterProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, CharacterProtoId);
      }
      if (hasTradeRestricted) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, TradeRestricted);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemBindingChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemBindingChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemBindingChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemBindingChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemBindingChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemBindingChanged result;
      
      private NetMessageItemBindingChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemBindingChanged original = result;
          result = new NetMessageItemBindingChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemBindingChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemBindingChanged.Descriptor; }
      }
      
      public override NetMessageItemBindingChanged DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemBindingChanged.DefaultInstance; }
      }
      
      public override NetMessageItemBindingChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemBindingChanged) {
          return MergeFrom((NetMessageItemBindingChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemBindingChanged other) {
        if (other == global::Gazillion.NetMessageItemBindingChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasAccountBound) {
          AccountBound = other.AccountBound;
        }
        if (other.HasCharacterProtoId) {
          CharacterProtoId = other.CharacterProtoId;
        }
        if (other.HasTradeRestricted) {
          TradeRestricted = other.TradeRestricted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemBindingChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemBindingChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasAccountBound = input.ReadBool(ref result.accountBound_);
              break;
            }
            case 24: {
              result.hasCharacterProtoId = input.ReadUInt64(ref result.characterProtoId_);
              break;
            }
            case 32: {
              result.hasTradeRestricted = input.ReadBool(ref result.tradeRestricted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
      
      public bool HasAccountBound {
        get { return result.hasAccountBound; }
      }
      public bool AccountBound {
        get { return result.AccountBound; }
        set { SetAccountBound(value); }
      }
      public Builder SetAccountBound(bool value) {
        PrepareBuilder();
        result.hasAccountBound = true;
        result.accountBound_ = value;
        return this;
      }
      public Builder ClearAccountBound() {
        PrepareBuilder();
        result.hasAccountBound = false;
        result.accountBound_ = false;
        return this;
      }
      
      public bool HasCharacterProtoId {
        get { return result.hasCharacterProtoId; }
      }
      public ulong CharacterProtoId {
        get { return result.CharacterProtoId; }
        set { SetCharacterProtoId(value); }
      }
      public Builder SetCharacterProtoId(ulong value) {
        PrepareBuilder();
        result.hasCharacterProtoId = true;
        result.characterProtoId_ = value;
        return this;
      }
      public Builder ClearCharacterProtoId() {
        PrepareBuilder();
        result.hasCharacterProtoId = false;
        result.characterProtoId_ = 0UL;
        return this;
      }
      
      public bool HasTradeRestricted {
        get { return result.hasTradeRestricted; }
      }
      public bool TradeRestricted {
        get { return result.TradeRestricted; }
        set { SetTradeRestricted(value); }
      }
      public Builder SetTradeRestricted(bool value) {
        PrepareBuilder();
        result.hasTradeRestricted = true;
        result.tradeRestricted_ = value;
        return this;
      }
      public Builder ClearTradeRestricted() {
        PrepareBuilder();
        result.hasTradeRestricted = false;
        result.tradeRestricted_ = false;
        return this;
      }
    }
    static NetMessageItemBindingChanged() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemsHeldForRecovery : pb::GeneratedMessage<NetMessageItemsHeldForRecovery, NetMessageItemsHeldForRecovery.Builder> {
    private NetMessageItemsHeldForRecovery() { }
    private static readonly NetMessageItemsHeldForRecovery defaultInstance = new NetMessageItemsHeldForRecovery().MakeReadOnly();
    private static readonly string[] _netMessageItemsHeldForRecoveryFieldNames = new string[] { "itemIds" };
    private static readonly uint[] _netMessageItemsHeldForRecoveryFieldTags = new uint[] { 8 };
    public static NetMessageItemsHeldForRecovery DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemsHeldForRecovery DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemsHeldForRecovery ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemsHeldForRecovery__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemsHeldForRecovery, NetMessageItemsHeldForRecovery.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemsHeldForRecovery__FieldAccessorTable; }
    }
    
    public const int ItemIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> itemIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ItemIdsList {
      get { return pbc::Lists.AsReadOnly(itemIds_); }
    }
    public int ItemIdsCount {
      get { return itemIds_.Count; }
    }
    public ulong GetItemIds(int index) {
      return itemIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemsHeldForRecoveryFieldNames;
      if (itemIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], itemIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (ulong element in ItemIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * itemIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemsHeldForRecovery ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemsHeldForRecovery MakeReadOnly() {
      itemIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemsHeldForRecovery prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemsHeldForRecovery, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemsHeldForRecovery cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemsHeldForRecovery result;
      
      private NetMessageItemsHeldForRecovery PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemsHeldForRecovery original = result;
          result = new NetMessageItemsHeldForRecovery();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemsHeldForRecovery MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemsHeldForRecovery.Descriptor; }
      }
      
      public override NetMessageItemsHeldForRecovery DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemsHeldForRecovery.DefaultInstance; }
      }
      
      public override NetMessageItemsHeldForRecovery BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemsHeldForRecovery) {
          return MergeFrom((NetMessageItemsHeldForRecovery) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemsHeldForRecovery other) {
        if (other == global::Gazillion.NetMessageItemsHeldForRecovery.DefaultInstance) return this;
        PrepareBuilder();
        if (other.itemIds_.Count != 0) {
          result.itemIds_.Add(other.itemIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemsHeldForRecoveryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemsHeldForRecoveryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.itemIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> ItemIdsList {
        get { return PrepareBuilder().itemIds_; }
      }
      public int ItemIdsCount {
        get { return result.ItemIdsCount; }
      }
      public ulong GetItemIds(int index) {
        return result.GetItemIds(index);
      }
      public Builder SetItemIds(int index, ulong value) {
        PrepareBuilder();
        result.itemIds_[index] = value;
        return this;
      }
      public Builder AddItemIds(ulong value) {
        PrepareBuilder();
        result.itemIds_.Add(value);
        return this;
      }
      public Builder AddRangeItemIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.itemIds_.Add(values);
        return this;
      }
      public Builder ClearItemIds() {
        PrepareBuilder();
        result.itemIds_.Clear();
        return this;
      }
    }
    static NetMessageItemsHeldForRecovery() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageItemRecovered : pb::GeneratedMessage<NetMessageItemRecovered, NetMessageItemRecovered.Builder> {
    private NetMessageItemRecovered() { }
    private static readonly NetMessageItemRecovered defaultInstance = new NetMessageItemRecovered().MakeReadOnly();
    private static readonly string[] _netMessageItemRecoveredFieldNames = new string[] { "itemId" };
    private static readonly uint[] _netMessageItemRecoveredFieldTags = new uint[] { 8 };
    public static NetMessageItemRecovered DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageItemRecovered DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageItemRecovered ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemRecovered__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageItemRecovered, NetMessageItemRecovered.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageItemRecovered__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private ulong itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public ulong ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageItemRecoveredFieldNames;
      if (hasItemId) {
        output.WriteUInt64(1, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageItemRecovered ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageItemRecovered ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageItemRecovered ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageItemRecovered MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageItemRecovered prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageItemRecovered, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageItemRecovered cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageItemRecovered result;
      
      private NetMessageItemRecovered PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageItemRecovered original = result;
          result = new NetMessageItemRecovered();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageItemRecovered MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageItemRecovered.Descriptor; }
      }
      
      public override NetMessageItemRecovered DefaultInstanceForType {
        get { return global::Gazillion.NetMessageItemRecovered.DefaultInstance; }
      }
      
      public override NetMessageItemRecovered BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageItemRecovered) {
          return MergeFrom((NetMessageItemRecovered) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageItemRecovered other) {
        if (other == global::Gazillion.NetMessageItemRecovered.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageItemRecoveredFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageItemRecoveredFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadUInt64(ref result.itemId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public ulong ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(ulong value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0UL;
        return this;
      }
    }
    static NetMessageItemRecovered() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSwitchToPendingNewAvatarFailed : pb::GeneratedMessage<NetMessageSwitchToPendingNewAvatarFailed, NetMessageSwitchToPendingNewAvatarFailed.Builder> {
    private NetMessageSwitchToPendingNewAvatarFailed() { }
    private static readonly NetMessageSwitchToPendingNewAvatarFailed defaultInstance = new NetMessageSwitchToPendingNewAvatarFailed().MakeReadOnly();
    private static readonly string[] _netMessageSwitchToPendingNewAvatarFailedFieldNames = new string[] { "reason", "targetId" };
    private static readonly uint[] _netMessageSwitchToPendingNewAvatarFailedFieldTags = new uint[] { 16, 8 };
    public static NetMessageSwitchToPendingNewAvatarFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSwitchToPendingNewAvatarFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSwitchToPendingNewAvatarFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSwitchToPendingNewAvatarFailed, NetMessageSwitchToPendingNewAvatarFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSwitchToPendingNewAvatarFailed__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private global::Gazillion.SwitchToAvatarFailedReason reason_ = global::Gazillion.SwitchToAvatarFailedReason.eSAFR_Unknown;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::Gazillion.SwitchToAvatarFailedReason Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSwitchToPendingNewAvatarFailedFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[1], TargetId);
      }
      if (hasReason) {
        output.WriteEnum(2, field_names[0], (int) Reason, Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSwitchToPendingNewAvatarFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSwitchToPendingNewAvatarFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSwitchToPendingNewAvatarFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSwitchToPendingNewAvatarFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSwitchToPendingNewAvatarFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSwitchToPendingNewAvatarFailed result;
      
      private NetMessageSwitchToPendingNewAvatarFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSwitchToPendingNewAvatarFailed original = result;
          result = new NetMessageSwitchToPendingNewAvatarFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSwitchToPendingNewAvatarFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.Descriptor; }
      }
      
      public override NetMessageSwitchToPendingNewAvatarFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.DefaultInstance; }
      }
      
      public override NetMessageSwitchToPendingNewAvatarFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSwitchToPendingNewAvatarFailed) {
          return MergeFrom((NetMessageSwitchToPendingNewAvatarFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSwitchToPendingNewAvatarFailed other) {
        if (other == global::Gazillion.NetMessageSwitchToPendingNewAvatarFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSwitchToPendingNewAvatarFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSwitchToPendingNewAvatarFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::Gazillion.SwitchToAvatarFailedReason Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::Gazillion.SwitchToAvatarFailedReason value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::Gazillion.SwitchToAvatarFailedReason.eSAFR_Unknown;
        return this;
      }
    }
    static NetMessageSwitchToPendingNewAvatarFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCoopStartEntranceFailed : pb::GeneratedMessage<NetMessageCoopStartEntranceFailed, NetMessageCoopStartEntranceFailed.Builder> {
    private NetMessageCoopStartEntranceFailed() { }
    private static readonly NetMessageCoopStartEntranceFailed defaultInstance = new NetMessageCoopStartEntranceFailed().MakeReadOnly();
    private static readonly string[] _netMessageCoopStartEntranceFailedFieldNames = new string[] { "targetId" };
    private static readonly uint[] _netMessageCoopStartEntranceFailedFieldTags = new uint[] { 8 };
    public static NetMessageCoopStartEntranceFailed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCoopStartEntranceFailed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCoopStartEntranceFailed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCoopStartEntranceFailed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCoopStartEntranceFailed, NetMessageCoopStartEntranceFailed.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCoopStartEntranceFailed__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCoopStartEntranceFailedFieldNames;
      if (hasTargetId) {
        output.WriteUInt64(1, field_names[0], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTargetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TargetId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCoopStartEntranceFailed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCoopStartEntranceFailed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCoopStartEntranceFailed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCoopStartEntranceFailed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCoopStartEntranceFailed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCoopStartEntranceFailed result;
      
      private NetMessageCoopStartEntranceFailed PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCoopStartEntranceFailed original = result;
          result = new NetMessageCoopStartEntranceFailed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCoopStartEntranceFailed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCoopStartEntranceFailed.Descriptor; }
      }
      
      public override NetMessageCoopStartEntranceFailed DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCoopStartEntranceFailed.DefaultInstance; }
      }
      
      public override NetMessageCoopStartEntranceFailed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCoopStartEntranceFailed) {
          return MergeFrom((NetMessageCoopStartEntranceFailed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCoopStartEntranceFailed other) {
        if (other == global::Gazillion.NetMessageCoopStartEntranceFailed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCoopStartEntranceFailedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCoopStartEntranceFailedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static NetMessageCoopStartEntranceFailed() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildMessageToClient : pb::GeneratedMessage<NetMessageGuildMessageToClient, NetMessageGuildMessageToClient.Builder> {
    private NetMessageGuildMessageToClient() { }
    private static readonly NetMessageGuildMessageToClient defaultInstance = new NetMessageGuildMessageToClient().MakeReadOnly();
    private static readonly string[] _netMessageGuildMessageToClientFieldNames = new string[] { "messages" };
    private static readonly uint[] _netMessageGuildMessageToClientFieldTags = new uint[] { 10 };
    public static NetMessageGuildMessageToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildMessageToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildMessageToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildMessageToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildMessageToClient, NetMessageGuildMessageToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildMessageToClient__FieldAccessorTable; }
    }
    
    public const int MessagesFieldNumber = 1;
    private bool hasMessages;
    private global::Gazillion.GuildMessageSetToClient messages_;
    public bool HasMessages {
      get { return hasMessages; }
    }
    public global::Gazillion.GuildMessageSetToClient Messages {
      get { return messages_ ?? global::Gazillion.GuildMessageSetToClient.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessages) return false;
        if (!Messages.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildMessageToClientFieldNames;
      if (hasMessages) {
        output.WriteMessage(1, field_names[0], Messages);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessages) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Messages);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildMessageToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildMessageToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildMessageToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildMessageToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildMessageToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildMessageToClient result;
      
      private NetMessageGuildMessageToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildMessageToClient original = result;
          result = new NetMessageGuildMessageToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildMessageToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildMessageToClient.Descriptor; }
      }
      
      public override NetMessageGuildMessageToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildMessageToClient.DefaultInstance; }
      }
      
      public override NetMessageGuildMessageToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildMessageToClient) {
          return MergeFrom((NetMessageGuildMessageToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildMessageToClient other) {
        if (other == global::Gazillion.NetMessageGuildMessageToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessages) {
          MergeMessages(other.Messages);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildMessageToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildMessageToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.GuildMessageSetToClient.Builder subBuilder = global::Gazillion.GuildMessageSetToClient.CreateBuilder();
              if (result.hasMessages) {
                subBuilder.MergeFrom(Messages);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Messages = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessages {
       get { return result.hasMessages; }
      }
      public global::Gazillion.GuildMessageSetToClient Messages {
        get { return result.Messages; }
        set { SetMessages(value); }
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = value;
        return this;
      }
      public Builder SetMessages(global::Gazillion.GuildMessageSetToClient.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessages = true;
        result.messages_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessages(global::Gazillion.GuildMessageSetToClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessages &&
            result.messages_ != global::Gazillion.GuildMessageSetToClient.DefaultInstance) {
            result.messages_ = global::Gazillion.GuildMessageSetToClient.CreateBuilder(result.messages_).MergeFrom(value).BuildPartial();
        } else {
          result.messages_ = value;
        }
        result.hasMessages = true;
        return this;
      }
      public Builder ClearMessages() {
        PrepareBuilder();
        result.hasMessages = false;
        result.messages_ = null;
        return this;
      }
    }
    static NetMessageGuildMessageToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageEntityGuildInfo : pb::GeneratedMessage<NetMessageEntityGuildInfo, NetMessageEntityGuildInfo.Builder> {
    private NetMessageEntityGuildInfo() { }
    private static readonly NetMessageEntityGuildInfo defaultInstance = new NetMessageEntityGuildInfo().MakeReadOnly();
    private static readonly string[] _netMessageEntityGuildInfoFieldNames = new string[] { "debugEntityServerString", "entityId", "guildId", "guildMembership", "guildName" };
    private static readonly uint[] _netMessageEntityGuildInfoFieldTags = new uint[] { 42, 8, 16, 32, 26 };
    public static NetMessageEntityGuildInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageEntityGuildInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageEntityGuildInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityGuildInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageEntityGuildInfo, NetMessageEntityGuildInfo.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageEntityGuildInfo__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int GuildIdFieldNumber = 2;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 3;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int GuildMembershipFieldNumber = 4;
    private bool hasGuildMembership;
    private global::Gazillion.GuildMembership guildMembership_ = global::Gazillion.GuildMembership.eGMNone;
    public bool HasGuildMembership {
      get { return hasGuildMembership; }
    }
    public global::Gazillion.GuildMembership GuildMembership {
      get { return guildMembership_; }
    }
    
    public const int DebugEntityServerStringFieldNumber = 5;
    private bool hasDebugEntityServerString;
    private string debugEntityServerString_ = "";
    public bool HasDebugEntityServerString {
      get { return hasDebugEntityServerString; }
    }
    public string DebugEntityServerString {
      get { return debugEntityServerString_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasGuildMembership) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageEntityGuildInfoFieldNames;
      if (hasEntityId) {
        output.WriteUInt64(1, field_names[1], EntityId);
      }
      if (hasGuildId) {
        output.WriteUInt64(2, field_names[2], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(3, field_names[4], GuildName);
      }
      if (hasGuildMembership) {
        output.WriteEnum(4, field_names[3], (int) GuildMembership, GuildMembership);
      }
      if (hasDebugEntityServerString) {
        output.WriteString(5, field_names[0], DebugEntityServerString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EntityId);
      }
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, GuildId);
      }
      if (hasGuildName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, GuildName);
      }
      if (hasGuildMembership) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) GuildMembership);
      }
      if (hasDebugEntityServerString) {
        size += pb::CodedOutputStream.ComputeStringSize(5, DebugEntityServerString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageEntityGuildInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageEntityGuildInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageEntityGuildInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageEntityGuildInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageEntityGuildInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageEntityGuildInfo result;
      
      private NetMessageEntityGuildInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageEntityGuildInfo original = result;
          result = new NetMessageEntityGuildInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageEntityGuildInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageEntityGuildInfo.Descriptor; }
      }
      
      public override NetMessageEntityGuildInfo DefaultInstanceForType {
        get { return global::Gazillion.NetMessageEntityGuildInfo.DefaultInstance; }
      }
      
      public override NetMessageEntityGuildInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageEntityGuildInfo) {
          return MergeFrom((NetMessageEntityGuildInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageEntityGuildInfo other) {
        if (other == global::Gazillion.NetMessageEntityGuildInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasGuildMembership) {
          GuildMembership = other.GuildMembership;
        }
        if (other.HasDebugEntityServerString) {
          DebugEntityServerString = other.DebugEntityServerString;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageEntityGuildInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageEntityGuildInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 26: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.guildMembership_, out unknown)) {
                result.hasGuildMembership = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              result.hasDebugEntityServerString = input.ReadString(ref result.debugEntityServerString_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasGuildMembership {
       get { return result.hasGuildMembership; }
      }
      public global::Gazillion.GuildMembership GuildMembership {
        get { return result.GuildMembership; }
        set { SetGuildMembership(value); }
      }
      public Builder SetGuildMembership(global::Gazillion.GuildMembership value) {
        PrepareBuilder();
        result.hasGuildMembership = true;
        result.guildMembership_ = value;
        return this;
      }
      public Builder ClearGuildMembership() {
        PrepareBuilder();
        result.hasGuildMembership = false;
        result.guildMembership_ = global::Gazillion.GuildMembership.eGMNone;
        return this;
      }
      
      public bool HasDebugEntityServerString {
        get { return result.hasDebugEntityServerString; }
      }
      public string DebugEntityServerString {
        get { return result.DebugEntityServerString; }
        set { SetDebugEntityServerString(value); }
      }
      public Builder SetDebugEntityServerString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugEntityServerString = true;
        result.debugEntityServerString_ = value;
        return this;
      }
      public Builder ClearDebugEntityServerString() {
        PrepareBuilder();
        result.hasDebugEntityServerString = false;
        result.debugEntityServerString_ = "";
        return this;
      }
    }
    static NetMessageEntityGuildInfo() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaveGuild : pb::GeneratedMessage<NetMessageLeaveGuild, NetMessageLeaveGuild.Builder> {
    private NetMessageLeaveGuild() { }
    private static readonly NetMessageLeaveGuild defaultInstance = new NetMessageLeaveGuild().MakeReadOnly();
    private static readonly string[] _netMessageLeaveGuildFieldNames = new string[] { "guildId", "initiatingPlayerName", "reason" };
    private static readonly uint[] _netMessageLeaveGuildFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessageLeaveGuild DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaveGuild DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaveGuild ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaveGuild__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaveGuild, NetMessageLeaveGuild.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaveGuild__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private global::Gazillion.GuildLeaveReason reason_ = global::Gazillion.GuildLeaveReason.eGLR_Left;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::Gazillion.GuildLeaveReason Reason {
      get { return reason_; }
    }
    
    public const int InitiatingPlayerNameFieldNumber = 3;
    private bool hasInitiatingPlayerName;
    private string initiatingPlayerName_ = "";
    public bool HasInitiatingPlayerName {
      get { return hasInitiatingPlayerName; }
    }
    public string InitiatingPlayerName {
      get { return initiatingPlayerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasReason) return false;
        if (!hasInitiatingPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaveGuildFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasReason) {
        output.WriteEnum(2, field_names[2], (int) Reason, Reason);
      }
      if (hasInitiatingPlayerName) {
        output.WriteString(3, field_names[1], InitiatingPlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGuildId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Reason);
      }
      if (hasInitiatingPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InitiatingPlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaveGuild ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaveGuild MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaveGuild prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaveGuild, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaveGuild cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaveGuild result;
      
      private NetMessageLeaveGuild PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaveGuild original = result;
          result = new NetMessageLeaveGuild();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaveGuild MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaveGuild.Descriptor; }
      }
      
      public override NetMessageLeaveGuild DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaveGuild.DefaultInstance; }
      }
      
      public override NetMessageLeaveGuild BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaveGuild) {
          return MergeFrom((NetMessageLeaveGuild) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaveGuild other) {
        if (other == global::Gazillion.NetMessageLeaveGuild.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasInitiatingPlayerName) {
          InitiatingPlayerName = other.InitiatingPlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaveGuildFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaveGuildFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasInitiatingPlayerName = input.ReadString(ref result.initiatingPlayerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::Gazillion.GuildLeaveReason Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::Gazillion.GuildLeaveReason value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::Gazillion.GuildLeaveReason.eGLR_Left;
        return this;
      }
      
      public bool HasInitiatingPlayerName {
        get { return result.hasInitiatingPlayerName; }
      }
      public string InitiatingPlayerName {
        get { return result.InitiatingPlayerName; }
        set { SetInitiatingPlayerName(value); }
      }
      public Builder SetInitiatingPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInitiatingPlayerName = true;
        result.initiatingPlayerName_ = value;
        return this;
      }
      public Builder ClearInitiatingPlayerName() {
        PrepareBuilder();
        result.hasInitiatingPlayerName = false;
        result.initiatingPlayerName_ = "";
        return this;
      }
    }
    static NetMessageLeaveGuild() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGuildSystemMessage : pb::GeneratedMessage<NetMessageGuildSystemMessage, NetMessageGuildSystemMessage.Builder> {
    private NetMessageGuildSystemMessage() { }
    private static readonly NetMessageGuildSystemMessage defaultInstance = new NetMessageGuildSystemMessage().MakeReadOnly();
    private static readonly string[] _netMessageGuildSystemMessageFieldNames = new string[] { "code" };
    private static readonly uint[] _netMessageGuildSystemMessageFieldTags = new uint[] { 8 };
    public static NetMessageGuildSystemMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGuildSystemMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGuildSystemMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildSystemMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGuildSystemMessage, NetMessageGuildSystemMessage.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGuildSystemMessage__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::Gazillion.GuildMessageCode code_ = global::Gazillion.GuildMessageCode.eGMC_None;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::Gazillion.GuildMessageCode Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGuildSystemMessageFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGuildSystemMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGuildSystemMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGuildSystemMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGuildSystemMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGuildSystemMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGuildSystemMessage result;
      
      private NetMessageGuildSystemMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGuildSystemMessage original = result;
          result = new NetMessageGuildSystemMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGuildSystemMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGuildSystemMessage.Descriptor; }
      }
      
      public override NetMessageGuildSystemMessage DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGuildSystemMessage.DefaultInstance; }
      }
      
      public override NetMessageGuildSystemMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGuildSystemMessage) {
          return MergeFrom((NetMessageGuildSystemMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGuildSystemMessage other) {
        if (other == global::Gazillion.NetMessageGuildSystemMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGuildSystemMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGuildSystemMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::Gazillion.GuildMessageCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::Gazillion.GuildMessageCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::Gazillion.GuildMessageCode.eGMC_None;
        return this;
      }
    }
    static NetMessageGuildSystemMessage() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRegionDifficultyChange : pb::GeneratedMessage<NetMessageRegionDifficultyChange, NetMessageRegionDifficultyChange.Builder> {
    private NetMessageRegionDifficultyChange() { }
    private static readonly NetMessageRegionDifficultyChange defaultInstance = new NetMessageRegionDifficultyChange().MakeReadOnly();
    private static readonly string[] _netMessageRegionDifficultyChangeFieldNames = new string[] { "difficultyIndex" };
    private static readonly uint[] _netMessageRegionDifficultyChangeFieldTags = new uint[] { 8 };
    public static NetMessageRegionDifficultyChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRegionDifficultyChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRegionDifficultyChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionDifficultyChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRegionDifficultyChange, NetMessageRegionDifficultyChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRegionDifficultyChange__FieldAccessorTable; }
    }
    
    public const int DifficultyIndexFieldNumber = 1;
    private bool hasDifficultyIndex;
    private ulong difficultyIndex_;
    public bool HasDifficultyIndex {
      get { return hasDifficultyIndex; }
    }
    public ulong DifficultyIndex {
      get { return difficultyIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDifficultyIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRegionDifficultyChangeFieldNames;
      if (hasDifficultyIndex) {
        output.WriteUInt64(1, field_names[0], DifficultyIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDifficultyIndex) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, DifficultyIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRegionDifficultyChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRegionDifficultyChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRegionDifficultyChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRegionDifficultyChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRegionDifficultyChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRegionDifficultyChange result;
      
      private NetMessageRegionDifficultyChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRegionDifficultyChange original = result;
          result = new NetMessageRegionDifficultyChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRegionDifficultyChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRegionDifficultyChange.Descriptor; }
      }
      
      public override NetMessageRegionDifficultyChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRegionDifficultyChange.DefaultInstance; }
      }
      
      public override NetMessageRegionDifficultyChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRegionDifficultyChange) {
          return MergeFrom((NetMessageRegionDifficultyChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRegionDifficultyChange other) {
        if (other == global::Gazillion.NetMessageRegionDifficultyChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDifficultyIndex) {
          DifficultyIndex = other.DifficultyIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRegionDifficultyChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRegionDifficultyChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDifficultyIndex = input.ReadUInt64(ref result.difficultyIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDifficultyIndex {
        get { return result.hasDifficultyIndex; }
      }
      public ulong DifficultyIndex {
        get { return result.DifficultyIndex; }
        set { SetDifficultyIndex(value); }
      }
      public Builder SetDifficultyIndex(ulong value) {
        PrepareBuilder();
        result.hasDifficultyIndex = true;
        result.difficultyIndex_ = value;
        return this;
      }
      public Builder ClearDifficultyIndex() {
        PrepareBuilder();
        result.hasDifficultyIndex = false;
        result.difficultyIndex_ = 0UL;
        return this;
      }
    }
    static NetMessageRegionDifficultyChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameWaveUpdate : pb::GeneratedMessage<NetMessageMetaGameWaveUpdate, NetMessageMetaGameWaveUpdate.Builder> {
    private NetMessageMetaGameWaveUpdate() { }
    private static readonly NetMessageMetaGameWaveUpdate defaultInstance = new NetMessageMetaGameWaveUpdate().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameWaveUpdateFieldNames = new string[] { "currentWaveCount", "maxWaveCount", "metaGameId" };
    private static readonly uint[] _netMessageMetaGameWaveUpdateFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessageMetaGameWaveUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameWaveUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameWaveUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameWaveUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameWaveUpdate, NetMessageMetaGameWaveUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameWaveUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentWaveCountFieldNumber = 1;
    private bool hasCurrentWaveCount;
    private ulong currentWaveCount_;
    public bool HasCurrentWaveCount {
      get { return hasCurrentWaveCount; }
    }
    public ulong CurrentWaveCount {
      get { return currentWaveCount_; }
    }
    
    public const int MaxWaveCountFieldNumber = 2;
    private bool hasMaxWaveCount;
    private ulong maxWaveCount_;
    public bool HasMaxWaveCount {
      get { return hasMaxWaveCount; }
    }
    public ulong MaxWaveCount {
      get { return maxWaveCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentWaveCount) return false;
        if (!hasMaxWaveCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameWaveUpdateFieldNames;
      if (hasCurrentWaveCount) {
        output.WriteUInt64(1, field_names[0], CurrentWaveCount);
      }
      if (hasMaxWaveCount) {
        output.WriteUInt64(2, field_names[1], MaxWaveCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[2], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentWaveCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentWaveCount);
      }
      if (hasMaxWaveCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MaxWaveCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameWaveUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameWaveUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameWaveUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameWaveUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameWaveUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameWaveUpdate result;
      
      private NetMessageMetaGameWaveUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameWaveUpdate original = result;
          result = new NetMessageMetaGameWaveUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameWaveUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameWaveUpdate.Descriptor; }
      }
      
      public override NetMessageMetaGameWaveUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameWaveUpdate.DefaultInstance; }
      }
      
      public override NetMessageMetaGameWaveUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameWaveUpdate) {
          return MergeFrom((NetMessageMetaGameWaveUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameWaveUpdate other) {
        if (other == global::Gazillion.NetMessageMetaGameWaveUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentWaveCount) {
          CurrentWaveCount = other.CurrentWaveCount;
        }
        if (other.HasMaxWaveCount) {
          MaxWaveCount = other.MaxWaveCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameWaveUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameWaveUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentWaveCount = input.ReadUInt64(ref result.currentWaveCount_);
              break;
            }
            case 16: {
              result.hasMaxWaveCount = input.ReadUInt64(ref result.maxWaveCount_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentWaveCount {
        get { return result.hasCurrentWaveCount; }
      }
      public ulong CurrentWaveCount {
        get { return result.CurrentWaveCount; }
        set { SetCurrentWaveCount(value); }
      }
      public Builder SetCurrentWaveCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentWaveCount = true;
        result.currentWaveCount_ = value;
        return this;
      }
      public Builder ClearCurrentWaveCount() {
        PrepareBuilder();
        result.hasCurrentWaveCount = false;
        result.currentWaveCount_ = 0UL;
        return this;
      }
      
      public bool HasMaxWaveCount {
        get { return result.hasMaxWaveCount; }
      }
      public ulong MaxWaveCount {
        get { return result.MaxWaveCount; }
        set { SetMaxWaveCount(value); }
      }
      public Builder SetMaxWaveCount(ulong value) {
        PrepareBuilder();
        result.hasMaxWaveCount = true;
        result.maxWaveCount_ = value;
        return this;
      }
      public Builder ClearMaxWaveCount() {
        PrepareBuilder();
        result.hasMaxWaveCount = false;
        result.maxWaveCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessageMetaGameWaveUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvEInstanceCrystalUpdate : pb::GeneratedMessage<NetMessagePvEInstanceCrystalUpdate, NetMessagePvEInstanceCrystalUpdate.Builder> {
    private NetMessagePvEInstanceCrystalUpdate() { }
    private static readonly NetMessagePvEInstanceCrystalUpdate defaultInstance = new NetMessagePvEInstanceCrystalUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvEInstanceCrystalUpdateFieldNames = new string[] { "currentCrystalCount", "maxCrystalCount", "metaGameId" };
    private static readonly uint[] _netMessagePvEInstanceCrystalUpdateFieldTags = new uint[] { 8, 16, 24 };
    public static NetMessagePvEInstanceCrystalUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvEInstanceCrystalUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvEInstanceCrystalUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvEInstanceCrystalUpdate, NetMessagePvEInstanceCrystalUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceCrystalUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentCrystalCountFieldNumber = 1;
    private bool hasCurrentCrystalCount;
    private ulong currentCrystalCount_;
    public bool HasCurrentCrystalCount {
      get { return hasCurrentCrystalCount; }
    }
    public ulong CurrentCrystalCount {
      get { return currentCrystalCount_; }
    }
    
    public const int MaxCrystalCountFieldNumber = 2;
    private bool hasMaxCrystalCount;
    private ulong maxCrystalCount_;
    public bool HasMaxCrystalCount {
      get { return hasMaxCrystalCount; }
    }
    public ulong MaxCrystalCount {
      get { return maxCrystalCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 3;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentCrystalCount) return false;
        if (!hasMaxCrystalCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvEInstanceCrystalUpdateFieldNames;
      if (hasCurrentCrystalCount) {
        output.WriteUInt64(1, field_names[0], CurrentCrystalCount);
      }
      if (hasMaxCrystalCount) {
        output.WriteUInt64(2, field_names[1], MaxCrystalCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(3, field_names[2], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentCrystalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentCrystalCount);
      }
      if (hasMaxCrystalCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MaxCrystalCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceCrystalUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvEInstanceCrystalUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvEInstanceCrystalUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvEInstanceCrystalUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvEInstanceCrystalUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvEInstanceCrystalUpdate result;
      
      private NetMessagePvEInstanceCrystalUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvEInstanceCrystalUpdate original = result;
          result = new NetMessagePvEInstanceCrystalUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvEInstanceCrystalUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvEInstanceCrystalUpdate.Descriptor; }
      }
      
      public override NetMessagePvEInstanceCrystalUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvEInstanceCrystalUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvEInstanceCrystalUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvEInstanceCrystalUpdate) {
          return MergeFrom((NetMessagePvEInstanceCrystalUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvEInstanceCrystalUpdate other) {
        if (other == global::Gazillion.NetMessagePvEInstanceCrystalUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentCrystalCount) {
          CurrentCrystalCount = other.CurrentCrystalCount;
        }
        if (other.HasMaxCrystalCount) {
          MaxCrystalCount = other.MaxCrystalCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvEInstanceCrystalUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvEInstanceCrystalUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentCrystalCount = input.ReadUInt64(ref result.currentCrystalCount_);
              break;
            }
            case 16: {
              result.hasMaxCrystalCount = input.ReadUInt64(ref result.maxCrystalCount_);
              break;
            }
            case 24: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentCrystalCount {
        get { return result.hasCurrentCrystalCount; }
      }
      public ulong CurrentCrystalCount {
        get { return result.CurrentCrystalCount; }
        set { SetCurrentCrystalCount(value); }
      }
      public Builder SetCurrentCrystalCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentCrystalCount = true;
        result.currentCrystalCount_ = value;
        return this;
      }
      public Builder ClearCurrentCrystalCount() {
        PrepareBuilder();
        result.hasCurrentCrystalCount = false;
        result.currentCrystalCount_ = 0UL;
        return this;
      }
      
      public bool HasMaxCrystalCount {
        get { return result.hasMaxCrystalCount; }
      }
      public ulong MaxCrystalCount {
        get { return result.MaxCrystalCount; }
        set { SetMaxCrystalCount(value); }
      }
      public Builder SetMaxCrystalCount(ulong value) {
        PrepareBuilder();
        result.hasMaxCrystalCount = true;
        result.maxCrystalCount_ = value;
        return this;
      }
      public Builder ClearMaxCrystalCount() {
        PrepareBuilder();
        result.hasMaxCrystalCount = false;
        result.maxCrystalCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvEInstanceCrystalUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvEInstanceDeathUpdate : pb::GeneratedMessage<NetMessagePvEInstanceDeathUpdate, NetMessagePvEInstanceDeathUpdate.Builder> {
    private NetMessagePvEInstanceDeathUpdate() { }
    private static readonly NetMessagePvEInstanceDeathUpdate defaultInstance = new NetMessagePvEInstanceDeathUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvEInstanceDeathUpdateFieldNames = new string[] { "currentDeathCount", "metaGameId" };
    private static readonly uint[] _netMessagePvEInstanceDeathUpdateFieldTags = new uint[] { 8, 16 };
    public static NetMessagePvEInstanceDeathUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvEInstanceDeathUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvEInstanceDeathUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvEInstanceDeathUpdate, NetMessagePvEInstanceDeathUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceDeathUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentDeathCountFieldNumber = 1;
    private bool hasCurrentDeathCount;
    private ulong currentDeathCount_;
    public bool HasCurrentDeathCount {
      get { return hasCurrentDeathCount; }
    }
    public ulong CurrentDeathCount {
      get { return currentDeathCount_; }
    }
    
    public const int MetaGameIdFieldNumber = 2;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentDeathCount) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvEInstanceDeathUpdateFieldNames;
      if (hasCurrentDeathCount) {
        output.WriteUInt64(1, field_names[0], CurrentDeathCount);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(2, field_names[1], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentDeathCount) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentDeathCount);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceDeathUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvEInstanceDeathUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvEInstanceDeathUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvEInstanceDeathUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvEInstanceDeathUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvEInstanceDeathUpdate result;
      
      private NetMessagePvEInstanceDeathUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvEInstanceDeathUpdate original = result;
          result = new NetMessagePvEInstanceDeathUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvEInstanceDeathUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvEInstanceDeathUpdate.Descriptor; }
      }
      
      public override NetMessagePvEInstanceDeathUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvEInstanceDeathUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvEInstanceDeathUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvEInstanceDeathUpdate) {
          return MergeFrom((NetMessagePvEInstanceDeathUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvEInstanceDeathUpdate other) {
        if (other == global::Gazillion.NetMessagePvEInstanceDeathUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentDeathCount) {
          CurrentDeathCount = other.CurrentDeathCount;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvEInstanceDeathUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvEInstanceDeathUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentDeathCount = input.ReadUInt64(ref result.currentDeathCount_);
              break;
            }
            case 16: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentDeathCount {
        get { return result.hasCurrentDeathCount; }
      }
      public ulong CurrentDeathCount {
        get { return result.CurrentDeathCount; }
        set { SetCurrentDeathCount(value); }
      }
      public Builder SetCurrentDeathCount(ulong value) {
        PrepareBuilder();
        result.hasCurrentDeathCount = true;
        result.currentDeathCount_ = value;
        return this;
      }
      public Builder ClearCurrentDeathCount() {
        PrepareBuilder();
        result.hasCurrentDeathCount = false;
        result.currentDeathCount_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvEInstanceDeathUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePvEInstanceRegionScoreUpdate : pb::GeneratedMessage<NetMessagePvEInstanceRegionScoreUpdate, NetMessagePvEInstanceRegionScoreUpdate.Builder> {
    private NetMessagePvEInstanceRegionScoreUpdate() { }
    private static readonly NetMessagePvEInstanceRegionScoreUpdate defaultInstance = new NetMessagePvEInstanceRegionScoreUpdate().MakeReadOnly();
    private static readonly string[] _netMessagePvEInstanceRegionScoreUpdateFieldNames = new string[] { "currentRegionScore", "metaGameId" };
    private static readonly uint[] _netMessagePvEInstanceRegionScoreUpdateFieldTags = new uint[] { 8, 16 };
    public static NetMessagePvEInstanceRegionScoreUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePvEInstanceRegionScoreUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePvEInstanceRegionScoreUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePvEInstanceRegionScoreUpdate, NetMessagePvEInstanceRegionScoreUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePvEInstanceRegionScoreUpdate__FieldAccessorTable; }
    }
    
    public const int CurrentRegionScoreFieldNumber = 1;
    private bool hasCurrentRegionScore;
    private ulong currentRegionScore_;
    public bool HasCurrentRegionScore {
      get { return hasCurrentRegionScore; }
    }
    public ulong CurrentRegionScore {
      get { return currentRegionScore_; }
    }
    
    public const int MetaGameIdFieldNumber = 2;
    private bool hasMetaGameId;
    private ulong metaGameId_;
    public bool HasMetaGameId {
      get { return hasMetaGameId; }
    }
    public ulong MetaGameId {
      get { return metaGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentRegionScore) return false;
        if (!hasMetaGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePvEInstanceRegionScoreUpdateFieldNames;
      if (hasCurrentRegionScore) {
        output.WriteUInt64(1, field_names[0], CurrentRegionScore);
      }
      if (hasMetaGameId) {
        output.WriteUInt64(2, field_names[1], MetaGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurrentRegionScore) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CurrentRegionScore);
      }
      if (hasMetaGameId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MetaGameId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePvEInstanceRegionScoreUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePvEInstanceRegionScoreUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePvEInstanceRegionScoreUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePvEInstanceRegionScoreUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePvEInstanceRegionScoreUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePvEInstanceRegionScoreUpdate result;
      
      private NetMessagePvEInstanceRegionScoreUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePvEInstanceRegionScoreUpdate original = result;
          result = new NetMessagePvEInstanceRegionScoreUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePvEInstanceRegionScoreUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate.Descriptor; }
      }
      
      public override NetMessagePvEInstanceRegionScoreUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate.DefaultInstance; }
      }
      
      public override NetMessagePvEInstanceRegionScoreUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePvEInstanceRegionScoreUpdate) {
          return MergeFrom((NetMessagePvEInstanceRegionScoreUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePvEInstanceRegionScoreUpdate other) {
        if (other == global::Gazillion.NetMessagePvEInstanceRegionScoreUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentRegionScore) {
          CurrentRegionScore = other.CurrentRegionScore;
        }
        if (other.HasMetaGameId) {
          MetaGameId = other.MetaGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePvEInstanceRegionScoreUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePvEInstanceRegionScoreUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentRegionScore = input.ReadUInt64(ref result.currentRegionScore_);
              break;
            }
            case 16: {
              result.hasMetaGameId = input.ReadUInt64(ref result.metaGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentRegionScore {
        get { return result.hasCurrentRegionScore; }
      }
      public ulong CurrentRegionScore {
        get { return result.CurrentRegionScore; }
        set { SetCurrentRegionScore(value); }
      }
      public Builder SetCurrentRegionScore(ulong value) {
        PrepareBuilder();
        result.hasCurrentRegionScore = true;
        result.currentRegionScore_ = value;
        return this;
      }
      public Builder ClearCurrentRegionScore() {
        PrepareBuilder();
        result.hasCurrentRegionScore = false;
        result.currentRegionScore_ = 0UL;
        return this;
      }
      
      public bool HasMetaGameId {
        get { return result.hasMetaGameId; }
      }
      public ulong MetaGameId {
        get { return result.MetaGameId; }
        set { SetMetaGameId(value); }
      }
      public Builder SetMetaGameId(ulong value) {
        PrepareBuilder();
        result.hasMetaGameId = true;
        result.metaGameId_ = value;
        return this;
      }
      public Builder ClearMetaGameId() {
        PrepareBuilder();
        result.hasMetaGameId = false;
        result.metaGameId_ = 0UL;
        return this;
      }
    }
    static NetMessagePvEInstanceRegionScoreUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMetaGameBanner : pb::GeneratedMessage<NetMessageMetaGameBanner, NetMessageMetaGameBanner.Builder> {
    private NetMessageMetaGameBanner() { }
    private static readonly NetMessageMetaGameBanner defaultInstance = new NetMessageMetaGameBanner().MakeReadOnly();
    private static readonly string[] _netMessageMetaGameBannerFieldNames = new string[] { "argStringIds", "intArgs", "messageStringId", "playerName1", "playerName2" };
    private static readonly uint[] _netMessageMetaGameBannerFieldTags = new uint[] { 32, 40, 8, 18, 26 };
    public static NetMessageMetaGameBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMetaGameBanner DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMetaGameBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMetaGameBanner, NetMessageMetaGameBanner.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMetaGameBanner__FieldAccessorTable; }
    }
    
    public const int MessageStringIdFieldNumber = 1;
    private bool hasMessageStringId;
    private ulong messageStringId_;
    public bool HasMessageStringId {
      get { return hasMessageStringId; }
    }
    public ulong MessageStringId {
      get { return messageStringId_; }
    }
    
    public const int PlayerName1FieldNumber = 2;
    private bool hasPlayerName1;
    private string playerName1_ = "";
    public bool HasPlayerName1 {
      get { return hasPlayerName1; }
    }
    public string PlayerName1 {
      get { return playerName1_; }
    }
    
    public const int PlayerName2FieldNumber = 3;
    private bool hasPlayerName2;
    private string playerName2_ = "";
    public bool HasPlayerName2 {
      get { return hasPlayerName2; }
    }
    public string PlayerName2 {
      get { return playerName2_; }
    }
    
    public const int ArgStringIdsFieldNumber = 4;
    private pbc::PopsicleList<ulong> argStringIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ArgStringIdsList {
      get { return pbc::Lists.AsReadOnly(argStringIds_); }
    }
    public int ArgStringIdsCount {
      get { return argStringIds_.Count; }
    }
    public ulong GetArgStringIds(int index) {
      return argStringIds_[index];
    }
    
    public const int IntArgsFieldNumber = 5;
    private pbc::PopsicleList<long> intArgs_ = new pbc::PopsicleList<long>();
    public scg::IList<long> IntArgsList {
      get { return pbc::Lists.AsReadOnly(intArgs_); }
    }
    public int IntArgsCount {
      get { return intArgs_.Count; }
    }
    public long GetIntArgs(int index) {
      return intArgs_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageStringId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMetaGameBannerFieldNames;
      if (hasMessageStringId) {
        output.WriteUInt64(1, field_names[2], MessageStringId);
      }
      if (hasPlayerName1) {
        output.WriteString(2, field_names[3], PlayerName1);
      }
      if (hasPlayerName2) {
        output.WriteString(3, field_names[4], PlayerName2);
      }
      if (argStringIds_.Count > 0) {
        output.WriteUInt64Array(4, field_names[0], argStringIds_);
      }
      if (intArgs_.Count > 0) {
        output.WriteInt64Array(5, field_names[1], intArgs_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageStringId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MessageStringId);
      }
      if (hasPlayerName1) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName1);
      }
      if (hasPlayerName2) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName2);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ArgStringIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * argStringIds_.Count;
      }
      {
        int dataSize = 0;
        foreach (long element in IntArgsList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * intArgs_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMetaGameBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMetaGameBanner ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMetaGameBanner MakeReadOnly() {
      argStringIds_.MakeReadOnly();
      intArgs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMetaGameBanner prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMetaGameBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMetaGameBanner cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMetaGameBanner result;
      
      private NetMessageMetaGameBanner PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMetaGameBanner original = result;
          result = new NetMessageMetaGameBanner();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMetaGameBanner MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMetaGameBanner.Descriptor; }
      }
      
      public override NetMessageMetaGameBanner DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMetaGameBanner.DefaultInstance; }
      }
      
      public override NetMessageMetaGameBanner BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMetaGameBanner) {
          return MergeFrom((NetMessageMetaGameBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMetaGameBanner other) {
        if (other == global::Gazillion.NetMessageMetaGameBanner.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageStringId) {
          MessageStringId = other.MessageStringId;
        }
        if (other.HasPlayerName1) {
          PlayerName1 = other.PlayerName1;
        }
        if (other.HasPlayerName2) {
          PlayerName2 = other.PlayerName2;
        }
        if (other.argStringIds_.Count != 0) {
          result.argStringIds_.Add(other.argStringIds_);
        }
        if (other.intArgs_.Count != 0) {
          result.intArgs_.Add(other.intArgs_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMetaGameBannerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMetaGameBannerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageStringId = input.ReadUInt64(ref result.messageStringId_);
              break;
            }
            case 18: {
              result.hasPlayerName1 = input.ReadString(ref result.playerName1_);
              break;
            }
            case 26: {
              result.hasPlayerName2 = input.ReadString(ref result.playerName2_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt64Array(tag, field_name, result.argStringIds_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt64Array(tag, field_name, result.intArgs_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageStringId {
        get { return result.hasMessageStringId; }
      }
      public ulong MessageStringId {
        get { return result.MessageStringId; }
        set { SetMessageStringId(value); }
      }
      public Builder SetMessageStringId(ulong value) {
        PrepareBuilder();
        result.hasMessageStringId = true;
        result.messageStringId_ = value;
        return this;
      }
      public Builder ClearMessageStringId() {
        PrepareBuilder();
        result.hasMessageStringId = false;
        result.messageStringId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName1 {
        get { return result.hasPlayerName1; }
      }
      public string PlayerName1 {
        get { return result.PlayerName1; }
        set { SetPlayerName1(value); }
      }
      public Builder SetPlayerName1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName1 = true;
        result.playerName1_ = value;
        return this;
      }
      public Builder ClearPlayerName1() {
        PrepareBuilder();
        result.hasPlayerName1 = false;
        result.playerName1_ = "";
        return this;
      }
      
      public bool HasPlayerName2 {
        get { return result.hasPlayerName2; }
      }
      public string PlayerName2 {
        get { return result.PlayerName2; }
        set { SetPlayerName2(value); }
      }
      public Builder SetPlayerName2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName2 = true;
        result.playerName2_ = value;
        return this;
      }
      public Builder ClearPlayerName2() {
        PrepareBuilder();
        result.hasPlayerName2 = false;
        result.playerName2_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ArgStringIdsList {
        get { return PrepareBuilder().argStringIds_; }
      }
      public int ArgStringIdsCount {
        get { return result.ArgStringIdsCount; }
      }
      public ulong GetArgStringIds(int index) {
        return result.GetArgStringIds(index);
      }
      public Builder SetArgStringIds(int index, ulong value) {
        PrepareBuilder();
        result.argStringIds_[index] = value;
        return this;
      }
      public Builder AddArgStringIds(ulong value) {
        PrepareBuilder();
        result.argStringIds_.Add(value);
        return this;
      }
      public Builder AddRangeArgStringIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.argStringIds_.Add(values);
        return this;
      }
      public Builder ClearArgStringIds() {
        PrepareBuilder();
        result.argStringIds_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> IntArgsList {
        get { return PrepareBuilder().intArgs_; }
      }
      public int IntArgsCount {
        get { return result.IntArgsCount; }
      }
      public long GetIntArgs(int index) {
        return result.GetIntArgs(index);
      }
      public Builder SetIntArgs(int index, long value) {
        PrepareBuilder();
        result.intArgs_[index] = value;
        return this;
      }
      public Builder AddIntArgs(long value) {
        PrepareBuilder();
        result.intArgs_.Add(value);
        return this;
      }
      public Builder AddRangeIntArgs(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.intArgs_.Add(values);
        return this;
      }
      public Builder ClearIntArgs() {
        PrepareBuilder();
        result.intArgs_.Clear();
        return this;
      }
    }
    static NetMessageMetaGameBanner() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePostDialogToClient : pb::GeneratedMessage<NetMessagePostDialogToClient, NetMessagePostDialogToClient.Builder> {
    private NetMessagePostDialogToClient() { }
    private static readonly NetMessagePostDialogToClient defaultInstance = new NetMessagePostDialogToClient().MakeReadOnly();
    private static readonly string[] _netMessagePostDialogToClientFieldNames = new string[] { "ServerId", "dialog", "playerGuid" };
    private static readonly uint[] _netMessagePostDialogToClientFieldTags = new uint[] { 8, 26, 16 };
    public static NetMessagePostDialogToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePostDialogToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePostDialogToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePostDialogToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePostDialogToClient, NetMessagePostDialogToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePostDialogToClient__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private ulong serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public ulong ServerId {
      get { return serverId_; }
    }
    
    public const int PlayerGuidFieldNumber = 2;
    private bool hasPlayerGuid;
    private ulong playerGuid_;
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public ulong PlayerGuid {
      get { return playerGuid_; }
    }
    
    public const int DialogFieldNumber = 3;
    private bool hasDialog;
    private global::Gazillion.NetStructDialog dialog_;
    public bool HasDialog {
      get { return hasDialog; }
    }
    public global::Gazillion.NetStructDialog Dialog {
      get { return dialog_ ?? global::Gazillion.NetStructDialog.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!hasPlayerGuid) return false;
        if (!hasDialog) return false;
        if (!Dialog.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePostDialogToClientFieldNames;
      if (hasServerId) {
        output.WriteUInt64(1, field_names[0], ServerId);
      }
      if (hasPlayerGuid) {
        output.WriteUInt64(2, field_names[2], PlayerGuid);
      }
      if (hasDialog) {
        output.WriteMessage(3, field_names[1], Dialog);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ServerId);
      }
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerGuid);
      }
      if (hasDialog) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Dialog);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePostDialogToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePostDialogToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePostDialogToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePostDialogToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePostDialogToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePostDialogToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePostDialogToClient result;
      
      private NetMessagePostDialogToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePostDialogToClient original = result;
          result = new NetMessagePostDialogToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePostDialogToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePostDialogToClient.Descriptor; }
      }
      
      public override NetMessagePostDialogToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePostDialogToClient.DefaultInstance; }
      }
      
      public override NetMessagePostDialogToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePostDialogToClient) {
          return MergeFrom((NetMessagePostDialogToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePostDialogToClient other) {
        if (other == global::Gazillion.NetMessagePostDialogToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        if (other.HasDialog) {
          MergeDialog(other.Dialog);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePostDialogToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePostDialogToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServerId = input.ReadUInt64(ref result.serverId_);
              break;
            }
            case 16: {
              result.hasPlayerGuid = input.ReadUInt64(ref result.playerGuid_);
              break;
            }
            case 26: {
              global::Gazillion.NetStructDialog.Builder subBuilder = global::Gazillion.NetStructDialog.CreateBuilder();
              if (result.hasDialog) {
                subBuilder.MergeFrom(Dialog);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Dialog = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      public ulong ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(ulong value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public ulong PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = 0UL;
        return this;
      }
      
      public bool HasDialog {
       get { return result.hasDialog; }
      }
      public global::Gazillion.NetStructDialog Dialog {
        get { return result.Dialog; }
        set { SetDialog(value); }
      }
      public Builder SetDialog(global::Gazillion.NetStructDialog value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDialog = true;
        result.dialog_ = value;
        return this;
      }
      public Builder SetDialog(global::Gazillion.NetStructDialog.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDialog = true;
        result.dialog_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDialog(global::Gazillion.NetStructDialog value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDialog &&
            result.dialog_ != global::Gazillion.NetStructDialog.DefaultInstance) {
            result.dialog_ = global::Gazillion.NetStructDialog.CreateBuilder(result.dialog_).MergeFrom(value).BuildPartial();
        } else {
          result.dialog_ = value;
        }
        result.hasDialog = true;
        return this;
      }
      public Builder ClearDialog() {
        PrepareBuilder();
        result.hasDialog = false;
        result.dialog_ = null;
        return this;
      }
    }
    static NetMessagePostDialogToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRemoveDialogFromClient : pb::GeneratedMessage<NetMessageRemoveDialogFromClient, NetMessageRemoveDialogFromClient.Builder> {
    private NetMessageRemoveDialogFromClient() { }
    private static readonly NetMessageRemoveDialogFromClient defaultInstance = new NetMessageRemoveDialogFromClient().MakeReadOnly();
    private static readonly string[] _netMessageRemoveDialogFromClientFieldNames = new string[] { "playerGuid", "serverId" };
    private static readonly uint[] _netMessageRemoveDialogFromClientFieldTags = new uint[] { 16, 8 };
    public static NetMessageRemoveDialogFromClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRemoveDialogFromClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRemoveDialogFromClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveDialogFromClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRemoveDialogFromClient, NetMessageRemoveDialogFromClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRemoveDialogFromClient__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private ulong serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public ulong ServerId {
      get { return serverId_; }
    }
    
    public const int PlayerGuidFieldNumber = 2;
    private bool hasPlayerGuid;
    private ulong playerGuid_;
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public ulong PlayerGuid {
      get { return playerGuid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!hasPlayerGuid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRemoveDialogFromClientFieldNames;
      if (hasServerId) {
        output.WriteUInt64(1, field_names[1], ServerId);
      }
      if (hasPlayerGuid) {
        output.WriteUInt64(2, field_names[0], PlayerGuid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ServerId);
      }
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PlayerGuid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRemoveDialogFromClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRemoveDialogFromClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRemoveDialogFromClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRemoveDialogFromClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRemoveDialogFromClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRemoveDialogFromClient result;
      
      private NetMessageRemoveDialogFromClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRemoveDialogFromClient original = result;
          result = new NetMessageRemoveDialogFromClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRemoveDialogFromClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRemoveDialogFromClient.Descriptor; }
      }
      
      public override NetMessageRemoveDialogFromClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRemoveDialogFromClient.DefaultInstance; }
      }
      
      public override NetMessageRemoveDialogFromClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRemoveDialogFromClient) {
          return MergeFrom((NetMessageRemoveDialogFromClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRemoveDialogFromClient other) {
        if (other == global::Gazillion.NetMessageRemoveDialogFromClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRemoveDialogFromClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRemoveDialogFromClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServerId = input.ReadUInt64(ref result.serverId_);
              break;
            }
            case 16: {
              result.hasPlayerGuid = input.ReadUInt64(ref result.playerGuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      public ulong ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(ulong value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public ulong PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = 0UL;
        return this;
      }
    }
    static NetMessageRemoveDialogFromClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCancelPendingActionToClient : pb::GeneratedMessage<NetMessageCancelPendingActionToClient, NetMessageCancelPendingActionToClient.Builder> {
    private NetMessageCancelPendingActionToClient() { }
    private static readonly NetMessageCancelPendingActionToClient defaultInstance = new NetMessageCancelPendingActionToClient().MakeReadOnly();
    private static readonly string[] _netMessageCancelPendingActionToClientFieldNames = new string[] { "avatarIndex" };
    private static readonly uint[] _netMessageCancelPendingActionToClientFieldTags = new uint[] { 8 };
    public static NetMessageCancelPendingActionToClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCancelPendingActionToClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCancelPendingActionToClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPendingActionToClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCancelPendingActionToClient, NetMessageCancelPendingActionToClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCancelPendingActionToClient__FieldAccessorTable; }
    }
    
    public const int AvatarIndexFieldNumber = 1;
    private bool hasAvatarIndex;
    private int avatarIndex_;
    public bool HasAvatarIndex {
      get { return hasAvatarIndex; }
    }
    public int AvatarIndex {
      get { return avatarIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvatarIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCancelPendingActionToClientFieldNames;
      if (hasAvatarIndex) {
        output.WriteInt32(1, field_names[0], AvatarIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAvatarIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AvatarIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCancelPendingActionToClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCancelPendingActionToClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCancelPendingActionToClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCancelPendingActionToClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCancelPendingActionToClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCancelPendingActionToClient result;
      
      private NetMessageCancelPendingActionToClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCancelPendingActionToClient original = result;
          result = new NetMessageCancelPendingActionToClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCancelPendingActionToClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCancelPendingActionToClient.Descriptor; }
      }
      
      public override NetMessageCancelPendingActionToClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCancelPendingActionToClient.DefaultInstance; }
      }
      
      public override NetMessageCancelPendingActionToClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCancelPendingActionToClient) {
          return MergeFrom((NetMessageCancelPendingActionToClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCancelPendingActionToClient other) {
        if (other == global::Gazillion.NetMessageCancelPendingActionToClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAvatarIndex) {
          AvatarIndex = other.AvatarIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCancelPendingActionToClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCancelPendingActionToClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAvatarIndex = input.ReadInt32(ref result.avatarIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAvatarIndex {
        get { return result.hasAvatarIndex; }
      }
      public int AvatarIndex {
        get { return result.AvatarIndex; }
        set { SetAvatarIndex(value); }
      }
      public Builder SetAvatarIndex(int value) {
        PrepareBuilder();
        result.hasAvatarIndex = true;
        result.avatarIndex_ = value;
        return this;
      }
      public Builder ClearAvatarIndex() {
        PrepareBuilder();
        result.hasAvatarIndex = false;
        result.avatarIndex_ = 0;
        return this;
      }
    }
    static NetMessageCancelPendingActionToClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRecvAkEventFromEntity : pb::GeneratedMessage<NetMessageRecvAkEventFromEntity, NetMessageRecvAkEventFromEntity.Builder> {
    private NetMessageRecvAkEventFromEntity() { }
    private static readonly NetMessageRecvAkEventFromEntity defaultInstance = new NetMessageRecvAkEventFromEntity().MakeReadOnly();
    private static readonly string[] _netMessageRecvAkEventFromEntityFieldNames = new string[] { "akEventId", "cooldownMS", "entityId", "eventType", "isVO" };
    private static readonly uint[] _netMessageRecvAkEventFromEntityFieldTags = new uint[] { 8, 40, 16, 32, 24 };
    public static NetMessageRecvAkEventFromEntity DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRecvAkEventFromEntity DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRecvAkEventFromEntity ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRecvAkEventFromEntity__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRecvAkEventFromEntity, NetMessageRecvAkEventFromEntity.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRecvAkEventFromEntity__FieldAccessorTable; }
    }
    
    public const int AkEventIdFieldNumber = 1;
    private bool hasAkEventId;
    private uint akEventId_;
    public bool HasAkEventId {
      get { return hasAkEventId; }
    }
    public uint AkEventId {
      get { return akEventId_; }
    }
    
    public const int EntityIdFieldNumber = 2;
    private bool hasEntityId;
    private ulong entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public ulong EntityId {
      get { return entityId_; }
    }
    
    public const int IsVOFieldNumber = 3;
    private bool hasIsVO;
    private bool isVO_;
    public bool HasIsVO {
      get { return hasIsVO; }
    }
    public bool IsVO {
      get { return isVO_; }
    }
    
    public const int EventTypeFieldNumber = 4;
    private bool hasEventType;
    private uint eventType_;
    public bool HasEventType {
      get { return hasEventType; }
    }
    public uint EventType {
      get { return eventType_; }
    }
    
    public const int CooldownMSFieldNumber = 5;
    private bool hasCooldownMS;
    private uint cooldownMS_;
    public bool HasCooldownMS {
      get { return hasCooldownMS; }
    }
    public uint CooldownMS {
      get { return cooldownMS_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAkEventId) return false;
        if (!hasEntityId) return false;
        if (!hasIsVO) return false;
        if (!hasEventType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRecvAkEventFromEntityFieldNames;
      if (hasAkEventId) {
        output.WriteUInt32(1, field_names[0], AkEventId);
      }
      if (hasEntityId) {
        output.WriteUInt64(2, field_names[2], EntityId);
      }
      if (hasIsVO) {
        output.WriteBool(3, field_names[4], IsVO);
      }
      if (hasEventType) {
        output.WriteUInt32(4, field_names[3], EventType);
      }
      if (hasCooldownMS) {
        output.WriteUInt32(5, field_names[1], CooldownMS);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAkEventId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AkEventId);
      }
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, EntityId);
      }
      if (hasIsVO) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsVO);
      }
      if (hasEventType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, EventType);
      }
      if (hasCooldownMS) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CooldownMS);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRecvAkEventFromEntity ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRecvAkEventFromEntity MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRecvAkEventFromEntity prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRecvAkEventFromEntity, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRecvAkEventFromEntity cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRecvAkEventFromEntity result;
      
      private NetMessageRecvAkEventFromEntity PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRecvAkEventFromEntity original = result;
          result = new NetMessageRecvAkEventFromEntity();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRecvAkEventFromEntity MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRecvAkEventFromEntity.Descriptor; }
      }
      
      public override NetMessageRecvAkEventFromEntity DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRecvAkEventFromEntity.DefaultInstance; }
      }
      
      public override NetMessageRecvAkEventFromEntity BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRecvAkEventFromEntity) {
          return MergeFrom((NetMessageRecvAkEventFromEntity) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRecvAkEventFromEntity other) {
        if (other == global::Gazillion.NetMessageRecvAkEventFromEntity.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAkEventId) {
          AkEventId = other.AkEventId;
        }
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasIsVO) {
          IsVO = other.IsVO;
        }
        if (other.HasEventType) {
          EventType = other.EventType;
        }
        if (other.HasCooldownMS) {
          CooldownMS = other.CooldownMS;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRecvAkEventFromEntityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRecvAkEventFromEntityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAkEventId = input.ReadUInt32(ref result.akEventId_);
              break;
            }
            case 16: {
              result.hasEntityId = input.ReadUInt64(ref result.entityId_);
              break;
            }
            case 24: {
              result.hasIsVO = input.ReadBool(ref result.isVO_);
              break;
            }
            case 32: {
              result.hasEventType = input.ReadUInt32(ref result.eventType_);
              break;
            }
            case 40: {
              result.hasCooldownMS = input.ReadUInt32(ref result.cooldownMS_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAkEventId {
        get { return result.hasAkEventId; }
      }
      public uint AkEventId {
        get { return result.AkEventId; }
        set { SetAkEventId(value); }
      }
      public Builder SetAkEventId(uint value) {
        PrepareBuilder();
        result.hasAkEventId = true;
        result.akEventId_ = value;
        return this;
      }
      public Builder ClearAkEventId() {
        PrepareBuilder();
        result.hasAkEventId = false;
        result.akEventId_ = 0;
        return this;
      }
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      public ulong EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(ulong value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0UL;
        return this;
      }
      
      public bool HasIsVO {
        get { return result.hasIsVO; }
      }
      public bool IsVO {
        get { return result.IsVO; }
        set { SetIsVO(value); }
      }
      public Builder SetIsVO(bool value) {
        PrepareBuilder();
        result.hasIsVO = true;
        result.isVO_ = value;
        return this;
      }
      public Builder ClearIsVO() {
        PrepareBuilder();
        result.hasIsVO = false;
        result.isVO_ = false;
        return this;
      }
      
      public bool HasEventType {
        get { return result.hasEventType; }
      }
      public uint EventType {
        get { return result.EventType; }
        set { SetEventType(value); }
      }
      public Builder SetEventType(uint value) {
        PrepareBuilder();
        result.hasEventType = true;
        result.eventType_ = value;
        return this;
      }
      public Builder ClearEventType() {
        PrepareBuilder();
        result.hasEventType = false;
        result.eventType_ = 0;
        return this;
      }
      
      public bool HasCooldownMS {
        get { return result.hasCooldownMS; }
      }
      public uint CooldownMS {
        get { return result.CooldownMS; }
        set { SetCooldownMS(value); }
      }
      public Builder SetCooldownMS(uint value) {
        PrepareBuilder();
        result.hasCooldownMS = true;
        result.cooldownMS_ = value;
        return this;
      }
      public Builder ClearCooldownMS() {
        PrepareBuilder();
        result.hasCooldownMS = false;
        result.cooldownMS_ = 0;
        return this;
      }
    }
    static NetMessageRecvAkEventFromEntity() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowTutorialTip : pb::GeneratedMessage<NetMessageShowTutorialTip, NetMessageShowTutorialTip.Builder> {
    private NetMessageShowTutorialTip() { }
    private static readonly NetMessageShowTutorialTip defaultInstance = new NetMessageShowTutorialTip().MakeReadOnly();
    private static readonly string[] _netMessageShowTutorialTipFieldNames = new string[] { "tipDataRefId" };
    private static readonly uint[] _netMessageShowTutorialTipFieldTags = new uint[] { 8 };
    public static NetMessageShowTutorialTip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowTutorialTip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowTutorialTip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowTutorialTip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowTutorialTip, NetMessageShowTutorialTip.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowTutorialTip__FieldAccessorTable; }
    }
    
    public const int TipDataRefIdFieldNumber = 1;
    private bool hasTipDataRefId;
    private ulong tipDataRefId_;
    public bool HasTipDataRefId {
      get { return hasTipDataRefId; }
    }
    public ulong TipDataRefId {
      get { return tipDataRefId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTipDataRefId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowTutorialTipFieldNames;
      if (hasTipDataRefId) {
        output.WriteUInt64(1, field_names[0], TipDataRefId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTipDataRefId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TipDataRefId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowTutorialTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowTutorialTip MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowTutorialTip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowTutorialTip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowTutorialTip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowTutorialTip result;
      
      private NetMessageShowTutorialTip PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowTutorialTip original = result;
          result = new NetMessageShowTutorialTip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowTutorialTip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowTutorialTip.Descriptor; }
      }
      
      public override NetMessageShowTutorialTip DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowTutorialTip.DefaultInstance; }
      }
      
      public override NetMessageShowTutorialTip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowTutorialTip) {
          return MergeFrom((NetMessageShowTutorialTip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowTutorialTip other) {
        if (other == global::Gazillion.NetMessageShowTutorialTip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTipDataRefId) {
          TipDataRefId = other.TipDataRefId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowTutorialTipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowTutorialTipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTipDataRefId = input.ReadUInt64(ref result.tipDataRefId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTipDataRefId {
        get { return result.hasTipDataRefId; }
      }
      public ulong TipDataRefId {
        get { return result.TipDataRefId; }
        set { SetTipDataRefId(value); }
      }
      public Builder SetTipDataRefId(ulong value) {
        PrepareBuilder();
        result.hasTipDataRefId = true;
        result.tipDataRefId_ = value;
        return this;
      }
      public Builder ClearTipDataRefId() {
        PrepareBuilder();
        result.hasTipDataRefId = false;
        result.tipDataRefId_ = 0UL;
        return this;
      }
    }
    static NetMessageShowTutorialTip() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageMatchQueueUpdateClient : pb::GeneratedMessage<NetMessageMatchQueueUpdateClient, NetMessageMatchQueueUpdateClient.Builder> {
    private NetMessageMatchQueueUpdateClient() { }
    private static readonly NetMessageMatchQueueUpdateClient defaultInstance = new NetMessageMatchQueueUpdateClient().MakeReadOnly();
    private static readonly string[] _netMessageMatchQueueUpdateClientFieldNames = new string[] { "playerGuid", "playerName", "playersInQueue", "regionProtoId", "regionRequestGroupId", "status" };
    private static readonly uint[] _netMessageMatchQueueUpdateClientFieldTags = new uint[] { 8, 34, 48, 16, 24, 40 };
    public static NetMessageMatchQueueUpdateClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageMatchQueueUpdateClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageMatchQueueUpdateClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueUpdateClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageMatchQueueUpdateClient, NetMessageMatchQueueUpdateClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageMatchQueueUpdateClient__FieldAccessorTable; }
    }
    
    public const int PlayerGuidFieldNumber = 1;
    private bool hasPlayerGuid;
    private ulong playerGuid_;
    public bool HasPlayerGuid {
      get { return hasPlayerGuid; }
    }
    public ulong PlayerGuid {
      get { return playerGuid_; }
    }
    
    public const int RegionProtoIdFieldNumber = 2;
    private bool hasRegionProtoId;
    private ulong regionProtoId_;
    public bool HasRegionProtoId {
      get { return hasRegionProtoId; }
    }
    public ulong RegionProtoId {
      get { return regionProtoId_; }
    }
    
    public const int RegionRequestGroupIdFieldNumber = 3;
    private bool hasRegionRequestGroupId;
    private ulong regionRequestGroupId_;
    public bool HasRegionRequestGroupId {
      get { return hasRegionRequestGroupId; }
    }
    public ulong RegionRequestGroupId {
      get { return regionRequestGroupId_; }
    }
    
    public const int PlayerNameFieldNumber = 4;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int StatusFieldNumber = 5;
    private bool hasStatus;
    private global::Gazillion.RegionRequestQueueUpdateVar status_ = global::Gazillion.RegionRequestQueueUpdateVar.eRRQ_Invalid;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::Gazillion.RegionRequestQueueUpdateVar Status {
      get { return status_; }
    }
    
    public const int PlayersInQueueFieldNumber = 6;
    private bool hasPlayersInQueue;
    private uint playersInQueue_;
    public bool HasPlayersInQueue {
      get { return hasPlayersInQueue; }
    }
    public uint PlayersInQueue {
      get { return playersInQueue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerGuid) return false;
        if (!hasRegionProtoId) return false;
        if (!hasRegionRequestGroupId) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageMatchQueueUpdateClientFieldNames;
      if (hasPlayerGuid) {
        output.WriteUInt64(1, field_names[0], PlayerGuid);
      }
      if (hasRegionProtoId) {
        output.WriteUInt64(2, field_names[3], RegionProtoId);
      }
      if (hasRegionRequestGroupId) {
        output.WriteUInt64(3, field_names[4], RegionRequestGroupId);
      }
      if (hasPlayerName) {
        output.WriteString(4, field_names[1], PlayerName);
      }
      if (hasStatus) {
        output.WriteEnum(5, field_names[5], (int) Status, Status);
      }
      if (hasPlayersInQueue) {
        output.WriteUInt32(6, field_names[2], PlayersInQueue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, PlayerGuid);
      }
      if (hasRegionProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RegionProtoId);
      }
      if (hasRegionRequestGroupId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RegionRequestGroupId);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, PlayerName);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Status);
      }
      if (hasPlayersInQueue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, PlayersInQueue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageMatchQueueUpdateClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageMatchQueueUpdateClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageMatchQueueUpdateClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageMatchQueueUpdateClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageMatchQueueUpdateClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageMatchQueueUpdateClient result;
      
      private NetMessageMatchQueueUpdateClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageMatchQueueUpdateClient original = result;
          result = new NetMessageMatchQueueUpdateClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageMatchQueueUpdateClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageMatchQueueUpdateClient.Descriptor; }
      }
      
      public override NetMessageMatchQueueUpdateClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageMatchQueueUpdateClient.DefaultInstance; }
      }
      
      public override NetMessageMatchQueueUpdateClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageMatchQueueUpdateClient) {
          return MergeFrom((NetMessageMatchQueueUpdateClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageMatchQueueUpdateClient other) {
        if (other == global::Gazillion.NetMessageMatchQueueUpdateClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerGuid) {
          PlayerGuid = other.PlayerGuid;
        }
        if (other.HasRegionProtoId) {
          RegionProtoId = other.RegionProtoId;
        }
        if (other.HasRegionRequestGroupId) {
          RegionRequestGroupId = other.RegionRequestGroupId;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasPlayersInQueue) {
          PlayersInQueue = other.PlayersInQueue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageMatchQueueUpdateClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageMatchQueueUpdateClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerGuid = input.ReadUInt64(ref result.playerGuid_);
              break;
            }
            case 16: {
              result.hasRegionProtoId = input.ReadUInt64(ref result.regionProtoId_);
              break;
            }
            case 24: {
              result.hasRegionRequestGroupId = input.ReadUInt64(ref result.regionRequestGroupId_);
              break;
            }
            case 34: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
            case 48: {
              result.hasPlayersInQueue = input.ReadUInt32(ref result.playersInQueue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerGuid {
        get { return result.hasPlayerGuid; }
      }
      public ulong PlayerGuid {
        get { return result.PlayerGuid; }
        set { SetPlayerGuid(value); }
      }
      public Builder SetPlayerGuid(ulong value) {
        PrepareBuilder();
        result.hasPlayerGuid = true;
        result.playerGuid_ = value;
        return this;
      }
      public Builder ClearPlayerGuid() {
        PrepareBuilder();
        result.hasPlayerGuid = false;
        result.playerGuid_ = 0UL;
        return this;
      }
      
      public bool HasRegionProtoId {
        get { return result.hasRegionProtoId; }
      }
      public ulong RegionProtoId {
        get { return result.RegionProtoId; }
        set { SetRegionProtoId(value); }
      }
      public Builder SetRegionProtoId(ulong value) {
        PrepareBuilder();
        result.hasRegionProtoId = true;
        result.regionProtoId_ = value;
        return this;
      }
      public Builder ClearRegionProtoId() {
        PrepareBuilder();
        result.hasRegionProtoId = false;
        result.regionProtoId_ = 0UL;
        return this;
      }
      
      public bool HasRegionRequestGroupId {
        get { return result.hasRegionRequestGroupId; }
      }
      public ulong RegionRequestGroupId {
        get { return result.RegionRequestGroupId; }
        set { SetRegionRequestGroupId(value); }
      }
      public Builder SetRegionRequestGroupId(ulong value) {
        PrepareBuilder();
        result.hasRegionRequestGroupId = true;
        result.regionRequestGroupId_ = value;
        return this;
      }
      public Builder ClearRegionRequestGroupId() {
        PrepareBuilder();
        result.hasRegionRequestGroupId = false;
        result.regionRequestGroupId_ = 0UL;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::Gazillion.RegionRequestQueueUpdateVar Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::Gazillion.RegionRequestQueueUpdateVar value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::Gazillion.RegionRequestQueueUpdateVar.eRRQ_Invalid;
        return this;
      }
      
      public bool HasPlayersInQueue {
        get { return result.hasPlayersInQueue; }
      }
      public uint PlayersInQueue {
        get { return result.PlayersInQueue; }
        set { SetPlayersInQueue(value); }
      }
      public Builder SetPlayersInQueue(uint value) {
        PrepareBuilder();
        result.hasPlayersInQueue = true;
        result.playersInQueue_ = value;
        return this;
      }
      public Builder ClearPlayersInQueue() {
        PrepareBuilder();
        result.hasPlayersInQueue = false;
        result.playersInQueue_ = 0;
        return this;
      }
    }
    static NetMessageMatchQueueUpdateClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GlobalEventCriteriaData : pb::GeneratedMessage<GlobalEventCriteriaData, GlobalEventCriteriaData.Builder> {
    private GlobalEventCriteriaData() { }
    private static readonly GlobalEventCriteriaData defaultInstance = new GlobalEventCriteriaData().MakeReadOnly();
    private static readonly string[] _globalEventCriteriaDataFieldNames = new string[] { "criteriaId", "progress" };
    private static readonly uint[] _globalEventCriteriaDataFieldTags = new uint[] { 8, 21 };
    public static GlobalEventCriteriaData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GlobalEventCriteriaData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GlobalEventCriteriaData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_GlobalEventCriteriaData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GlobalEventCriteriaData, GlobalEventCriteriaData.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_GlobalEventCriteriaData__FieldAccessorTable; }
    }
    
    public const int CriteriaIdFieldNumber = 1;
    private bool hasCriteriaId;
    private ulong criteriaId_;
    public bool HasCriteriaId {
      get { return hasCriteriaId; }
    }
    public ulong CriteriaId {
      get { return criteriaId_; }
    }
    
    public const int ProgressFieldNumber = 2;
    private bool hasProgress;
    private float progress_;
    public bool HasProgress {
      get { return hasProgress; }
    }
    public float Progress {
      get { return progress_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCriteriaId) return false;
        if (!hasProgress) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _globalEventCriteriaDataFieldNames;
      if (hasCriteriaId) {
        output.WriteUInt64(1, field_names[0], CriteriaId);
      }
      if (hasProgress) {
        output.WriteFloat(2, field_names[1], Progress);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCriteriaId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, CriteriaId);
      }
      if (hasProgress) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Progress);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GlobalEventCriteriaData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GlobalEventCriteriaData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GlobalEventCriteriaData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GlobalEventCriteriaData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GlobalEventCriteriaData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GlobalEventCriteriaData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GlobalEventCriteriaData result;
      
      private GlobalEventCriteriaData PrepareBuilder() {
        if (resultIsReadOnly) {
          GlobalEventCriteriaData original = result;
          result = new GlobalEventCriteriaData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GlobalEventCriteriaData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.GlobalEventCriteriaData.Descriptor; }
      }
      
      public override GlobalEventCriteriaData DefaultInstanceForType {
        get { return global::Gazillion.GlobalEventCriteriaData.DefaultInstance; }
      }
      
      public override GlobalEventCriteriaData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GlobalEventCriteriaData) {
          return MergeFrom((GlobalEventCriteriaData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GlobalEventCriteriaData other) {
        if (other == global::Gazillion.GlobalEventCriteriaData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCriteriaId) {
          CriteriaId = other.CriteriaId;
        }
        if (other.HasProgress) {
          Progress = other.Progress;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_globalEventCriteriaDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _globalEventCriteriaDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCriteriaId = input.ReadUInt64(ref result.criteriaId_);
              break;
            }
            case 21: {
              result.hasProgress = input.ReadFloat(ref result.progress_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCriteriaId {
        get { return result.hasCriteriaId; }
      }
      public ulong CriteriaId {
        get { return result.CriteriaId; }
        set { SetCriteriaId(value); }
      }
      public Builder SetCriteriaId(ulong value) {
        PrepareBuilder();
        result.hasCriteriaId = true;
        result.criteriaId_ = value;
        return this;
      }
      public Builder ClearCriteriaId() {
        PrepareBuilder();
        result.hasCriteriaId = false;
        result.criteriaId_ = 0UL;
        return this;
      }
      
      public bool HasProgress {
        get { return result.hasProgress; }
      }
      public float Progress {
        get { return result.Progress; }
        set { SetProgress(value); }
      }
      public Builder SetProgress(float value) {
        PrepareBuilder();
        result.hasProgress = true;
        result.progress_ = value;
        return this;
      }
      public Builder ClearProgress() {
        PrepareBuilder();
        result.hasProgress = false;
        result.progress_ = 0F;
        return this;
      }
    }
    static GlobalEventCriteriaData() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGlobalEventDataUpdate : pb::GeneratedMessage<NetMessageGlobalEventDataUpdate, NetMessageGlobalEventDataUpdate.Builder> {
    private NetMessageGlobalEventDataUpdate() { }
    private static readonly NetMessageGlobalEventDataUpdate defaultInstance = new NetMessageGlobalEventDataUpdate().MakeReadOnly();
    private static readonly string[] _netMessageGlobalEventDataUpdateFieldNames = new string[] { "criteriaProgress", "eventId", "totalProgress" };
    private static readonly uint[] _netMessageGlobalEventDataUpdateFieldTags = new uint[] { 26, 8, 21 };
    public static NetMessageGlobalEventDataUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGlobalEventDataUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGlobalEventDataUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGlobalEventDataUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGlobalEventDataUpdate, NetMessageGlobalEventDataUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGlobalEventDataUpdate__FieldAccessorTable; }
    }
    
    public const int EventIdFieldNumber = 1;
    private bool hasEventId;
    private ulong eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    public ulong EventId {
      get { return eventId_; }
    }
    
    public const int TotalProgressFieldNumber = 2;
    private bool hasTotalProgress;
    private float totalProgress_;
    public bool HasTotalProgress {
      get { return hasTotalProgress; }
    }
    public float TotalProgress {
      get { return totalProgress_; }
    }
    
    public const int CriteriaProgressFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.GlobalEventCriteriaData> criteriaProgress_ = new pbc::PopsicleList<global::Gazillion.GlobalEventCriteriaData>();
    public scg::IList<global::Gazillion.GlobalEventCriteriaData> CriteriaProgressList {
      get { return criteriaProgress_; }
    }
    public int CriteriaProgressCount {
      get { return criteriaProgress_.Count; }
    }
    public global::Gazillion.GlobalEventCriteriaData GetCriteriaProgress(int index) {
      return criteriaProgress_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEventId) return false;
        if (!hasTotalProgress) return false;
        foreach (global::Gazillion.GlobalEventCriteriaData element in CriteriaProgressList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGlobalEventDataUpdateFieldNames;
      if (hasEventId) {
        output.WriteUInt64(1, field_names[1], EventId);
      }
      if (hasTotalProgress) {
        output.WriteFloat(2, field_names[2], TotalProgress);
      }
      if (criteriaProgress_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], criteriaProgress_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EventId);
      }
      if (hasTotalProgress) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, TotalProgress);
      }
      foreach (global::Gazillion.GlobalEventCriteriaData element in CriteriaProgressList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGlobalEventDataUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGlobalEventDataUpdate MakeReadOnly() {
      criteriaProgress_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGlobalEventDataUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGlobalEventDataUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGlobalEventDataUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGlobalEventDataUpdate result;
      
      private NetMessageGlobalEventDataUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGlobalEventDataUpdate original = result;
          result = new NetMessageGlobalEventDataUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGlobalEventDataUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGlobalEventDataUpdate.Descriptor; }
      }
      
      public override NetMessageGlobalEventDataUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGlobalEventDataUpdate.DefaultInstance; }
      }
      
      public override NetMessageGlobalEventDataUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGlobalEventDataUpdate) {
          return MergeFrom((NetMessageGlobalEventDataUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGlobalEventDataUpdate other) {
        if (other == global::Gazillion.NetMessageGlobalEventDataUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasTotalProgress) {
          TotalProgress = other.TotalProgress;
        }
        if (other.criteriaProgress_.Count != 0) {
          result.criteriaProgress_.Add(other.criteriaProgress_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGlobalEventDataUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGlobalEventDataUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEventId = input.ReadUInt64(ref result.eventId_);
              break;
            }
            case 21: {
              result.hasTotalProgress = input.ReadFloat(ref result.totalProgress_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.criteriaProgress_, global::Gazillion.GlobalEventCriteriaData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public ulong EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(ulong value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = 0UL;
        return this;
      }
      
      public bool HasTotalProgress {
        get { return result.hasTotalProgress; }
      }
      public float TotalProgress {
        get { return result.TotalProgress; }
        set { SetTotalProgress(value); }
      }
      public Builder SetTotalProgress(float value) {
        PrepareBuilder();
        result.hasTotalProgress = true;
        result.totalProgress_ = value;
        return this;
      }
      public Builder ClearTotalProgress() {
        PrepareBuilder();
        result.hasTotalProgress = false;
        result.totalProgress_ = 0F;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.GlobalEventCriteriaData> CriteriaProgressList {
        get { return PrepareBuilder().criteriaProgress_; }
      }
      public int CriteriaProgressCount {
        get { return result.CriteriaProgressCount; }
      }
      public global::Gazillion.GlobalEventCriteriaData GetCriteriaProgress(int index) {
        return result.GetCriteriaProgress(index);
      }
      public Builder SetCriteriaProgress(int index, global::Gazillion.GlobalEventCriteriaData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaProgress_[index] = value;
        return this;
      }
      public Builder SetCriteriaProgress(int index, global::Gazillion.GlobalEventCriteriaData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaProgress_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteriaProgress(global::Gazillion.GlobalEventCriteriaData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaProgress_.Add(value);
        return this;
      }
      public Builder AddCriteriaProgress(global::Gazillion.GlobalEventCriteriaData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaProgress_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteriaProgress(scg::IEnumerable<global::Gazillion.GlobalEventCriteriaData> values) {
        PrepareBuilder();
        result.criteriaProgress_.Add(values);
        return this;
      }
      public Builder ClearCriteriaProgress() {
        PrepareBuilder();
        result.criteriaProgress_.Clear();
        return this;
      }
    }
    static NetMessageGlobalEventDataUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGlobalEventLeaderboardUpdate : pb::GeneratedMessage<NetMessageGlobalEventLeaderboardUpdate, NetMessageGlobalEventLeaderboardUpdate.Builder> {
    private NetMessageGlobalEventLeaderboardUpdate() { }
    private static readonly NetMessageGlobalEventLeaderboardUpdate defaultInstance = new NetMessageGlobalEventLeaderboardUpdate().MakeReadOnly();
    private static readonly string[] _netMessageGlobalEventLeaderboardUpdateFieldNames = new string[] { "eventId", "leaderboardLength", "playerNames" };
    private static readonly uint[] _netMessageGlobalEventLeaderboardUpdateFieldTags = new uint[] { 8, 16, 26 };
    public static NetMessageGlobalEventLeaderboardUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGlobalEventLeaderboardUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGlobalEventLeaderboardUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGlobalEventLeaderboardUpdate, NetMessageGlobalEventLeaderboardUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGlobalEventLeaderboardUpdate__FieldAccessorTable; }
    }
    
    public const int EventIdFieldNumber = 1;
    private bool hasEventId;
    private ulong eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    public ulong EventId {
      get { return eventId_; }
    }
    
    public const int LeaderboardLengthFieldNumber = 2;
    private bool hasLeaderboardLength;
    private uint leaderboardLength_;
    public bool HasLeaderboardLength {
      get { return hasLeaderboardLength; }
    }
    public uint LeaderboardLength {
      get { return leaderboardLength_; }
    }
    
    public const int PlayerNamesFieldNumber = 3;
    private pbc::PopsicleList<string> playerNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> PlayerNamesList {
      get { return pbc::Lists.AsReadOnly(playerNames_); }
    }
    public int PlayerNamesCount {
      get { return playerNames_.Count; }
    }
    public string GetPlayerNames(int index) {
      return playerNames_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEventId) return false;
        if (!hasLeaderboardLength) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGlobalEventLeaderboardUpdateFieldNames;
      if (hasEventId) {
        output.WriteUInt64(1, field_names[0], EventId);
      }
      if (hasLeaderboardLength) {
        output.WriteUInt32(2, field_names[1], LeaderboardLength);
      }
      if (playerNames_.Count > 0) {
        output.WriteStringArray(3, field_names[2], playerNames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, EventId);
      }
      if (hasLeaderboardLength) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, LeaderboardLength);
      }
      {
        int dataSize = 0;
        foreach (string element in PlayerNamesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerNames_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGlobalEventLeaderboardUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGlobalEventLeaderboardUpdate MakeReadOnly() {
      playerNames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGlobalEventLeaderboardUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGlobalEventLeaderboardUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGlobalEventLeaderboardUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGlobalEventLeaderboardUpdate result;
      
      private NetMessageGlobalEventLeaderboardUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGlobalEventLeaderboardUpdate original = result;
          result = new NetMessageGlobalEventLeaderboardUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGlobalEventLeaderboardUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGlobalEventLeaderboardUpdate.Descriptor; }
      }
      
      public override NetMessageGlobalEventLeaderboardUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGlobalEventLeaderboardUpdate.DefaultInstance; }
      }
      
      public override NetMessageGlobalEventLeaderboardUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGlobalEventLeaderboardUpdate) {
          return MergeFrom((NetMessageGlobalEventLeaderboardUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGlobalEventLeaderboardUpdate other) {
        if (other == global::Gazillion.NetMessageGlobalEventLeaderboardUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasLeaderboardLength) {
          LeaderboardLength = other.LeaderboardLength;
        }
        if (other.playerNames_.Count != 0) {
          result.playerNames_.Add(other.playerNames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGlobalEventLeaderboardUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGlobalEventLeaderboardUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEventId = input.ReadUInt64(ref result.eventId_);
              break;
            }
            case 16: {
              result.hasLeaderboardLength = input.ReadUInt32(ref result.leaderboardLength_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.playerNames_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public ulong EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(ulong value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = 0UL;
        return this;
      }
      
      public bool HasLeaderboardLength {
        get { return result.hasLeaderboardLength; }
      }
      public uint LeaderboardLength {
        get { return result.LeaderboardLength; }
        set { SetLeaderboardLength(value); }
      }
      public Builder SetLeaderboardLength(uint value) {
        PrepareBuilder();
        result.hasLeaderboardLength = true;
        result.leaderboardLength_ = value;
        return this;
      }
      public Builder ClearLeaderboardLength() {
        PrepareBuilder();
        result.hasLeaderboardLength = false;
        result.leaderboardLength_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> PlayerNamesList {
        get { return PrepareBuilder().playerNames_; }
      }
      public int PlayerNamesCount {
        get { return result.PlayerNamesCount; }
      }
      public string GetPlayerNames(int index) {
        return result.GetPlayerNames(index);
      }
      public Builder SetPlayerNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerNames_[index] = value;
        return this;
      }
      public Builder AddPlayerNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerNames_.Add(value);
        return this;
      }
      public Builder AddRangePlayerNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.playerNames_.Add(values);
        return this;
      }
      public Builder ClearPlayerNames() {
        PrepareBuilder();
        result.playerNames_.Clear();
        return this;
      }
    }
    static NetMessageGlobalEventLeaderboardUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageOpenUIPanel : pb::GeneratedMessage<NetMessageOpenUIPanel, NetMessageOpenUIPanel.Builder> {
    private NetMessageOpenUIPanel() { }
    private static readonly NetMessageOpenUIPanel defaultInstance = new NetMessageOpenUIPanel().MakeReadOnly();
    private static readonly string[] _netMessageOpenUIPanelFieldNames = new string[] { "panelName", "tabIndex" };
    private static readonly uint[] _netMessageOpenUIPanelFieldTags = new uint[] { 10, 16 };
    public static NetMessageOpenUIPanel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageOpenUIPanel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageOpenUIPanel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOpenUIPanel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageOpenUIPanel, NetMessageOpenUIPanel.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageOpenUIPanel__FieldAccessorTable; }
    }
    
    public const int PanelNameFieldNumber = 1;
    private bool hasPanelName;
    private string panelName_ = "";
    public bool HasPanelName {
      get { return hasPanelName; }
    }
    public string PanelName {
      get { return panelName_; }
    }
    
    public const int TabIndexFieldNumber = 2;
    private bool hasTabIndex;
    private uint tabIndex_;
    public bool HasTabIndex {
      get { return hasTabIndex; }
    }
    public uint TabIndex {
      get { return tabIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPanelName) return false;
        if (!hasTabIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageOpenUIPanelFieldNames;
      if (hasPanelName) {
        output.WriteString(1, field_names[0], PanelName);
      }
      if (hasTabIndex) {
        output.WriteUInt32(2, field_names[1], TabIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPanelName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PanelName);
      }
      if (hasTabIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TabIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageOpenUIPanel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageOpenUIPanel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageOpenUIPanel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageOpenUIPanel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageOpenUIPanel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageOpenUIPanel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageOpenUIPanel result;
      
      private NetMessageOpenUIPanel PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageOpenUIPanel original = result;
          result = new NetMessageOpenUIPanel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageOpenUIPanel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageOpenUIPanel.Descriptor; }
      }
      
      public override NetMessageOpenUIPanel DefaultInstanceForType {
        get { return global::Gazillion.NetMessageOpenUIPanel.DefaultInstance; }
      }
      
      public override NetMessageOpenUIPanel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageOpenUIPanel) {
          return MergeFrom((NetMessageOpenUIPanel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageOpenUIPanel other) {
        if (other == global::Gazillion.NetMessageOpenUIPanel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPanelName) {
          PanelName = other.PanelName;
        }
        if (other.HasTabIndex) {
          TabIndex = other.TabIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageOpenUIPanelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageOpenUIPanelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPanelName = input.ReadString(ref result.panelName_);
              break;
            }
            case 16: {
              result.hasTabIndex = input.ReadUInt32(ref result.tabIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPanelName {
        get { return result.hasPanelName; }
      }
      public string PanelName {
        get { return result.PanelName; }
        set { SetPanelName(value); }
      }
      public Builder SetPanelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPanelName = true;
        result.panelName_ = value;
        return this;
      }
      public Builder ClearPanelName() {
        PrepareBuilder();
        result.hasPanelName = false;
        result.panelName_ = "";
        return this;
      }
      
      public bool HasTabIndex {
        get { return result.hasTabIndex; }
      }
      public uint TabIndex {
        get { return result.TabIndex; }
        set { SetTabIndex(value); }
      }
      public Builder SetTabIndex(uint value) {
        PrepareBuilder();
        result.hasTabIndex = true;
        result.tabIndex_ = value;
        return this;
      }
      public Builder ClearTabIndex() {
        PrepareBuilder();
        result.hasTabIndex = false;
        result.tabIndex_ = 0;
        return this;
      }
    }
    static NetMessageOpenUIPanel() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerOwnsItemResponse : pb::GeneratedMessage<NetMessagePlayerOwnsItemResponse, NetMessagePlayerOwnsItemResponse.Builder> {
    private NetMessagePlayerOwnsItemResponse() { }
    private static readonly NetMessagePlayerOwnsItemResponse defaultInstance = new NetMessagePlayerOwnsItemResponse().MakeReadOnly();
    private static readonly string[] _netMessagePlayerOwnsItemResponseFieldNames = new string[] { "itemProtoId", "owns" };
    private static readonly uint[] _netMessagePlayerOwnsItemResponseFieldTags = new uint[] { 8, 16 };
    public static NetMessagePlayerOwnsItemResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerOwnsItemResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerOwnsItemResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerOwnsItemResponse, NetMessagePlayerOwnsItemResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayerOwnsItemResponse__FieldAccessorTable; }
    }
    
    public const int ItemProtoIdFieldNumber = 1;
    private bool hasItemProtoId;
    private ulong itemProtoId_;
    public bool HasItemProtoId {
      get { return hasItemProtoId; }
    }
    public ulong ItemProtoId {
      get { return itemProtoId_; }
    }
    
    public const int OwnsFieldNumber = 2;
    private bool hasOwns;
    private bool owns_;
    public bool HasOwns {
      get { return hasOwns; }
    }
    public bool Owns {
      get { return owns_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemProtoId) return false;
        if (!hasOwns) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerOwnsItemResponseFieldNames;
      if (hasItemProtoId) {
        output.WriteUInt64(1, field_names[0], ItemProtoId);
      }
      if (hasOwns) {
        output.WriteBool(2, field_names[1], Owns);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ItemProtoId);
      }
      if (hasOwns) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Owns);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerOwnsItemResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerOwnsItemResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerOwnsItemResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerOwnsItemResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerOwnsItemResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerOwnsItemResponse result;
      
      private NetMessagePlayerOwnsItemResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerOwnsItemResponse original = result;
          result = new NetMessagePlayerOwnsItemResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerOwnsItemResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerOwnsItemResponse.Descriptor; }
      }
      
      public override NetMessagePlayerOwnsItemResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerOwnsItemResponse.DefaultInstance; }
      }
      
      public override NetMessagePlayerOwnsItemResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerOwnsItemResponse) {
          return MergeFrom((NetMessagePlayerOwnsItemResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerOwnsItemResponse other) {
        if (other == global::Gazillion.NetMessagePlayerOwnsItemResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemProtoId) {
          ItemProtoId = other.ItemProtoId;
        }
        if (other.HasOwns) {
          Owns = other.Owns;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerOwnsItemResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerOwnsItemResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemProtoId = input.ReadUInt64(ref result.itemProtoId_);
              break;
            }
            case 16: {
              result.hasOwns = input.ReadBool(ref result.owns_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemProtoId {
        get { return result.hasItemProtoId; }
      }
      public ulong ItemProtoId {
        get { return result.ItemProtoId; }
        set { SetItemProtoId(value); }
      }
      public Builder SetItemProtoId(ulong value) {
        PrepareBuilder();
        result.hasItemProtoId = true;
        result.itemProtoId_ = value;
        return this;
      }
      public Builder ClearItemProtoId() {
        PrepareBuilder();
        result.hasItemProtoId = false;
        result.itemProtoId_ = 0UL;
        return this;
      }
      
      public bool HasOwns {
        get { return result.hasOwns; }
      }
      public bool Owns {
        get { return result.Owns; }
        set { SetOwns(value); }
      }
      public Builder SetOwns(bool value) {
        PrepareBuilder();
        result.hasOwns = true;
        result.owns_ = value;
        return this;
      }
      public Builder ClearOwns() {
        PrepareBuilder();
        result.hasOwns = false;
        result.owns_ = false;
        return this;
      }
    }
    static NetMessagePlayerOwnsItemResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShowShareLegendaryMissionNotification : pb::GeneratedMessage<NetMessageShowShareLegendaryMissionNotification, NetMessageShowShareLegendaryMissionNotification.Builder> {
    private NetMessageShowShareLegendaryMissionNotification() { }
    private static readonly NetMessageShowShareLegendaryMissionNotification defaultInstance = new NetMessageShowShareLegendaryMissionNotification().MakeReadOnly();
    private static readonly string[] _netMessageShowShareLegendaryMissionNotificationFieldNames = new string[] { "missionDataRef", "playerName" };
    private static readonly uint[] _netMessageShowShareLegendaryMissionNotificationFieldTags = new uint[] { 16, 10 };
    public static NetMessageShowShareLegendaryMissionNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShowShareLegendaryMissionNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShowShareLegendaryMissionNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShowShareLegendaryMissionNotification, NetMessageShowShareLegendaryMissionNotification.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShowShareLegendaryMissionNotification__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int MissionDataRefFieldNumber = 2;
    private bool hasMissionDataRef;
    private ulong missionDataRef_;
    public bool HasMissionDataRef {
      get { return hasMissionDataRef; }
    }
    public ulong MissionDataRef {
      get { return missionDataRef_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        if (!hasMissionDataRef) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShowShareLegendaryMissionNotificationFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[1], PlayerName);
      }
      if (hasMissionDataRef) {
        output.WriteUInt64(2, field_names[0], MissionDataRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      if (hasMissionDataRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionDataRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShowShareLegendaryMissionNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShowShareLegendaryMissionNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShowShareLegendaryMissionNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShowShareLegendaryMissionNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShowShareLegendaryMissionNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShowShareLegendaryMissionNotification result;
      
      private NetMessageShowShareLegendaryMissionNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShowShareLegendaryMissionNotification original = result;
          result = new NetMessageShowShareLegendaryMissionNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShowShareLegendaryMissionNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShowShareLegendaryMissionNotification.Descriptor; }
      }
      
      public override NetMessageShowShareLegendaryMissionNotification DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShowShareLegendaryMissionNotification.DefaultInstance; }
      }
      
      public override NetMessageShowShareLegendaryMissionNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShowShareLegendaryMissionNotification) {
          return MergeFrom((NetMessageShowShareLegendaryMissionNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShowShareLegendaryMissionNotification other) {
        if (other == global::Gazillion.NetMessageShowShareLegendaryMissionNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasMissionDataRef) {
          MissionDataRef = other.MissionDataRef;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShowShareLegendaryMissionNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShowShareLegendaryMissionNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 16: {
              result.hasMissionDataRef = input.ReadUInt64(ref result.missionDataRef_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasMissionDataRef {
        get { return result.hasMissionDataRef; }
      }
      public ulong MissionDataRef {
        get { return result.MissionDataRef; }
        set { SetMissionDataRef(value); }
      }
      public Builder SetMissionDataRef(ulong value) {
        PrepareBuilder();
        result.hasMissionDataRef = true;
        result.missionDataRef_ = value;
        return this;
      }
      public Builder ClearMissionDataRef() {
        PrepareBuilder();
        result.hasMissionDataRef = false;
        result.missionDataRef_ = 0UL;
        return this;
      }
    }
    static NetMessageShowShareLegendaryMissionNotification() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageShareLegendaryMissionResult : pb::GeneratedMessage<NetMessageShareLegendaryMissionResult, NetMessageShareLegendaryMissionResult.Builder> {
    private NetMessageShareLegendaryMissionResult() { }
    private static readonly NetMessageShareLegendaryMissionResult defaultInstance = new NetMessageShareLegendaryMissionResult().MakeReadOnly();
    private static readonly string[] _netMessageShareLegendaryMissionResultFieldNames = new string[] { "missionDataRef", "playerName", "result" };
    private static readonly uint[] _netMessageShareLegendaryMissionResultFieldTags = new uint[] { 16, 10, 24 };
    public static NetMessageShareLegendaryMissionResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageShareLegendaryMissionResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageShareLegendaryMissionResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShareLegendaryMissionResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageShareLegendaryMissionResult, NetMessageShareLegendaryMissionResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageShareLegendaryMissionResult__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int MissionDataRefFieldNumber = 2;
    private bool hasMissionDataRef;
    private ulong missionDataRef_;
    public bool HasMissionDataRef {
      get { return hasMissionDataRef; }
    }
    public ulong MissionDataRef {
      get { return missionDataRef_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private global::Gazillion.LegendaryMissionShareResultType result_ = global::Gazillion.LegendaryMissionShareResultType.LegendaryMissionShare_Sent;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::Gazillion.LegendaryMissionShareResultType Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        if (!hasMissionDataRef) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageShareLegendaryMissionResultFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[1], PlayerName);
      }
      if (hasMissionDataRef) {
        output.WriteUInt64(2, field_names[0], MissionDataRef);
      }
      if (hasResult) {
        output.WriteEnum(3, field_names[2], (int) Result, Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
      }
      if (hasMissionDataRef) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MissionDataRef);
      }
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageShareLegendaryMissionResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageShareLegendaryMissionResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageShareLegendaryMissionResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageShareLegendaryMissionResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageShareLegendaryMissionResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageShareLegendaryMissionResult result;
      
      private NetMessageShareLegendaryMissionResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageShareLegendaryMissionResult original = result;
          result = new NetMessageShareLegendaryMissionResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageShareLegendaryMissionResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageShareLegendaryMissionResult.Descriptor; }
      }
      
      public override NetMessageShareLegendaryMissionResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessageShareLegendaryMissionResult.DefaultInstance; }
      }
      
      public override NetMessageShareLegendaryMissionResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageShareLegendaryMissionResult) {
          return MergeFrom((NetMessageShareLegendaryMissionResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageShareLegendaryMissionResult other) {
        if (other == global::Gazillion.NetMessageShareLegendaryMissionResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasMissionDataRef) {
          MissionDataRef = other.MissionDataRef;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageShareLegendaryMissionResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageShareLegendaryMissionResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 16: {
              result.hasMissionDataRef = input.ReadUInt64(ref result.missionDataRef_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasMissionDataRef {
        get { return result.hasMissionDataRef; }
      }
      public ulong MissionDataRef {
        get { return result.MissionDataRef; }
        set { SetMissionDataRef(value); }
      }
      public Builder SetMissionDataRef(ulong value) {
        PrepareBuilder();
        result.hasMissionDataRef = true;
        result.missionDataRef_ = value;
        return this;
      }
      public Builder ClearMissionDataRef() {
        PrepareBuilder();
        result.hasMissionDataRef = false;
        result.missionDataRef_ = 0UL;
        return this;
      }
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::Gazillion.LegendaryMissionShareResultType Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::Gazillion.LegendaryMissionShareResultType value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::Gazillion.LegendaryMissionShareResultType.LegendaryMissionShare_Sent;
        return this;
      }
    }
    static NetMessageShareLegendaryMissionResult() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUISyncDataUpdate : pb::GeneratedMessage<NetMessageUISyncDataUpdate, NetMessageUISyncDataUpdate.Builder> {
    private NetMessageUISyncDataUpdate() { }
    private static readonly NetMessageUISyncDataUpdate defaultInstance = new NetMessageUISyncDataUpdate().MakeReadOnly();
    private static readonly string[] _netMessageUISyncDataUpdateFieldNames = new string[] { "buffer", "contextProtoId", "uiSyncDataProtoId" };
    private static readonly uint[] _netMessageUISyncDataUpdateFieldTags = new uint[] { 26, 16, 8 };
    public static NetMessageUISyncDataUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUISyncDataUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUISyncDataUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUISyncDataUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUISyncDataUpdate, NetMessageUISyncDataUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUISyncDataUpdate__FieldAccessorTable; }
    }
    
    public const int UiSyncDataProtoIdFieldNumber = 1;
    private bool hasUiSyncDataProtoId;
    private ulong uiSyncDataProtoId_;
    public bool HasUiSyncDataProtoId {
      get { return hasUiSyncDataProtoId; }
    }
    public ulong UiSyncDataProtoId {
      get { return uiSyncDataProtoId_; }
    }
    
    public const int ContextProtoIdFieldNumber = 2;
    private bool hasContextProtoId;
    private ulong contextProtoId_;
    public bool HasContextProtoId {
      get { return hasContextProtoId; }
    }
    public ulong ContextProtoId {
      get { return contextProtoId_; }
    }
    
    public const int BufferFieldNumber = 3;
    private bool hasBuffer;
    private pb::ByteString buffer_ = pb::ByteString.Empty;
    public bool HasBuffer {
      get { return hasBuffer; }
    }
    public pb::ByteString Buffer {
      get { return buffer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUiSyncDataProtoId) return false;
        if (!hasContextProtoId) return false;
        if (!hasBuffer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUISyncDataUpdateFieldNames;
      if (hasUiSyncDataProtoId) {
        output.WriteUInt64(1, field_names[2], UiSyncDataProtoId);
      }
      if (hasContextProtoId) {
        output.WriteUInt64(2, field_names[1], ContextProtoId);
      }
      if (hasBuffer) {
        output.WriteBytes(3, field_names[0], Buffer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUiSyncDataProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, UiSyncDataProtoId);
      }
      if (hasContextProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ContextProtoId);
      }
      if (hasBuffer) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, Buffer);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUISyncDataUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISyncDataUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUISyncDataUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUISyncDataUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUISyncDataUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUISyncDataUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUISyncDataUpdate result;
      
      private NetMessageUISyncDataUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUISyncDataUpdate original = result;
          result = new NetMessageUISyncDataUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUISyncDataUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUISyncDataUpdate.Descriptor; }
      }
      
      public override NetMessageUISyncDataUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUISyncDataUpdate.DefaultInstance; }
      }
      
      public override NetMessageUISyncDataUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUISyncDataUpdate) {
          return MergeFrom((NetMessageUISyncDataUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUISyncDataUpdate other) {
        if (other == global::Gazillion.NetMessageUISyncDataUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiSyncDataProtoId) {
          UiSyncDataProtoId = other.UiSyncDataProtoId;
        }
        if (other.HasContextProtoId) {
          ContextProtoId = other.ContextProtoId;
        }
        if (other.HasBuffer) {
          Buffer = other.Buffer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUISyncDataUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUISyncDataUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiSyncDataProtoId = input.ReadUInt64(ref result.uiSyncDataProtoId_);
              break;
            }
            case 16: {
              result.hasContextProtoId = input.ReadUInt64(ref result.contextProtoId_);
              break;
            }
            case 26: {
              result.hasBuffer = input.ReadBytes(ref result.buffer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiSyncDataProtoId {
        get { return result.hasUiSyncDataProtoId; }
      }
      public ulong UiSyncDataProtoId {
        get { return result.UiSyncDataProtoId; }
        set { SetUiSyncDataProtoId(value); }
      }
      public Builder SetUiSyncDataProtoId(ulong value) {
        PrepareBuilder();
        result.hasUiSyncDataProtoId = true;
        result.uiSyncDataProtoId_ = value;
        return this;
      }
      public Builder ClearUiSyncDataProtoId() {
        PrepareBuilder();
        result.hasUiSyncDataProtoId = false;
        result.uiSyncDataProtoId_ = 0UL;
        return this;
      }
      
      public bool HasContextProtoId {
        get { return result.hasContextProtoId; }
      }
      public ulong ContextProtoId {
        get { return result.ContextProtoId; }
        set { SetContextProtoId(value); }
      }
      public Builder SetContextProtoId(ulong value) {
        PrepareBuilder();
        result.hasContextProtoId = true;
        result.contextProtoId_ = value;
        return this;
      }
      public Builder ClearContextProtoId() {
        PrepareBuilder();
        result.hasContextProtoId = false;
        result.contextProtoId_ = 0UL;
        return this;
      }
      
      public bool HasBuffer {
        get { return result.hasBuffer; }
      }
      public pb::ByteString Buffer {
        get { return result.Buffer; }
        set { SetBuffer(value); }
      }
      public Builder SetBuffer(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = value;
        return this;
      }
      public Builder ClearBuffer() {
        PrepareBuilder();
        result.hasBuffer = false;
        result.buffer_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageUISyncDataUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePlayerTradeStatus : pb::GeneratedMessage<NetMessagePlayerTradeStatus, NetMessagePlayerTradeStatus.Builder> {
    private NetMessagePlayerTradeStatus() { }
    private static readonly NetMessagePlayerTradeStatus defaultInstance = new NetMessagePlayerTradeStatus().MakeReadOnly();
    private static readonly string[] _netMessagePlayerTradeStatusFieldNames = new string[] { "confirmFlag", "partnerConfirmFlag", "partnerPlayerName", "sequenceNumber", "statusCode" };
    private static readonly uint[] _netMessagePlayerTradeStatusFieldTags = new uint[] { 24, 32, 18, 40, 8 };
    public static NetMessagePlayerTradeStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePlayerTradeStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePlayerTradeStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayerTradeStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePlayerTradeStatus, NetMessagePlayerTradeStatus.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePlayerTradeStatus__FieldAccessorTable; }
    }
    
    public const int StatusCodeFieldNumber = 1;
    private bool hasStatusCode;
    private global::Gazillion.PlayerTradeStatusCode statusCode_ = global::Gazillion.PlayerTradeStatusCode.ePTSC_None;
    public bool HasStatusCode {
      get { return hasStatusCode; }
    }
    public global::Gazillion.PlayerTradeStatusCode StatusCode {
      get { return statusCode_; }
    }
    
    public const int PartnerPlayerNameFieldNumber = 2;
    private bool hasPartnerPlayerName;
    private string partnerPlayerName_ = "";
    public bool HasPartnerPlayerName {
      get { return hasPartnerPlayerName; }
    }
    public string PartnerPlayerName {
      get { return partnerPlayerName_; }
    }
    
    public const int ConfirmFlagFieldNumber = 3;
    private bool hasConfirmFlag;
    private bool confirmFlag_;
    public bool HasConfirmFlag {
      get { return hasConfirmFlag; }
    }
    public bool ConfirmFlag {
      get { return confirmFlag_; }
    }
    
    public const int PartnerConfirmFlagFieldNumber = 4;
    private bool hasPartnerConfirmFlag;
    private bool partnerConfirmFlag_;
    public bool HasPartnerConfirmFlag {
      get { return hasPartnerConfirmFlag; }
    }
    public bool PartnerConfirmFlag {
      get { return partnerConfirmFlag_; }
    }
    
    public const int SequenceNumberFieldNumber = 5;
    private bool hasSequenceNumber;
    private uint sequenceNumber_;
    public bool HasSequenceNumber {
      get { return hasSequenceNumber; }
    }
    public uint SequenceNumber {
      get { return sequenceNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatusCode) return false;
        if (!hasPartnerPlayerName) return false;
        if (!hasConfirmFlag) return false;
        if (!hasPartnerConfirmFlag) return false;
        if (!hasSequenceNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePlayerTradeStatusFieldNames;
      if (hasStatusCode) {
        output.WriteEnum(1, field_names[4], (int) StatusCode, StatusCode);
      }
      if (hasPartnerPlayerName) {
        output.WriteString(2, field_names[2], PartnerPlayerName);
      }
      if (hasConfirmFlag) {
        output.WriteBool(3, field_names[0], ConfirmFlag);
      }
      if (hasPartnerConfirmFlag) {
        output.WriteBool(4, field_names[1], PartnerConfirmFlag);
      }
      if (hasSequenceNumber) {
        output.WriteUInt32(5, field_names[3], SequenceNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatusCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) StatusCode);
      }
      if (hasPartnerPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PartnerPlayerName);
      }
      if (hasConfirmFlag) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ConfirmFlag);
      }
      if (hasPartnerConfirmFlag) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, PartnerConfirmFlag);
      }
      if (hasSequenceNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SequenceNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePlayerTradeStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePlayerTradeStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePlayerTradeStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePlayerTradeStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePlayerTradeStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePlayerTradeStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePlayerTradeStatus result;
      
      private NetMessagePlayerTradeStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePlayerTradeStatus original = result;
          result = new NetMessagePlayerTradeStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePlayerTradeStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePlayerTradeStatus.Descriptor; }
      }
      
      public override NetMessagePlayerTradeStatus DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePlayerTradeStatus.DefaultInstance; }
      }
      
      public override NetMessagePlayerTradeStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePlayerTradeStatus) {
          return MergeFrom((NetMessagePlayerTradeStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePlayerTradeStatus other) {
        if (other == global::Gazillion.NetMessagePlayerTradeStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatusCode) {
          StatusCode = other.StatusCode;
        }
        if (other.HasPartnerPlayerName) {
          PartnerPlayerName = other.PartnerPlayerName;
        }
        if (other.HasConfirmFlag) {
          ConfirmFlag = other.ConfirmFlag;
        }
        if (other.HasPartnerConfirmFlag) {
          PartnerConfirmFlag = other.PartnerConfirmFlag;
        }
        if (other.HasSequenceNumber) {
          SequenceNumber = other.SequenceNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePlayerTradeStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePlayerTradeStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.statusCode_, out unknown)) {
                result.hasStatusCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasPartnerPlayerName = input.ReadString(ref result.partnerPlayerName_);
              break;
            }
            case 24: {
              result.hasConfirmFlag = input.ReadBool(ref result.confirmFlag_);
              break;
            }
            case 32: {
              result.hasPartnerConfirmFlag = input.ReadBool(ref result.partnerConfirmFlag_);
              break;
            }
            case 40: {
              result.hasSequenceNumber = input.ReadUInt32(ref result.sequenceNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatusCode {
       get { return result.hasStatusCode; }
      }
      public global::Gazillion.PlayerTradeStatusCode StatusCode {
        get { return result.StatusCode; }
        set { SetStatusCode(value); }
      }
      public Builder SetStatusCode(global::Gazillion.PlayerTradeStatusCode value) {
        PrepareBuilder();
        result.hasStatusCode = true;
        result.statusCode_ = value;
        return this;
      }
      public Builder ClearStatusCode() {
        PrepareBuilder();
        result.hasStatusCode = false;
        result.statusCode_ = global::Gazillion.PlayerTradeStatusCode.ePTSC_None;
        return this;
      }
      
      public bool HasPartnerPlayerName {
        get { return result.hasPartnerPlayerName; }
      }
      public string PartnerPlayerName {
        get { return result.PartnerPlayerName; }
        set { SetPartnerPlayerName(value); }
      }
      public Builder SetPartnerPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartnerPlayerName = true;
        result.partnerPlayerName_ = value;
        return this;
      }
      public Builder ClearPartnerPlayerName() {
        PrepareBuilder();
        result.hasPartnerPlayerName = false;
        result.partnerPlayerName_ = "";
        return this;
      }
      
      public bool HasConfirmFlag {
        get { return result.hasConfirmFlag; }
      }
      public bool ConfirmFlag {
        get { return result.ConfirmFlag; }
        set { SetConfirmFlag(value); }
      }
      public Builder SetConfirmFlag(bool value) {
        PrepareBuilder();
        result.hasConfirmFlag = true;
        result.confirmFlag_ = value;
        return this;
      }
      public Builder ClearConfirmFlag() {
        PrepareBuilder();
        result.hasConfirmFlag = false;
        result.confirmFlag_ = false;
        return this;
      }
      
      public bool HasPartnerConfirmFlag {
        get { return result.hasPartnerConfirmFlag; }
      }
      public bool PartnerConfirmFlag {
        get { return result.PartnerConfirmFlag; }
        set { SetPartnerConfirmFlag(value); }
      }
      public Builder SetPartnerConfirmFlag(bool value) {
        PrepareBuilder();
        result.hasPartnerConfirmFlag = true;
        result.partnerConfirmFlag_ = value;
        return this;
      }
      public Builder ClearPartnerConfirmFlag() {
        PrepareBuilder();
        result.hasPartnerConfirmFlag = false;
        result.partnerConfirmFlag_ = false;
        return this;
      }
      
      public bool HasSequenceNumber {
        get { return result.hasSequenceNumber; }
      }
      public uint SequenceNumber {
        get { return result.SequenceNumber; }
        set { SetSequenceNumber(value); }
      }
      public Builder SetSequenceNumber(uint value) {
        PrepareBuilder();
        result.hasSequenceNumber = true;
        result.sequenceNumber_ = value;
        return this;
      }
      public Builder ClearSequenceNumber() {
        PrepareBuilder();
        result.hasSequenceNumber = false;
        result.sequenceNumber_ = 0;
        return this;
      }
    }
    static NetMessagePlayerTradeStatus() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageUISyncDataRemove : pb::GeneratedMessage<NetMessageUISyncDataRemove, NetMessageUISyncDataRemove.Builder> {
    private NetMessageUISyncDataRemove() { }
    private static readonly NetMessageUISyncDataRemove defaultInstance = new NetMessageUISyncDataRemove().MakeReadOnly();
    private static readonly string[] _netMessageUISyncDataRemoveFieldNames = new string[] { "contextProtoId", "uiSyncDataProtoId" };
    private static readonly uint[] _netMessageUISyncDataRemoveFieldTags = new uint[] { 16, 8 };
    public static NetMessageUISyncDataRemove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageUISyncDataRemove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageUISyncDataRemove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUISyncDataRemove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageUISyncDataRemove, NetMessageUISyncDataRemove.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageUISyncDataRemove__FieldAccessorTable; }
    }
    
    public const int UiSyncDataProtoIdFieldNumber = 1;
    private bool hasUiSyncDataProtoId;
    private ulong uiSyncDataProtoId_;
    public bool HasUiSyncDataProtoId {
      get { return hasUiSyncDataProtoId; }
    }
    public ulong UiSyncDataProtoId {
      get { return uiSyncDataProtoId_; }
    }
    
    public const int ContextProtoIdFieldNumber = 2;
    private bool hasContextProtoId;
    private ulong contextProtoId_;
    public bool HasContextProtoId {
      get { return hasContextProtoId; }
    }
    public ulong ContextProtoId {
      get { return contextProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUiSyncDataProtoId) return false;
        if (!hasContextProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageUISyncDataRemoveFieldNames;
      if (hasUiSyncDataProtoId) {
        output.WriteUInt64(1, field_names[1], UiSyncDataProtoId);
      }
      if (hasContextProtoId) {
        output.WriteUInt64(2, field_names[0], ContextProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUiSyncDataProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, UiSyncDataProtoId);
      }
      if (hasContextProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ContextProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageUISyncDataRemove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageUISyncDataRemove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageUISyncDataRemove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageUISyncDataRemove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageUISyncDataRemove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageUISyncDataRemove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageUISyncDataRemove result;
      
      private NetMessageUISyncDataRemove PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageUISyncDataRemove original = result;
          result = new NetMessageUISyncDataRemove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageUISyncDataRemove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageUISyncDataRemove.Descriptor; }
      }
      
      public override NetMessageUISyncDataRemove DefaultInstanceForType {
        get { return global::Gazillion.NetMessageUISyncDataRemove.DefaultInstance; }
      }
      
      public override NetMessageUISyncDataRemove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageUISyncDataRemove) {
          return MergeFrom((NetMessageUISyncDataRemove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageUISyncDataRemove other) {
        if (other == global::Gazillion.NetMessageUISyncDataRemove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiSyncDataProtoId) {
          UiSyncDataProtoId = other.UiSyncDataProtoId;
        }
        if (other.HasContextProtoId) {
          ContextProtoId = other.ContextProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageUISyncDataRemoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageUISyncDataRemoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiSyncDataProtoId = input.ReadUInt64(ref result.uiSyncDataProtoId_);
              break;
            }
            case 16: {
              result.hasContextProtoId = input.ReadUInt64(ref result.contextProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiSyncDataProtoId {
        get { return result.hasUiSyncDataProtoId; }
      }
      public ulong UiSyncDataProtoId {
        get { return result.UiSyncDataProtoId; }
        set { SetUiSyncDataProtoId(value); }
      }
      public Builder SetUiSyncDataProtoId(ulong value) {
        PrepareBuilder();
        result.hasUiSyncDataProtoId = true;
        result.uiSyncDataProtoId_ = value;
        return this;
      }
      public Builder ClearUiSyncDataProtoId() {
        PrepareBuilder();
        result.hasUiSyncDataProtoId = false;
        result.uiSyncDataProtoId_ = 0UL;
        return this;
      }
      
      public bool HasContextProtoId {
        get { return result.hasContextProtoId; }
      }
      public ulong ContextProtoId {
        get { return result.ContextProtoId; }
        set { SetContextProtoId(value); }
      }
      public Builder SetContextProtoId(ulong value) {
        PrepareBuilder();
        result.hasContextProtoId = true;
        result.contextProtoId_ = value;
        return this;
      }
      public Builder ClearContextProtoId() {
        PrepareBuilder();
        result.hasContextProtoId = false;
        result.contextProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageUISyncDataRemove() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AchievementDatabaseDump : pb::GeneratedMessage<AchievementDatabaseDump, AchievementDatabaseDump.Builder> {
    private AchievementDatabaseDump() { }
    private static readonly AchievementDatabaseDump defaultInstance = new AchievementDatabaseDump().MakeReadOnly();
    private static readonly string[] _achievementDatabaseDumpFieldNames = new string[] { "achievementInfos", "achievementNewThresholdUS", "localizedAchievementStringBuffer" };
    private static readonly uint[] _achievementDatabaseDumpFieldTags = new uint[] { 18, 24, 10 };
    public static AchievementDatabaseDump DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementDatabaseDump DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementDatabaseDump ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AchievementDatabaseDump__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementDatabaseDump, AchievementDatabaseDump.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AchievementDatabaseDump__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AchievementInfo : pb::GeneratedMessage<AchievementInfo, AchievementInfo.Builder> {
        private AchievementInfo() { }
        private static readonly AchievementInfo defaultInstance = new AchievementInfo().MakeReadOnly();
        private static readonly string[] _achievementInfoFieldNames = new string[] { "categoryStr", "completedStr", "dependentAchievementId", "displayOrder", "enabled", "evaluationType", "eventtype", "iconPathAssetId", "id", "inProgressStr", "name", "parentId", "publishedDateUS", "rewardStr", "score", "subCategoryStr", "threshold", "uiProgressDisplayOption", "visibleState" };
        private static readonly uint[] _achievementInfoFieldTags = new uint[] { 80, 48, 136, 101, 16, 112, 120, 64, 8, 40, 32, 24, 152, 56, 72, 88, 128, 144, 104 };
        public static AchievementInfo DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AchievementInfo DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AchievementInfo ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AchievementInfo, AchievementInfo.Builder> InternalFieldAccessors {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_AchievementDatabaseDump_AchievementInfo__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private uint id_;
        public bool HasId {
          get { return hasId; }
        }
        public uint Id {
          get { return id_; }
        }
        
        public const int EnabledFieldNumber = 2;
        private bool hasEnabled;
        private bool enabled_;
        public bool HasEnabled {
          get { return hasEnabled; }
        }
        public bool Enabled {
          get { return enabled_; }
        }
        
        public const int ParentIdFieldNumber = 3;
        private bool hasParentId;
        private uint parentId_;
        public bool HasParentId {
          get { return hasParentId; }
        }
        public uint ParentId {
          get { return parentId_; }
        }
        
        public const int NameFieldNumber = 4;
        private bool hasName;
        private ulong name_;
        public bool HasName {
          get { return hasName; }
        }
        public ulong Name {
          get { return name_; }
        }
        
        public const int InProgressStrFieldNumber = 5;
        private bool hasInProgressStr;
        private ulong inProgressStr_;
        public bool HasInProgressStr {
          get { return hasInProgressStr; }
        }
        public ulong InProgressStr {
          get { return inProgressStr_; }
        }
        
        public const int CompletedStrFieldNumber = 6;
        private bool hasCompletedStr;
        private ulong completedStr_;
        public bool HasCompletedStr {
          get { return hasCompletedStr; }
        }
        public ulong CompletedStr {
          get { return completedStr_; }
        }
        
        public const int RewardStrFieldNumber = 7;
        private bool hasRewardStr;
        private ulong rewardStr_;
        public bool HasRewardStr {
          get { return hasRewardStr; }
        }
        public ulong RewardStr {
          get { return rewardStr_; }
        }
        
        public const int IconPathAssetIdFieldNumber = 8;
        private bool hasIconPathAssetId;
        private ulong iconPathAssetId_;
        public bool HasIconPathAssetId {
          get { return hasIconPathAssetId; }
        }
        public ulong IconPathAssetId {
          get { return iconPathAssetId_; }
        }
        
        public const int ScoreFieldNumber = 9;
        private bool hasScore;
        private uint score_;
        public bool HasScore {
          get { return hasScore; }
        }
        public uint Score {
          get { return score_; }
        }
        
        public const int CategoryStrFieldNumber = 10;
        private bool hasCategoryStr;
        private ulong categoryStr_;
        public bool HasCategoryStr {
          get { return hasCategoryStr; }
        }
        public ulong CategoryStr {
          get { return categoryStr_; }
        }
        
        public const int SubCategoryStrFieldNumber = 11;
        private bool hasSubCategoryStr;
        private ulong subCategoryStr_;
        public bool HasSubCategoryStr {
          get { return hasSubCategoryStr; }
        }
        public ulong SubCategoryStr {
          get { return subCategoryStr_; }
        }
        
        public const int DisplayOrderFieldNumber = 12;
        private bool hasDisplayOrder;
        private float displayOrder_;
        public bool HasDisplayOrder {
          get { return hasDisplayOrder; }
        }
        public float DisplayOrder {
          get { return displayOrder_; }
        }
        
        public const int VisibleStateFieldNumber = 13;
        private bool hasVisibleState;
        private uint visibleState_;
        public bool HasVisibleState {
          get { return hasVisibleState; }
        }
        public uint VisibleState {
          get { return visibleState_; }
        }
        
        public const int EvaluationTypeFieldNumber = 14;
        private bool hasEvaluationType;
        private uint evaluationType_;
        public bool HasEvaluationType {
          get { return hasEvaluationType; }
        }
        public uint EvaluationType {
          get { return evaluationType_; }
        }
        
        public const int EventtypeFieldNumber = 15;
        private bool hasEventtype;
        private uint eventtype_;
        public bool HasEventtype {
          get { return hasEventtype; }
        }
        public uint Eventtype {
          get { return eventtype_; }
        }
        
        public const int ThresholdFieldNumber = 16;
        private bool hasThreshold;
        private uint threshold_;
        public bool HasThreshold {
          get { return hasThreshold; }
        }
        public uint Threshold {
          get { return threshold_; }
        }
        
        public const int DependentAchievementIdFieldNumber = 17;
        private bool hasDependentAchievementId;
        private uint dependentAchievementId_;
        public bool HasDependentAchievementId {
          get { return hasDependentAchievementId; }
        }
        public uint DependentAchievementId {
          get { return dependentAchievementId_; }
        }
        
        public const int UiProgressDisplayOptionFieldNumber = 18;
        private bool hasUiProgressDisplayOption;
        private uint uiProgressDisplayOption_;
        public bool HasUiProgressDisplayOption {
          get { return hasUiProgressDisplayOption; }
        }
        public uint UiProgressDisplayOption {
          get { return uiProgressDisplayOption_; }
        }
        
        public const int PublishedDateUSFieldNumber = 19;
        private bool hasPublishedDateUS;
        private ulong publishedDateUS_;
        public bool HasPublishedDateUS {
          get { return hasPublishedDateUS; }
        }
        public ulong PublishedDateUS {
          get { return publishedDateUS_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasId) return false;
            if (!hasEnabled) return false;
            if (!hasParentId) return false;
            if (!hasName) return false;
            if (!hasInProgressStr) return false;
            if (!hasCompletedStr) return false;
            if (!hasRewardStr) return false;
            if (!hasIconPathAssetId) return false;
            if (!hasScore) return false;
            if (!hasCategoryStr) return false;
            if (!hasSubCategoryStr) return false;
            if (!hasDisplayOrder) return false;
            if (!hasVisibleState) return false;
            if (!hasEvaluationType) return false;
            if (!hasEventtype) return false;
            if (!hasThreshold) return false;
            if (!hasDependentAchievementId) return false;
            if (!hasUiProgressDisplayOption) return false;
            if (!hasPublishedDateUS) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _achievementInfoFieldNames;
          if (hasId) {
            output.WriteUInt32(1, field_names[8], Id);
          }
          if (hasEnabled) {
            output.WriteBool(2, field_names[4], Enabled);
          }
          if (hasParentId) {
            output.WriteUInt32(3, field_names[11], ParentId);
          }
          if (hasName) {
            output.WriteUInt64(4, field_names[10], Name);
          }
          if (hasInProgressStr) {
            output.WriteUInt64(5, field_names[9], InProgressStr);
          }
          if (hasCompletedStr) {
            output.WriteUInt64(6, field_names[1], CompletedStr);
          }
          if (hasRewardStr) {
            output.WriteUInt64(7, field_names[13], RewardStr);
          }
          if (hasIconPathAssetId) {
            output.WriteUInt64(8, field_names[7], IconPathAssetId);
          }
          if (hasScore) {
            output.WriteUInt32(9, field_names[14], Score);
          }
          if (hasCategoryStr) {
            output.WriteUInt64(10, field_names[0], CategoryStr);
          }
          if (hasSubCategoryStr) {
            output.WriteUInt64(11, field_names[15], SubCategoryStr);
          }
          if (hasDisplayOrder) {
            output.WriteFloat(12, field_names[3], DisplayOrder);
          }
          if (hasVisibleState) {
            output.WriteUInt32(13, field_names[18], VisibleState);
          }
          if (hasEvaluationType) {
            output.WriteUInt32(14, field_names[5], EvaluationType);
          }
          if (hasEventtype) {
            output.WriteUInt32(15, field_names[6], Eventtype);
          }
          if (hasThreshold) {
            output.WriteUInt32(16, field_names[16], Threshold);
          }
          if (hasDependentAchievementId) {
            output.WriteUInt32(17, field_names[2], DependentAchievementId);
          }
          if (hasUiProgressDisplayOption) {
            output.WriteUInt32(18, field_names[17], UiProgressDisplayOption);
          }
          if (hasPublishedDateUS) {
            output.WriteUInt64(19, field_names[12], PublishedDateUS);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
          }
          if (hasEnabled) {
            size += pb::CodedOutputStream.ComputeBoolSize(2, Enabled);
          }
          if (hasParentId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(3, ParentId);
          }
          if (hasName) {
            size += pb::CodedOutputStream.ComputeUInt64Size(4, Name);
          }
          if (hasInProgressStr) {
            size += pb::CodedOutputStream.ComputeUInt64Size(5, InProgressStr);
          }
          if (hasCompletedStr) {
            size += pb::CodedOutputStream.ComputeUInt64Size(6, CompletedStr);
          }
          if (hasRewardStr) {
            size += pb::CodedOutputStream.ComputeUInt64Size(7, RewardStr);
          }
          if (hasIconPathAssetId) {
            size += pb::CodedOutputStream.ComputeUInt64Size(8, IconPathAssetId);
          }
          if (hasScore) {
            size += pb::CodedOutputStream.ComputeUInt32Size(9, Score);
          }
          if (hasCategoryStr) {
            size += pb::CodedOutputStream.ComputeUInt64Size(10, CategoryStr);
          }
          if (hasSubCategoryStr) {
            size += pb::CodedOutputStream.ComputeUInt64Size(11, SubCategoryStr);
          }
          if (hasDisplayOrder) {
            size += pb::CodedOutputStream.ComputeFloatSize(12, DisplayOrder);
          }
          if (hasVisibleState) {
            size += pb::CodedOutputStream.ComputeUInt32Size(13, VisibleState);
          }
          if (hasEvaluationType) {
            size += pb::CodedOutputStream.ComputeUInt32Size(14, EvaluationType);
          }
          if (hasEventtype) {
            size += pb::CodedOutputStream.ComputeUInt32Size(15, Eventtype);
          }
          if (hasThreshold) {
            size += pb::CodedOutputStream.ComputeUInt32Size(16, Threshold);
          }
          if (hasDependentAchievementId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(17, DependentAchievementId);
          }
          if (hasUiProgressDisplayOption) {
            size += pb::CodedOutputStream.ComputeUInt32Size(18, UiProgressDisplayOption);
          }
          if (hasPublishedDateUS) {
            size += pb::CodedOutputStream.ComputeUInt64Size(19, PublishedDateUS);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static AchievementInfo ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AchievementInfo ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AchievementInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AchievementInfo ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AchievementInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AchievementInfo MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AchievementInfo prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AchievementInfo, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AchievementInfo cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AchievementInfo result;
          
          private AchievementInfo PrepareBuilder() {
            if (resultIsReadOnly) {
              AchievementInfo original = result;
              result = new AchievementInfo();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AchievementInfo MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.Descriptor; }
          }
          
          public override AchievementInfo DefaultInstanceForType {
            get { return global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.DefaultInstance; }
          }
          
          public override AchievementInfo BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AchievementInfo) {
              return MergeFrom((AchievementInfo) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AchievementInfo other) {
            if (other == global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasEnabled) {
              Enabled = other.Enabled;
            }
            if (other.HasParentId) {
              ParentId = other.ParentId;
            }
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasInProgressStr) {
              InProgressStr = other.InProgressStr;
            }
            if (other.HasCompletedStr) {
              CompletedStr = other.CompletedStr;
            }
            if (other.HasRewardStr) {
              RewardStr = other.RewardStr;
            }
            if (other.HasIconPathAssetId) {
              IconPathAssetId = other.IconPathAssetId;
            }
            if (other.HasScore) {
              Score = other.Score;
            }
            if (other.HasCategoryStr) {
              CategoryStr = other.CategoryStr;
            }
            if (other.HasSubCategoryStr) {
              SubCategoryStr = other.SubCategoryStr;
            }
            if (other.HasDisplayOrder) {
              DisplayOrder = other.DisplayOrder;
            }
            if (other.HasVisibleState) {
              VisibleState = other.VisibleState;
            }
            if (other.HasEvaluationType) {
              EvaluationType = other.EvaluationType;
            }
            if (other.HasEventtype) {
              Eventtype = other.Eventtype;
            }
            if (other.HasThreshold) {
              Threshold = other.Threshold;
            }
            if (other.HasDependentAchievementId) {
              DependentAchievementId = other.DependentAchievementId;
            }
            if (other.HasUiProgressDisplayOption) {
              UiProgressDisplayOption = other.UiProgressDisplayOption;
            }
            if (other.HasPublishedDateUS) {
              PublishedDateUS = other.PublishedDateUS;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_achievementInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _achievementInfoFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadUInt32(ref result.id_);
                  break;
                }
                case 16: {
                  result.hasEnabled = input.ReadBool(ref result.enabled_);
                  break;
                }
                case 24: {
                  result.hasParentId = input.ReadUInt32(ref result.parentId_);
                  break;
                }
                case 32: {
                  result.hasName = input.ReadUInt64(ref result.name_);
                  break;
                }
                case 40: {
                  result.hasInProgressStr = input.ReadUInt64(ref result.inProgressStr_);
                  break;
                }
                case 48: {
                  result.hasCompletedStr = input.ReadUInt64(ref result.completedStr_);
                  break;
                }
                case 56: {
                  result.hasRewardStr = input.ReadUInt64(ref result.rewardStr_);
                  break;
                }
                case 64: {
                  result.hasIconPathAssetId = input.ReadUInt64(ref result.iconPathAssetId_);
                  break;
                }
                case 72: {
                  result.hasScore = input.ReadUInt32(ref result.score_);
                  break;
                }
                case 80: {
                  result.hasCategoryStr = input.ReadUInt64(ref result.categoryStr_);
                  break;
                }
                case 88: {
                  result.hasSubCategoryStr = input.ReadUInt64(ref result.subCategoryStr_);
                  break;
                }
                case 101: {
                  result.hasDisplayOrder = input.ReadFloat(ref result.displayOrder_);
                  break;
                }
                case 104: {
                  result.hasVisibleState = input.ReadUInt32(ref result.visibleState_);
                  break;
                }
                case 112: {
                  result.hasEvaluationType = input.ReadUInt32(ref result.evaluationType_);
                  break;
                }
                case 120: {
                  result.hasEventtype = input.ReadUInt32(ref result.eventtype_);
                  break;
                }
                case 128: {
                  result.hasThreshold = input.ReadUInt32(ref result.threshold_);
                  break;
                }
                case 136: {
                  result.hasDependentAchievementId = input.ReadUInt32(ref result.dependentAchievementId_);
                  break;
                }
                case 144: {
                  result.hasUiProgressDisplayOption = input.ReadUInt32(ref result.uiProgressDisplayOption_);
                  break;
                }
                case 152: {
                  result.hasPublishedDateUS = input.ReadUInt64(ref result.publishedDateUS_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public uint Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(uint value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasEnabled {
            get { return result.hasEnabled; }
          }
          public bool Enabled {
            get { return result.Enabled; }
            set { SetEnabled(value); }
          }
          public Builder SetEnabled(bool value) {
            PrepareBuilder();
            result.hasEnabled = true;
            result.enabled_ = value;
            return this;
          }
          public Builder ClearEnabled() {
            PrepareBuilder();
            result.hasEnabled = false;
            result.enabled_ = false;
            return this;
          }
          
          public bool HasParentId {
            get { return result.hasParentId; }
          }
          public uint ParentId {
            get { return result.ParentId; }
            set { SetParentId(value); }
          }
          public Builder SetParentId(uint value) {
            PrepareBuilder();
            result.hasParentId = true;
            result.parentId_ = value;
            return this;
          }
          public Builder ClearParentId() {
            PrepareBuilder();
            result.hasParentId = false;
            result.parentId_ = 0;
            return this;
          }
          
          public bool HasName {
            get { return result.hasName; }
          }
          public ulong Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(ulong value) {
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = 0UL;
            return this;
          }
          
          public bool HasInProgressStr {
            get { return result.hasInProgressStr; }
          }
          public ulong InProgressStr {
            get { return result.InProgressStr; }
            set { SetInProgressStr(value); }
          }
          public Builder SetInProgressStr(ulong value) {
            PrepareBuilder();
            result.hasInProgressStr = true;
            result.inProgressStr_ = value;
            return this;
          }
          public Builder ClearInProgressStr() {
            PrepareBuilder();
            result.hasInProgressStr = false;
            result.inProgressStr_ = 0UL;
            return this;
          }
          
          public bool HasCompletedStr {
            get { return result.hasCompletedStr; }
          }
          public ulong CompletedStr {
            get { return result.CompletedStr; }
            set { SetCompletedStr(value); }
          }
          public Builder SetCompletedStr(ulong value) {
            PrepareBuilder();
            result.hasCompletedStr = true;
            result.completedStr_ = value;
            return this;
          }
          public Builder ClearCompletedStr() {
            PrepareBuilder();
            result.hasCompletedStr = false;
            result.completedStr_ = 0UL;
            return this;
          }
          
          public bool HasRewardStr {
            get { return result.hasRewardStr; }
          }
          public ulong RewardStr {
            get { return result.RewardStr; }
            set { SetRewardStr(value); }
          }
          public Builder SetRewardStr(ulong value) {
            PrepareBuilder();
            result.hasRewardStr = true;
            result.rewardStr_ = value;
            return this;
          }
          public Builder ClearRewardStr() {
            PrepareBuilder();
            result.hasRewardStr = false;
            result.rewardStr_ = 0UL;
            return this;
          }
          
          public bool HasIconPathAssetId {
            get { return result.hasIconPathAssetId; }
          }
          public ulong IconPathAssetId {
            get { return result.IconPathAssetId; }
            set { SetIconPathAssetId(value); }
          }
          public Builder SetIconPathAssetId(ulong value) {
            PrepareBuilder();
            result.hasIconPathAssetId = true;
            result.iconPathAssetId_ = value;
            return this;
          }
          public Builder ClearIconPathAssetId() {
            PrepareBuilder();
            result.hasIconPathAssetId = false;
            result.iconPathAssetId_ = 0UL;
            return this;
          }
          
          public bool HasScore {
            get { return result.hasScore; }
          }
          public uint Score {
            get { return result.Score; }
            set { SetScore(value); }
          }
          public Builder SetScore(uint value) {
            PrepareBuilder();
            result.hasScore = true;
            result.score_ = value;
            return this;
          }
          public Builder ClearScore() {
            PrepareBuilder();
            result.hasScore = false;
            result.score_ = 0;
            return this;
          }
          
          public bool HasCategoryStr {
            get { return result.hasCategoryStr; }
          }
          public ulong CategoryStr {
            get { return result.CategoryStr; }
            set { SetCategoryStr(value); }
          }
          public Builder SetCategoryStr(ulong value) {
            PrepareBuilder();
            result.hasCategoryStr = true;
            result.categoryStr_ = value;
            return this;
          }
          public Builder ClearCategoryStr() {
            PrepareBuilder();
            result.hasCategoryStr = false;
            result.categoryStr_ = 0UL;
            return this;
          }
          
          public bool HasSubCategoryStr {
            get { return result.hasSubCategoryStr; }
          }
          public ulong SubCategoryStr {
            get { return result.SubCategoryStr; }
            set { SetSubCategoryStr(value); }
          }
          public Builder SetSubCategoryStr(ulong value) {
            PrepareBuilder();
            result.hasSubCategoryStr = true;
            result.subCategoryStr_ = value;
            return this;
          }
          public Builder ClearSubCategoryStr() {
            PrepareBuilder();
            result.hasSubCategoryStr = false;
            result.subCategoryStr_ = 0UL;
            return this;
          }
          
          public bool HasDisplayOrder {
            get { return result.hasDisplayOrder; }
          }
          public float DisplayOrder {
            get { return result.DisplayOrder; }
            set { SetDisplayOrder(value); }
          }
          public Builder SetDisplayOrder(float value) {
            PrepareBuilder();
            result.hasDisplayOrder = true;
            result.displayOrder_ = value;
            return this;
          }
          public Builder ClearDisplayOrder() {
            PrepareBuilder();
            result.hasDisplayOrder = false;
            result.displayOrder_ = 0F;
            return this;
          }
          
          public bool HasVisibleState {
            get { return result.hasVisibleState; }
          }
          public uint VisibleState {
            get { return result.VisibleState; }
            set { SetVisibleState(value); }
          }
          public Builder SetVisibleState(uint value) {
            PrepareBuilder();
            result.hasVisibleState = true;
            result.visibleState_ = value;
            return this;
          }
          public Builder ClearVisibleState() {
            PrepareBuilder();
            result.hasVisibleState = false;
            result.visibleState_ = 0;
            return this;
          }
          
          public bool HasEvaluationType {
            get { return result.hasEvaluationType; }
          }
          public uint EvaluationType {
            get { return result.EvaluationType; }
            set { SetEvaluationType(value); }
          }
          public Builder SetEvaluationType(uint value) {
            PrepareBuilder();
            result.hasEvaluationType = true;
            result.evaluationType_ = value;
            return this;
          }
          public Builder ClearEvaluationType() {
            PrepareBuilder();
            result.hasEvaluationType = false;
            result.evaluationType_ = 0;
            return this;
          }
          
          public bool HasEventtype {
            get { return result.hasEventtype; }
          }
          public uint Eventtype {
            get { return result.Eventtype; }
            set { SetEventtype(value); }
          }
          public Builder SetEventtype(uint value) {
            PrepareBuilder();
            result.hasEventtype = true;
            result.eventtype_ = value;
            return this;
          }
          public Builder ClearEventtype() {
            PrepareBuilder();
            result.hasEventtype = false;
            result.eventtype_ = 0;
            return this;
          }
          
          public bool HasThreshold {
            get { return result.hasThreshold; }
          }
          public uint Threshold {
            get { return result.Threshold; }
            set { SetThreshold(value); }
          }
          public Builder SetThreshold(uint value) {
            PrepareBuilder();
            result.hasThreshold = true;
            result.threshold_ = value;
            return this;
          }
          public Builder ClearThreshold() {
            PrepareBuilder();
            result.hasThreshold = false;
            result.threshold_ = 0;
            return this;
          }
          
          public bool HasDependentAchievementId {
            get { return result.hasDependentAchievementId; }
          }
          public uint DependentAchievementId {
            get { return result.DependentAchievementId; }
            set { SetDependentAchievementId(value); }
          }
          public Builder SetDependentAchievementId(uint value) {
            PrepareBuilder();
            result.hasDependentAchievementId = true;
            result.dependentAchievementId_ = value;
            return this;
          }
          public Builder ClearDependentAchievementId() {
            PrepareBuilder();
            result.hasDependentAchievementId = false;
            result.dependentAchievementId_ = 0;
            return this;
          }
          
          public bool HasUiProgressDisplayOption {
            get { return result.hasUiProgressDisplayOption; }
          }
          public uint UiProgressDisplayOption {
            get { return result.UiProgressDisplayOption; }
            set { SetUiProgressDisplayOption(value); }
          }
          public Builder SetUiProgressDisplayOption(uint value) {
            PrepareBuilder();
            result.hasUiProgressDisplayOption = true;
            result.uiProgressDisplayOption_ = value;
            return this;
          }
          public Builder ClearUiProgressDisplayOption() {
            PrepareBuilder();
            result.hasUiProgressDisplayOption = false;
            result.uiProgressDisplayOption_ = 0;
            return this;
          }
          
          public bool HasPublishedDateUS {
            get { return result.hasPublishedDateUS; }
          }
          public ulong PublishedDateUS {
            get { return result.PublishedDateUS; }
            set { SetPublishedDateUS(value); }
          }
          public Builder SetPublishedDateUS(ulong value) {
            PrepareBuilder();
            result.hasPublishedDateUS = true;
            result.publishedDateUS_ = value;
            return this;
          }
          public Builder ClearPublishedDateUS() {
            PrepareBuilder();
            result.hasPublishedDateUS = false;
            result.publishedDateUS_ = 0UL;
            return this;
          }
        }
        static AchievementInfo() {
          object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int LocalizedAchievementStringBufferFieldNumber = 1;
    private bool hasLocalizedAchievementStringBuffer;
    private pb::ByteString localizedAchievementStringBuffer_ = pb::ByteString.Empty;
    public bool HasLocalizedAchievementStringBuffer {
      get { return hasLocalizedAchievementStringBuffer; }
    }
    public pb::ByteString LocalizedAchievementStringBuffer {
      get { return localizedAchievementStringBuffer_; }
    }
    
    public const int AchievementInfosFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo> achievementInfos_ = new pbc::PopsicleList<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo>();
    public scg::IList<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo> AchievementInfosList {
      get { return achievementInfos_; }
    }
    public int AchievementInfosCount {
      get { return achievementInfos_.Count; }
    }
    public global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo GetAchievementInfos(int index) {
      return achievementInfos_[index];
    }
    
    public const int AchievementNewThresholdUSFieldNumber = 3;
    private bool hasAchievementNewThresholdUS;
    private ulong achievementNewThresholdUS_;
    public bool HasAchievementNewThresholdUS {
      get { return hasAchievementNewThresholdUS; }
    }
    public ulong AchievementNewThresholdUS {
      get { return achievementNewThresholdUS_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalizedAchievementStringBuffer) return false;
        if (!hasAchievementNewThresholdUS) return false;
        foreach (global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo element in AchievementInfosList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _achievementDatabaseDumpFieldNames;
      if (hasLocalizedAchievementStringBuffer) {
        output.WriteBytes(1, field_names[2], LocalizedAchievementStringBuffer);
      }
      if (achievementInfos_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], achievementInfos_);
      }
      if (hasAchievementNewThresholdUS) {
        output.WriteUInt64(3, field_names[1], AchievementNewThresholdUS);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLocalizedAchievementStringBuffer) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, LocalizedAchievementStringBuffer);
      }
      foreach (global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo element in AchievementInfosList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasAchievementNewThresholdUS) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, AchievementNewThresholdUS);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AchievementDatabaseDump ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementDatabaseDump ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementDatabaseDump ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementDatabaseDump MakeReadOnly() {
      achievementInfos_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementDatabaseDump prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementDatabaseDump, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementDatabaseDump cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementDatabaseDump result;
      
      private AchievementDatabaseDump PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementDatabaseDump original = result;
          result = new AchievementDatabaseDump();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementDatabaseDump MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.AchievementDatabaseDump.Descriptor; }
      }
      
      public override AchievementDatabaseDump DefaultInstanceForType {
        get { return global::Gazillion.AchievementDatabaseDump.DefaultInstance; }
      }
      
      public override AchievementDatabaseDump BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementDatabaseDump) {
          return MergeFrom((AchievementDatabaseDump) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementDatabaseDump other) {
        if (other == global::Gazillion.AchievementDatabaseDump.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalizedAchievementStringBuffer) {
          LocalizedAchievementStringBuffer = other.LocalizedAchievementStringBuffer;
        }
        if (other.achievementInfos_.Count != 0) {
          result.achievementInfos_.Add(other.achievementInfos_);
        }
        if (other.HasAchievementNewThresholdUS) {
          AchievementNewThresholdUS = other.AchievementNewThresholdUS;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementDatabaseDumpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementDatabaseDumpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLocalizedAchievementStringBuffer = input.ReadBytes(ref result.localizedAchievementStringBuffer_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.achievementInfos_, global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasAchievementNewThresholdUS = input.ReadUInt64(ref result.achievementNewThresholdUS_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalizedAchievementStringBuffer {
        get { return result.hasLocalizedAchievementStringBuffer; }
      }
      public pb::ByteString LocalizedAchievementStringBuffer {
        get { return result.LocalizedAchievementStringBuffer; }
        set { SetLocalizedAchievementStringBuffer(value); }
      }
      public Builder SetLocalizedAchievementStringBuffer(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalizedAchievementStringBuffer = true;
        result.localizedAchievementStringBuffer_ = value;
        return this;
      }
      public Builder ClearLocalizedAchievementStringBuffer() {
        PrepareBuilder();
        result.hasLocalizedAchievementStringBuffer = false;
        result.localizedAchievementStringBuffer_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo> AchievementInfosList {
        get { return PrepareBuilder().achievementInfos_; }
      }
      public int AchievementInfosCount {
        get { return result.AchievementInfosCount; }
      }
      public global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo GetAchievementInfos(int index) {
        return result.GetAchievementInfos(index);
      }
      public Builder SetAchievementInfos(int index, global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementInfos_[index] = value;
        return this;
      }
      public Builder SetAchievementInfos(int index, global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementInfos(global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementInfos_.Add(value);
        return this;
      }
      public Builder AddAchievementInfos(global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementInfos(scg::IEnumerable<global::Gazillion.AchievementDatabaseDump.Types.AchievementInfo> values) {
        PrepareBuilder();
        result.achievementInfos_.Add(values);
        return this;
      }
      public Builder ClearAchievementInfos() {
        PrepareBuilder();
        result.achievementInfos_.Clear();
        return this;
      }
      
      public bool HasAchievementNewThresholdUS {
        get { return result.hasAchievementNewThresholdUS; }
      }
      public ulong AchievementNewThresholdUS {
        get { return result.AchievementNewThresholdUS; }
        set { SetAchievementNewThresholdUS(value); }
      }
      public Builder SetAchievementNewThresholdUS(ulong value) {
        PrepareBuilder();
        result.hasAchievementNewThresholdUS = true;
        result.achievementNewThresholdUS_ = value;
        return this;
      }
      public Builder ClearAchievementNewThresholdUS() {
        PrepareBuilder();
        result.hasAchievementNewThresholdUS = false;
        result.achievementNewThresholdUS_ = 0UL;
        return this;
      }
    }
    static AchievementDatabaseDump() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAchievementDatabaseDump : pb::GeneratedMessage<NetMessageAchievementDatabaseDump, NetMessageAchievementDatabaseDump.Builder> {
    private NetMessageAchievementDatabaseDump() { }
    private static readonly NetMessageAchievementDatabaseDump defaultInstance = new NetMessageAchievementDatabaseDump().MakeReadOnly();
    private static readonly string[] _netMessageAchievementDatabaseDumpFieldNames = new string[] { "compressedAchievementDatabaseDump" };
    private static readonly uint[] _netMessageAchievementDatabaseDumpFieldTags = new uint[] { 10 };
    public static NetMessageAchievementDatabaseDump DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAchievementDatabaseDump DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAchievementDatabaseDump ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementDatabaseDump__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAchievementDatabaseDump, NetMessageAchievementDatabaseDump.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementDatabaseDump__FieldAccessorTable; }
    }
    
    public const int CompressedAchievementDatabaseDumpFieldNumber = 1;
    private bool hasCompressedAchievementDatabaseDump;
    private pb::ByteString compressedAchievementDatabaseDump_ = pb::ByteString.Empty;
    public bool HasCompressedAchievementDatabaseDump {
      get { return hasCompressedAchievementDatabaseDump; }
    }
    public pb::ByteString CompressedAchievementDatabaseDump {
      get { return compressedAchievementDatabaseDump_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCompressedAchievementDatabaseDump) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAchievementDatabaseDumpFieldNames;
      if (hasCompressedAchievementDatabaseDump) {
        output.WriteBytes(1, field_names[0], CompressedAchievementDatabaseDump);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCompressedAchievementDatabaseDump) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, CompressedAchievementDatabaseDump);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementDatabaseDump ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAchievementDatabaseDump MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAchievementDatabaseDump prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAchievementDatabaseDump, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAchievementDatabaseDump cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAchievementDatabaseDump result;
      
      private NetMessageAchievementDatabaseDump PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAchievementDatabaseDump original = result;
          result = new NetMessageAchievementDatabaseDump();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAchievementDatabaseDump MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAchievementDatabaseDump.Descriptor; }
      }
      
      public override NetMessageAchievementDatabaseDump DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAchievementDatabaseDump.DefaultInstance; }
      }
      
      public override NetMessageAchievementDatabaseDump BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAchievementDatabaseDump) {
          return MergeFrom((NetMessageAchievementDatabaseDump) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAchievementDatabaseDump other) {
        if (other == global::Gazillion.NetMessageAchievementDatabaseDump.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCompressedAchievementDatabaseDump) {
          CompressedAchievementDatabaseDump = other.CompressedAchievementDatabaseDump;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAchievementDatabaseDumpFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAchievementDatabaseDumpFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCompressedAchievementDatabaseDump = input.ReadBytes(ref result.compressedAchievementDatabaseDump_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCompressedAchievementDatabaseDump {
        get { return result.hasCompressedAchievementDatabaseDump; }
      }
      public pb::ByteString CompressedAchievementDatabaseDump {
        get { return result.CompressedAchievementDatabaseDump; }
        set { SetCompressedAchievementDatabaseDump(value); }
      }
      public Builder SetCompressedAchievementDatabaseDump(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCompressedAchievementDatabaseDump = true;
        result.compressedAchievementDatabaseDump_ = value;
        return this;
      }
      public Builder ClearCompressedAchievementDatabaseDump() {
        PrepareBuilder();
        result.hasCompressedAchievementDatabaseDump = false;
        result.compressedAchievementDatabaseDump_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageAchievementDatabaseDump() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAchievementStateUpdate : pb::GeneratedMessage<NetMessageAchievementStateUpdate, NetMessageAchievementStateUpdate.Builder> {
    private NetMessageAchievementStateUpdate() { }
    private static readonly NetMessageAchievementStateUpdate defaultInstance = new NetMessageAchievementStateUpdate().MakeReadOnly();
    private static readonly string[] _netMessageAchievementStateUpdateFieldNames = new string[] { "achievementStates", "showpopups" };
    private static readonly uint[] _netMessageAchievementStateUpdateFieldTags = new uint[] { 10, 16 };
    public static NetMessageAchievementStateUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAchievementStateUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAchievementStateUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementStateUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAchievementStateUpdate, NetMessageAchievementStateUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementStateUpdate__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AchievementState : pb::GeneratedMessage<AchievementState, AchievementState.Builder> {
        private AchievementState() { }
        private static readonly AchievementState defaultInstance = new AchievementState().MakeReadOnly();
        private static readonly string[] _achievementStateFieldNames = new string[] { "completeddate", "count", "id" };
        private static readonly uint[] _achievementStateFieldTags = new uint[] { 24, 16, 8 };
        public static AchievementState DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AchievementState DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AchievementState ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AchievementState, AchievementState.Builder> InternalFieldAccessors {
          get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementStateUpdate_AchievementState__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private uint id_;
        public bool HasId {
          get { return hasId; }
        }
        public uint Id {
          get { return id_; }
        }
        
        public const int CountFieldNumber = 2;
        private bool hasCount;
        private uint count_;
        public bool HasCount {
          get { return hasCount; }
        }
        public uint Count {
          get { return count_; }
        }
        
        public const int CompleteddateFieldNumber = 3;
        private bool hasCompleteddate;
        private ulong completeddate_;
        public bool HasCompleteddate {
          get { return hasCompleteddate; }
        }
        public ulong Completeddate {
          get { return completeddate_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasId) return false;
            if (!hasCount) return false;
            if (!hasCompleteddate) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _achievementStateFieldNames;
          if (hasId) {
            output.WriteUInt32(1, field_names[2], Id);
          }
          if (hasCount) {
            output.WriteUInt32(2, field_names[1], Count);
          }
          if (hasCompleteddate) {
            output.WriteUInt64(3, field_names[0], Completeddate);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
          }
          if (hasCount) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, Count);
          }
          if (hasCompleteddate) {
            size += pb::CodedOutputStream.ComputeUInt64Size(3, Completeddate);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static AchievementState ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AchievementState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AchievementState ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AchievementState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AchievementState ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AchievementState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AchievementState ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AchievementState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AchievementState ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AchievementState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AchievementState MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AchievementState prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AchievementState, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AchievementState cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AchievementState result;
          
          private AchievementState PrepareBuilder() {
            if (resultIsReadOnly) {
              AchievementState original = result;
              result = new AchievementState();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AchievementState MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.Descriptor; }
          }
          
          public override AchievementState DefaultInstanceForType {
            get { return global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.DefaultInstance; }
          }
          
          public override AchievementState BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AchievementState) {
              return MergeFrom((AchievementState) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AchievementState other) {
            if (other == global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCount) {
              Count = other.Count;
            }
            if (other.HasCompleteddate) {
              Completeddate = other.Completeddate;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_achievementStateFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _achievementStateFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadUInt32(ref result.id_);
                  break;
                }
                case 16: {
                  result.hasCount = input.ReadUInt32(ref result.count_);
                  break;
                }
                case 24: {
                  result.hasCompleteddate = input.ReadUInt64(ref result.completeddate_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public uint Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(uint value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCount {
            get { return result.hasCount; }
          }
          public uint Count {
            get { return result.Count; }
            set { SetCount(value); }
          }
          public Builder SetCount(uint value) {
            PrepareBuilder();
            result.hasCount = true;
            result.count_ = value;
            return this;
          }
          public Builder ClearCount() {
            PrepareBuilder();
            result.hasCount = false;
            result.count_ = 0;
            return this;
          }
          
          public bool HasCompleteddate {
            get { return result.hasCompleteddate; }
          }
          public ulong Completeddate {
            get { return result.Completeddate; }
            set { SetCompleteddate(value); }
          }
          public Builder SetCompleteddate(ulong value) {
            PrepareBuilder();
            result.hasCompleteddate = true;
            result.completeddate_ = value;
            return this;
          }
          public Builder ClearCompleteddate() {
            PrepareBuilder();
            result.hasCompleteddate = false;
            result.completeddate_ = 0UL;
            return this;
          }
        }
        static AchievementState() {
          object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AchievementStatesFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState> achievementStates_ = new pbc::PopsicleList<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState>();
    public scg::IList<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState> AchievementStatesList {
      get { return achievementStates_; }
    }
    public int AchievementStatesCount {
      get { return achievementStates_.Count; }
    }
    public global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState GetAchievementStates(int index) {
      return achievementStates_[index];
    }
    
    public const int ShowpopupsFieldNumber = 2;
    private bool hasShowpopups;
    private bool showpopups_;
    public bool HasShowpopups {
      get { return hasShowpopups; }
    }
    public bool Showpopups {
      get { return showpopups_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasShowpopups) return false;
        foreach (global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState element in AchievementStatesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAchievementStateUpdateFieldNames;
      if (achievementStates_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievementStates_);
      }
      if (hasShowpopups) {
        output.WriteBool(2, field_names[1], Showpopups);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState element in AchievementStatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasShowpopups) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Showpopups);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAchievementStateUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementStateUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAchievementStateUpdate MakeReadOnly() {
      achievementStates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAchievementStateUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAchievementStateUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAchievementStateUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAchievementStateUpdate result;
      
      private NetMessageAchievementStateUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAchievementStateUpdate original = result;
          result = new NetMessageAchievementStateUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAchievementStateUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAchievementStateUpdate.Descriptor; }
      }
      
      public override NetMessageAchievementStateUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAchievementStateUpdate.DefaultInstance; }
      }
      
      public override NetMessageAchievementStateUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAchievementStateUpdate) {
          return MergeFrom((NetMessageAchievementStateUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAchievementStateUpdate other) {
        if (other == global::Gazillion.NetMessageAchievementStateUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievementStates_.Count != 0) {
          result.achievementStates_.Add(other.achievementStates_);
        }
        if (other.HasShowpopups) {
          Showpopups = other.Showpopups;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAchievementStateUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAchievementStateUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievementStates_, global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasShowpopups = input.ReadBool(ref result.showpopups_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState> AchievementStatesList {
        get { return PrepareBuilder().achievementStates_; }
      }
      public int AchievementStatesCount {
        get { return result.AchievementStatesCount; }
      }
      public global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState GetAchievementStates(int index) {
        return result.GetAchievementStates(index);
      }
      public Builder SetAchievementStates(int index, global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementStates_[index] = value;
        return this;
      }
      public Builder SetAchievementStates(int index, global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementStates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementStates(global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementStates_.Add(value);
        return this;
      }
      public Builder AddAchievementStates(global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementStates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementStates(scg::IEnumerable<global::Gazillion.NetMessageAchievementStateUpdate.Types.AchievementState> values) {
        PrepareBuilder();
        result.achievementStates_.Add(values);
        return this;
      }
      public Builder ClearAchievementStates() {
        PrepareBuilder();
        result.achievementStates_.Clear();
        return this;
      }
      
      public bool HasShowpopups {
        get { return result.hasShowpopups; }
      }
      public bool Showpopups {
        get { return result.Showpopups; }
        set { SetShowpopups(value); }
      }
      public Builder SetShowpopups(bool value) {
        PrepareBuilder();
        result.hasShowpopups = true;
        result.showpopups_ = value;
        return this;
      }
      public Builder ClearShowpopups() {
        PrepareBuilder();
        result.hasShowpopups = false;
        result.showpopups_ = false;
        return this;
      }
    }
    static NetMessageAchievementStateUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePartyKickGracePeriod : pb::GeneratedMessage<NetMessagePartyKickGracePeriod, NetMessagePartyKickGracePeriod.Builder> {
    private NetMessagePartyKickGracePeriod() { }
    private static readonly NetMessagePartyKickGracePeriod defaultInstance = new NetMessagePartyKickGracePeriod().MakeReadOnly();
    private static readonly string[] _netMessagePartyKickGracePeriodFieldNames = new string[] { "expireTimeMicroseconds", "leaveReason" };
    private static readonly uint[] _netMessagePartyKickGracePeriodFieldTags = new uint[] { 8, 16 };
    public static NetMessagePartyKickGracePeriod DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePartyKickGracePeriod DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePartyKickGracePeriod ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePartyKickGracePeriod__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePartyKickGracePeriod, NetMessagePartyKickGracePeriod.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePartyKickGracePeriod__FieldAccessorTable; }
    }
    
    public const int ExpireTimeMicrosecondsFieldNumber = 1;
    private bool hasExpireTimeMicroseconds;
    private ulong expireTimeMicroseconds_;
    public bool HasExpireTimeMicroseconds {
      get { return hasExpireTimeMicroseconds; }
    }
    public ulong ExpireTimeMicroseconds {
      get { return expireTimeMicroseconds_; }
    }
    
    public const int LeaveReasonFieldNumber = 2;
    private bool hasLeaveReason;
    private global::Gazillion.GroupLeaveReason leaveReason_ = global::Gazillion.GroupLeaveReason.GROUP_LEAVE_REASON_LEFT;
    public bool HasLeaveReason {
      get { return hasLeaveReason; }
    }
    public global::Gazillion.GroupLeaveReason LeaveReason {
      get { return leaveReason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExpireTimeMicroseconds) return false;
        if (!hasLeaveReason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePartyKickGracePeriodFieldNames;
      if (hasExpireTimeMicroseconds) {
        output.WriteUInt64(1, field_names[0], ExpireTimeMicroseconds);
      }
      if (hasLeaveReason) {
        output.WriteEnum(2, field_names[1], (int) LeaveReason, LeaveReason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasExpireTimeMicroseconds) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ExpireTimeMicroseconds);
      }
      if (hasLeaveReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) LeaveReason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePartyKickGracePeriod ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePartyKickGracePeriod MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePartyKickGracePeriod prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePartyKickGracePeriod, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePartyKickGracePeriod cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePartyKickGracePeriod result;
      
      private NetMessagePartyKickGracePeriod PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePartyKickGracePeriod original = result;
          result = new NetMessagePartyKickGracePeriod();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePartyKickGracePeriod MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePartyKickGracePeriod.Descriptor; }
      }
      
      public override NetMessagePartyKickGracePeriod DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePartyKickGracePeriod.DefaultInstance; }
      }
      
      public override NetMessagePartyKickGracePeriod BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePartyKickGracePeriod) {
          return MergeFrom((NetMessagePartyKickGracePeriod) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePartyKickGracePeriod other) {
        if (other == global::Gazillion.NetMessagePartyKickGracePeriod.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExpireTimeMicroseconds) {
          ExpireTimeMicroseconds = other.ExpireTimeMicroseconds;
        }
        if (other.HasLeaveReason) {
          LeaveReason = other.LeaveReason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePartyKickGracePeriodFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePartyKickGracePeriodFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExpireTimeMicroseconds = input.ReadUInt64(ref result.expireTimeMicroseconds_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.leaveReason_, out unknown)) {
                result.hasLeaveReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExpireTimeMicroseconds {
        get { return result.hasExpireTimeMicroseconds; }
      }
      public ulong ExpireTimeMicroseconds {
        get { return result.ExpireTimeMicroseconds; }
        set { SetExpireTimeMicroseconds(value); }
      }
      public Builder SetExpireTimeMicroseconds(ulong value) {
        PrepareBuilder();
        result.hasExpireTimeMicroseconds = true;
        result.expireTimeMicroseconds_ = value;
        return this;
      }
      public Builder ClearExpireTimeMicroseconds() {
        PrepareBuilder();
        result.hasExpireTimeMicroseconds = false;
        result.expireTimeMicroseconds_ = 0UL;
        return this;
      }
      
      public bool HasLeaveReason {
       get { return result.hasLeaveReason; }
      }
      public global::Gazillion.GroupLeaveReason LeaveReason {
        get { return result.LeaveReason; }
        set { SetLeaveReason(value); }
      }
      public Builder SetLeaveReason(global::Gazillion.GroupLeaveReason value) {
        PrepareBuilder();
        result.hasLeaveReason = true;
        result.leaveReason_ = value;
        return this;
      }
      public Builder ClearLeaveReason() {
        PrepareBuilder();
        result.hasLeaveReason = false;
        result.leaveReason_ = global::Gazillion.GroupLeaveReason.GROUP_LEAVE_REASON_LEFT;
        return this;
      }
    }
    static NetMessagePartyKickGracePeriod() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageReceivedGift : pb::GeneratedMessage<NetMessageReceivedGift, NetMessageReceivedGift.Builder> {
    private NetMessageReceivedGift() { }
    private static readonly NetMessageReceivedGift defaultInstance = new NetMessageReceivedGift().MakeReadOnly();
    private static readonly string[] _netMessageReceivedGiftFieldNames = new string[] { "message", "sender", "skuId", "transId" };
    private static readonly uint[] _netMessageReceivedGiftFieldTags = new uint[] { 34, 26, 8, 16 };
    public static NetMessageReceivedGift DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageReceivedGift DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageReceivedGift ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceivedGift__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageReceivedGift, NetMessageReceivedGift.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageReceivedGift__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private ulong skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public ulong SkuId {
      get { return skuId_; }
    }
    
    public const int TransIdFieldNumber = 2;
    private bool hasTransId;
    private ulong transId_;
    public bool HasTransId {
      get { return hasTransId; }
    }
    public ulong TransId {
      get { return transId_; }
    }
    
    public const int SenderFieldNumber = 3;
    private bool hasSender;
    private string sender_ = "";
    public bool HasSender {
      get { return hasSender; }
    }
    public string Sender {
      get { return sender_; }
    }
    
    public const int MessageFieldNumber = 4;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkuId) return false;
        if (!hasTransId) return false;
        if (!hasSender) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageReceivedGiftFieldNames;
      if (hasSkuId) {
        output.WriteUInt64(1, field_names[2], SkuId);
      }
      if (hasTransId) {
        output.WriteUInt64(2, field_names[3], TransId);
      }
      if (hasSender) {
        output.WriteString(3, field_names[1], Sender);
      }
      if (hasMessage) {
        output.WriteString(4, field_names[0], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SkuId);
      }
      if (hasTransId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TransId);
      }
      if (hasSender) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Sender);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageReceivedGift ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageReceivedGift ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageReceivedGift ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageReceivedGift MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageReceivedGift prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageReceivedGift, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageReceivedGift cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageReceivedGift result;
      
      private NetMessageReceivedGift PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageReceivedGift original = result;
          result = new NetMessageReceivedGift();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageReceivedGift MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageReceivedGift.Descriptor; }
      }
      
      public override NetMessageReceivedGift DefaultInstanceForType {
        get { return global::Gazillion.NetMessageReceivedGift.DefaultInstance; }
      }
      
      public override NetMessageReceivedGift BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageReceivedGift) {
          return MergeFrom((NetMessageReceivedGift) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageReceivedGift other) {
        if (other == global::Gazillion.NetMessageReceivedGift.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        if (other.HasTransId) {
          TransId = other.TransId;
        }
        if (other.HasSender) {
          Sender = other.Sender;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageReceivedGiftFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageReceivedGiftFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadUInt64(ref result.skuId_);
              break;
            }
            case 16: {
              result.hasTransId = input.ReadUInt64(ref result.transId_);
              break;
            }
            case 26: {
              result.hasSender = input.ReadString(ref result.sender_);
              break;
            }
            case 34: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public ulong SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(ulong value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0UL;
        return this;
      }
      
      public bool HasTransId {
        get { return result.hasTransId; }
      }
      public ulong TransId {
        get { return result.TransId; }
        set { SetTransId(value); }
      }
      public Builder SetTransId(ulong value) {
        PrepareBuilder();
        result.hasTransId = true;
        result.transId_ = value;
        return this;
      }
      public Builder ClearTransId() {
        PrepareBuilder();
        result.hasTransId = false;
        result.transId_ = 0UL;
        return this;
      }
      
      public bool HasSender {
        get { return result.hasSender; }
      }
      public string Sender {
        get { return result.Sender; }
        set { SetSender(value); }
      }
      public Builder SetSender(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSender = true;
        result.sender_ = value;
        return this;
      }
      public Builder ClearSender() {
        PrepareBuilder();
        result.hasSender = false;
        result.sender_ = "";
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static NetMessageReceivedGift() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAchievementCompletedByPartyMember : pb::GeneratedMessage<NetMessageAchievementCompletedByPartyMember, NetMessageAchievementCompletedByPartyMember.Builder> {
    private NetMessageAchievementCompletedByPartyMember() { }
    private static readonly NetMessageAchievementCompletedByPartyMember defaultInstance = new NetMessageAchievementCompletedByPartyMember().MakeReadOnly();
    private static readonly string[] _netMessageAchievementCompletedByPartyMemberFieldNames = new string[] { "id", "playerName" };
    private static readonly uint[] _netMessageAchievementCompletedByPartyMemberFieldTags = new uint[] { 8, 18 };
    public static NetMessageAchievementCompletedByPartyMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAchievementCompletedByPartyMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAchievementCompletedByPartyMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAchievementCompletedByPartyMember, NetMessageAchievementCompletedByPartyMember.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAchievementCompletedByPartyMember__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int PlayerNameFieldNumber = 2;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAchievementCompletedByPartyMemberFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      if (hasPlayerName) {
        output.WriteString(2, field_names[1], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAchievementCompletedByPartyMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAchievementCompletedByPartyMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAchievementCompletedByPartyMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAchievementCompletedByPartyMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAchievementCompletedByPartyMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAchievementCompletedByPartyMember result;
      
      private NetMessageAchievementCompletedByPartyMember PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAchievementCompletedByPartyMember original = result;
          result = new NetMessageAchievementCompletedByPartyMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAchievementCompletedByPartyMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAchievementCompletedByPartyMember.Descriptor; }
      }
      
      public override NetMessageAchievementCompletedByPartyMember DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAchievementCompletedByPartyMember.DefaultInstance; }
      }
      
      public override NetMessageAchievementCompletedByPartyMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAchievementCompletedByPartyMember) {
          return MergeFrom((NetMessageAchievementCompletedByPartyMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAchievementCompletedByPartyMember other) {
        if (other == global::Gazillion.NetMessageAchievementCompletedByPartyMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAchievementCompletedByPartyMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAchievementCompletedByPartyMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static NetMessageAchievementCompletedByPartyMember() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageVerifyOnClient : pb::GeneratedMessage<NetMessageVerifyOnClient, NetMessageVerifyOnClient.Builder> {
    private NetMessageVerifyOnClient() { }
    private static readonly NetMessageVerifyOnClient defaultInstance = new NetMessageVerifyOnClient().MakeReadOnly();
    private static readonly string[] _netMessageVerifyOnClientFieldNames = new string[] { "message" };
    private static readonly uint[] _netMessageVerifyOnClientFieldTags = new uint[] { 10 };
    public static NetMessageVerifyOnClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageVerifyOnClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageVerifyOnClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVerifyOnClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageVerifyOnClient, NetMessageVerifyOnClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageVerifyOnClient__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageVerifyOnClientFieldNames;
      if (hasMessage) {
        output.WriteString(1, field_names[0], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageVerifyOnClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageVerifyOnClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageVerifyOnClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageVerifyOnClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageVerifyOnClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageVerifyOnClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageVerifyOnClient result;
      
      private NetMessageVerifyOnClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageVerifyOnClient original = result;
          result = new NetMessageVerifyOnClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageVerifyOnClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageVerifyOnClient.Descriptor; }
      }
      
      public override NetMessageVerifyOnClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageVerifyOnClient.DefaultInstance; }
      }
      
      public override NetMessageVerifyOnClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageVerifyOnClient) {
          return MergeFrom((NetMessageVerifyOnClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageVerifyOnClient other) {
        if (other == global::Gazillion.NetMessageVerifyOnClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageVerifyOnClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageVerifyOnClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static NetMessageVerifyOnClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageCreateAndOpenFileOnClient : pb::GeneratedMessage<NetMessageCreateAndOpenFileOnClient, NetMessageCreateAndOpenFileOnClient.Builder> {
    private NetMessageCreateAndOpenFileOnClient() { }
    private static readonly NetMessageCreateAndOpenFileOnClient defaultInstance = new NetMessageCreateAndOpenFileOnClient().MakeReadOnly();
    private static readonly string[] _netMessageCreateAndOpenFileOnClientFieldNames = new string[] { "contents", "relativePath" };
    private static readonly uint[] _netMessageCreateAndOpenFileOnClientFieldTags = new uint[] { 18, 10 };
    public static NetMessageCreateAndOpenFileOnClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageCreateAndOpenFileOnClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageCreateAndOpenFileOnClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageCreateAndOpenFileOnClient, NetMessageCreateAndOpenFileOnClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageCreateAndOpenFileOnClient__FieldAccessorTable; }
    }
    
    public const int RelativePathFieldNumber = 1;
    private bool hasRelativePath;
    private string relativePath_ = "";
    public bool HasRelativePath {
      get { return hasRelativePath; }
    }
    public string RelativePath {
      get { return relativePath_; }
    }
    
    public const int ContentsFieldNumber = 2;
    private bool hasContents;
    private string contents_ = "";
    public bool HasContents {
      get { return hasContents; }
    }
    public string Contents {
      get { return contents_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRelativePath) return false;
        if (!hasContents) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageCreateAndOpenFileOnClientFieldNames;
      if (hasRelativePath) {
        output.WriteString(1, field_names[1], RelativePath);
      }
      if (hasContents) {
        output.WriteString(2, field_names[0], Contents);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRelativePath) {
        size += pb::CodedOutputStream.ComputeStringSize(1, RelativePath);
      }
      if (hasContents) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Contents);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageCreateAndOpenFileOnClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageCreateAndOpenFileOnClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageCreateAndOpenFileOnClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageCreateAndOpenFileOnClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageCreateAndOpenFileOnClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageCreateAndOpenFileOnClient result;
      
      private NetMessageCreateAndOpenFileOnClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageCreateAndOpenFileOnClient original = result;
          result = new NetMessageCreateAndOpenFileOnClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageCreateAndOpenFileOnClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageCreateAndOpenFileOnClient.Descriptor; }
      }
      
      public override NetMessageCreateAndOpenFileOnClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageCreateAndOpenFileOnClient.DefaultInstance; }
      }
      
      public override NetMessageCreateAndOpenFileOnClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageCreateAndOpenFileOnClient) {
          return MergeFrom((NetMessageCreateAndOpenFileOnClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageCreateAndOpenFileOnClient other) {
        if (other == global::Gazillion.NetMessageCreateAndOpenFileOnClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRelativePath) {
          RelativePath = other.RelativePath;
        }
        if (other.HasContents) {
          Contents = other.Contents;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageCreateAndOpenFileOnClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageCreateAndOpenFileOnClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRelativePath = input.ReadString(ref result.relativePath_);
              break;
            }
            case 18: {
              result.hasContents = input.ReadString(ref result.contents_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRelativePath {
        get { return result.hasRelativePath; }
      }
      public string RelativePath {
        get { return result.RelativePath; }
        set { SetRelativePath(value); }
      }
      public Builder SetRelativePath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRelativePath = true;
        result.relativePath_ = value;
        return this;
      }
      public Builder ClearRelativePath() {
        PrepareBuilder();
        result.hasRelativePath = false;
        result.relativePath_ = "";
        return this;
      }
      
      public bool HasContents {
        get { return result.hasContents; }
      }
      public string Contents {
        get { return result.Contents; }
        set { SetContents(value); }
      }
      public Builder SetContents(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContents = true;
        result.contents_ = value;
        return this;
      }
      public Builder ClearContents() {
        PrepareBuilder();
        result.hasContents = false;
        result.contents_ = "";
        return this;
      }
    }
    static NetMessageCreateAndOpenFileOnClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageInventoryLoaded : pb::GeneratedMessage<NetMessageInventoryLoaded, NetMessageInventoryLoaded.Builder> {
    private NetMessageInventoryLoaded() { }
    private static readonly NetMessageInventoryLoaded defaultInstance = new NetMessageInventoryLoaded().MakeReadOnly();
    private static readonly string[] _netMessageInventoryLoadedFieldNames = new string[] { "inventoryProtoId" };
    private static readonly uint[] _netMessageInventoryLoadedFieldTags = new uint[] { 8 };
    public static NetMessageInventoryLoaded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageInventoryLoaded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageInventoryLoaded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryLoaded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageInventoryLoaded, NetMessageInventoryLoaded.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageInventoryLoaded__FieldAccessorTable; }
    }
    
    public const int InventoryProtoIdFieldNumber = 1;
    private bool hasInventoryProtoId;
    private ulong inventoryProtoId_;
    public bool HasInventoryProtoId {
      get { return hasInventoryProtoId; }
    }
    public ulong InventoryProtoId {
      get { return inventoryProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInventoryProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageInventoryLoadedFieldNames;
      if (hasInventoryProtoId) {
        output.WriteUInt64(1, field_names[0], InventoryProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInventoryProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, InventoryProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageInventoryLoaded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageInventoryLoaded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageInventoryLoaded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageInventoryLoaded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageInventoryLoaded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageInventoryLoaded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageInventoryLoaded result;
      
      private NetMessageInventoryLoaded PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageInventoryLoaded original = result;
          result = new NetMessageInventoryLoaded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageInventoryLoaded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageInventoryLoaded.Descriptor; }
      }
      
      public override NetMessageInventoryLoaded DefaultInstanceForType {
        get { return global::Gazillion.NetMessageInventoryLoaded.DefaultInstance; }
      }
      
      public override NetMessageInventoryLoaded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageInventoryLoaded) {
          return MergeFrom((NetMessageInventoryLoaded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageInventoryLoaded other) {
        if (other == global::Gazillion.NetMessageInventoryLoaded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInventoryProtoId) {
          InventoryProtoId = other.InventoryProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageInventoryLoadedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageInventoryLoadedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInventoryProtoId = input.ReadUInt64(ref result.inventoryProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInventoryProtoId {
        get { return result.hasInventoryProtoId; }
      }
      public ulong InventoryProtoId {
        get { return result.InventoryProtoId; }
        set { SetInventoryProtoId(value); }
      }
      public Builder SetInventoryProtoId(ulong value) {
        PrepareBuilder();
        result.hasInventoryProtoId = true;
        result.inventoryProtoId_ = value;
        return this;
      }
      public Builder ClearInventoryProtoId() {
        PrepareBuilder();
        result.hasInventoryProtoId = false;
        result.inventoryProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessageInventoryLoaded() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardReportClient : pb::GeneratedMessage<NetMessageLeaderboardReportClient, NetMessageLeaderboardReportClient.Builder> {
    private NetMessageLeaderboardReportClient() { }
    private static readonly NetMessageLeaderboardReportClient defaultInstance = new NetMessageLeaderboardReportClient().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardReportClientFieldNames = new string[] { "report" };
    private static readonly uint[] _netMessageLeaderboardReportClientFieldTags = new uint[] { 10 };
    public static NetMessageLeaderboardReportClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardReportClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardReportClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardReportClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardReportClient, NetMessageLeaderboardReportClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardReportClient__FieldAccessorTable; }
    }
    
    public const int ReportFieldNumber = 1;
    private bool hasReport;
    private global::Gazillion.LeaderboardReport report_;
    public bool HasReport {
      get { return hasReport; }
    }
    public global::Gazillion.LeaderboardReport Report {
      get { return report_ ?? global::Gazillion.LeaderboardReport.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReport) return false;
        if (!Report.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardReportClientFieldNames;
      if (hasReport) {
        output.WriteMessage(1, field_names[0], Report);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReport) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Report);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardReportClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardReportClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardReportClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardReportClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardReportClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardReportClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardReportClient result;
      
      private NetMessageLeaderboardReportClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardReportClient original = result;
          result = new NetMessageLeaderboardReportClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardReportClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardReportClient.Descriptor; }
      }
      
      public override NetMessageLeaderboardReportClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardReportClient.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardReportClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardReportClient) {
          return MergeFrom((NetMessageLeaderboardReportClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardReportClient other) {
        if (other == global::Gazillion.NetMessageLeaderboardReportClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReport) {
          MergeReport(other.Report);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardReportClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardReportClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gazillion.LeaderboardReport.Builder subBuilder = global::Gazillion.LeaderboardReport.CreateBuilder();
              if (result.hasReport) {
                subBuilder.MergeFrom(Report);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Report = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReport {
       get { return result.hasReport; }
      }
      public global::Gazillion.LeaderboardReport Report {
        get { return result.Report; }
        set { SetReport(value); }
      }
      public Builder SetReport(global::Gazillion.LeaderboardReport value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReport = true;
        result.report_ = value;
        return this;
      }
      public Builder SetReport(global::Gazillion.LeaderboardReport.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReport = true;
        result.report_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReport(global::Gazillion.LeaderboardReport value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReport &&
            result.report_ != global::Gazillion.LeaderboardReport.DefaultInstance) {
            result.report_ = global::Gazillion.LeaderboardReport.CreateBuilder(result.report_).MergeFrom(value).BuildPartial();
        } else {
          result.report_ = value;
        }
        result.hasReport = true;
        return this;
      }
      public Builder ClearReport() {
        PrepareBuilder();
        result.hasReport = false;
        result.report_ = null;
        return this;
      }
    }
    static NetMessageLeaderboardReportClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardCheatResponseClient : pb::GeneratedMessage<NetMessageLeaderboardCheatResponseClient, NetMessageLeaderboardCheatResponseClient.Builder> {
    private NetMessageLeaderboardCheatResponseClient() { }
    private static readonly NetMessageLeaderboardCheatResponseClient defaultInstance = new NetMessageLeaderboardCheatResponseClient().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardCheatResponseClientFieldNames = new string[] { "cheatResponseText" };
    private static readonly uint[] _netMessageLeaderboardCheatResponseClientFieldTags = new uint[] { 10 };
    public static NetMessageLeaderboardCheatResponseClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardCheatResponseClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardCheatResponseClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardCheatResponseClient, NetMessageLeaderboardCheatResponseClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardCheatResponseClient__FieldAccessorTable; }
    }
    
    public const int CheatResponseTextFieldNumber = 1;
    private bool hasCheatResponseText;
    private string cheatResponseText_ = "";
    public bool HasCheatResponseText {
      get { return hasCheatResponseText; }
    }
    public string CheatResponseText {
      get { return cheatResponseText_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCheatResponseText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardCheatResponseClientFieldNames;
      if (hasCheatResponseText) {
        output.WriteString(1, field_names[0], CheatResponseText);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCheatResponseText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, CheatResponseText);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardCheatResponseClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardCheatResponseClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardCheatResponseClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardCheatResponseClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardCheatResponseClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardCheatResponseClient result;
      
      private NetMessageLeaderboardCheatResponseClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardCheatResponseClient original = result;
          result = new NetMessageLeaderboardCheatResponseClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardCheatResponseClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardCheatResponseClient.Descriptor; }
      }
      
      public override NetMessageLeaderboardCheatResponseClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardCheatResponseClient.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardCheatResponseClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardCheatResponseClient) {
          return MergeFrom((NetMessageLeaderboardCheatResponseClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardCheatResponseClient other) {
        if (other == global::Gazillion.NetMessageLeaderboardCheatResponseClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCheatResponseText) {
          CheatResponseText = other.CheatResponseText;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardCheatResponseClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardCheatResponseClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCheatResponseText = input.ReadString(ref result.cheatResponseText_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCheatResponseText {
        get { return result.hasCheatResponseText; }
      }
      public string CheatResponseText {
        get { return result.CheatResponseText; }
        set { SetCheatResponseText(value); }
      }
      public Builder SetCheatResponseText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCheatResponseText = true;
        result.cheatResponseText_ = value;
        return this;
      }
      public Builder ClearCheatResponseText() {
        PrepareBuilder();
        result.hasCheatResponseText = false;
        result.cheatResponseText_ = "";
        return this;
      }
    }
    static NetMessageLeaderboardCheatResponseClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LeaderboardArchivedInstanceListData : pb::GeneratedMessage<LeaderboardArchivedInstanceListData, LeaderboardArchivedInstanceListData.Builder> {
    private LeaderboardArchivedInstanceListData() { }
    private static readonly LeaderboardArchivedInstanceListData defaultInstance = new LeaderboardArchivedInstanceListData().MakeReadOnly();
    private static readonly string[] _leaderboardArchivedInstanceListDataFieldNames = new string[] { "archivedInstanceList", "leaderboardId" };
    private static readonly uint[] _leaderboardArchivedInstanceListDataFieldTags = new uint[] { 16, 8 };
    public static LeaderboardArchivedInstanceListData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardArchivedInstanceListData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardArchivedInstanceListData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_LeaderboardArchivedInstanceListData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardArchivedInstanceListData, LeaderboardArchivedInstanceListData.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_LeaderboardArchivedInstanceListData__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int ArchivedInstanceListFieldNumber = 2;
    private pbc::PopsicleList<ulong> archivedInstanceList_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ArchivedInstanceListList {
      get { return pbc::Lists.AsReadOnly(archivedInstanceList_); }
    }
    public int ArchivedInstanceListCount {
      get { return archivedInstanceList_.Count; }
    }
    public ulong GetArchivedInstanceList(int index) {
      return archivedInstanceList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _leaderboardArchivedInstanceListDataFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[1], LeaderboardId);
      }
      if (archivedInstanceList_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], archivedInstanceList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLeaderboardId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
      }
      {
        int dataSize = 0;
        foreach (ulong element in ArchivedInstanceListList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * archivedInstanceList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardArchivedInstanceListData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardArchivedInstanceListData MakeReadOnly() {
      archivedInstanceList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardArchivedInstanceListData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardArchivedInstanceListData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardArchivedInstanceListData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardArchivedInstanceListData result;
      
      private LeaderboardArchivedInstanceListData PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardArchivedInstanceListData original = result;
          result = new LeaderboardArchivedInstanceListData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardArchivedInstanceListData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.LeaderboardArchivedInstanceListData.Descriptor; }
      }
      
      public override LeaderboardArchivedInstanceListData DefaultInstanceForType {
        get { return global::Gazillion.LeaderboardArchivedInstanceListData.DefaultInstance; }
      }
      
      public override LeaderboardArchivedInstanceListData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardArchivedInstanceListData) {
          return MergeFrom((LeaderboardArchivedInstanceListData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardArchivedInstanceListData other) {
        if (other == global::Gazillion.LeaderboardArchivedInstanceListData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.archivedInstanceList_.Count != 0) {
          result.archivedInstanceList_.Add(other.archivedInstanceList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardArchivedInstanceListDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardArchivedInstanceListDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.archivedInstanceList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ArchivedInstanceListList {
        get { return PrepareBuilder().archivedInstanceList_; }
      }
      public int ArchivedInstanceListCount {
        get { return result.ArchivedInstanceListCount; }
      }
      public ulong GetArchivedInstanceList(int index) {
        return result.GetArchivedInstanceList(index);
      }
      public Builder SetArchivedInstanceList(int index, ulong value) {
        PrepareBuilder();
        result.archivedInstanceList_[index] = value;
        return this;
      }
      public Builder AddArchivedInstanceList(ulong value) {
        PrepareBuilder();
        result.archivedInstanceList_.Add(value);
        return this;
      }
      public Builder AddRangeArchivedInstanceList(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.archivedInstanceList_.Add(values);
        return this;
      }
      public Builder ClearArchivedInstanceList() {
        PrepareBuilder();
        result.archivedInstanceList_.Clear();
        return this;
      }
    }
    static LeaderboardArchivedInstanceListData() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LeaderboardInitData : pb::GeneratedMessage<LeaderboardInitData, LeaderboardInitData.Builder> {
    private LeaderboardInitData() { }
    private static readonly LeaderboardInitData defaultInstance = new LeaderboardInitData().MakeReadOnly();
    private static readonly string[] _leaderboardInitDataFieldNames = new string[] { "archivedInstanceList", "currentInstanceData", "leaderboardId" };
    private static readonly uint[] _leaderboardInitDataFieldTags = new uint[] { 26, 18, 8 };
    public static LeaderboardInitData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardInitData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardInitData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_LeaderboardInitData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardInitData, LeaderboardInitData.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_LeaderboardInitData__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int CurrentInstanceDataFieldNumber = 2;
    private bool hasCurrentInstanceData;
    private global::Gazillion.LeaderboardInstanceData currentInstanceData_;
    public bool HasCurrentInstanceData {
      get { return hasCurrentInstanceData; }
    }
    public global::Gazillion.LeaderboardInstanceData CurrentInstanceData {
      get { return currentInstanceData_ ?? global::Gazillion.LeaderboardInstanceData.DefaultInstance; }
    }
    
    public const int ArchivedInstanceListFieldNumber = 3;
    private pbc::PopsicleList<global::Gazillion.LeaderboardInstanceData> archivedInstanceList_ = new pbc::PopsicleList<global::Gazillion.LeaderboardInstanceData>();
    public scg::IList<global::Gazillion.LeaderboardInstanceData> ArchivedInstanceListList {
      get { return archivedInstanceList_; }
    }
    public int ArchivedInstanceListCount {
      get { return archivedInstanceList_.Count; }
    }
    public global::Gazillion.LeaderboardInstanceData GetArchivedInstanceList(int index) {
      return archivedInstanceList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (HasCurrentInstanceData) {
          if (!CurrentInstanceData.IsInitialized) return false;
        }
        foreach (global::Gazillion.LeaderboardInstanceData element in ArchivedInstanceListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _leaderboardInitDataFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[2], LeaderboardId);
      }
      if (hasCurrentInstanceData) {
        output.WriteMessage(2, field_names[1], CurrentInstanceData);
      }
      if (archivedInstanceList_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], archivedInstanceList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLeaderboardId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
      }
      if (hasCurrentInstanceData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, CurrentInstanceData);
      }
      foreach (global::Gazillion.LeaderboardInstanceData element in ArchivedInstanceListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LeaderboardInitData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardInitData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardInitData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardInitData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardInitData MakeReadOnly() {
      archivedInstanceList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardInitData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardInitData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardInitData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardInitData result;
      
      private LeaderboardInitData PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardInitData original = result;
          result = new LeaderboardInitData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardInitData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.LeaderboardInitData.Descriptor; }
      }
      
      public override LeaderboardInitData DefaultInstanceForType {
        get { return global::Gazillion.LeaderboardInitData.DefaultInstance; }
      }
      
      public override LeaderboardInitData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardInitData) {
          return MergeFrom((LeaderboardInitData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardInitData other) {
        if (other == global::Gazillion.LeaderboardInitData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasCurrentInstanceData) {
          MergeCurrentInstanceData(other.CurrentInstanceData);
        }
        if (other.archivedInstanceList_.Count != 0) {
          result.archivedInstanceList_.Add(other.archivedInstanceList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardInitDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardInitDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 18: {
              global::Gazillion.LeaderboardInstanceData.Builder subBuilder = global::Gazillion.LeaderboardInstanceData.CreateBuilder();
              if (result.hasCurrentInstanceData) {
                subBuilder.MergeFrom(CurrentInstanceData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentInstanceData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.archivedInstanceList_, global::Gazillion.LeaderboardInstanceData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasCurrentInstanceData {
       get { return result.hasCurrentInstanceData; }
      }
      public global::Gazillion.LeaderboardInstanceData CurrentInstanceData {
        get { return result.CurrentInstanceData; }
        set { SetCurrentInstanceData(value); }
      }
      public Builder SetCurrentInstanceData(global::Gazillion.LeaderboardInstanceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentInstanceData = true;
        result.currentInstanceData_ = value;
        return this;
      }
      public Builder SetCurrentInstanceData(global::Gazillion.LeaderboardInstanceData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentInstanceData = true;
        result.currentInstanceData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentInstanceData(global::Gazillion.LeaderboardInstanceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentInstanceData &&
            result.currentInstanceData_ != global::Gazillion.LeaderboardInstanceData.DefaultInstance) {
            result.currentInstanceData_ = global::Gazillion.LeaderboardInstanceData.CreateBuilder(result.currentInstanceData_).MergeFrom(value).BuildPartial();
        } else {
          result.currentInstanceData_ = value;
        }
        result.hasCurrentInstanceData = true;
        return this;
      }
      public Builder ClearCurrentInstanceData() {
        PrepareBuilder();
        result.hasCurrentInstanceData = false;
        result.currentInstanceData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.LeaderboardInstanceData> ArchivedInstanceListList {
        get { return PrepareBuilder().archivedInstanceList_; }
      }
      public int ArchivedInstanceListCount {
        get { return result.ArchivedInstanceListCount; }
      }
      public global::Gazillion.LeaderboardInstanceData GetArchivedInstanceList(int index) {
        return result.GetArchivedInstanceList(index);
      }
      public Builder SetArchivedInstanceList(int index, global::Gazillion.LeaderboardInstanceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.archivedInstanceList_[index] = value;
        return this;
      }
      public Builder SetArchivedInstanceList(int index, global::Gazillion.LeaderboardInstanceData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.archivedInstanceList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddArchivedInstanceList(global::Gazillion.LeaderboardInstanceData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.archivedInstanceList_.Add(value);
        return this;
      }
      public Builder AddArchivedInstanceList(global::Gazillion.LeaderboardInstanceData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.archivedInstanceList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeArchivedInstanceList(scg::IEnumerable<global::Gazillion.LeaderboardInstanceData> values) {
        PrepareBuilder();
        result.archivedInstanceList_.Add(values);
        return this;
      }
      public Builder ClearArchivedInstanceList() {
        PrepareBuilder();
        result.archivedInstanceList_.Clear();
        return this;
      }
    }
    static LeaderboardInitData() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardArchivedInstanceListResponse : pb::GeneratedMessage<NetMessageLeaderboardArchivedInstanceListResponse, NetMessageLeaderboardArchivedInstanceListResponse.Builder> {
    private NetMessageLeaderboardArchivedInstanceListResponse() { }
    private static readonly NetMessageLeaderboardArchivedInstanceListResponse defaultInstance = new NetMessageLeaderboardArchivedInstanceListResponse().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardArchivedInstanceListResponseFieldNames = new string[] { "instanceList" };
    private static readonly uint[] _netMessageLeaderboardArchivedInstanceListResponseFieldTags = new uint[] { 10 };
    public static NetMessageLeaderboardArchivedInstanceListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardArchivedInstanceListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardArchivedInstanceListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardArchivedInstanceListResponse, NetMessageLeaderboardArchivedInstanceListResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardArchivedInstanceListResponse__FieldAccessorTable; }
    }
    
    public const int InstanceListFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.LeaderboardArchivedInstanceListData> instanceList_ = new pbc::PopsicleList<global::Gazillion.LeaderboardArchivedInstanceListData>();
    public scg::IList<global::Gazillion.LeaderboardArchivedInstanceListData> InstanceListList {
      get { return instanceList_; }
    }
    public int InstanceListCount {
      get { return instanceList_.Count; }
    }
    public global::Gazillion.LeaderboardArchivedInstanceListData GetInstanceList(int index) {
      return instanceList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.LeaderboardArchivedInstanceListData element in InstanceListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardArchivedInstanceListResponseFieldNames;
      if (instanceList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], instanceList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.LeaderboardArchivedInstanceListData element in InstanceListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardArchivedInstanceListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardArchivedInstanceListResponse MakeReadOnly() {
      instanceList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardArchivedInstanceListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardArchivedInstanceListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardArchivedInstanceListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardArchivedInstanceListResponse result;
      
      private NetMessageLeaderboardArchivedInstanceListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardArchivedInstanceListResponse original = result;
          result = new NetMessageLeaderboardArchivedInstanceListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardArchivedInstanceListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse.Descriptor; }
      }
      
      public override NetMessageLeaderboardArchivedInstanceListResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardArchivedInstanceListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardArchivedInstanceListResponse) {
          return MergeFrom((NetMessageLeaderboardArchivedInstanceListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardArchivedInstanceListResponse other) {
        if (other == global::Gazillion.NetMessageLeaderboardArchivedInstanceListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.instanceList_.Count != 0) {
          result.instanceList_.Add(other.instanceList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardArchivedInstanceListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardArchivedInstanceListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.instanceList_, global::Gazillion.LeaderboardArchivedInstanceListData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.LeaderboardArchivedInstanceListData> InstanceListList {
        get { return PrepareBuilder().instanceList_; }
      }
      public int InstanceListCount {
        get { return result.InstanceListCount; }
      }
      public global::Gazillion.LeaderboardArchivedInstanceListData GetInstanceList(int index) {
        return result.GetInstanceList(index);
      }
      public Builder SetInstanceList(int index, global::Gazillion.LeaderboardArchivedInstanceListData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.instanceList_[index] = value;
        return this;
      }
      public Builder SetInstanceList(int index, global::Gazillion.LeaderboardArchivedInstanceListData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.instanceList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInstanceList(global::Gazillion.LeaderboardArchivedInstanceListData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.instanceList_.Add(value);
        return this;
      }
      public Builder AddInstanceList(global::Gazillion.LeaderboardArchivedInstanceListData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.instanceList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInstanceList(scg::IEnumerable<global::Gazillion.LeaderboardArchivedInstanceListData> values) {
        PrepareBuilder();
        result.instanceList_.Add(values);
        return this;
      }
      public Builder ClearInstanceList() {
        PrepareBuilder();
        result.instanceList_.Clear();
        return this;
      }
    }
    static NetMessageLeaderboardArchivedInstanceListResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardInitializeRequestResponse : pb::GeneratedMessage<NetMessageLeaderboardInitializeRequestResponse, NetMessageLeaderboardInitializeRequestResponse.Builder> {
    private NetMessageLeaderboardInitializeRequestResponse() { }
    private static readonly NetMessageLeaderboardInitializeRequestResponse defaultInstance = new NetMessageLeaderboardInitializeRequestResponse().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardInitializeRequestResponseFieldNames = new string[] { "leaderboardInitDataList" };
    private static readonly uint[] _netMessageLeaderboardInitializeRequestResponseFieldTags = new uint[] { 10 };
    public static NetMessageLeaderboardInitializeRequestResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardInitializeRequestResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardInitializeRequestResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardInitializeRequestResponse, NetMessageLeaderboardInitializeRequestResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardInitializeRequestResponse__FieldAccessorTable; }
    }
    
    public const int LeaderboardInitDataListFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.LeaderboardInitData> leaderboardInitDataList_ = new pbc::PopsicleList<global::Gazillion.LeaderboardInitData>();
    public scg::IList<global::Gazillion.LeaderboardInitData> LeaderboardInitDataListList {
      get { return leaderboardInitDataList_; }
    }
    public int LeaderboardInitDataListCount {
      get { return leaderboardInitDataList_.Count; }
    }
    public global::Gazillion.LeaderboardInitData GetLeaderboardInitDataList(int index) {
      return leaderboardInitDataList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.LeaderboardInitData element in LeaderboardInitDataListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardInitializeRequestResponseFieldNames;
      if (leaderboardInitDataList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], leaderboardInitDataList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.LeaderboardInitData element in LeaderboardInitDataListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardInitializeRequestResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardInitializeRequestResponse MakeReadOnly() {
      leaderboardInitDataList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardInitializeRequestResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardInitializeRequestResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardInitializeRequestResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardInitializeRequestResponse result;
      
      private NetMessageLeaderboardInitializeRequestResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardInitializeRequestResponse original = result;
          result = new NetMessageLeaderboardInitializeRequestResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardInitializeRequestResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardInitializeRequestResponse.Descriptor; }
      }
      
      public override NetMessageLeaderboardInitializeRequestResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardInitializeRequestResponse.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardInitializeRequestResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardInitializeRequestResponse) {
          return MergeFrom((NetMessageLeaderboardInitializeRequestResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardInitializeRequestResponse other) {
        if (other == global::Gazillion.NetMessageLeaderboardInitializeRequestResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.leaderboardInitDataList_.Count != 0) {
          result.leaderboardInitDataList_.Add(other.leaderboardInitDataList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardInitializeRequestResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardInitializeRequestResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.leaderboardInitDataList_, global::Gazillion.LeaderboardInitData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.LeaderboardInitData> LeaderboardInitDataListList {
        get { return PrepareBuilder().leaderboardInitDataList_; }
      }
      public int LeaderboardInitDataListCount {
        get { return result.LeaderboardInitDataListCount; }
      }
      public global::Gazillion.LeaderboardInitData GetLeaderboardInitDataList(int index) {
        return result.GetLeaderboardInitDataList(index);
      }
      public Builder SetLeaderboardInitDataList(int index, global::Gazillion.LeaderboardInitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.leaderboardInitDataList_[index] = value;
        return this;
      }
      public Builder SetLeaderboardInitDataList(int index, global::Gazillion.LeaderboardInitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.leaderboardInitDataList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLeaderboardInitDataList(global::Gazillion.LeaderboardInitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.leaderboardInitDataList_.Add(value);
        return this;
      }
      public Builder AddLeaderboardInitDataList(global::Gazillion.LeaderboardInitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.leaderboardInitDataList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLeaderboardInitDataList(scg::IEnumerable<global::Gazillion.LeaderboardInitData> values) {
        PrepareBuilder();
        result.leaderboardInitDataList_.Add(values);
        return this;
      }
      public Builder ClearLeaderboardInitDataList() {
        PrepareBuilder();
        result.leaderboardInitDataList_.Clear();
        return this;
      }
    }
    static NetMessageLeaderboardInitializeRequestResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardStateChange : pb::GeneratedMessage<NetMessageLeaderboardStateChange, NetMessageLeaderboardStateChange.Builder> {
    private NetMessageLeaderboardStateChange() { }
    private static readonly NetMessageLeaderboardStateChange defaultInstance = new NetMessageLeaderboardStateChange().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardStateChangeFieldNames = new string[] { "activationTimestamp", "expirationTimestamp", "instanceId", "leaderboardId", "newState", "visible" };
    private static readonly uint[] _netMessageLeaderboardStateChangeFieldTags = new uint[] { 32, 40, 16, 8, 24, 48 };
    public static NetMessageLeaderboardStateChange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardStateChange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardStateChange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardStateChange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardStateChange, NetMessageLeaderboardStateChange.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardStateChange__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int InstanceIdFieldNumber = 2;
    private bool hasInstanceId;
    private ulong instanceId_;
    public bool HasInstanceId {
      get { return hasInstanceId; }
    }
    public ulong InstanceId {
      get { return instanceId_; }
    }
    
    public const int NewStateFieldNumber = 3;
    private bool hasNewState;
    private global::Gazillion.LeaderboardState newState_ = global::Gazillion.LeaderboardState.eLBS_Created;
    public bool HasNewState {
      get { return hasNewState; }
    }
    public global::Gazillion.LeaderboardState NewState {
      get { return newState_; }
    }
    
    public const int ActivationTimestampFieldNumber = 4;
    private bool hasActivationTimestamp;
    private long activationTimestamp_;
    public bool HasActivationTimestamp {
      get { return hasActivationTimestamp; }
    }
    public long ActivationTimestamp {
      get { return activationTimestamp_; }
    }
    
    public const int ExpirationTimestampFieldNumber = 5;
    private bool hasExpirationTimestamp;
    private long expirationTimestamp_;
    public bool HasExpirationTimestamp {
      get { return hasExpirationTimestamp; }
    }
    public long ExpirationTimestamp {
      get { return expirationTimestamp_; }
    }
    
    public const int VisibleFieldNumber = 6;
    private bool hasVisible;
    private bool visible_;
    public bool HasVisible {
      get { return hasVisible; }
    }
    public bool Visible {
      get { return visible_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (!hasInstanceId) return false;
        if (!hasNewState) return false;
        if (!hasActivationTimestamp) return false;
        if (!hasExpirationTimestamp) return false;
        if (!hasVisible) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardStateChangeFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[3], LeaderboardId);
      }
      if (hasInstanceId) {
        output.WriteUInt64(2, field_names[2], InstanceId);
      }
      if (hasNewState) {
        output.WriteEnum(3, field_names[4], (int) NewState, NewState);
      }
      if (hasActivationTimestamp) {
        output.WriteInt64(4, field_names[0], ActivationTimestamp);
      }
      if (hasExpirationTimestamp) {
        output.WriteInt64(5, field_names[1], ExpirationTimestamp);
      }
      if (hasVisible) {
        output.WriteBool(6, field_names[5], Visible);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLeaderboardId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
      }
      if (hasInstanceId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, InstanceId);
      }
      if (hasNewState) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) NewState);
      }
      if (hasActivationTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, ActivationTimestamp);
      }
      if (hasExpirationTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, ExpirationTimestamp);
      }
      if (hasVisible) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Visible);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardStateChange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardStateChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardStateChange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardStateChange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardStateChange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardStateChange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardStateChange result;
      
      private NetMessageLeaderboardStateChange PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardStateChange original = result;
          result = new NetMessageLeaderboardStateChange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardStateChange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardStateChange.Descriptor; }
      }
      
      public override NetMessageLeaderboardStateChange DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardStateChange.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardStateChange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardStateChange) {
          return MergeFrom((NetMessageLeaderboardStateChange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardStateChange other) {
        if (other == global::Gazillion.NetMessageLeaderboardStateChange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasInstanceId) {
          InstanceId = other.InstanceId;
        }
        if (other.HasNewState) {
          NewState = other.NewState;
        }
        if (other.HasActivationTimestamp) {
          ActivationTimestamp = other.ActivationTimestamp;
        }
        if (other.HasExpirationTimestamp) {
          ExpirationTimestamp = other.ExpirationTimestamp;
        }
        if (other.HasVisible) {
          Visible = other.Visible;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardStateChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardStateChangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 16: {
              result.hasInstanceId = input.ReadUInt64(ref result.instanceId_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.newState_, out unknown)) {
                result.hasNewState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasActivationTimestamp = input.ReadInt64(ref result.activationTimestamp_);
              break;
            }
            case 40: {
              result.hasExpirationTimestamp = input.ReadInt64(ref result.expirationTimestamp_);
              break;
            }
            case 48: {
              result.hasVisible = input.ReadBool(ref result.visible_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasInstanceId {
        get { return result.hasInstanceId; }
      }
      public ulong InstanceId {
        get { return result.InstanceId; }
        set { SetInstanceId(value); }
      }
      public Builder SetInstanceId(ulong value) {
        PrepareBuilder();
        result.hasInstanceId = true;
        result.instanceId_ = value;
        return this;
      }
      public Builder ClearInstanceId() {
        PrepareBuilder();
        result.hasInstanceId = false;
        result.instanceId_ = 0UL;
        return this;
      }
      
      public bool HasNewState {
       get { return result.hasNewState; }
      }
      public global::Gazillion.LeaderboardState NewState {
        get { return result.NewState; }
        set { SetNewState(value); }
      }
      public Builder SetNewState(global::Gazillion.LeaderboardState value) {
        PrepareBuilder();
        result.hasNewState = true;
        result.newState_ = value;
        return this;
      }
      public Builder ClearNewState() {
        PrepareBuilder();
        result.hasNewState = false;
        result.newState_ = global::Gazillion.LeaderboardState.eLBS_Created;
        return this;
      }
      
      public bool HasActivationTimestamp {
        get { return result.hasActivationTimestamp; }
      }
      public long ActivationTimestamp {
        get { return result.ActivationTimestamp; }
        set { SetActivationTimestamp(value); }
      }
      public Builder SetActivationTimestamp(long value) {
        PrepareBuilder();
        result.hasActivationTimestamp = true;
        result.activationTimestamp_ = value;
        return this;
      }
      public Builder ClearActivationTimestamp() {
        PrepareBuilder();
        result.hasActivationTimestamp = false;
        result.activationTimestamp_ = 0L;
        return this;
      }
      
      public bool HasExpirationTimestamp {
        get { return result.hasExpirationTimestamp; }
      }
      public long ExpirationTimestamp {
        get { return result.ExpirationTimestamp; }
        set { SetExpirationTimestamp(value); }
      }
      public Builder SetExpirationTimestamp(long value) {
        PrepareBuilder();
        result.hasExpirationTimestamp = true;
        result.expirationTimestamp_ = value;
        return this;
      }
      public Builder ClearExpirationTimestamp() {
        PrepareBuilder();
        result.hasExpirationTimestamp = false;
        result.expirationTimestamp_ = 0L;
        return this;
      }
      
      public bool HasVisible {
        get { return result.hasVisible; }
      }
      public bool Visible {
        get { return result.Visible; }
        set { SetVisible(value); }
      }
      public Builder SetVisible(bool value) {
        PrepareBuilder();
        result.hasVisible = true;
        result.visible_ = value;
        return this;
      }
      public Builder ClearVisible() {
        PrepareBuilder();
        result.hasVisible = false;
        result.visible_ = false;
        return this;
      }
    }
    static NetMessageLeaderboardStateChange() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLeaderboardRewarded : pb::GeneratedMessage<NetMessageLeaderboardRewarded, NetMessageLeaderboardRewarded.Builder> {
    private NetMessageLeaderboardRewarded() { }
    private static readonly NetMessageLeaderboardRewarded defaultInstance = new NetMessageLeaderboardRewarded().MakeReadOnly();
    private static readonly string[] _netMessageLeaderboardRewardedFieldNames = new string[] { "leaderboardId", "leaderboardInstance", "rank", "rewardGuid" };
    private static readonly uint[] _netMessageLeaderboardRewardedFieldTags = new uint[] { 8, 16, 32, 24 };
    public static NetMessageLeaderboardRewarded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLeaderboardRewarded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLeaderboardRewarded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardRewarded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLeaderboardRewarded, NetMessageLeaderboardRewarded.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLeaderboardRewarded__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int LeaderboardInstanceFieldNumber = 2;
    private bool hasLeaderboardInstance;
    private ulong leaderboardInstance_;
    public bool HasLeaderboardInstance {
      get { return hasLeaderboardInstance; }
    }
    public ulong LeaderboardInstance {
      get { return leaderboardInstance_; }
    }
    
    public const int RewardGuidFieldNumber = 3;
    private bool hasRewardGuid;
    private ulong rewardGuid_;
    public bool HasRewardGuid {
      get { return hasRewardGuid; }
    }
    public ulong RewardGuid {
      get { return rewardGuid_; }
    }
    
    public const int RankFieldNumber = 4;
    private bool hasRank;
    private ulong rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public ulong Rank {
      get { return rank_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (!hasLeaderboardInstance) return false;
        if (!hasRewardGuid) return false;
        if (!hasRank) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLeaderboardRewardedFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[0], LeaderboardId);
      }
      if (hasLeaderboardInstance) {
        output.WriteUInt64(2, field_names[1], LeaderboardInstance);
      }
      if (hasRewardGuid) {
        output.WriteUInt64(3, field_names[3], RewardGuid);
      }
      if (hasRank) {
        output.WriteUInt64(4, field_names[2], Rank);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLeaderboardId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
      }
      if (hasLeaderboardInstance) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, LeaderboardInstance);
      }
      if (hasRewardGuid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, RewardGuid);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Rank);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLeaderboardRewarded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLeaderboardRewarded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLeaderboardRewarded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLeaderboardRewarded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLeaderboardRewarded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLeaderboardRewarded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLeaderboardRewarded result;
      
      private NetMessageLeaderboardRewarded PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLeaderboardRewarded original = result;
          result = new NetMessageLeaderboardRewarded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLeaderboardRewarded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLeaderboardRewarded.Descriptor; }
      }
      
      public override NetMessageLeaderboardRewarded DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLeaderboardRewarded.DefaultInstance; }
      }
      
      public override NetMessageLeaderboardRewarded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLeaderboardRewarded) {
          return MergeFrom((NetMessageLeaderboardRewarded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLeaderboardRewarded other) {
        if (other == global::Gazillion.NetMessageLeaderboardRewarded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasLeaderboardInstance) {
          LeaderboardInstance = other.LeaderboardInstance;
        }
        if (other.HasRewardGuid) {
          RewardGuid = other.RewardGuid;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLeaderboardRewardedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLeaderboardRewardedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 16: {
              result.hasLeaderboardInstance = input.ReadUInt64(ref result.leaderboardInstance_);
              break;
            }
            case 24: {
              result.hasRewardGuid = input.ReadUInt64(ref result.rewardGuid_);
              break;
            }
            case 32: {
              result.hasRank = input.ReadUInt64(ref result.rank_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasLeaderboardInstance {
        get { return result.hasLeaderboardInstance; }
      }
      public ulong LeaderboardInstance {
        get { return result.LeaderboardInstance; }
        set { SetLeaderboardInstance(value); }
      }
      public Builder SetLeaderboardInstance(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardInstance = true;
        result.leaderboardInstance_ = value;
        return this;
      }
      public Builder ClearLeaderboardInstance() {
        PrepareBuilder();
        result.hasLeaderboardInstance = false;
        result.leaderboardInstance_ = 0UL;
        return this;
      }
      
      public bool HasRewardGuid {
        get { return result.hasRewardGuid; }
      }
      public ulong RewardGuid {
        get { return result.RewardGuid; }
        set { SetRewardGuid(value); }
      }
      public Builder SetRewardGuid(ulong value) {
        PrepareBuilder();
        result.hasRewardGuid = true;
        result.rewardGuid_ = value;
        return this;
      }
      public Builder ClearRewardGuid() {
        PrepareBuilder();
        result.hasRewardGuid = false;
        result.rewardGuid_ = 0UL;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public ulong Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(ulong value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0UL;
        return this;
      }
    }
    static NetMessageLeaderboardRewarded() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGiftHistoryResult : pb::GeneratedMessage<NetMessageGiftHistoryResult, NetMessageGiftHistoryResult.Builder> {
    private NetMessageGiftHistoryResult() { }
    private static readonly NetMessageGiftHistoryResult defaultInstance = new NetMessageGiftHistoryResult().MakeReadOnly();
    private static readonly string[] _netMessageGiftHistoryResultFieldNames = new string[] { "received", "sent" };
    private static readonly uint[] _netMessageGiftHistoryResultFieldTags = new uint[] { 18, 10 };
    public static NetMessageGiftHistoryResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGiftHistoryResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGiftHistoryResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGiftHistoryResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGiftHistoryResult, NetMessageGiftHistoryResult.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGiftHistoryResult__FieldAccessorTable; }
    }
    
    public const int SentFieldNumber = 1;
    private pbc::PopsicleList<global::Gazillion.GiftHistoryForPlayerEntry> sent_ = new pbc::PopsicleList<global::Gazillion.GiftHistoryForPlayerEntry>();
    public scg::IList<global::Gazillion.GiftHistoryForPlayerEntry> SentList {
      get { return sent_; }
    }
    public int SentCount {
      get { return sent_.Count; }
    }
    public global::Gazillion.GiftHistoryForPlayerEntry GetSent(int index) {
      return sent_[index];
    }
    
    public const int ReceivedFieldNumber = 2;
    private pbc::PopsicleList<global::Gazillion.GiftHistoryForPlayerEntry> received_ = new pbc::PopsicleList<global::Gazillion.GiftHistoryForPlayerEntry>();
    public scg::IList<global::Gazillion.GiftHistoryForPlayerEntry> ReceivedList {
      get { return received_; }
    }
    public int ReceivedCount {
      get { return received_.Count; }
    }
    public global::Gazillion.GiftHistoryForPlayerEntry GetReceived(int index) {
      return received_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gazillion.GiftHistoryForPlayerEntry element in SentList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Gazillion.GiftHistoryForPlayerEntry element in ReceivedList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGiftHistoryResultFieldNames;
      if (sent_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], sent_);
      }
      if (received_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], received_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gazillion.GiftHistoryForPlayerEntry element in SentList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Gazillion.GiftHistoryForPlayerEntry element in ReceivedList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGiftHistoryResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGiftHistoryResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGiftHistoryResult MakeReadOnly() {
      sent_.MakeReadOnly();
      received_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGiftHistoryResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGiftHistoryResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGiftHistoryResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGiftHistoryResult result;
      
      private NetMessageGiftHistoryResult PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGiftHistoryResult original = result;
          result = new NetMessageGiftHistoryResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGiftHistoryResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGiftHistoryResult.Descriptor; }
      }
      
      public override NetMessageGiftHistoryResult DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGiftHistoryResult.DefaultInstance; }
      }
      
      public override NetMessageGiftHistoryResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGiftHistoryResult) {
          return MergeFrom((NetMessageGiftHistoryResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGiftHistoryResult other) {
        if (other == global::Gazillion.NetMessageGiftHistoryResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sent_.Count != 0) {
          result.sent_.Add(other.sent_);
        }
        if (other.received_.Count != 0) {
          result.received_.Add(other.received_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGiftHistoryResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGiftHistoryResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.sent_, global::Gazillion.GiftHistoryForPlayerEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.received_, global::Gazillion.GiftHistoryForPlayerEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gazillion.GiftHistoryForPlayerEntry> SentList {
        get { return PrepareBuilder().sent_; }
      }
      public int SentCount {
        get { return result.SentCount; }
      }
      public global::Gazillion.GiftHistoryForPlayerEntry GetSent(int index) {
        return result.GetSent(index);
      }
      public Builder SetSent(int index, global::Gazillion.GiftHistoryForPlayerEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sent_[index] = value;
        return this;
      }
      public Builder SetSent(int index, global::Gazillion.GiftHistoryForPlayerEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sent_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSent(global::Gazillion.GiftHistoryForPlayerEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sent_.Add(value);
        return this;
      }
      public Builder AddSent(global::Gazillion.GiftHistoryForPlayerEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sent_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSent(scg::IEnumerable<global::Gazillion.GiftHistoryForPlayerEntry> values) {
        PrepareBuilder();
        result.sent_.Add(values);
        return this;
      }
      public Builder ClearSent() {
        PrepareBuilder();
        result.sent_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Gazillion.GiftHistoryForPlayerEntry> ReceivedList {
        get { return PrepareBuilder().received_; }
      }
      public int ReceivedCount {
        get { return result.ReceivedCount; }
      }
      public global::Gazillion.GiftHistoryForPlayerEntry GetReceived(int index) {
        return result.GetReceived(index);
      }
      public Builder SetReceived(int index, global::Gazillion.GiftHistoryForPlayerEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.received_[index] = value;
        return this;
      }
      public Builder SetReceived(int index, global::Gazillion.GiftHistoryForPlayerEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.received_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReceived(global::Gazillion.GiftHistoryForPlayerEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.received_.Add(value);
        return this;
      }
      public Builder AddReceived(global::Gazillion.GiftHistoryForPlayerEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.received_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReceived(scg::IEnumerable<global::Gazillion.GiftHistoryForPlayerEntry> values) {
        PrepareBuilder();
        result.received_.Add(values);
        return this;
      }
      public Builder ClearReceived() {
        PrepareBuilder();
        result.received_.Clear();
        return this;
      }
    }
    static NetMessageGiftHistoryResult() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageStoreTooBusy : pb::GeneratedMessage<NetMessageStoreTooBusy, NetMessageStoreTooBusy.Builder> {
    private NetMessageStoreTooBusy() { }
    private static readonly NetMessageStoreTooBusy defaultInstance = new NetMessageStoreTooBusy().MakeReadOnly();
    private static readonly string[] _netMessageStoreTooBusyFieldNames = new string[] { "skuId" };
    private static readonly uint[] _netMessageStoreTooBusyFieldTags = new uint[] { 8 };
    public static NetMessageStoreTooBusy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageStoreTooBusy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageStoreTooBusy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoreTooBusy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageStoreTooBusy, NetMessageStoreTooBusy.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageStoreTooBusy__FieldAccessorTable; }
    }
    
    public const int SkuIdFieldNumber = 1;
    private bool hasSkuId;
    private ulong skuId_;
    public bool HasSkuId {
      get { return hasSkuId; }
    }
    public ulong SkuId {
      get { return skuId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageStoreTooBusyFieldNames;
      if (hasSkuId) {
        output.WriteUInt64(1, field_names[0], SkuId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSkuId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, SkuId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageStoreTooBusy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageStoreTooBusy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageStoreTooBusy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageStoreTooBusy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageStoreTooBusy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageStoreTooBusy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageStoreTooBusy result;
      
      private NetMessageStoreTooBusy PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageStoreTooBusy original = result;
          result = new NetMessageStoreTooBusy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageStoreTooBusy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageStoreTooBusy.Descriptor; }
      }
      
      public override NetMessageStoreTooBusy DefaultInstanceForType {
        get { return global::Gazillion.NetMessageStoreTooBusy.DefaultInstance; }
      }
      
      public override NetMessageStoreTooBusy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageStoreTooBusy) {
          return MergeFrom((NetMessageStoreTooBusy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageStoreTooBusy other) {
        if (other == global::Gazillion.NetMessageStoreTooBusy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkuId) {
          SkuId = other.SkuId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageStoreTooBusyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageStoreTooBusyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkuId = input.ReadUInt64(ref result.skuId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkuId {
        get { return result.hasSkuId; }
      }
      public ulong SkuId {
        get { return result.SkuId; }
        set { SetSkuId(value); }
      }
      public Builder SetSkuId(ulong value) {
        PrepareBuilder();
        result.hasSkuId = true;
        result.skuId_ = value;
        return this;
      }
      public Builder ClearSkuId() {
        PrepareBuilder();
        result.hasSkuId = false;
        result.skuId_ = 0UL;
        return this;
      }
    }
    static NetMessageStoreTooBusy() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageSetDebuggingClient : pb::GeneratedMessage<NetMessageSetDebuggingClient, NetMessageSetDebuggingClient.Builder> {
    private NetMessageSetDebuggingClient() { }
    private static readonly NetMessageSetDebuggingClient defaultInstance = new NetMessageSetDebuggingClient().MakeReadOnly();
    private static readonly string[] _netMessageSetDebuggingClientFieldNames = new string[] { "debugging" };
    private static readonly uint[] _netMessageSetDebuggingClientFieldTags = new uint[] { 8 };
    public static NetMessageSetDebuggingClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageSetDebuggingClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageSetDebuggingClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDebuggingClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageSetDebuggingClient, NetMessageSetDebuggingClient.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageSetDebuggingClient__FieldAccessorTable; }
    }
    
    public const int DebuggingFieldNumber = 1;
    private bool hasDebugging;
    private bool debugging_;
    public bool HasDebugging {
      get { return hasDebugging; }
    }
    public bool Debugging {
      get { return debugging_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDebugging) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageSetDebuggingClientFieldNames;
      if (hasDebugging) {
        output.WriteBool(1, field_names[0], Debugging);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDebugging) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Debugging);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageSetDebuggingClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageSetDebuggingClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageSetDebuggingClient MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageSetDebuggingClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageSetDebuggingClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageSetDebuggingClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageSetDebuggingClient result;
      
      private NetMessageSetDebuggingClient PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageSetDebuggingClient original = result;
          result = new NetMessageSetDebuggingClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageSetDebuggingClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageSetDebuggingClient.Descriptor; }
      }
      
      public override NetMessageSetDebuggingClient DefaultInstanceForType {
        get { return global::Gazillion.NetMessageSetDebuggingClient.DefaultInstance; }
      }
      
      public override NetMessageSetDebuggingClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageSetDebuggingClient) {
          return MergeFrom((NetMessageSetDebuggingClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageSetDebuggingClient other) {
        if (other == global::Gazillion.NetMessageSetDebuggingClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDebugging) {
          Debugging = other.Debugging;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageSetDebuggingClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageSetDebuggingClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDebugging = input.ReadBool(ref result.debugging_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDebugging {
        get { return result.hasDebugging; }
      }
      public bool Debugging {
        get { return result.Debugging; }
        set { SetDebugging(value); }
      }
      public Builder SetDebugging(bool value) {
        PrepareBuilder();
        result.hasDebugging = true;
        result.debugging_ = value;
        return this;
      }
      public Builder ClearDebugging() {
        PrepareBuilder();
        result.hasDebugging = false;
        result.debugging_ = false;
        return this;
      }
    }
    static NetMessageSetDebuggingClient() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocalCoopStart : pb::GeneratedMessage<NetMessageLocalCoopStart, NetMessageLocalCoopStart.Builder> {
    private NetMessageLocalCoopStart() { }
    private static readonly NetMessageLocalCoopStart defaultInstance = new NetMessageLocalCoopStart().MakeReadOnly();
    private static readonly string[] _netMessageLocalCoopStartFieldNames = new string[] {  };
    private static readonly uint[] _netMessageLocalCoopStartFieldTags = new uint[] {  };
    public static NetMessageLocalCoopStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocalCoopStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocalCoopStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalCoopStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocalCoopStart, NetMessageLocalCoopStart.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalCoopStart__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocalCoopStartFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocalCoopStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalCoopStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocalCoopStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocalCoopStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocalCoopStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocalCoopStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocalCoopStart result;
      
      private NetMessageLocalCoopStart PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocalCoopStart original = result;
          result = new NetMessageLocalCoopStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocalCoopStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocalCoopStart.Descriptor; }
      }
      
      public override NetMessageLocalCoopStart DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocalCoopStart.DefaultInstance; }
      }
      
      public override NetMessageLocalCoopStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocalCoopStart) {
          return MergeFrom((NetMessageLocalCoopStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocalCoopStart other) {
        if (other == global::Gazillion.NetMessageLocalCoopStart.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocalCoopStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocalCoopStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageLocalCoopStart() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageLocalCoopEnd : pb::GeneratedMessage<NetMessageLocalCoopEnd, NetMessageLocalCoopEnd.Builder> {
    private NetMessageLocalCoopEnd() { }
    private static readonly NetMessageLocalCoopEnd defaultInstance = new NetMessageLocalCoopEnd().MakeReadOnly();
    private static readonly string[] _netMessageLocalCoopEndFieldNames = new string[] {  };
    private static readonly uint[] _netMessageLocalCoopEndFieldTags = new uint[] {  };
    public static NetMessageLocalCoopEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageLocalCoopEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageLocalCoopEnd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalCoopEnd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageLocalCoopEnd, NetMessageLocalCoopEnd.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageLocalCoopEnd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageLocalCoopEndFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageLocalCoopEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageLocalCoopEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageLocalCoopEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageLocalCoopEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageLocalCoopEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageLocalCoopEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageLocalCoopEnd result;
      
      private NetMessageLocalCoopEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageLocalCoopEnd original = result;
          result = new NetMessageLocalCoopEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageLocalCoopEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageLocalCoopEnd.Descriptor; }
      }
      
      public override NetMessageLocalCoopEnd DefaultInstanceForType {
        get { return global::Gazillion.NetMessageLocalCoopEnd.DefaultInstance; }
      }
      
      public override NetMessageLocalCoopEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageLocalCoopEnd) {
          return MergeFrom((NetMessageLocalCoopEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageLocalCoopEnd other) {
        if (other == global::Gazillion.NetMessageLocalCoopEnd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageLocalCoopEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageLocalCoopEndFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageLocalCoopEnd() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageAwardUpdate : pb::GeneratedMessage<NetMessageAwardUpdate, NetMessageAwardUpdate.Builder> {
    private NetMessageAwardUpdate() { }
    private static readonly NetMessageAwardUpdate defaultInstance = new NetMessageAwardUpdate().MakeReadOnly();
    private static readonly string[] _netMessageAwardUpdateFieldNames = new string[] { "awardType", "couponData", "itemData" };
    private static readonly uint[] _netMessageAwardUpdateFieldTags = new uint[] { 10, 18, 26 };
    public static NetMessageAwardUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageAwardUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageAwardUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAwardUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageAwardUpdate, NetMessageAwardUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageAwardUpdate__FieldAccessorTable; }
    }
    
    public const int AwardTypeFieldNumber = 1;
    private bool hasAwardType;
    private string awardType_ = "";
    public bool HasAwardType {
      get { return hasAwardType; }
    }
    public string AwardType {
      get { return awardType_; }
    }
    
    public const int CouponDataFieldNumber = 2;
    private bool hasCouponData;
    private global::Gazillion.AwardCouponEntry couponData_;
    public bool HasCouponData {
      get { return hasCouponData; }
    }
    public global::Gazillion.AwardCouponEntry CouponData {
      get { return couponData_ ?? global::Gazillion.AwardCouponEntry.DefaultInstance; }
    }
    
    public const int ItemDataFieldNumber = 3;
    private bool hasItemData;
    private global::Gazillion.AwardItemEntry itemData_;
    public bool HasItemData {
      get { return hasItemData; }
    }
    public global::Gazillion.AwardItemEntry ItemData {
      get { return itemData_ ?? global::Gazillion.AwardItemEntry.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAwardType) return false;
        if (HasCouponData) {
          if (!CouponData.IsInitialized) return false;
        }
        if (HasItemData) {
          if (!ItemData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageAwardUpdateFieldNames;
      if (hasAwardType) {
        output.WriteString(1, field_names[0], AwardType);
      }
      if (hasCouponData) {
        output.WriteMessage(2, field_names[1], CouponData);
      }
      if (hasItemData) {
        output.WriteMessage(3, field_names[2], ItemData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAwardType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, AwardType);
      }
      if (hasCouponData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, CouponData);
      }
      if (hasItemData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ItemData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageAwardUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageAwardUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageAwardUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageAwardUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageAwardUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageAwardUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageAwardUpdate result;
      
      private NetMessageAwardUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageAwardUpdate original = result;
          result = new NetMessageAwardUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageAwardUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageAwardUpdate.Descriptor; }
      }
      
      public override NetMessageAwardUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageAwardUpdate.DefaultInstance; }
      }
      
      public override NetMessageAwardUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageAwardUpdate) {
          return MergeFrom((NetMessageAwardUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageAwardUpdate other) {
        if (other == global::Gazillion.NetMessageAwardUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAwardType) {
          AwardType = other.AwardType;
        }
        if (other.HasCouponData) {
          MergeCouponData(other.CouponData);
        }
        if (other.HasItemData) {
          MergeItemData(other.ItemData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageAwardUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageAwardUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAwardType = input.ReadString(ref result.awardType_);
              break;
            }
            case 18: {
              global::Gazillion.AwardCouponEntry.Builder subBuilder = global::Gazillion.AwardCouponEntry.CreateBuilder();
              if (result.hasCouponData) {
                subBuilder.MergeFrom(CouponData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CouponData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Gazillion.AwardItemEntry.Builder subBuilder = global::Gazillion.AwardItemEntry.CreateBuilder();
              if (result.hasItemData) {
                subBuilder.MergeFrom(ItemData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAwardType {
        get { return result.hasAwardType; }
      }
      public string AwardType {
        get { return result.AwardType; }
        set { SetAwardType(value); }
      }
      public Builder SetAwardType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAwardType = true;
        result.awardType_ = value;
        return this;
      }
      public Builder ClearAwardType() {
        PrepareBuilder();
        result.hasAwardType = false;
        result.awardType_ = "";
        return this;
      }
      
      public bool HasCouponData {
       get { return result.hasCouponData; }
      }
      public global::Gazillion.AwardCouponEntry CouponData {
        get { return result.CouponData; }
        set { SetCouponData(value); }
      }
      public Builder SetCouponData(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCouponData = true;
        result.couponData_ = value;
        return this;
      }
      public Builder SetCouponData(global::Gazillion.AwardCouponEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCouponData = true;
        result.couponData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCouponData(global::Gazillion.AwardCouponEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCouponData &&
            result.couponData_ != global::Gazillion.AwardCouponEntry.DefaultInstance) {
            result.couponData_ = global::Gazillion.AwardCouponEntry.CreateBuilder(result.couponData_).MergeFrom(value).BuildPartial();
        } else {
          result.couponData_ = value;
        }
        result.hasCouponData = true;
        return this;
      }
      public Builder ClearCouponData() {
        PrepareBuilder();
        result.hasCouponData = false;
        result.couponData_ = null;
        return this;
      }
      
      public bool HasItemData {
       get { return result.hasItemData; }
      }
      public global::Gazillion.AwardItemEntry ItemData {
        get { return result.ItemData; }
        set { SetItemData(value); }
      }
      public Builder SetItemData(global::Gazillion.AwardItemEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemData = true;
        result.itemData_ = value;
        return this;
      }
      public Builder SetItemData(global::Gazillion.AwardItemEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemData = true;
        result.itemData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemData(global::Gazillion.AwardItemEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemData &&
            result.itemData_ != global::Gazillion.AwardItemEntry.DefaultInstance) {
            result.itemData_ = global::Gazillion.AwardItemEntry.CreateBuilder(result.itemData_).MergeFrom(value).BuildPartial();
        } else {
          result.itemData_ = value;
        }
        result.hasItemData = true;
        return this;
      }
      public Builder ClearItemData() {
        PrepareBuilder();
        result.hasItemData = false;
        result.itemData_ = null;
        return this;
      }
    }
    static NetMessageAwardUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageDisplayCouponNotifications : pb::GeneratedMessage<NetMessageDisplayCouponNotifications, NetMessageDisplayCouponNotifications.Builder> {
    private NetMessageDisplayCouponNotifications() { }
    private static readonly NetMessageDisplayCouponNotifications defaultInstance = new NetMessageDisplayCouponNotifications().MakeReadOnly();
    private static readonly string[] _netMessageDisplayCouponNotificationsFieldNames = new string[] {  };
    private static readonly uint[] _netMessageDisplayCouponNotificationsFieldTags = new uint[] {  };
    public static NetMessageDisplayCouponNotifications DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageDisplayCouponNotifications DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageDisplayCouponNotifications ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDisplayCouponNotifications__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageDisplayCouponNotifications, NetMessageDisplayCouponNotifications.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageDisplayCouponNotifications__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageDisplayCouponNotificationsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageDisplayCouponNotifications ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageDisplayCouponNotifications MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageDisplayCouponNotifications prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageDisplayCouponNotifications, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageDisplayCouponNotifications cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageDisplayCouponNotifications result;
      
      private NetMessageDisplayCouponNotifications PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageDisplayCouponNotifications original = result;
          result = new NetMessageDisplayCouponNotifications();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageDisplayCouponNotifications MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageDisplayCouponNotifications.Descriptor; }
      }
      
      public override NetMessageDisplayCouponNotifications DefaultInstanceForType {
        get { return global::Gazillion.NetMessageDisplayCouponNotifications.DefaultInstance; }
      }
      
      public override NetMessageDisplayCouponNotifications BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageDisplayCouponNotifications) {
          return MergeFrom((NetMessageDisplayCouponNotifications) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageDisplayCouponNotifications other) {
        if (other == global::Gazillion.NetMessageDisplayCouponNotifications.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageDisplayCouponNotificationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageDisplayCouponNotificationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NetMessageDisplayCouponNotifications() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessagePublicEventTeamAssigned : pb::GeneratedMessage<NetMessagePublicEventTeamAssigned, NetMessagePublicEventTeamAssigned.Builder> {
    private NetMessagePublicEventTeamAssigned() { }
    private static readonly NetMessagePublicEventTeamAssigned defaultInstance = new NetMessagePublicEventTeamAssigned().MakeReadOnly();
    private static readonly string[] _netMessagePublicEventTeamAssignedFieldNames = new string[] { "publicEventProtoId", "success" };
    private static readonly uint[] _netMessagePublicEventTeamAssignedFieldTags = new uint[] { 16, 8 };
    public static NetMessagePublicEventTeamAssigned DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessagePublicEventTeamAssigned DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessagePublicEventTeamAssigned ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePublicEventTeamAssigned__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessagePublicEventTeamAssigned, NetMessagePublicEventTeamAssigned.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessagePublicEventTeamAssigned__FieldAccessorTable; }
    }
    
    public const int SuccessFieldNumber = 1;
    private bool hasSuccess;
    private bool success_;
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public bool Success {
      get { return success_; }
    }
    
    public const int PublicEventProtoIdFieldNumber = 2;
    private bool hasPublicEventProtoId;
    private ulong publicEventProtoId_;
    public bool HasPublicEventProtoId {
      get { return hasPublicEventProtoId; }
    }
    public ulong PublicEventProtoId {
      get { return publicEventProtoId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuccess) return false;
        if (!hasPublicEventProtoId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessagePublicEventTeamAssignedFieldNames;
      if (hasSuccess) {
        output.WriteBool(1, field_names[1], Success);
      }
      if (hasPublicEventProtoId) {
        output.WriteUInt64(2, field_names[0], PublicEventProtoId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuccess) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Success);
      }
      if (hasPublicEventProtoId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, PublicEventProtoId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessagePublicEventTeamAssigned ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessagePublicEventTeamAssigned MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessagePublicEventTeamAssigned prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessagePublicEventTeamAssigned, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessagePublicEventTeamAssigned cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessagePublicEventTeamAssigned result;
      
      private NetMessagePublicEventTeamAssigned PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessagePublicEventTeamAssigned original = result;
          result = new NetMessagePublicEventTeamAssigned();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessagePublicEventTeamAssigned MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessagePublicEventTeamAssigned.Descriptor; }
      }
      
      public override NetMessagePublicEventTeamAssigned DefaultInstanceForType {
        get { return global::Gazillion.NetMessagePublicEventTeamAssigned.DefaultInstance; }
      }
      
      public override NetMessagePublicEventTeamAssigned BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessagePublicEventTeamAssigned) {
          return MergeFrom((NetMessagePublicEventTeamAssigned) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessagePublicEventTeamAssigned other) {
        if (other == global::Gazillion.NetMessagePublicEventTeamAssigned.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuccess) {
          Success = other.Success;
        }
        if (other.HasPublicEventProtoId) {
          PublicEventProtoId = other.PublicEventProtoId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessagePublicEventTeamAssignedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessagePublicEventTeamAssignedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuccess = input.ReadBool(ref result.success_);
              break;
            }
            case 16: {
              result.hasPublicEventProtoId = input.ReadUInt64(ref result.publicEventProtoId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuccess {
        get { return result.hasSuccess; }
      }
      public bool Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(bool value) {
        PrepareBuilder();
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        PrepareBuilder();
        result.hasSuccess = false;
        result.success_ = false;
        return this;
      }
      
      public bool HasPublicEventProtoId {
        get { return result.hasPublicEventProtoId; }
      }
      public ulong PublicEventProtoId {
        get { return result.PublicEventProtoId; }
        set { SetPublicEventProtoId(value); }
      }
      public Builder SetPublicEventProtoId(ulong value) {
        PrepareBuilder();
        result.hasPublicEventProtoId = true;
        result.publicEventProtoId_ = value;
        return this;
      }
      public Builder ClearPublicEventProtoId() {
        PrepareBuilder();
        result.hasPublicEventProtoId = false;
        result.publicEventProtoId_ = 0UL;
        return this;
      }
    }
    static NetMessagePublicEventTeamAssigned() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageRoutedClientMessageResponse : pb::GeneratedMessage<NetMessageRoutedClientMessageResponse, NetMessageRoutedClientMessageResponse.Builder> {
    private NetMessageRoutedClientMessageResponse() { }
    private static readonly NetMessageRoutedClientMessageResponse defaultInstance = new NetMessageRoutedClientMessageResponse().MakeReadOnly();
    private static readonly string[] _netMessageRoutedClientMessageResponseFieldNames = new string[] { "payload" };
    private static readonly uint[] _netMessageRoutedClientMessageResponseFieldTags = new uint[] { 10 };
    public static NetMessageRoutedClientMessageResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageRoutedClientMessageResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageRoutedClientMessageResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRoutedClientMessageResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageRoutedClientMessageResponse, NetMessageRoutedClientMessageResponse.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageRoutedClientMessageResponse__FieldAccessorTable; }
    }
    
    public const int PayloadFieldNumber = 1;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPayload) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageRoutedClientMessageResponseFieldNames;
      if (hasPayload) {
        output.WriteBytes(1, field_names[0], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Payload);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageRoutedClientMessageResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageRoutedClientMessageResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageRoutedClientMessageResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageRoutedClientMessageResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageRoutedClientMessageResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageRoutedClientMessageResponse result;
      
      private NetMessageRoutedClientMessageResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageRoutedClientMessageResponse original = result;
          result = new NetMessageRoutedClientMessageResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageRoutedClientMessageResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageRoutedClientMessageResponse.Descriptor; }
      }
      
      public override NetMessageRoutedClientMessageResponse DefaultInstanceForType {
        get { return global::Gazillion.NetMessageRoutedClientMessageResponse.DefaultInstance; }
      }
      
      public override NetMessageRoutedClientMessageResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageRoutedClientMessageResponse) {
          return MergeFrom((NetMessageRoutedClientMessageResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageRoutedClientMessageResponse other) {
        if (other == global::Gazillion.NetMessageRoutedClientMessageResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageRoutedClientMessageResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageRoutedClientMessageResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NetMessageRoutedClientMessageResponse() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetMessageGiftingRestrictionsUpdate : pb::GeneratedMessage<NetMessageGiftingRestrictionsUpdate, NetMessageGiftingRestrictionsUpdate.Builder> {
    private NetMessageGiftingRestrictionsUpdate() { }
    private static readonly NetMessageGiftingRestrictionsUpdate defaultInstance = new NetMessageGiftingRestrictionsUpdate().MakeReadOnly();
    private static readonly string[] _netMessageGiftingRestrictionsUpdateFieldNames = new string[] { "accountCreationTimestampUtc", "emailVerified" };
    private static readonly uint[] _netMessageGiftingRestrictionsUpdateFieldTags = new uint[] { 16, 8 };
    public static NetMessageGiftingRestrictionsUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NetMessageGiftingRestrictionsUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NetMessageGiftingRestrictionsUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NetMessageGiftingRestrictionsUpdate, NetMessageGiftingRestrictionsUpdate.Builder> InternalFieldAccessors {
      get { return global::Gazillion.GameServerToClient.internal__static_Gazillion_NetMessageGiftingRestrictionsUpdate__FieldAccessorTable; }
    }
    
    public const int EmailVerifiedFieldNumber = 1;
    private bool hasEmailVerified;
    private bool emailVerified_;
    public bool HasEmailVerified {
      get { return hasEmailVerified; }
    }
    public bool EmailVerified {
      get { return emailVerified_; }
    }
    
    public const int AccountCreationTimestampUtcFieldNumber = 2;
    private bool hasAccountCreationTimestampUtc;
    private long accountCreationTimestampUtc_;
    public bool HasAccountCreationTimestampUtc {
      get { return hasAccountCreationTimestampUtc; }
    }
    public long AccountCreationTimestampUtc {
      get { return accountCreationTimestampUtc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEmailVerified) return false;
        if (!hasAccountCreationTimestampUtc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _netMessageGiftingRestrictionsUpdateFieldNames;
      if (hasEmailVerified) {
        output.WriteBool(1, field_names[1], EmailVerified);
      }
      if (hasAccountCreationTimestampUtc) {
        output.WriteInt64(2, field_names[0], AccountCreationTimestampUtc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEmailVerified) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, EmailVerified);
      }
      if (hasAccountCreationTimestampUtc) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, AccountCreationTimestampUtc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NetMessageGiftingRestrictionsUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NetMessageGiftingRestrictionsUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NetMessageGiftingRestrictionsUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NetMessageGiftingRestrictionsUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NetMessageGiftingRestrictionsUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NetMessageGiftingRestrictionsUpdate result;
      
      private NetMessageGiftingRestrictionsUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NetMessageGiftingRestrictionsUpdate original = result;
          result = new NetMessageGiftingRestrictionsUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NetMessageGiftingRestrictionsUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gazillion.NetMessageGiftingRestrictionsUpdate.Descriptor; }
      }
      
      public override NetMessageGiftingRestrictionsUpdate DefaultInstanceForType {
        get { return global::Gazillion.NetMessageGiftingRestrictionsUpdate.DefaultInstance; }
      }
      
      public override NetMessageGiftingRestrictionsUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NetMessageGiftingRestrictionsUpdate) {
          return MergeFrom((NetMessageGiftingRestrictionsUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NetMessageGiftingRestrictionsUpdate other) {
        if (other == global::Gazillion.NetMessageGiftingRestrictionsUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEmailVerified) {
          EmailVerified = other.EmailVerified;
        }
        if (other.HasAccountCreationTimestampUtc) {
          AccountCreationTimestampUtc = other.AccountCreationTimestampUtc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_netMessageGiftingRestrictionsUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _netMessageGiftingRestrictionsUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEmailVerified = input.ReadBool(ref result.emailVerified_);
              break;
            }
            case 16: {
              result.hasAccountCreationTimestampUtc = input.ReadInt64(ref result.accountCreationTimestampUtc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEmailVerified {
        get { return result.hasEmailVerified; }
      }
      public bool EmailVerified {
        get { return result.EmailVerified; }
        set { SetEmailVerified(value); }
      }
      public Builder SetEmailVerified(bool value) {
        PrepareBuilder();
        result.hasEmailVerified = true;
        result.emailVerified_ = value;
        return this;
      }
      public Builder ClearEmailVerified() {
        PrepareBuilder();
        result.hasEmailVerified = false;
        result.emailVerified_ = false;
        return this;
      }
      
      public bool HasAccountCreationTimestampUtc {
        get { return result.hasAccountCreationTimestampUtc; }
      }
      public long AccountCreationTimestampUtc {
        get { return result.AccountCreationTimestampUtc; }
        set { SetAccountCreationTimestampUtc(value); }
      }
      public Builder SetAccountCreationTimestampUtc(long value) {
        PrepareBuilder();
        result.hasAccountCreationTimestampUtc = true;
        result.accountCreationTimestampUtc_ = value;
        return this;
      }
      public Builder ClearAccountCreationTimestampUtc() {
        PrepareBuilder();
        result.hasAccountCreationTimestampUtc = false;
        result.accountCreationTimestampUtc_ = 0L;
        return this;
      }
    }
    static NetMessageGiftingRestrictionsUpdate() {
      object.ReferenceEquals(global::Gazillion.GameServerToClient.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
